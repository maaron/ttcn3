/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2012, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3v10.1.0
// $Date: 2012-09-04 14:12:45 +0200 (Tue, 04 Sep 2012) $
// $Rev: 7294 $
/******************************************************************************/

module GERAN_Templates {

  import from CommonDefs all;
  import from GERAN_Parameters all;
  import from GERAN_TypeDefs all;
  import from NAS_24008Templates all;
  import from NAS_24008TypeDefs all;
  import from NAS_CommonTemplates all;
  import from NAS_CommonTypeDefs all;
  import from Parameters all;

  const B4_Type               tsc_SkipIndicator := '0000'B;                     /* Skip Indicator field consists of latter half byte after Protocol discriminator field. Its value is '0000'B in all the messages.
                                                                                   @status    APPROVED */

  const ProtocolDiscriminator tsc_PD_RR := '0110'B;                             /* @status    APPROVED */

  const MessageType           tsc_MT_ImmediateAssignment := '00111111'B;        /* @status    APPROVED */

  const MessageType           tsc_MT_CipheringModeCommand := '00110101'B;       /* @status    APPROVED */

  const MessageType           tsc_MT_CipheringModeComplete := '00110010'B;      /* @status    APPROVED */

  const B3_Type               tsc_DefUSF := '000'B;                  /* @status    APPROVED */

  const integer               tsc_CS1 := 1;                          /* @status    APPROVED */

  const B1_Type               tsc_LLC_PM := '1'B;                    /* @status    APPROVED */

  const B1_Type               tsc_LLC_NoCiph := '0'B;                /* @status    APPROVED */

  const integer               tsc_LLCSapi_GMM := 1;                  /* @status    APPROVED */

  const integer               tsc_LLCSapi_11 := 11;                  /* @status    APPROVED */

  const integer               tsc_SAPI_0 := 0;                       /* @status    APPROVED */

  const integer               tsc_NormalPaging := 0;                 /* @status    APPROVED */

  const B5_Type               tsc_DownlinkTFI := '00001'B;           /* @status    APPROVED */

  const B5_Type               tsc_UplinkTFI := '00000'B;             /* @status    APPROVED */

  const PhysicalChId          tsc_PhyCh0 := 0;                       /* @status    APPROVED */

  const PhysicalChId          tsc_PhyCh1 := 1;                       /* @status    APPROVED */

  const PhysicalChId          tsc_TchCh := 2;                        /* @status    APPROVED */

  const B1_Type               tsc_RR_HopOff := '0'B;                 /* hopping off; @status    APPROVED */

  const B8_Type               tsc_SignallingOnly := '00000000'B;     /* @status    APPROVED */

  const O4_Type               tsc_TLLI_Initial := 'FFFFFFFF'O;       /* @status    APPROVED */

  const TN                    tsc_TN0 := '000'B;                     /* @status    APPROVED */

  const TN                    tsc_TN1 := '011'B;                     /* @status    APPROVED */

  const integer               tsc_Power_ueVOffset := 113;            /* @status    APPROVED */

  const integer               tsc_GERAN_ChPwrLvl_Off := -123;        /* @status    APPROVED */

  const integer               tsc_GERAN_ServingCell := -48;          /* @status    APPROVED */

  const integer               tsc_GERAN_SuitableNeighbourCell := -54;/* @status    APPROVED */

  const integer               tsc_GERAN_NonSuitableCell := -90;      /* @status    APPROVED */

  const G_LogicChType         tsc_BCCH := 0;                         /* @status    APPROVED */

  const G_LogicChType         tsc_RACH := 1;                         /* @status    APPROVED */

  const G_LogicChType         tsc_PCH :=  2;                         /* @status    APPROVED */

  const G_LogicChType         tsc_AGCH := 3;                         /* @status    APPROVED */

  const G_LogicChType         tsc_SDCCH_4 := 4;                      /* @status    APPROVED */

  const G_LogicChType         tsc_SACCH_C4 := 5;                     /* @status    APPROVED */

  const G_LogicChType         tsc_SDCCH_8 := 6;                      /* @status    APPROVED */

  const G_LogicChType         tsc_SACCH_C8 := 7;                     /* @status    APPROVED */

  const G_LogicChType         tsc_TCH_F := 8;                        /* @status    APPROVED */

  const G_LogicChType         tsc_FACCH_F := 9;                      /* @status    APPROVED */

  const G_LogicChType         tsc_SACCH_TF := 10;                    /* @status    APPROVED */

  const G_LogicChType         tsc_PACCH_F := 19;                     /* @status    APPROVED */

  template (value) CCCH_Info cs_CCCH_Info(bitstring p_BS_PA_MFRMS,
                                          bitstring p_BS_AG_BLKS_RES) :=
  { /* @status    APPROVED */
    bS_PA_MFRMS     := p_BS_PA_MFRMS,
    bS_AG_BLKS_RES  := p_BS_AG_BLKS_RES
  };

  template (value) CellOptionBCCH cs_CellOptionBCCH(template (value) B1_Type p_DN_Ind,
                                                    template (value) B2_Type p_DTX,
                                                    template (value) B4_Type p_RadioLinkTimeout) :=
  { /* @status    APPROVED */
    iei             := omit,                         // information lelement identifier
    dN_Ind          := p_DN_Ind,                     // dynamic ARFCN mapping indicator
    pwrc            := '0'B,                         // power control indicator
    dtx             := p_DTX,                        // discontinuous transmission indicator
    radioLinkTimeout := p_RadioLinkTimeout           // radio link timeout
  };

  template (value) CellOptionSACCH cs_CellOptionSACCH(B1_Type p_DTX8,
                                                      B2_Type p_DTX65,
                                                      B4_Type p_RadioLinkTimeout) :=
  { /* @status    APPROVED */
    iei             := omit,                         // information lelement identifier
    dtx8            := p_DTX8,                       // discontinuous transmission indicator, most signifigent bit
    pwrc            := '0'B,                         // power control indicator
    dtx65           := p_DTX65,                      // discontinuous transmission indicator
    radioLinkTimeout := p_RadioLinkTimeout           // radio link timeout
  };

  template (value) ChannelDescr cs_G_ChannelDescr(B5_Type  p_ChType,
                                                  B3_Type  p_TN,
                                                  B10_Type p_ARFCN,
                                                  B3_Type p_TSC) :=
  { /* Channel description
       3GPP TS 44.018 clause 10.5.2.5 */
    /* @status    APPROVED */
    iei             := omit,                         // '01100100'B
    cht_schn        := p_ChType,                     // channel type and TDMA offset
    tn              := p_TN,                       // timeslot number
    tsc             := p_TSC,                        // training sequence code
    hch             := tsc_RR_HopOff,                // hch = 1 indicating hopping channel
    maio            := omit,                         // mobile allocation index offset - hopping
    hsn             := omit,                         // hopping sequence number - hopping
    spr             := '00'B,                        // '00'B - non hopping
    arfcn           := p_ARFCN                       // absolute RF channel number - non hopping
  };

  template (value) ChMode cs_ChMode(template (omit) IEI8_Type p_IEI := '63'O, B8_Type p_Mode) :=
  { /* @status    APPROVED */
    iei             := p_IEI, // @sic R5s120498 sic@
    mode            := p_Mode
  };

  template (value) ChMode cs_G_ChModeSpeechFROrHRV1 := cs_ChMode('63'O, '00000001'B);                 /* speech full rate or half rate version 1
                                                                                                         @status    APPROVED */

  template (value) ChNeeded cs_G_ChneededAny :=
  { /* any channel */
    /* @status    APPROVED */
    iei             := omit,                         // information element identity
    ch2             := '00'B,
    ch1             := '00'B
  };

  template ChReqDescr cr_ChReqDescrAny :=
  { /* @status    APPROVED */
    pkThrouputClass := ?,
    radioPriority   := ?,
    rlcMode         := ?,                            // 0 - RLC acknowledged mode
    // 1 - RLC unacknowledged mode
    llcPduType         := ?,                            // 0 - LLC PDU is SACK or ACK
    // 1 - LLC PDU is not SACK or ACK
    rlcOctetCount   := ?
  };

  template ExtChReqDescr cr_ExtChReqDescrAny :=
  { /* @status    APPROVED */
    pFI := ?,
    radioPrior := ?,
    rlcMode := ?,
    mask1 := ?,
    llcPduType  := *,  // not present if mask1 = 0
    repeatMask   := '0'B  // always 0 as only one instance defined for PRR
  };

  template IuModeChReqDescr cr_IuModeChReqDescrAny :=
  { /* @status    APPROVED */
    rBId := ?,
    radioPrior := ?,
    mask1 := ?,
    rlcOctetCount  := *,  // not present if mask1 = 0
    repeatMask   := '0'B  // always 0 as only one instance defined for PRR
  };

  template (value) ChannelSpecificInfo cs_ChSpecificPara(template (omit) DedCH_Info p_DedChInfo ,
                                                         template (omit) CCCH_Info p_CCCH_Info ) :=
  { /* @status    APPROVED */
    dedCH_Info      := p_DedChInfo ,                 // parameters for dedicated channel. valid for combinations: 1, 2, 3, 5, 7, 8, 9, 10
    cCCH_Info       := p_CCCH_Info                   // parameters for common control channels: PCH, SCH, ... valid for combinations: 4, 5, 6
  };

  template (value) CipherModeSetting cs_CipherModeSetting(B1_Type p_StartCiph) :=
  { /* Cipher mode setting
       3GPP TS 44.018 clause 10.5.2.9 */
    /* @status    APPROVED */
    iei             := omit,
    algId           := px_GSM_CipherAlg,             // algorithm identifier
    startingCiph    := p_StartCiph                   // starting ciphering, 1 = start
  };

  template (value) CipherModeSetting cs_CipherModeSettingGSM :=
  { /* @status    APPROVED */
    iei             := '9'H,                      // '1001'B
    algId           := px_GSM_CipherAlg,             // algorithm identifier
    startingCiph    := px_GSM_CipheringOnOff         // starting ciphering
  };

  template (value) CipherResponse cs_CipherResponse :=
  { /* Cipher response
       3GPP TS 44.018 clause 10.5.2.10 */
    /* @status    APPROVED */
    iei             := omit,                         // '1010'B
    spareBits       := '000'B,                       // spare bits
    cipherResponse  := '0'B                          // cipher response bit
  };

  template (value) DedCH_Info cs_DedCh(template (value) ChMode p_ChannelMode,
                                       template (value) CipherModeSetting p_CipherMode,
                                       B64_Type p_CiphyKey,
                                       B5_Type p_PowerLevel,
                                       B7_Type p_TimingAdvance) :=
  { /* @status    APPROVED */
    chMode          := p_ChannelMode,                // channel mode see 3GPP TS 44.018 section 10.5.2.6
    cipherMode      := p_CipherMode,                 // cipher mode setting see 3GPP TS 44.018 section 10.5.2.9
    cipherKey       := p_CiphyKey,
    powerLevel      := p_PowerLevel,                 // power level value used in L1 header
    timingAdvance   := p_TimingAdvance               // timing advance value used in L1 header
  };

  template (value) DedCH_Info cs_SDCCH4_Ch(template (value) CipherModeSetting p_CipherMode,
                                           B64_Type p_CipherKey,
                                           B5_Type p_PowerLevel,
                                           B7_Type p_TimingAdvance) :=
    /* @status    APPROVED */
    cs_DedCh(cs_ChMode(omit, tsc_SignallingOnly), p_CipherMode, p_CipherKey, p_PowerLevel, p_TimingAdvance); // @sic R5s120498 sic@

  template (value) DedicatedModeOrTBF cs_G_DedicatedModeOrTBF :=
  { /* Reference : 3GPP TS 44.018 clause 10.5.2.25b */
    /* @status    APPROVED */
    iei             := omit,                         // information element identifier
    spareBit        := '0'B,                         // always = 0
    twoMsgAssig     := '0'B,                         // two message assignment
    downlink        := '0'B,                         // down link assignement
    tBForDedicated  := '0'B                          // TBF or dedicated mode
  };

  template (value) DedicatedModeOrTBF cs_G_TBFMode(B1_Type p_Downlink) :=
  { /* @status    APPROVED */
    iei             := omit,                         // information element identifier
    spareBit        := '0'B,                         // always = 0
    twoMsgAssig     := '0'B,                         // two message assignment
    downlink        := p_Downlink,                   // down link assignement
    tBForDedicated  := '1'B                          // TBF or dedicated mode
  };

  template (value) PacketTimingAdvance cs_PacketTimingAdvance(B1_Type p_TAValueMask := '1'B,
                                                              template (omit) B6_Type p_TimingAdvanceValue) := // @sic R5s120587 sic@
  { /* 3GPP TS 44.060 clause 12.12
       Values are taken from 51010 clause 40.2.3.4 */
    /* @status    APPROVED */
    taValueMask     := p_TAValueMask,
    timingAdvanceValue := p_TimingAdvanceValue,      // not present if taValueMask = 0 30 bit periods
    taIndexMask     := '0'B,
    timingAdvanceIndex := omit,                      // not present if taIndexMask = 0
    timingAdvanceSlotNumber := omit                  // not present if taIndexMask = 0
  };

  template (value) DynamicAllocation cs_DynamicAllocation :=
  { /* It defines all the necessary parameters for dynamic allocation for the TBF.
       The uSF_TNx field is not applicable when tNx = FALSE. */
    /* @status    APPROVED */
    extendedAlloc   := '0'B,                         // 0 - dynamic allocation; 1 - extended dynamic allocation
    uSFGranularity  := '0'B,                         // 0 - one block; 1 - four blocks
    physicalChId    := tsc_PhyCh1,
    tN0             := false,                        // TRUE - time slot 0 is allocated; FALSE -- not allocated
    uSF_TN0         := omit,                         // USF value for slot 0
    tN1             := false,                        // TRUE - time slot 1 is allocated; FALSE -- not allocated
    uSF_TN1         := omit,                         // USF value for slot 1
    tN2             := false,                        // TRUE - time slot 2 is allocated; FALSE -- not allocated
    uSF_TN2         := omit,                         // USF value for slot 2
    tN3             := false,                        // TRUE - time slot 3 is allocated; FALSE -- not allocated
    uSF_TN3         := omit,                         // USF value for slot 3
    tN4             := true,                         // TRUE - time slot 4 is allocated; FALSE -- not allocated
    uSF_TN4         := tsc_DefUSF,                   // USF value for slot 4
    tN5             := false,                        // TRUE - time slot 5 is allocated; FALSE -- not allocated
    uSF_TN5         := omit,                         // USF value for slot 5
    tN6             := false,                        // TRUE - time slot 6 is allocated; FALSE -- not allocated
    uSF_TN6         := omit,                         // USF value for slot 6
    tN7             := false,                        // TRUE - time slot 7 is allocated; FALSE -- not allocated
    uSF_TN7         := omit                          // USF value for slot 7
  };

  template (value) TimeSlotAllocation_UA cs_TimeSlotAllocation_UA_TN4(B3_Type p_USF) :=
  { /* @status    APPROVED */
    tN0mask         := '0'B,
    uSF_TN0         := omit,                         // not present if tN0mask=0
    tN1mask         := '0'B,
    uSF_TN1         := omit,                         // not present if tN1mask=0
    tN2mask         := '0'B,
    uSF_TN2         := omit,                         // not present if tN2mask=0
    tN3mask         := '0'B,
    uSF_TN3         := omit,                         // not present if tN3mask=0
    tN4mask         := '1'B,
    uSF_TN4         := p_USF,                        // not present if tN4mask=0
    tN5mask         := '0'B,
    uSF_TN5         := omit,                         // not present if tN5mask=0
    tN6mask         := '0'B,
    uSF_TN6         := omit,                         // not present if tN6mask=0
    tN7mask         := '0'B,
    uSF_TN7         := omit                          // not present if tN7mask=0
  };

  template (value) DynamicAllocationPacket cs_DynamicAllocationPacket :=
  { /* @status    APPROVED */
    extendedAllocMask := '0'B,                       // 0 - dynamic allocation; 1 - extended dynamic allocation
    mask            := '0'B,
    p0              := omit,                         // not present if mask=0
    pR_Mode         := omit,                         // not present if mask=0
    uSFGranularity  := '0'B,                         // 0 - one block; 1 - four blocks
    // one block
    uplinkTFImask   := '1'B,
    uplinkTFI       := '00000'B,                     // not present if uplinkTFImask=0
    spareBit        := '0'B,
    tBFStartingTimeMask := '0'B,                     // no starting time
    tBFStartingTime := omit,                         // not present if tBFStartingTimeMask=0
    timeSlotAllocMask := '0'B,                       // @sic R5s120494 sic@
    timeSlotAlloc   := cs_TimeSlotAllocation_UA_TN4(tsc_DefUSF), // not present if timeSlotAllocMask=1
    timeSlotAllocPowerControl := omit                // not present if timeSlotAllocMask=0
  };

  template (value) DYNAMIC_ARFCN_MAPPING cs_DynMap(B4_Type p_GSMBand) :=
  { /* @status    APPROVED */
    gSM_Band        := p_GSMBand,
    aRFCN_FIRST     := '0000000001'B,
    bAND_OFFSET     := '0110110110'B,
    aRFCN_RANGE     := '1011010'B
  };

  template (value) DYNAMIC_ARFCN_MAP_Descr cs_DynMapDescr (B4_Type p_GSMBand) :=
  { /* @status    APPROVED */
    mask := '1'B,
    instance := cs_DynMap(p_GSMBand)
  };

  template (value) DYNAMIC_ARFCN_MAPPING_LIST cs_DynMapList1 (B4_Type p_GSMBand) :=
  { /* @status    APPROVED */
    cs_DynMapDescr (p_GSMBand),
    {
      mask := '0'B,
      instance := omit
    }
  };

  template EGPRSBEPQualityMeas cr_EGPRSBEPLinkQualAny :=
  { /* @status    APPROVED */
    mask1 := ?,
    gMSKMeanBEP    := *,  // not present if mask1 = 0
    gMSKCVBEP    := *,  // not present if mask1 = 0
    mask2 := ?,
    pSKMeanBEP    := *,  // not present if mask2 = 0
    pSKCVBEP    := *  // not present if mask2 = 0
  };

  template EGPRSTimeslotLinkQualityMeas cr_EGPRSTNLinkQualAny :=
  { /* @status    APPROVED */
    mask1 := ?,
    tnmaskA0   := *,  // not present if mask1 = 0
    tnmaskB0   := *,  // not present if mask1 or tnmaskA0 = 0
    gMSKMeanBEPTN0   := *,  // not present if mask1 or tnmaskA0 = 0 or tnMaskB0 = 1
    pSKMeanBEPTN0    := *,  // not present if mask1 or tnmaskA0 = 0 or tnMaskB0 = 0
    tnmaskA1   := *,  // not present if mask1 = 0
    tnmaskB1   := *,  // not present if mask1 or tnmaskA1 = 0
    gMSKMeanBEPTN1   := *,  // not present if mask1 or tnmaskA1 = 0 or tnMaskB1 = 1
    pSKMeanBEPTN1    := *,  // not present if mask1 or tnmaskA1 = 0 or tnMaskB1 = 0
    tnmaskA2   := *,  // not present if mask1 = 0
    tnmaskB2   := *,  // not present if mask1 or tnmaskA2 = 0
    gMSKMeanBEPTN2   := *,  // not present if mask1 or tnmaskA2 = 0 or tnMaskB2 = 1
    pSKMeanBEPTN2    := *,  // not present if mask1 or tnmaskA2 = 0 or tnMaskB2 = 0
    tnmaskA3   := *,  // not present if mask1 = 0
    tnmaskB3   := *,  // not present if mask1 or tnmaskA3 = 0
    gMSKMeanBEPTN3   := *,  // not present if mask1 or tnmaskA3 = 0 or tnMaskB3 = 1
    pSKMeanBEPTN3    := *,  // not present if mask1 or tnmaskA3 = 0 or tnMaskB3 = 0
    tnmaskA4   := *,  // not present if mask1 = 0
    tnmaskB4   := *,  // not present if mask1 or tnmaskA4 = 0
    gMSKMeanBEPTN4   := *,  // not present if mask1 or tnmaskA4 = 0 or tnMaskB4 = 1
    pSKMeanBEPTN4    := *,  // not present if mask1 or tnmaskA4 = 0 or tnMaskB4 = 0
    tnmaskA5   := *,  // not present if mask1 = 0
    tnmaskB5   := *,  // not present if mask1 or tnmaskA5 = 0
    gMSKMeanBEPTN5   := *,  // not present if mask1 or tnmaskA5 = 0 or tnMaskB5 = 1
    pSKMeanBEPTN5    := *,  // not present if mask1 or tnmaskA5 = 0 or tnMaskB5 = 0
    tnmaskA6   := *,  // not present if mask1 = 0
    tnmaskB6   := *,  // not present if mask1 or tnmaskA6 = 0
    gMSKMeanBEPTN6   := *,  // not present if mask1 or tnmaskA6 = 0 or tnMaskB6 = 1
    pSKMeanBEPTN6    := *,  // not present if mask1 or tnmaskA6 = 0 or tnMaskB6 = 0
    tnmaskA7   := *,  // not present if mask1 = 0
    tnmaskB7   := *,  // not present if mask1 or tnmaskA7 = 0
    gMSKMeanBEPTN7   := *,  // not present if mask1 or tnmaskA7 = 0 or tnMaskB7 = 1
    pSKMeanBEPTN7    := *,  // not present if mask1 or tnmaskA7 = 0 or tnMaskB7 = 0
    mask2 := ?,
    imask0     := *,  // not present if mask2 = 0
    ilevelTN0  := *,  // not present if mask2 or imask0 = 0
    imask1     := *,  // not present if mask2 = 0
    ilevelTN1  := *,  // not present if mask2 or imask1 = 0
    imask2     := *,  // not present if mask2 = 0
    ilevelTN2  := *,  // not present if mask2 or imask2 = 0
    imask3     := *,  // not present if mask2 = 0
    ilevelTN3  := *,  // not present if mask2 or imask3 = 0
    imask4     := *,  // not present if mask2 = 0
    ilevelTN4  := *,  // not present if mask2 or imask4 = 0
    imask5     := *,  // not present if mask2 = 0
    ilevelTN5  := *,  // not present if mask2 or imask5 = 0
    imask6     := *,  // not present if mask2 = 0
    ilevelTN6  := *,  // not present if mask2 or imask6 = 0
    imask7     := *,  // not present if mask2 = 0
    ilevelTN7  := *  // not present if mask2 or imask7 = 0
  };

  template (value) UTRAN_FDD_Descr cs_G_FDD_Descr1N_1F(B14_Type p_ARFCN,
                                                       bitstring p_ScrmCode) :=
  { /* @status    APPROVED */
    bandwidthMask   := '0'B,
    bandwidthFDD    := omit,                         // not present if bandwidthMask = 0
    repeatedUTRAN_FDD_NeighbourCells1 := {
      cs_G_FDD_RptDescr1( p_ARFCN, p_ScrmCode),
      cs_G_FDD_DescrListEmpty
    }
  };

  template (value) UTRAN_FDD_Descr cs_G_FDD_Descr3N_2F(B14_Type p_ARFCN1,  // The 1st freq contains 2 cells, but the scrmCode is hardcoded
                                                       B14_Type p_ARFCN2,
                                                       bitstring p_ScrmCode) :=
  { /* @status    APPROVED */
    bandwidthMask   := '0'B,
    bandwidthFDD    := omit,                         // not present if bandwidthMask = 0
    repeatedUTRAN_FDD_NeighbourCells1 := {
      cs_G_FDD_RptDescr2( p_ARFCN1),
      cs_G_FDD_RptDescr1( p_ARFCN2, p_ScrmCode),
      cs_G_FDD_DescrListEmpty
    }
  };

  template (value) RepeatedUTRANFDDNeighCell cs_G_FDD_DescrListEmpty :=
  { /* @status    APPROVED */
    prefix := '0'B,
    iteration := omit
  };

  template (value) RepeatedUTRANFDDNeighCell cs_G_FDD_RptDescr1(B14_Type p_ARFCN,
                                                                bitstring p_ScrmCode) :=
  { /* @status    APPROVED */
    prefix := '1'B,
    iteration :=   cs_G_FDD_NeighCell1 (p_ARFCN, p_ScrmCode)
  };

  template (value) RepeatedUTRANFDDNeighCell cs_G_FDD_RptDescr2(B14_Type p_ARFCN) :=
  { /* @status    APPROVED */
    prefix := '1'B,
    iteration :=   cs_G_FDD_NeighCell2 (p_ARFCN)
  };

  template (value) RepeatedUTRAN_FDD_NeighCells cs_G_FDD_NeighCell1(B14_Type p_ARFCN,
                                                                    bitstring p_ScrmCode) :=
  { /* @status    APPROVED */
    arfcnIndexMask  := '0'B,
    fDD_ARFCN       := p_ARFCN,
    fDD_Indic0      := '0'B,
    nR_OF_FDD_CELLS := '00001'B,
    fDD_CELL_INFORMATION := p_ScrmCode               // length of this bitstring = p(nR_OF_FDD_CELLS)
  };

  template (value) RepeatedUTRAN_FDD_NeighCells cs_G_FDD_NeighCell2(B14_Type p_ARFCN) :=
  { /* @status    APPROVED */
    arfcnIndexMask  := '0'B,
    fDD_ARFCN       := p_ARFCN,
    fDD_Indic0      := '0'B,
    nR_OF_FDD_CELLS := '00010'B,
    fDD_CELL_INFORMATION := '0100101100110011100'B // have to hardcode this as can't work it out on the fly
  };

  template (value) UTRAN_TDD_Descr cs_G_TDD_Descr1N_1F(B14_Type p_ARFCN,
                                                       bitstring p_CellId) :=
  { /* @status    APPROVED */
    bandwidthMask   := '0'B,
    bandwidthTDD    := omit,                         // not present if bandwidthMask = 0
    repeatedUTRAN_TDD_NeighbourCells1 := {
      cs_G_TDD_RptDescr1( p_ARFCN, p_CellId),
      cs_G_TDD_DescrListEmpty
    }
  };

  template (value) UTRAN_TDD_Descr cs_G_TDD_Descr3N_2F(B14_Type p_ARFCN1,  // The 1st freq contains 2 cells, but the scrmCode is hardcoded
                                                       B14_Type p_ARFCN2,
                                                       bitstring p_CellId2) :=
  { /* @status    APPROVED */
    bandwidthMask   := '0'B,
    bandwidthTDD    := omit,                         // not present if bandwidthMask = 0
    repeatedUTRAN_TDD_NeighbourCells1 := {
      cs_G_TDD_RptDescr2( p_ARFCN1),
      cs_G_TDD_RptDescr1( p_ARFCN2, p_CellId2),
      cs_G_TDD_DescrListEmpty
    }
  };

  template (value) RepeatedUTRANTDDNeighCell cs_G_TDD_DescrListEmpty :=
  { /* @status    APPROVED */
    prefix := '0'B,
    iteration := omit
  };

  template (value) RepeatedUTRANTDDNeighCell cs_G_TDD_RptDescr1(B14_Type p_ARFCN,
                                                                bitstring p_CellId) :=
  { /* @status    APPROVED */
    prefix := '1'B,
    iteration :=   cs_G_TDD_NeighCell1 (p_ARFCN, p_CellId)
  };

  template (value) RepeatedUTRANTDDNeighCell cs_G_TDD_RptDescr2(B14_Type p_ARFCN) :=
  { /* @status    APPROVED */
    prefix := '1'B,
    iteration :=   cs_G_TDD_NeighCell2 (p_ARFCN)
  };

  template (value) RepeatedUTRAN_TDD_NeighCells cs_G_TDD_NeighCell1(B14_Type p_ARFCN,
                                                                    bitstring p_CellId) :=
  { /* @status    APPROVED */
    arfcnIndexMask  := '0'B,
    tDD_ARFCN       := p_ARFCN,
    tDD_Indic0      := '0'B,
    nR_OF_TDD_CELLS := '00001'B,
    tDD_CELL_INFORMATION := p_CellId               // length of this bitstring = p(nR_OF_TDD_CELLS)
  };

  template (value) RepeatedUTRAN_TDD_NeighCells cs_G_TDD_NeighCell2(B14_Type p_ARFCN) :=
  { /* @status    APPROVED */
    arfcnIndexMask  := '0'B,
    tDD_ARFCN       := p_ARFCN,
    tDD_Indic0      := '0'B,
    nR_OF_TDD_CELLS := '00010'B,
    tDD_CELL_INFORMATION := '00000000000000100'B // have to hardcode this as can't work it out on the fly
  };

  template (value) EUTRANMeasParams_SI2 cs_EUTRAN_MeasParams_SI2 (template (value) RptdEUTRANNeighCells p_RptdEUTRANNeighCells,
                                                                  B1_Type p_CCN_Active := '0'B) :=
  { /* @status    APPROVED */
    // @sic R5s110176 sic@
    // @sic R5s120016 Additional changes sic@
    eutranCCNActive := p_CCN_Active,
    eutranMeasParams := cs_EUTRAN_MeasParams,
    gprsEutranMeasMask := '0'B,
    gprsEutranMeasParams := omit,
    neighCells := p_RptdEUTRANNeighCells,
    notAllowedCells := cs_EUTRANNotAllowedCellsNone,
    pcidToTA := cs_TAMappingNone
  };

  template (value) RptdEUTRANNotAllowedCellsList cs_RptdEUTRANNotAllowedCell_None :=
  { /* @status    APPROVED */
    prefix := '0'B,
    notAllowed  := omit
  };

  template (value) RptdEUTRANNotAllowedCells cs_RptdEUTRANNotAllowedCells_1 (template (value) RptdEUTRANNotAllowedCellsList p_RptdEUTRANNotAllowedCell) :=
  { /* @status    APPROVED */
    p_RptdEUTRANNotAllowedCell,
    cs_RptdEUTRANNotAllowedCell_None
  };

  template (value) RptdEUTRANNotAllowedCells cs_EUTRANNotAllowedCellsNone :=
  { /* @status    APPROVED */
    cs_RptdEUTRANNotAllowedCell_None
  };

  template (value) RptdEUTRANNotAllowedCellsStruct cs_NotAllowedCell_1 (template (value) PCIDGroup p_PCIDGroup,
                                                                        template (value) EUTRANFreqIndex p_EUTRANFreqIndex) :=
  { /* @status    APPROVED */
    notAllowedCells := p_PCIDGroup,                   // @sic R5s120303 sic@
    index := {p_EUTRANFreqIndex, cs_EUTRANFreqIndex_None }
  };

  template (value) RptdEUTRANNotAllowedCellsList cs_RptdEUTRANNotAllowedCell_1 (template (value) RptdEUTRANNotAllowedCellsStruct p_NotAllowedCell) :=
  { /* @status    APPROVED */
    prefix := '1'B,
    notAllowed  := p_NotAllowedCell
  };

  template (value) PCIDGroup cs_PCIDGroup (B9_Type p_PCID) :=
  { /* @status    APPROVED */
    pcid := {
      {
        mask := '1'B,
        pcid := p_PCID
      },
      {
        mask := '0'B,
        pcid := omit
      }
    },
    groupMask := '0'B,
    bitmapGroup := omit,  // only present if groupMask = 1
    pcidPattern := {
      {
        prefix := '0'B,
        pcid := omit
      }
    }
  };

  template (value) EUTRANFreqIndex cs_EUTRANFreqIndex_1 (B3_Type p_Freq) :=
  { /* @status    APPROVED */
    prefix := '1'B,
    freq   := p_Freq  // only present if prefix = 1 @sic R5s110176 sic@
  };

  template (value) EUTRANFreqIndex cs_EUTRANFreqIndex_None :=
  { /* @status    APPROVED */
    prefix := '0'B,
    freq   := omit
  };

  template (value) RptdTAMapping cs_TAMappingNone :=
  { /* @status    APPROVED */
    // @sic R5s110176 sic@
    {
      prefix := '0'B,
      list := omit
    }
  };

  template (value) RptdEUTRANNeighCellsList cs_RptdEUTRAN_NeighCell (template (value) RptdEARFCN_BW p_RptdARFCNs,
                                                                     template (omit) B3_Type p_Priority,
                                                                     template (value) B5_Type p_ThreshHigh,
                                                                     template (omit) B5_Type p_ThreshLow,
                                                                     template (omit) B5_Type p_EutranQrxLevelMin) :=
  { /* @status    APPROVED */
     prefix  := '1'B,
     cell := cs_EARFCN_NeighCell (p_RptdARFCNs, p_Priority, p_ThreshHigh, p_ThreshLow, p_EutranQrxLevelMin)
  };

  template (value) RptdEUTRANNeighCellsList cs_RptdEUTRAN_NeighCellEmpty :=
  { /* @status    APPROVED */
    prefix := '0'B,
    cell   := omit
  };

  template (value) RptdEUTRANNeighCells cs_RptdEARFCNNeighCells (template (value) RptdEARFCN_BW p_RptdARFCNs) :=
  { /* @status    APPROVED */
    {
      prefix  := '1'B,
      cell := cs_EARFCN_NeighCell (p_RptdARFCNs)
    },
    cs_RptdEUTRAN_NeighCellEmpty
  };

  template (value) EUTRANNeighCell cs_EARFCN_NeighCell(template (value) RptdEARFCN_BW p_RptdARFCNs,
                                                       template (omit) B3_Type p_Priority := '100'B,
                                                       template (value) B5_Type p_ThreshHigh := '00010'B,
                                                       template (omit) B5_Type p_ThreshLow := '00010'B,
                                                       template (omit) B5_Type p_EutranQrxLevelMin := '10001'B) :=
  { /* @status    APPROVED */
    /* @sic R5s110683 Additional Changes sic@ */
    earfcnBW := p_RptdARFCNs,
    pMask    := f_ConvertBoolToBit(isvalue(p_Priority)),
    priority := p_Priority,
    threshHigh := p_ThreshHigh,
    lowMask := f_ConvertBoolToBit(isvalue(p_ThreshLow)),
    threshLow := p_ThreshLow,  // not present if lowMask = 0
    qMask := f_ConvertBoolToBit(isvalue(p_EutranQrxLevelMin)),
    eutranQrxLevelMin := p_EutranQrxLevelMin  // not present if qMask = 0
  };

  template (value) EARFCN_BW cs_EARFCN_BW(B16_Type p_ARFCN,
                                          template (omit) B3_Type p_BW) := // @sic GP-120009 sic@
  { /* @status    APPROVED */
    /* @sic R5s110683 Additional Changes sic@ */
    earfcn := p_ARFCN,
    mask := f_ConvertBoolToBit(isvalue(p_BW)),
    measBW  := p_BW
  };

  template (value) EARFCN_BWList cs_EARFCN_BWList (B16_Type p_ARFCN,
                                                   template (omit) B3_Type p_BW) :=  // @sic GP-120009 sic@
  { /* @status    APPROVED */
    /* @sic R5s110683 Additional Changes sic@ */
    prefix := '1'B,
    item   := cs_EARFCN_BW(p_ARFCN, p_BW)
  };

  template (value) EARFCN_BWList cs_EARFCN_BWEmpty :=
  { /* @status    APPROVED */
    prefix := '0'B,
    item   := omit
  };

  template (value) RptdEARFCN_BW cs_RptdEARFCNList1 (B16_Type p_ARFCN1,
                                                     template (omit) B3_Type p_BW) := // @sic GP-120009 sic@
  { /* @status    APPROVED */
    cs_EARFCN_BWList (p_ARFCN1, p_BW),
    cs_EARFCN_BWEmpty
  };

  template (value) RptdEARFCN_BW cs_RptdEARFCNList2 (B16_Type p_ARFCN1,
                                                     template (omit) B3_Type p_BW1, // @sic GP-120009 sic@
                                                     B16_Type p_ARFCN2,
                                                     template (omit) B3_Type p_BW2) := // @sic GP-120009 sic@
  { /* @status    APPROVED */
    cs_EARFCN_BWList (p_ARFCN1, p_BW1),
    cs_EARFCN_BWList (p_ARFCN2, p_BW2),
    cs_EARFCN_BWEmpty
  };

  template (value) RptdEARFCN_BW cs_RptdEARFCNList3 (B16_Type p_ARFCN1,
                                                     template (omit) B3_Type p_BW1, // @sic GP-120009 sic@
                                                     B16_Type p_ARFCN2,
                                                     template (omit) B3_Type p_BW2, // @sic GP-120009 sic@
                                                     B16_Type p_ARFCN3,
                                                     template (omit) B3_Type p_BW3) := // @sic GP-120009 sic@
  { /* @status    APPROVED */
    cs_EARFCN_BWList (p_ARFCN1, p_BW1),
    cs_EARFCN_BWList (p_ARFCN2, p_BW2),
    cs_EARFCN_BWList (p_ARFCN3, p_BW3),
    cs_EARFCN_BWEmpty
  };

  template (value) EUTRANMeasParams cs_EUTRAN_MeasParams :=
  { // @sic R5s110176 sic@
  /* @status    APPROVED */
    eutranStart := '1'B, // only instance
    eutranStop := '1'B,  // only instance
    measParamsMask  := '0'B,
    qSearchCInitial := omit, // @sic R5s100135 sic@
    eutran_REP_QUANT := omit,  // RSRP
    eutran_MULTIRAT_REPORTING := omit,
    reportOffsetMask := omit,
    fDD_ReportingMask := omit,  // not present if reportOffsetMask = 1
    fDD_REPORTING_THRESHOLD  := omit,
    fDD_MeasRptOffset   := omit, // not present if fDD_ReportingMask = 0 or reportOffsetMask =0
    fDD_Reporting2Mask := omit,  // not present if reportOffsetMask = 1
    fDD_REPORTING_THRESHOLD2 := omit,  // not present if reportOffsetMask or fddReportMask = 0 or fddReport2Mask =0
    fDD_OffsetMask := omit,  // not present if reportOffsetMask = 1 or fddReportMask = 0
    fDD_RptOffset := omit, // not present if reportOffsetMask =1 or fddReportMask = 0 or fddOffsetMask = 0
    tDD_ReportingMask  := omit,  // not present if reportOffsetMask = 1 or fddReportMask = 0
    tDD_REPORTING_THRESHOLD  := omit,
    tDD_MeasRptOffset   := omit, // not present if fDD_ReportingMask = 0 or reportOffsetMask =0
    tDD_Reporting2Mask := omit,  // not present if reportOffsetMask = 1 or tddReportMask = 0
    tDD_REPORTING_THRESHOLD2 := omit,  // not present if reportOffsetMask = 1 or tddReportMask = 0 or tddReport2Mask =0
    tDD_OffsetMask := omit,  // not present if reportOffsetMask = 1 or tddReportMask = 0
    tDD_RptOffset := omit,  // not present if reportOffsetMask =1 or tddReportMask = 0 or tddOffsetMask = 0
    reportingGranularity := omit   // not present if reportOffsetMask = 0
  };

  template (value) FreqInfo cs_FreqInfo(B10_Type p_ARFCN) :=
  { /* @status    APPROVED */
    h               := '0'B,                         // h='1'B: hopping channel; h='0'B: non-hopping channel
    spr             := '000'B,                       // '000'B
    spr1            := '00'B,                        // '00'B, if h = '0'B, otherwise OMIT
    maio            := omit,                         // mobile allocation index offset  if h = '1'B, otherwise OMIT
    hsn             := omit,                         // hopping sequence number  if h = '1'B, otherwise OMIT
    arfcn           := p_ARFCN,                      // absolute RF channel number if h = '0'B, otherwise OMIT
    hoppingFreqList := omit                          // hopping frequency list if h='1'B, otherwise OMIT.
                                                     // the definition see 3GPP TS 44.018 section 10.5.2.13
  };

  template (value) FreqParam cs_FreqParam(B3_Type p_TSC,
                                          B10_Type p_ARFCN) :=
  { /* @status    APPROVED */
    tSC := p_TSC,
    encodingMask := '00'B,
    aRFCN  := p_ARFCN,              // present if encodingMask = '00'B
    indirectEncoding  := omit,      // present if encodingMask = '01'B
    directEncoding1  := omit,       // present if encodingMask = '10'B
    directEncoding2  := omit        // present if encodingMask = '11'B
  };

  template (value) FreqParam cs_FreqParam_PDTCH(B10_Type p_ARFCN) := cs_FreqParam(px_TSC, p_ARFCN);   /* @status    APPROVED */

  template GlobalTFI cr_GlobalTFIAny :=
  { /* @status    APPROVED */
    tFIMask         := ?,
    uplinkTFI       := *,                            // not present if TFImask=1
    downlinkTFI     := *                             // not present if TFImask=0
  };

  template (value) GlobalTFI cs_GlobalTFIul :=
  { /* @status    APPROVED */
    tFIMask         := '0'B,
    uplinkTFI       := tsc_UplinkTFI,                // not present if TFImask=1
    downlinkTFI     := omit                          // not present if TFImask=0
  };

  template (value) GPRS_CellOptions cs_GPRS_CellOptionsSI13(template (value) B2_Type p_NMO,
                                                            template (value) ExtensionInfo p_ExtensionInfo := cs_GPRS_CellOptionsExtension) :=
  { /* values from TS 51.010-1 v.5.5.0 subclause 40.2.1.1.1 */
    /* @status    APPROVED */
    nMO             := p_NMO,                        // network operation  mode I
    t3168           := '011'B,                       // 2 second
    t3192           := '010'B,                       // 1.5 second
    dRX_TIMER_MAX   := '000'B,                       // non-DRX not supported, 0 second
    aCCESS_BURST_TYPE := '1'B,                       // 11 bits
    cONTROL_ACK_TYPE := '1'B,                        // RLC/MAC control block
    bS_CV_MAX       := '0111'B,                      // 7
    pAN_Mask        := '1'B,
    pAN_DEC         := '011'B,                       // 3
    pAN_INC         := '011'B,                       // 3
    pAN_MAX         := '010'B,                       // N3102=12
    optionalExtMask := '1'B,                         //
    extensionLength := '001010'B,
    extensionInfo   := p_ExtensionInfo
  };

  template (value) ExtensionInfo cs_GPRS_CellOptionsExtension(B1_Type p_DTM_Supported := '0'B) :=
  { /* @status    APPROVED */
    extensionMask   := '0'B,                         // EGPRS not supported
    eGPRS_PACKET_CHANNEL_REQUEST := omit,            // EGPRS not supported
    bEP_PERIOD      := omit,                         // EGPRS not supported
    pFC_FEATURE_MODE := '0'B,             // packet context procedure not suppoprted
    dTM_SUPPORT     := p_DTM_Supported,                         // DTM not supported
    bSS_PAGING_COORDINATION := '0'B,                 // CS paging coordination not supported
    cCN_ACTIVE      := '0'B,                         // R4 extension
    nW_EXT_UTBF     := '0'B,
    multiTBFCap     := '0'B,                         // R6 extension
    extUTBFNoData   := '0'B,
    dTMEhancCap     := '0'B,
    mbmsMask        := '0'B,
    dedModeMBMSSupprt := omit,                       // not present if mbmsMask = 0
    mNCISupport     := omit,                         // not present if mbmsMask = 0
    reducedLatencyAccess := '0'B,
    spareBit        := omit
  };

  template (value) GPRS_PowerControlParam cs_GPRS_PowerControlParam :=
  { /* @status    APPROVED */
    aLPHA           := '0101'B,         // Corrected according to 51.010, cl. 40
    t_AVG_W         := '01100'B,
    t_AVG_T         := '01100'B,
    pC_MEAS_CHAN    := '0'B,                         // BCCH
    n_AVG_I         := '0111'B
  };

  template (value) PacketDownlinkAssign cs_PktDownlinkAss_IARO(template (value) O4_Type p_TLLI,
                                                               template (value) B5_Type p_Gamma) :=
  { /* @status    APPROVED */
    tLLI            := p_TLLI,                       // TLLI
    mask            := '1'B,
    tFI_Assignment  := tsc_DownlinkTFI,              // temporary flow identifier
                                                     // not present if mask = 0
    rLC_Mode        := '0'B,                         // RLC mode
                                                     // not present if mask = 0
    alphaMask       := '1'B,                         // not present if mask = 0.
    aLPHA           := '0101'B,                      // not present if mask = 0 or alphaMask = 0
    gAMMA           := p_Gamma,                      // not present if mask = 0
    pOLLING         := '0'B,                         // not present if mask = 0
    tA_VALID        := '1'B,                         // not present if mask = 0
    taIndexMask     := '0'B,
    tIMING_ADVANCE_INDEX := omit,                    // not present if mask = 0 or taIndexMask = 0
    startingTimeMask := '0'B,                        // not present if mask =  0
    tBF_STARTING_TIME := omit,                       // not present if mask = 0 or startingTimeMask = 0
    pwrCtrlMask     := '0'B,                         // not present if mask = 0
    p0              := omit,                         // not present if mask = 0 or pwrCtrlMask = 0
    spareBit        := omit,                         // not present if mask = 0 or pwrCtrlMask = 0
    pR_MODE         := omit,                         // not present if mask = 0 or pwrCtrlMask = 0
    egprsMask       := '0'B,                         // L
    eGPRSWindowSize := omit,                         // not present if egprsMask = L
    linkQualityMeasMode := omit,                     // not present if egprsMask = L
    bepPriod2Mask   := omit,                         // not present if egprsMask = L
    BepPeriod2      := omit,                         // not present if egprsMask = L or bepPriod2Mask = 0
    r6Mask          := '0'B,                         // not present if egprsMask = L
    pfiMask         := omit,                         // not present if egprsMask = L or r6Mask = L
    pFI             := omit,                          // not present if egprsMask = L, r6Mask = L or pfiMask = 0
    r7Mask          := '0'B,
    npmMask    := omit,                // not present if r7Mask = L
    npmTransferTime := omit,        // not present if r7Mask = L
    bTTIMask      := omit,          // not present if r7Mask = L
    fanrMask      := omit,          // not present if r7Mask = L or bTTIMask = 0
    eventBasedFANR    := omit,      // not present if r7Mask = L (present for both values of bTTIMask)
    pdchPairInd       := omit,      // not present if r7Mask = L or bTTIMask = 0
    dlEGPRSLevel      := omit       // not present if r7Mask = L
  };

  template (value) IARO cs_IARO_PDA(O4_Type p_TLLI,
                                    B5_Type p_Gamma) :=
  { /* @status    APPROVED */
    constructMask   := '11'B,
    compressInterRATHO := omit,                      // present if constructMask = LL
    reservMask1     := omit,                         // present if constructMask = LH
    reservMask2     := omit,                         // present if reservMask1 = 0
    eGPRS_UplinkAssign := omit,                      // not present if reservMask2 = 1 or reservMask1 = 1 or constructMask <> LH
    multiBlocksPDA  := omit,                         // not present if reservMask2 = 0 or reservMask1 = 1 or constructMask <> LH
    lengthOfFreqParam := omit,                       // present if constructMask = HL
    freqParam_bt    := omit,                         // frequency parameters before time
                                                     // not present if lengthOfFreqParam = 0
    compressInterRATHO1_Type := omit,                // present if constructMask = HL
    mask1           := '0'B,                         // present if constructMask = HH
    mask2           := '1'B,
    packetUplinkAssign := omit,                      // not present if mask1 = 1 or mask2 = 1 or constructMask <> HH
    packetDownlinkAssign := cs_PktDownlinkAss_IARO(p_TLLI, p_Gamma), // not present if mask1 = 1 or mask2 = 0 or constructMask <> HH
    secondPacketAssign := omit,                      // present if mask1 = 1 and constructMask = HH
    r10Mask         := '0'B,                         // @sic R5s110178 Baseline Moving sic@
    implicitRejectCS := omit,    // not present if r10Mask = L @sic R5s110178 Baseline Moving sic@
    implicitRejectPS := omit    // not present if r10Mask = L @sic R5s110178 Baseline Moving sic@
  };

  template (value) IARO cs_IARO_PUA(B5_Type p_Gamma,
                                    B16_Type p_StartTime) :=
  { /* @status    APPROVED */
    constructMask   := '11'B,
    compressInterRATHO := omit,                      // present if constructMask = LL
    reservMask1     := omit,                         // present if constructMask = LH
    reservMask2     := omit,                         // present if reservMask1 = 0
    eGPRS_UplinkAssign := omit,                      // not present if reservMask2 = 1 or reservMask1 = 1 or constructMask <> LH
    multiBlocksPDA  := omit,                         // not present if reservMask2 = 0 or reservMask1 = 1 or constructMask <> LH
    lengthOfFreqParam := omit,                       // present if constructMask = HL
    freqParam_bt    := omit,                         // frequency parameters before time
                                                     // not present if lengthOfFreqParam = 0
    compressInterRATHO1_Type := omit,                     // present if constructMask = HL
    mask1           := '0'B,                         // present if constructMask = HH
    mask2           := '0'B,
    packetUplinkAssign := cs_PktUplinkAss_IARO(p_Gamma, p_StartTime), // not present if mask1 = 1 or mask2 = 1 or constructMask <> HH
    packetDownlinkAssign := omit,                    // not present if mask1 = 1 or mask2 = 0 or constructMask <> HH
    secondPacketAssign := omit,                       // present if mask1 = 1 and constructMask = HH
    r10Mask         := '0'B,                       // @sic R5s110178 Baseline Moving sic@
    implicitRejectCS := omit,    // not present if r10Mask = L @sic R5s110178 Baseline Moving sic@
    implicitRejectPS := omit    // not present if r10Mask = L @sic R5s110178 Baseline Moving sic@
  };

  template (value) IARO cds_IARO_SingleBlkPUA(B5_Type p_Gamma,
                                             B16_Type p_StartTime)
    modifies cs_IARO_PUA  :=
  { /* @status    APPROVED */
    packetUplinkAssign := cs_PktUplinkAssSingleBlk_IARO(p_Gamma, p_StartTime)
  };

  template (value) PacketUplinkAssign cs_PktUplinkAss_IARO(B5_Type p_Gamma,
                                                           B16_Type p_StartTime) :=
  { /* @status    APPROVED */
    allocMask       := '1'B,                         // 0 -> indicating single block allocation
    tFI_Assignment  := tsc_UplinkTFI,                // temporary flow identifier
                                                     // not present if allocMask = 0
    pOLLING         := '1'B,                         // not present if allocMask = 0
    spareBit        := '0'B,                         // not present if allocMask = 0
    uSF             := tsc_DefUSF,                   // not present if allocMask = 0 or fixedAllocMask = 1
    uSFGranularity  := '0'B,                         // not present if allocMask = 0 or fixedAllocMask = 1
    p0Mask          := '0'B,                         // not present if allocMask = 0 or fixedAllocMask = 1
    p0              := omit,                         // not present if allocMask = 0 or fixedAllocMask = 1 or p0Mask = 0
    pR_MODE         := omit,                         // not present if allocMask = 0 or fixedAllocMask = 1 or p0Mask = 0
    ChannelCodingCommand := '00'B,                   // not present if allocMask = 0
    tLLI_BlockChannelCodeing := '1'B,                // not present if allocMask = 0
    alphaMask       := '1'B,                         // not present if allocMask = 0
    aLPHA           := '0101'B,                      // not present if allocMask = 0 or alphaMask = 0
    gMMA            := p_Gamma,                      // not present if allocMask = 0
    taMask          := '0'B,                         // not present if allocMask = 0
    tIMING_ADVANCE_INDEX := omit,                    // not present if allocMask = 0 or taMask = 0
    startingTimeMask := '1'B,                        // not present if allocMask =  0
    tBF_STARTING_TIME := p_StartTime,                // not present if allocMask = 0 or startingTimeMask = 0
    alpha1Mask      := omit,                         // present if allocMask = 0 single block allocation
    aLPHA1          := omit,                         // not present if allocMask = 1 or alpha1Mask = 0
    gMMA1           := omit,                         // not present if allocMask = 1
    prefixBits      := omit,                         // not present if allocMask = 1 the value is 01 if present
    tBF_STARTING_TIME1 := omit,                      // not present if allocMask = 1
    p02Mask         := omit,                         // not present if allocMask = 1
    p02             := omit,                         // not present if allocMask = 1 or p02Mask = L
    spareBit2       := omit,                         // not present if allocMask = 1 or p02Mask = L
    pR_MODE2        := omit,                         // not present if allocMask = 1 or p02Mask = L
    r99Mask         := '0'B,
    extRAMask       := omit,                         // not present if r99Mask = L
    extRA           := omit,                         // not present if r99Mask = L or extRAMask = 0
    r6Mask          := omit,                         // not present if r99Mask = L
    pfiMask         := omit,                         // not present if r99Mask = L or r6Mask = L
    pFI             := omit                          // not present if r99Mask = L, r6Mask = L or pfiMask = 0
  };

  template (value) PacketUplinkAssign cs_PktUplinkAssSingleBlk_IARO(B5_Type p_Gamma,
                                                                    B16_Type p_StartTime) :=
  { /* @status    APPROVED */
    allocMask       := '0'B,                         // 0 -> indicating single block allocation
    tFI_Assignment  := omit,                // temporary flow identifier
                                                     // not present if allocMask = 0
    pOLLING         := omit,                         // not present if allocMask = 0
    spareBit        := omit,                         // not present if allocMask = 0
    uSF             := omit,                   // not present if allocMask = 0 or fixedAllocMask = 1
    uSFGranularity  := omit,                         // not present if allocMask = 0 or fixedAllocMask = 1
    p0Mask          := omit,                         // not present if allocMask = 0 or fixedAllocMask = 1
    p0              := omit,                         // not present if allocMask = 0 or fixedAllocMask = 1 or p0Mask = 0
    pR_MODE         := omit,                         // not present if allocMask = 0 or fixedAllocMask = 1 or p0Mask = 0
    ChannelCodingCommand := omit,                   // not present if allocMask = 0
    tLLI_BlockChannelCodeing := omit,                // not present if allocMask = 0
    alphaMask       := omit,                         // not present if allocMask = 0
    aLPHA           := omit,                      // not present if allocMask = 0 or alphaMask = 0
    gMMA            := omit,                      // not present if allocMask = 0
    taMask          := omit,                         // not present if allocMask = 0
    tIMING_ADVANCE_INDEX := omit,                    // not present if allocMask = 0 or taMask = 0
    startingTimeMask := omit,                        // not present if allocMask =  0
    tBF_STARTING_TIME := omit,                // not present if allocMask = 0 or startingTimeMask = 0
    alpha1Mask      := '1'B,                         // present if allocMask = 0 single block allocation
    aLPHA1          := '0101'B,                         // not present if allocMask = 1 or alpha1Mask = 0
    gMMA1           := p_Gamma,                         // not present if allocMask = 1
    prefixBits      := '01'B,                         // not present if allocMask = 1 the value is 01 if present
    tBF_STARTING_TIME1 := p_StartTime,                      // not present if allocMask = 1
    p02Mask         := omit,                         // not present if allocMask = 1
    p02             := omit,                         // not present if allocMask = 1 or p02Mask = L
    spareBit2       := omit,                         // not present if allocMask = 1 or p02Mask = L
    pR_MODE2        := omit,                         // not present if allocMask = 1 or p02Mask = L
    r99Mask         := '0'B,
    extRAMask       := omit,                         // not present if r99Mask = L
    extRA           := omit,                         // not present if r99Mask = L or extRAMask = 0
    r6Mask          := omit,                         // not present if r99Mask = L
    pfiMask         := omit,                         // not present if r99Mask = L or r6Mask = L
    pFI             := omit                          // not present if r99Mask = L, r6Mask = L or pfiMask = 0
  };

  template (value) MobileAlloc cs_G_MobileAlloc :=
  { /* Mobile allocation
       3GPP TS 44.018 clause  10.5.2.21 */
    /* @status    APPROVED */
    iei             := omit,                         // '01110010'B
    iel             := '00'O,                        // '00'O for non hopping
    mac_8n          := omit,                         // mac64 - mac57
    mac_7n          := omit,                         // mac56 - mac49
    mac_6n          := omit,                         // mac48 - mac41
    mac_5n          := omit,                         // mac40 - mac33
    mac_4n          := omit,                         // mac32 - mac25
    mac_3n          := omit,                         // mac24 - mac17
    mac_2n          := omit,                         // mac16 - mac9
    mac_1n          := omit                          // mac8 - mac1
  };

  template (value) PacketChDescr cs_PacketChDescr(B10_Type p_ARFCN) :=
  { /* @status    APPROVED */
    chType          := '00001'B,                     // channel type
    tN              := '100'B,                       // time slot
    tSC             := px_TSC,                       // training sequence code
    maskBit1        := '0'B,
    maskBit2        := '0'B,                         // not present if maskB1 = 1.
    spareBit1       := '0'B,                         // not present if maskB1 = 1 or maskB2 = 1
    aRFCN           := p_ARFCN,                      // not present if maskB1 = 1 or maskB2 = 1
    spareBit        := omit,                         // not present if maskB1 = 1 or maskB2 = 0
    mAIO            := omit,                         // not present if maskB1 = 1 or maskB2 = 0
    mA_NumberInd    := omit,
    maskBit3        := omit,
    spareBits       := omit,                         // not present if maskB1 = 1 or maskB2 = 0 or maskB3 = 1
    cHANGE_MARK_1   := omit,                         // not present if maskB1 = 1 or maskB2 = 0 or maskB3 = 0
    mIAO            := omit,                         // not present if maskB1 = 0
    hSN             := omit                          // not present if maskB1 = 0
  };

  template (value) PageModeIE cs_G_PageModeIE(integer p_PagingMode := tsc_NormalPaging) :=
  { /* Page mode
       3GPP TS 44.018 clause 10.5.2.26 */
    /* @status    APPROVED */
    iei             := omit,
    sprb            := '00'B,                        // spare bits
    pgm             := int2bit(p_PagingMode, 2)      // page mode
  };

  template (value) PowerCommand cs_PowerCommand :=
  { /* Power command
       3GPP TS 44.018 clause 10.5.2.28 */
    /* @status    APPROVED */
    iei             := omit,                         // information element identifier
    spareBits       := '00'B,                        // spare bits
    fpc             := '0'B,                         // fast measurement reporting and power control
    powerLevel      := '01010'B                      // power level (0-31)
  };

  template (value) RFN cs_RFN_0 :=
  { /* Assign some arbitrary values to the RFN. */
    /* @status    APPROVED */
    t1_             := '00000'B,                     // (FN div 1326) mod 32
    t3              := '000000'B,                    // FN mod 26
    t2              := '00000'B                      // FN mod 51
  };

  template (value) RFN cs_G_RFN_Omit :=
  { /* @status    APPROVED */
    t1_             := '11111'B,                     // (FN div 1326) mod 32
    t3              := '111111'B,                    // FN mod 51
    t2              := '11111'B                      // Results in ignoring of RFN by the lower Layer.
  };

  template (value) RR_Cause cs_G_RR_CauNormalevent :=
  { /* @status    APPROVED */
    iei             := omit,
    cause           := '00000000'B
  };

  template RR_Cause cr_G_RR_Cause :=
  { /* @status    APPROVED */
    iei             := omit,
    cause           := ?
  };

  template (value) ReqRef cs_G_ReqRef(integer p_RR_RA,
                                      template (value) RFN p_RR_RFN) :=
  { /* Request reference
       3GPP TS 44.018 clause 10.5.2.30 */
    /* @status    APPROVED */
    iei             := omit,                         // information element identifier
    radoAccessInfo  := int2bit ( p_RR_RA , 8 ),
    fn              := p_RR_RFN
  };

  template (value) SI1RO cs_SI1_RO(template (value) B1_Type p_BandInd) :=
  { /* @status    APPROVED */
    mask            := '0'B,
    nCH_Position    := omit,                         // not present if mask = L
    bandIndicator   := p_BandInd                     // L= DCS1800; H=PCS1900
  };

  template (value) SI2quaterRO_MeasParamDescr3G cs_SI2quaterMeasParams3G_Meas(B4_Type p_Qsearch_I,
                                                                              B4_Type p_Qoffset,
                                                                              B3_Type p_Qmin) :=
  { /* @status    APPROVED */
    qsearch_I       := p_Qsearch_I,
    qsearch_C_Initial := '0'B,
    fDDMask         := '1'B,
    fDD_Qoffset     := p_Qoffset,                    // not present if fDDMask = 0
    fDD_REP_QUANT   := '0'B,                         // not present if fDDMask = 0
    fDD_MULTIRAT_REPORTING := '01'B,                 // not present if fDDMask = 0
    fDD_Qmin        := p_Qmin,                       // not present if fDDMask = 0
    tDDMask         := '0'B,
    tDD_Qoffset     := omit,                         // not present if tDDMask = 0
    tDD_MULTIRAT_REPORTING := omit                   // not present if tDDMask = 0
  };

  template (value) SI2quaterRO_MeasParamDescr3G cs_SI2quaterMeasParams3G_ISHO := cs_SI2quaterMeasParams3G_Meas('0111'B, '1000'B, '000'B); /* @status    APPROVED */

  template (value) NeighCellDescr3G cs_NeighCellDescr3G_Common(template (omit) B7_Type p_IndexStart3G := omit,
                                                               template (omit) B7_Type p_AbsoluteIndexStartEMR := omit,
                                                               template (omit) UTRAN_FDD_Descr p_UTRAN_FDD_Descr := omit,
                                                               template (omit) UTRAN_TDD_Descr p_UTRAN_TDD_Descr := omit) :=
  { /* @status    APPROVED */
    indexMask       := f_ConvertBoolToBit(isvalue(p_IndexStart3G)),
    indexStart3G    := p_IndexStart3G,                         // not present if indexMask = 0
    absoluteIndexMask := f_ConvertBoolToBit(isvalue(p_AbsoluteIndexStartEMR)),
    absoluteIndexStartEMR := p_AbsoluteIndexStartEMR,          // not present if absoluteIndexMask = 0
    fDDMask         := f_ConvertBoolToBit(isvalue(p_UTRAN_FDD_Descr)),
    uTRAN_FDD_Description := p_UTRAN_FDD_Descr,                // not present if fDDMask = 0
    tDDMask         := f_ConvertBoolToBit(isvalue(p_UTRAN_TDD_Descr)),
    uTRAN_TDD_Description := p_UTRAN_TDD_Descr                 // not present if tDDMask = 0
  };

  template (value) NeighCellDescr3G cs_SI2quater_3G_1N_1FCell_FDD(B14_Type p_ARFCN1,
                                                                  bitstring p_ScrmCode) := cs_NeighCellDescr3G_Common(-, -, cs_G_FDD_Descr1N_1F(p_ARFCN1, p_ScrmCode));             /* @status    APPROVED */

  template (value) NeighCellDescr3G cs_SI2quater_3G_3N_2FCell_FDD(B14_Type p_ARFCN1,  // The 1st freq contains 2 cells, but the scrmCode is hardcoded
                                                                  B14_Type p_ARFCN2,
                                                                  bitstring p_ScrmCode2) := cs_NeighCellDescr3G_Common(-, -, cs_G_FDD_Descr3N_2F(p_ARFCN1, p_ARFCN2, p_ScrmCode2)); /* @status    APPROVED */

  template (value) NeighCellDescr3G cs_SI2quater_3G_1N_1FCell_TDD(B14_Type p_ARFCN,
                                                                  bitstring p_CellId) := cs_NeighCellDescr3G_Common(-, -, -, cs_G_TDD_Descr1N_1F(p_ARFCN, p_CellId));                /* @status    APPROVED */

  template (value) NeighCellDescr3G cs_SI2quater_3G_3N_2FCell_TDD(B14_Type p_ARFCN1,  // The 1st freq contains 2 cells, but the CellId is hardcoded
                                                                  B14_Type p_ARFCN2,
                                                                  bitstring p_CellId) := cs_NeighCellDescr3G_Common(-, -, -, cs_G_TDD_Descr3N_2F(p_ARFCN1, p_ARFCN2, p_CellId));     /* @status    APPROVED */

  template (value) SI2quaterRO cs_SI2quaterRO( B4_Type p_Index,
                                               B4_Type p_Count,
                                               B1_Type p_ChangeMark := '0'B, // @sic GP-120371 sic@
                                               B1_Type p_NeighCellMask,
                                               template (omit) NeighCellDescr3G p_NeighCellDescr3G,
                                               B1_Type p_MeasParamMask,
                                               template (omit) SI2quaterRO_MeasParamDescr3G p_MeasParamDescr3G,
                                               B1_Type p_GPRS3GMeasParamMask,
                                               template (omit) SI2quaterRO_GPRS_3G_MeasParamDescr p_GPRS3GMeasParamDescr,
                                               template (omit) EUTRANMeasParams_SI2 p_EUTRANMeasParams,
                                               B1_Type p_EUTRANMeasParamsMask := '1'B) :=  // @sic R5s120021 sic@
  { /* @status    APPROVED */
    // @sic GP-110108 sic@
    bA_IND          := '0'B,
    bA_IND_3G       := '0'B,
    mP_CHANGE_MARK  := p_ChangeMark,
    sI2quater_INDEX := p_Index,
    sI2quater_COUNT := p_Count,
    measParamMask   := '0'B,
    measParamDescription := omit,                    // not present if measParamMask = 0
    gprsRTDMask     := '0'B,
    gPRS_RealTimeDiffDescr := omit,                  // not present if gprsRTDMask = 0
    gprsBSICMask    := '0'B,
    gPRS_BSIC_Description := omit,                   // not present if gprsBSICMask = 0
    gprsRepPrioMask := '0'B,
    gPRS_REP_PRIORITY_Descr := omit,                 // not present if gprsRepPrioMask = 0
    gprsMeasParamMask := '0'B,
    gPRS_MeasParamsDescr := omit,                    // not present if gprsMeasParamMask = 0
    ncMeasParamMask := '0'B,
    nC_Measurement_Parameters := omit,               // not present if ncMeasParamMask = 0
    extnLengthMask  := '0'B,
    extensionLength := omit,
    extnMask        := omit,                         // not present if extnLengthMask = 0
    numCells        := omit,                         // not present if extnLengthMask = 0 or extnMask = 0
    cCNSupported    := omit,                         // not present if extnLengthMask = 0 or extnMask = 0
    neighCellMask   := p_NeighCellMask,
    neighCellDes3G  := p_NeighCellDescr3G,           // not present if neighCellMask = 0
    measParam3GMask := p_MeasParamMask,
    measurementParams3G := p_MeasParamDescr3G,       // not present if measParam3GMask = 0
    gprsMeasParam3GMask := p_GPRS3GMeasParamMask,
    gPRS_3G_MeasParamDescr := p_GPRS3GMeasParamDescr, // not present if gprsMeasParam3GMask = 0
    rel5Mask        := '1'B,
    addMeasMask     := '0'B,                         // not present if mask = L or rel5Mask = L
    addMeasParam3G  := omit,                         // not present if mask = L, rel5Mask = L or addMeasMask = 0
    addMeasMask2    := '0'B,                         // not present if mask = L or rel5Mask = L
    fddRepThres2Mask := omit,                        // not present if mask = L, rel5Mask = L or addMeasMask2 = 0
    fddRepThreshold2 := omit,                        // not present if mask = L, rel5Mask = L, addMeasMask2 = 0 or fddRepThres2Mask = 0
    rel6Mask        := '1'B,                         // not present if rel5Mask = L
    cCNActive       := '0'B,                          // not present if rel5Mask = L or rel6Mask = 0
    rel7Mask   := '1'B,
    report700810  := cs_Rel7_ReportingDef700810,
    rel8Mask   := '1'B,
    priorEutranMask := '1'B,         // not present if rel8Mask = L
    scPriorMask    := '1'B,          // not present if rel8Mask = L
    geranPrior     := '010'B,          // not present if rel8Mask = L or scPriorMask = 0
    threshPriorSearch := '1111'B,       // not present if rel8Mask = L or scPriorMask = 0
    threshGSMLow  := '0000'B,       // not present if rel8Mask = L or scPriorMask = 0
    hPrior          := '00'B,         // not present if rel8Mask = L or scPriorMask = 0
    tReselection    := '00'B,          // not present if rel8Mask = L or scPriorMask = 0
    prior3GMask     := '0'B,          // not present if rel8Mask = L
    utranStart     := omit,          // not present if rel8Mask = L or prior3GMask = 0
    utranStop      := omit,          // not present if rel8Mask = L or prior3GMask = 0
    prior3GParams  := omit,          // not present if rel8Mask = L or prior3GMask = 0
    eutranMeasMask  := p_EUTRANMeasParamsMask,         // not present if rel8Mask = L
    eutranMeasParams := p_EUTRANMeasParams,        // not present if rel8Mask = L or eutranMeasMask = 0
    csg_3GMask      := '0'B,         // not present if rel8Mask = L
    csg_3GDescr     := omit,        // not present if rel8Mask = L or csg_3GMask = 0
    eutran_CsgMask  := '0'B,         // not present if rel8Mask = L
    eutran_CsgDescr  := omit,         // not present if rel8Mask = L or eutran_CsgMask = 0
    rel9Mask         := '0'B,        //   @sic R5s110176 sic@
    enhancedMask     := omit,        // not present if rel9Mask = L @sic R5s110176 sic@
    enh_CellReselect := omit,        // not present if rel9Mask = L and enhancedMask = 0 @sic R5s110176 sic@
    csgCellRptMask   := omit,        // not present if rel9Mask = L @sic R5s110176 sic@
    csgCellRpt       := omit,         // not present if rel9Mask = L and csgCellRptMask = 0 @sic R5s110176 sic@
    rel10Mask        := omit,              // not present if rel9Mask = L @sic R5s110178 Baseline Moving sic@
    pwrMask          := omit,              // not present if rel9Mask = L or rel10Mask = L @sic R5s110178 Baseline Moving sic@
    initPwrRed       := omit,           // not present if rel9Mask = L or rel10Mask = L or pwrMask = 0 @sic R5s110178 Baseline Moving sic@
    nc2CSG_PCCN_Permitted := omit  // not present if rel9Mask = L or rel10Mask = L @sic R5s110178 Baseline Moving sic@
  };

  template (value) Rel7_700810Reporting cs_Rel7_ReportingDef700810 :=
  { /* @status    APPROVED */
    mask700         := '0'B,
    repOffset700    := omit,
    repThres700     := omit,
    mask810         := '0'B,
    repOffset810    := omit,
    repThres810     := omit
  };

  template (value) SI2quaterRO cds_SI2quaterRO_ServingCellParams(B4_Type p_Index,
                                                                 B4_Type p_Count,
                                                                 B1_Type p_ChangeMark, // @sic GP-120371 sic@
                                                                 B1_Type p_NeighCellMask,
                                                                 template (omit) NeighCellDescr3G p_NeighCellDescr3G,
                                                                 B1_Type p_MeasParamMask,
                                                                 template (omit) SI2quaterRO_MeasParamDescr3G p_MeasParamDescr3G,
                                                                 B1_Type p_GPRS3GMeasParamMask,
                                                                 template (omit) SI2quaterRO_GPRS_3G_MeasParamDescr p_GPRS3GMeasParamDescr,
                                                                 template (omit) EUTRANMeasParams_SI2 p_EUTRANMeasParams,
                                                                 B1_Type p_EUTRANMeasParamsMask := '1'B,  // @sic R5s120021 sic@
                                                                 template (omit) B3_Type p_GeranPrior,
                                                                 template (omit) B4_Type p_ThreshPriorSearch,
                                                                 template (omit) B4_Type p_ThreshGSMLow,
                                                                 template (omit) B2_Type p_HPrior,
                                                                 template (omit) B2_Type p_TResel)
    modifies cs_SI2quaterRO :=
  { /* @status    APPROVED */
    rel8Mask   := '1'B,
    geranPrior     := p_GeranPrior,
    threshPriorSearch := p_ThreshPriorSearch,
    threshGSMLow  := p_ThreshGSMLow,
    hPrior          := p_HPrior,
    tReselection    := p_TResel
  };

  template (value) SI13RO cs_SI13_RO_GPRS(template (value) O1_Type p_RAC,
                                          template (value) B2_Type p_NMO) :=
  { /* 51.010 clause 40.2.1
       The info element has a fixed length of 20 octets. */
    /* @status    APPROVED */
    mask            := '1'B,                         // the rest fields except spareBs are all not present if mask = L
    bCCH_CHANGE_MARK := '000'B,
    sI_CHANGE_FIELD := '0000'B,
    sI3ChangeMask   := '0'B,
    sI13_CHANGE_MARK := omit,                        // not present if sI3ChangeMask = 0
    gPRS_MobileAllocation := omit,                   // not present if sI3ChangeMask = 0
    pbcchMask       := '0'B,                         // '0' -> no PBCCH
    rAC             := p_RAC,                        // present if pbcchMask = 0
    sPGC_CCCH_SUP   := '1'B,                         // present if pbcchMask = 0
    pRIORITY_ACCESS_THR := '110'B,                   // present if pbcchMask = 0
    nETWORK_CONTROLl_ORDER := '00'B,                 // present if pbcchMask = 0
    gPRS_CellOptions := cs_GPRS_CellOptionsSI13(p_NMO), // present if pbcchMask = 0
    gPRS_PowerControlParameters := cs_GPRS_PowerControlParam, // present if pbcchMask = 0
    pSI1_REPEAT_PERIOD := omit,                      // present if pbcchMask = 1
    pBCCH_Description := omit,                       // present if pbcchMask = 1
    r99Mask         := '1'B,
    sGSNR           := '1'B,                         // present if r99Mask = H
    r4Mask          := omit,
    sI_STATUS_IND   := omit,                         // present if r4Mask = H
    r6Mask          := omit,
    txPwrMaxCCHMask := omit,                         // not present if r6Mask = L
    lbMSTxPwrMaxCCH := omit,                         // not present if r6Mask = L or txPwrMaxCCHMask = 0
    sI2nSupport     := omit                          // not present if r6Mask = L
  };

  template (value) SI13RO cds_SI13_RO_BCCH_CHANGE_MARK(template (value) O1_Type p_RAC,
                                                       template (value) B2_Type p_NMO,
                                                       B4_Type p_ChangeField := '0010'B)
    modifies cs_SI13_RO_GPRS :=
  { /* specific messages contents set-up for BCCH_CHANGE_MARK */
    /* @status    APPROVED */
    bCCH_CHANGE_MARK := '001'B,
    sI_CHANGE_FIELD := p_ChangeField // @sic R5s110377 sic@
  };

  template (value) SI3RO cs_SI3_RO_Spare :=
  { /* all bits are spare, 3GPP TS 51.010 clause 26.6.14. */
    /* @status    APPROVED */
    cellSelectMask  := '0'B,                         // Cell select parameter mask
    cbq             := omit,                         // not present if cellSelectMask = 0,
                                                     // Cell bar qualify
    cellReselectOffset := omit,                      // not present if cellSelectMask = 0
    temporaryOffset := omit,                         // not present if cellSelectMask = 0
    penaltyTime     := omit,                         // not present if cellSelectMask = 0
    powerOffsetMask := '0'B,                         // Power offset mask
    powerOffset     := omit,                         // not present if powerOffsetMask = 0
    sI2terIndicator := '0'B,
    earlyClassMarkSendingControl := '0'B,            // no ECMS
    mask3           := '0'B,                         // mask bit for scheduling info
    schedulingWhere := omit,                         // not present if mask3 = 0
    mask4           := '0'B,                         // mask bit for GPRS indicator
    rA_Colour       := omit,                         // not present if mask4 = 0
    sI13Position    := omit,                         // not present if mask4 = 0
    earlyClassMarksendingRestriction3G := '0'B,
    mask5           := '0'B,                         // mask bit for SI2quaterPosition
    sI2quaterPosition := omit,                       // not present if mask5 = L
    sI13altPosition := omit,                          // only present if Iu supported in cell
    mask6           := '0'B,                    // mask bit for SI21 @sic R5s120178 Baseline Moving sic@
    si21Position    := omit   // not present if mask6 = L @sic R5s120178 Baseline Moving sic@
  };

  template (value) SI3RO cds_SI3_RO_GPRS_SI2quater  modifies cs_SI3_RO_Spare :=
  { /* indicating SI13 is broadcasted. 3GPP TS 51.010 clause 40.2.1.1.1
       GPRS supported */
    /* @status    APPROVED */
    earlyClassMarkSendingControl := '1'B,            // perform early classmark sending (H=allowed)
    mask4           := '1'B,                         // GPRS supported (H=support GPRS)
    rA_Colour       := '001'B,                       // RA colour
    sI13Position    := '0'B,                         // SI13 is on BCCH Norm
    earlyClassMarksendingRestriction3G := '1'B,      // UTRAN classmark change message shall be sent with the Early classmark sending (L= no)
    mask5           := '1'B,                         // SI2quater broadcasted (L=no SI2ter)
    sI2quaterPosition := '0'B
  };

  template (value) SI4RO cs_SI4_RO_Spare :=
  { /* all bits are set to spare, 3GPP TS 51.010 clause 26.6.14 */
    /* @status    APPROVED */
    cellSelectMask  := '0'B,                         // no optional Cell selection parameter
    cbq             := omit,                         // not present
    cellReselectOffset := omit,                      // not present
    temporaryOffset := omit,                         // not present
    penaltyTime     := omit,                         // not present
    powerOffsetMask := '0'B,                         // no optional power offset
    powerOffset     := omit,                         // not present
    raColourMask    := '0'B,                         // no GPRS indicator
    rA_Colour       := omit,                         // not present
    sI13Position    := omit,                         // not present
    breakMask       := '0'B,                         // break
    breakIndicator  := '0'B,                         // SI4 Rest Octets_S, is not sent in SYSTEM INFORMATION TYPE 7 and 8
    lsaParamMask    := omit,                         // not present
    pRIO_THR        := omit,                         // not present
    lSA_OFFSET      := omit,                         // not present
    mccMask         := omit,                         // not present
    mCC             := omit,                         // not present
    mNC             := omit,                         // not present
    cellIDMask      := omit,                         // not present
    cellIdentity    := omit,                         // not present
    lsaMask         := omit,                         // not present
    lsaIdInfo_List := omit,                       // not present
    cBQ3Mask        := omit,                         // not present
    cBQ3            := omit,                         // not present if breakMask = L or cBQ3Mask = L
    si13altMask     := omit,                         // not present if breakMask = L or cBQ3Mask = L
    si13altPosition := omit                          // not present if breakMask = L or cBQ3Mask = L or si13altMask = 0
  };

  template (value) SI4RO cds_SI4_RO_GPRS modifies cs_SI4_RO_Spare :=
  { /* 3GPP TS 51.010 clause 40.2.1.1.1 */
    /* @status    APPROVED */
    raColourMask    := '1'B,                         // GPRS indicator (H)
    rA_Colour       := '001'B,
    sI13Position    := '0'B                          // on BCCH Norm
  };

  template (value) SI15RO cs_SI15_RO(B4_Type p_GSMBand) :=
  { /* 51.010 clause 20.1 */
    /* @status    APPROVED */
    si15Index       := '00'B,
    si15Count       := '00'B,
    dm_CHANGE_MARK  := '0000'B,
    dynMappingList  := cs_DynMapList1(p_GSMBand)
  };

  template (value) SI6RO cs_SI6_RO_Spare(template (value) B1_Type p_Band) :=
  { /* @status    APPROVED */
    pchNchMask      := '0'B,                         // PCH, NCH info mask
    pagingChRestructuring := omit,                   // not present if pchNchMask = 0
    nLN_SACCH       := omit,                         // not present if pchNchMask = 0
    prioMask        := omit,                         // not present if pchNchMask = 0
    callPriority    := omit,                         // not present if pchNchMask = 0 or prioMask = 0
    nLN_Status      := omit,                         // not present if pchNchMask = 0
    inbandMask      := '0'B,
    inbandNotifications := omit,                     // not present if inbandMask = 0
    inbandPagings   := omit,                         // not present if inbandMask = 0
    dTM_Supported   := '0'B,
    rAC             := omit,
    mAX_LAPDm       := omit,
    bandIndicator   := p_Band,                       // L = 1800 band supported,
                                                     // H = 1900 band supported
    txPwrMask       := '0'B,
    gPRS_MS_TXPWT_MAX_CCH := omit,                   // not present if txPwrMask = L
    mBMSMask        := '0'B,
    dedModeMBMSNoteSupport := omit,                  // not present if mBMSMask = L
    mNCISupport     := omit,                          // not present if mBMSMask = L
    r7Mask        := '0'B,
    amrConfigMask       := omit,     // not present if r7Mask = L
    amrConfig           := omit,      // not present if r7Mask= L or amrConfigMask = 0
    randomMask          := '0'B,                       //  @sic R5s120178 Baseline Moving sic@
    randomBitStream     := omit      // not present if randomMask = L @sic R5s120178 Baseline Moving sic@
  };

  template (value) TA cs_G_TA (B6_Type p_TA):=
  { /* Timing advance
       GSM 04.08,  10.5.2.40 */
    /* @status    APPROVED */
    iei             := omit,                         // '01111101'B
    sprb            := '00'B,                        // '00'B
    ievalue       := p_TA                            // @sic R5s120587 sic@
  };

  template (value) TimeSlotAllocation cs_TimeSlotAllocation_TN4(PhysicalChId p_PhyChId) :=
  { /* @status    APPROVED */
    physicalChId    := p_PhyChId,                    // Single PDCH or multi-slot configured PDCHs
    tN0             := false,                        // TRUE - time slot 0 is allocated; FALSE -- not allocated
    tN1             := false,                        // TRUE - time slot 1 is allocated; FALSE -- not allocated
    tN2             := false,                        // TRUE - time slot 2 is allocated; FALSE -- not allocated
    tN3             := false,                        // TRUE - time slot 3 is allocated; FALSE -- not allocated
    tN4             := true,                         // TRUE - time slot 4 is allocated; FALSE -- not allocated
    tN5             := false,                        // TRUE - time slot 5 is allocated; FALSE -- not allocated
    tN6             := false,                        // TRUE - time slot 6 is allocated; FALSE -- not allocated
    tN7             := false                         // TRUE - time slot 7 is allocated; FALSE -- not allocated
  };

  template UTRANPreConfigInfo cr_UtranPreConfigInfo :=
  { /* 3GPP TS 44.018 clause 10.5.2.7a */
    /* @status    APPROVED */
    iel             := ?,
    ievalue       := ?
  };

  template L2DataIndType cr_G_TMSI_ReallocCmpl :=
  { /* @status    APPROVED */
    tmsiRealloc := cr_TMSI_ReallocCmpl_Common
  };

  template L2DataIndType cr_G_AuthRspAnyExt :=
  { /* @status    APPROVED */
    authResponse := cr_AuthResponse_Common(cr_AuthRspExtAny)
  };

  template L2DataIndType cr_G_AuthRspAnyNoExt :=
  { /* @status    APPROVED */
    authResponse := cr_AuthResponse_Common
  };

  template (value) L2DataReqType cs_G_AuthReq( template (value) KeySeq p_KeySeq,
                                               template (value) MM_RAND p_RAND,
                                               template (value) AUTN p_AUTN) :=
  { /* @status    APPROVED */
    authReq := cs_AuthReq_Common(p_KeySeq, p_RAND, p_AUTN)
  };

  template L2DataIndType cr_G_AuthFailAny :=
  { /* @status    APPROVED */
    autnFail := cr_AuthFailAny_Common
  };

  template (value) L2DataReqType cs_G_ChRelease(template (omit) GPRS_Resumption p_G_ResumeGPRS:= omit,
                                                template (omit) CellSelInd p_CellSelInd := omit) :=
  { /* A CHANNEL RELEASE message with RR cause = normal event */
    /* @sic R5s120502 additional change sic@ */
    /* @status    APPROVED */
    chRelease := {
      skipIndicator   := '0000'B,
      rRProtocolDiscriminator := '0110'B,
      msgType         := '00001101'B,
      rRCau           := cs_G_RR_CauNormalevent,       // normal event
      bA_Range        := omit,                         // BA range  O OCTETSTRING minimum 6 octets no up limit
      groupChannelDescr := omit,                       // group channel description O OCTETSTRING[4..13]
      groupCipherKey  := omit,                         // group cipher key number  C OCTETSTRING[1]
      gPRS_Resumption := p_G_ResumeGPRS,               // GPRS resumptioon  O OCTETSTRING[1]
      bA_ListPref     := omit,                         // BA list pref   O OCTETSTRING at least 3 octets no up limit
      uTRAN_FreqList  := omit,                         // UTRAN frequency list  O OCTETSTRING[3..
      cellChannelDescr := omit,                        // Cell Channel Descr O OCTETSTRING [17]
      cellSelInd      := p_CellSelInd,                 // CellSelection indicator after release of all TCH and SDCCH O OCTETSTRING [4..]
      enhDTMCSRelInd  := omit,                         // Enhanced DTM CS Release Indication O OCTETSTRING [1]
      vGCSCiphParam   := omit,                         // VGCS Ciphering Params O OCTETSTRING [3-15]
      grpChDescr2     := omit,                         // Group Channel Descr 2 O OCTETSTRING [13]
      talkerId        := omit,                         // Talker Id O TLV [3-20]
      talkerPriorityStatus := omit,                    // Talker Priority Status O TLV [3]
      vGCS_AMRConfig  := omit,                         // VGCS AMR Config O TLV [3]
      individPrior    := omit                          // Individual Priorities O TLV [3-?]
    }
  };

  template (value) CellSelInd cs_G_CellSelIndicator_EUTRAN (O1_Type p_IEL, // This is the length of the following template - you have to count the bits! And don't forget to include the 3 bits for the ranDescr
                                                            template (value) EUTRANDescr_List p_EUTRANDescr_List) :=
  { /* @status    APPROVED */
    iei := '77'O,
    iel := p_IEL,
    ranDescr := '011'B,
    gsmDescr := omit,
    uTRANFDDDescr := omit,
    uTRANTDDDescr := omit,
    eUTRANDescr := p_EUTRANDescr_List
  };

  template (value) PagingReqType cs_G_PagingRequest1_Def (template (value) MobileIdentity p_MobId):=
  { /* @status    APPROVED */
    pagReq := {
      l2PseudoLength  := '25'O,                // L2 pseudo length      M
      skipIndicator   := '0000'B,              // skip indicator   M
      rRProtocolDiscriminator := '0110'B,      // RR protocol discriminator   M
      msgType         := '00100001'B,          // message type   M
      chNeeded_m1_2   := cs_G_ChneededAny,     // channels needed for mobiles 1 and 2    M        BITSTRING [4] without IEI
      pageMode        := cs_G_PageModeIE,      // page mode   M
      mobileId1       := p_MobId,              // mobility identity 1       M OCTETSTRING [2..9]
      mobileId2       := omit,                 // mobility identity 2       O OCTETSTRING [3..10]
      p1RO            := omit                  // P1 rest octets. The SS will fill the rest of the message with spare padding, so no need to include this field.
    }
  };

  template (value) PagingReqType cs_G_PagingRequest_ImmAss (template (value) IMMEDIATEASSIGNMENT p_PDU) :=
  { /* @status    APPROVED */
    immedAss := p_PDU
  };

  template GRLCCntrlMsgIndType cr_PacketResourceRequestAny :=
  { /* @status    APPROVED */
    pktResReq := {
      msgType    := '000101'B,               // message type   M
      mask1      := ?,
      accessType := *, // not present if mask1 = 0
      mask2      := ?,
      globalTFI  := cr_GlobalTFIAny ifpresent, // only present if mask2 = 0
      tlli       := *, // only present if mask2 = 1
      mask3      := ?,
      mSRadioAccessCap := cr_MSRadioAccessCapListAny ifpresent, // not present if mask3 = 0
      chReqDescr := cr_ChReqDescrAny,
      mask4      := ?,
      changeMark := *, // not present if mask4 = 0
      cValue     := ?,
      mask5      := ?,
      signVar    := *, // not present if mask5 = 0
      tnmask0    := ?,
      iLevelTN0  := *, // not present if tnmask0 = 0
      tnmask1    := ?,
      iLevelTN1  := *, // not present if tnmask1 = 0
      tnmask2    := ?,
      iLevelTN2  := *, // not present if tnmask2 = 0
      tnmask3    := ?,
      iLevelTN3  := *, // not present if tnmask3 = 0
      tnmask4    := ?,
      iLevelTN4  := *, // not present if tnmask4 = 0
      tnmask5    := ?,
      iLevelTN5  := *, // not present if tnmask5 = 0
      tnmask6    := ?,
      iLevelTN6  := *, // not present if tnmask6 = 0
      tnmask7    := ?,
      iLevelTN7  := *, // not present if tnmask7 = 0
      r99mask    := ?,
      mask6      := *, // not present if r99mask = 0
      eGPRSBEPLinkQual := cr_EGPRSBEPLinkQualAny ifpresent, // not present if r99mask or if mask6 = 0
      mask7      := *, // not present if r99mask = 0
      eGPRSTNLinkQual:= cr_EGPRSTNLinkQualAny ifpresent, // not present if r99mask or mask7= 0
      mask8      := *, // not present if r99mask = 0
      pFI        := *, // not present if r99mask or mask8= 0
      addMSRACInfo:= *, // not present if r99mask = 0
      retxPRR    := *, // not present if r99mask = 0
      rel5mask   := *, // not present if r99mask = 0
      mask9      := *, // not present if r99mask or rel5mask = 0
      mask10     := *, // not present if r99mask or rel5mask or mask9 = 0
      gRNTIExt   := *, // not present if r99mask,rel5mask, mask9 or mask10 = 0
      iuModeChReqDescr := cr_IuModeChReqDescrAny ifpresent, // not present if r99mask, rel5mask or mask9 = 0
      hfnmask    := *, // not present if r99mask or rel5mask or mask9 = 0
      hfnlsb     := *, // not present if r99mask or rel5mask or mask9 or hfnmask = 0
      rel6mask   := *, // not present if r99mask or rel5mask or mask9 = 0
      mask11     := *, // not present if r99mask or rel5mask or mask9 or rel6mask = 0
      extChReqDescr := cr_ExtChReqDescrAny ifpresent, // not present if r99mask or rel5mask or mask9 or rel6mask or mask11 = 0
      rel7mask   := *, // not present if r99mask or rel5mask or mask9 or rel6mask = 0
      earlyTBF   := *, // not present if r99mask or rel5mask or mask9 or rel6mask or rel7mask = 0
      mask12     := *, // not present if r99mask or rel5mask or mask9 or rel6mask or rel7mask = 0
      eGPRSBEPLinkQual2 := cr_EGPRSBEPLinkQualAny ifpresent, // not present if r99mask or if mask6 or rel7mask or mask12 = 0
      mask13     := *, // not present if r99mask or rel5mask or mask9 or rel6mask or rel7mask = 0
      eGPRSTNLinkQual2 := cr_EGPRSTNLinkQualAny ifpresent, // not present if r99mask or if mask6 or rel7mask or mask13 = 0
      rel10mask   := *, // not present if r99mask or rel5mask or mask9 or rel6mask or rel7mask = 0 @sic R5s120178 sic@
      lowAccessPrioritySig := *, // not present if r99mask or rel5mask or mask9 or rel6mask or rel7mask or rel10Mask = 0  @sic R5s120178 sic@
      sparePadding := *  // Uplink message
    }
  };

  template (value) GRLCCntrlMsgReqType cs_PacketUplinkAssignment(B10_Type p_ARFCN,
                                                                 B6_Type p_TA) :=
  { /* This message is sent on the PCCCH or PACCH by the network to the mobile station to assign uplink resources for One phase TBF.
       TS 3GPP 44.060 clause 11.2.29
       Values are taken from 51010 clause 40.2.3.4 */
    /* @status    APPROVED */
    pktULAssignmt := {
      msgType         := '001010'B,                    // Message type
      pAGE_MODE       := int2bit(tsc_NormalPaging,2),  // Normal paging
      persistenceLevelMask := '0'B,
      persistenceLevel1 := omit,                       // not Present if persistenceLevelMask=0
      persistenceLevel2 := omit,                       // not Present if persistenceLevelMask=0
      persistenceLevel3 := omit,                       // not Present if persistenceLevelMask=0
      persistenceLevel4 := omit,                       // not Present if persistenceLevelMask=0
      globalTFIMask := '0'B,
      globalTFI := cs_GlobalTFIul,
      tLLIMask := omit,
      tLLI := omit,
      tQIMask := omit,
      tQI := omit,
      referenceAddress := omit,
      eGPRSmask      := '0'B,
      channelCodingCommand := int2bit(tsc_CS1,2),      // not present of EGPRPSmask=1
      tLLIBlockChannelCoding := '0'B,                  // 0 - the mobile station shall use CS-1 in GPRS TBF mode and MCS-1 in EGPRS TBF mode.
                                                       // 1 - the mobile station shall use the value commanded in the CHANNEL_CODING_COMMAND or EGPRS_CHANNEL_CODING_COMMAND field.
      packetTimingAdvance := cs_PacketTimingAdvance (-, p_TA), // @sic R5s120587 sic@
      freqParamMask   := '1'B,
      freqParam       := cs_FreqParam_PDTCH(p_ARFCN),   // not present if freqParamMask=0 @sic R5s120521 sic@
      allocationMask  := '01'B,
      dynamicAllocation := cs_DynamicAllocationPacket, // present if allocationMask=01
      singleBlockAllocation := omit,                   // present if allocationMask=10
      r99Mask         := '1'B,
      packetExtTAmask := '0'B,                         // not present if r99Mask=0
      packetExtendedTA := omit,                        // not present if r99Mask=0 and packetExtTImask=0
      r5Mask          := omit,
      gRNTIMask       := omit,                         // not present if r99Mask=0 and r5Mask=0
      gRNTIExtension  := omit,                         // not present if r99Mask=0, r5Mask=0 and gRNTIMask=0
      rBIdMask        := omit,                         // not present if r99Mask=0 and r5Mask=0
      rBId            := omit,                         // not present if r99Mask=0, r5Mask=0 and rBIdMask=0
      r6Mask          := omit,                         // not present if r99Mask=0, r5Mask=0
      pfiMask         := omit,                         // not present if r99Mask=0, r5Mask=0 and r6Mask = 0
      pFI             := omit,                         // not present if r99Mask=0, r5Mask=0, r6Mask = 0 and pfiMask = 0
      rlcModeMask     := omit,                         // not present if r99Mask=0, r5Mask=0 and r6Mask = 0
      rlcMode         := omit,                         // not present if r99Mask=0, r5Mask=0, r6Mask = 0 and rlcModeMask = 0
      mask            := omit,
      eGPRSmessage    := omit,                         // not present of EGPRPSmask=0
      dualCarrier     := omit
    }
  };

  template (value) GRLCCntrlMsgReqType cds_PacketUplinkAssignment_TwoPhase(B10_Type p_ARFCN,
                                                                           B6_Type p_TA,
                                                                           template (value) O4_Type p_TLLI)
      modifies cs_PacketUplinkAssignment:=
  { /* @status    APPROVED */
    pktULAssignmt := {
      globalTFIMask := '1'B,
      globalTFI := omit,
      tLLIMask := '0'B,
      tLLI := p_TLLI
    }
  };

  template LLCUnitDataIndType cr_G_AttachReq_EUTRANCap (template (present)  AttachType p_AttachType,
                                                        template (present)  MobileIdentity p_MobId,
                                              template (present)  RoutingAreaId p_RAI,
                                              template (present) KeySeq p_KeySeq) :=
  { /* @status    APPROVED */
    attReq := cr_AttachReq_Common(p_AttachType,
                                  p_MobId,
                                  p_RAI,
                                  p_KeySeq,
                                  cr_MS_RadioAccessCapLVAny,
                                  -,// ptmsi sig
                                  -,// gprs timer
                                  -,// tmsi status
                                  -,// lcs cap
                                  -,// clsmk 2
                                  cdr_MSCLSMK3_EutraCheck)
  };

  template (value) GRLCCntrlMsgReqType cs_PktCellChangeOrder (template (value) GlobalTFI p_GlobalTFI,
                                                              template (value) EUTRAN_TargetCell p_EUTRANTargetCell) :=
  { /* @status    APPROVED */
    pktCellChangeOrder := {
      msgType := '000001'B,               // Message type
      pAGE_MODE := '00'B,             // Normal paging
      globalTFImask := '0'B,
      gLOBAL_TFI  := p_GlobalTFI,            // not present if globalTFImask=1
      mask2  := omit,                 // not present if globalTFImask=0
      tLLI  := omit,        // not present if globalTFImask=0 and mask2=1
      cellTypeMask  := '1'B,
      msgEscape := '00'B,      // not present if cellTypeMask = 0
      immediateRel := '1'B,
      gsmTargetCell := omit,  // not present if cellTypeMask = 1
      fddMask := '0'B,        // not present if cellTypeMask = 0
      fddTargetCell := omit,  // not present if cellTypeMask = 0 or fddMask = 0
      tddMask := '0'B,        // not present if cellTypeMask = 0
      tddTargetCell := omit,  // not present if cellTypeMask = 0 or tddMask = 0
      r5Mask := '1'B,     // not present if cellTypeMask = 0
      grntiXMask  := '0'B,    // not present if cellTypeMask or r5Mask = 0
      gRNTIExtension  := omit,   // not present if cellTypeMask or r5Mask or gRNTIXMask = 0
      r8Mask := '1'B,     // not present if cellTypeMask or r5Mask = 0
      eutranMask := '1'B,     // not present if cellTypeMask r5Mask or r8Mask = 0
      eutranTargetCell := p_EUTRANTargetCell,  // not present if cellTypeMask r5Mask or r8Mask or eutranMask = 0
      individualMask := '0'B,    // not present if cellTypeMask r5Mask or r8Mask = 0
      individualPrior := omit    // not present if cellTypeMask r5Mask or r8Mask or individualMask = 0
    }
  };

  template (value) EUTRAN_TargetCell cs_EUTRAN_TargetCell (B16_Type p_Earfcn,
                                                           B1_Type p_BWMask,
                                                           template (omit) B3_Type p_Bandwidth,
                                                           B9_Type p_CellIdentity) :=
  { /* @status    APPROVED */
    earfcn        := p_Earfcn,
    bwMask        := p_BWMask,
    bandwidth     := p_Bandwidth,
    cellIdentity  := p_CellIdentity
  };

  template GRLCCntrlMsgIndType cr_PktCellChangeNotificationAny :=
  { /* @status    APPROVED */
    pktCellChangeNotification := {
      msgType := '001100'B,               // Message type
      gLOBAL_TFI   := ?,
      gsmMask := ?,
      arfcn  := *, // not present if gsmMask = 1
      bsic  := *,   // not present if gsmMask = 1
      rel6Mask  := *, // not present if gsmMask = 0
      target3GCell  := *, // not present if gsmMask = 0 or rel6Mask = 1
      rel8Mask  := *, // not present if gsmMask = 0 or rel6Mask = 0
      arfcnMask   := *,// not present if gsmMask = 0 or rel6Mask = 0 or rel8Mask = 1
      earfcn  := *, // not present if gsmMask = 0 or rel6Mask = 0 or rel8Mask = 1 or arfcnMask = 0
      ebsic  := *,   // not present if gsmMask = 0 or rel6Mask = 0 or rel8Mask = 1 or arfcnMask = 0
      e3GMask  := *, // not present if gsmMask = 0 or rel6Mask = 0 or rel8Mask = 1
      etarget3GCell  := *, // not present if gsmMask = 0 or rel6Mask = 0 or rel8Mask = 1 or e3GMask = 0
      eTargetMask  := *, // not present if gsmMask = 0 or rel6Mask = 0 or rel8Mask = 1
      EUTRAN_TargetCell  := *,// not present if gsmMask = 0 or rel6Mask = 0 or rel8Mask = 1 or eTargetMask = 0
      eutranRepQuantity  := *,// not present if gsmMask = 0 or rel6Mask = 0 or rel8Mask = 1 or eTargetMask = 0
      eCCNRptMask  := *, // not present if gsmMask = 0 or rel6Mask = 0 or rel8Mask = 1
      eCCNMeasReport  := *,// not present if gsmMask = 0 or rel6Mask = 0 or rel8Mask = 1 or eCCNRptMask = 0
      rel9Mask  := *, // not present if gsmMask = 0 or rel6Mask = 0 or rel8Mask = 0
      csgMask  := *, // not present if gsmMask = 0 or rel6Mask = 0 or rel8Mask = 0 or rel9Mask = 1
      uCSGMeasRpt  := *, // not present if gsmMask = 0 or rel6Mask = 0 or rel8Mask = 0 or rel9Mask = 1 or  or csgMask = 0
      eCSGMeasRpt  := *, // not present if gsmMask = 0 or rel6Mask = 0 or rel8Mask = 0 or rel9Mask = 1 or csgMask = 1
      eCCNMask  := *, // not present if gsmMask = 0 or rel6Mask = 0 or rel8Mask = 0 or rel9Mask = 1
      eCCNMeasRpt  := *, // not present if gsmMask = 0 or rel6Mask = 0 or rel8Mask = 0 or rel9Mask = 1 or eCCNMask = 0
      baMask := ?,
      baUsed  := *,    // not present if baMask = 1
      psi3ChangeMark  := *,    // not present if baMask = 0
      pmoUsed := ?,
      pccnSending := ?,
      nCMeasReport := ?,
      r6Mask := ?,
      ba3GMask  := *, // not present if r6Mask = 0
      ba3GUsed   := *,    // not present if r6Mask = 0 or ba3GMask = 0
      n3G  := *, // not present if r6Mask = 0
      ccn3GMeasReport := *,
      r10Mask := *, // not present if r6Mask = 0 @sic R5s120178 Baseline Moving sic@
      csgDiscriminator := *, // not present if r6Mask = 0 or r10Mask = 0 @sic R5s120178 Baseline Moving sic@
      paddingBits  := *                   // uplink, so have to receive this in TTCN
    }
  };

  template (value) SYSTEMINFORMATIONTYPE1 cs_SysInfoType1(template (value) CellChDescr p_CellAlloc,
                                                          template (value) RACHControlParam p_RACHControlParam,
                                                          template (value) B1_Type p_BandInd) :=
  { /* @status    APPROVED */
    l2PseudoLength  := '55'O,                        // L2 pseudo length  = 21
    skipIndicator   := '0000'B,                      // skip indicator
    rRProtocolDiscriminator := '0110'B,              // RR protocol discriminator
    msgType         := '00011001'B,                  // message type
    cellChDescr     := p_CellAlloc,                  // cell channel description, with IEI omitted
    rACHControlParam := p_RACHControlParam,          // rach control parameters, without IEI
    sI1RO           := cs_SI1_RO(p_BandInd)          // SI1 rest octets
  };

  template (value) SYSTEMINFORMATIONTYPE13 cs_SysInfoType13(template (value) SI13RO p_SI13RO) :=
  { /* @status    APPROVED */
    l2PseudoLength  := '01'O,                        // L2 pseudo length = 0
    skipIndicator   := '0000'B,                      // skip indicator
    rRProtocolDiscriminator := '0110'B,              // RR protocol discriminator
    msgType         := '00000000'B,                  // message type
    si13roct        := p_SI13RO                      // SI3 rest octets
  };

  template (value) SYSTEMINFORMATIONTYPE15 cs_SysInfoType15(template (value) SI15RO p_SI15RO) :=
  { /* @status    APPROVED */
    l2PseudoLength  := '01'O,                        // L2 pseudo length = 0
    skipIndicator   := '0000'B,                      // skip indicator
    rRProtocolDiscriminator := '0110'B,              // RR protocol discriminator
    msgType         := '01000011'B,                  // message type
    si15roct        := p_SI15RO                      // SI15 rest octets
  };

  template (value) SYSTEMINFORMATIONTYPE2 cs_SysInfoType2(template (value) NeighCellDescr p_NeighBCCHs,
                                                          template (value) O1_Type p_NCC_Permitted,
                                                          template (value) RACHControlParam p_RACHControlParam) :=
  { /* @status    APPROVED */
    l2PseudoLength  := '59'O,                        // L2 pseudo length = 22
    skipIndicator   := '0000'B,                      // skip indicator
    rRProtocolDiscriminator := '0110'B,              // RR protocol discriminator
    msgType         := '00011010'B,                  // message type
    neighBCCHFreqList := p_NeighBCCHs,               // bcch frequency list of neighbour cells with IEI omitted
    nCCPermitted    := p_NCC_Permitted,              // ncc permitted
    rACHControlParam := p_RACHControlParam           // rach control parameters
  };

  template (value) SYSTEMINFORMATIONTYPE2bis cs_SysInfoType2bis(template (value) NeighCellDescr p_ExtBCCHs,
                                                                template (value) RACHControlParam p_RACHControlParam) :=
  { /* @status    APPROVED */
    l2PseudoLength  := '55'O,                        // L2 pseudo length = 21
    skipIndicator   := '0000'B,                      // skip indicator
    rRProtocolDiscriminator := '0110'B,              // RR protocol discriminator
    msgType         := '00000010'B,                  // message type
    extNeighBCCHFreqList := p_ExtBCCHs,              // extended bcch frequency list of neighbour cells
    rACHControlParam := p_RACHControlParam           // rach control parameters
  };

  template (value) SYSTEMINFORMATIONTYPE2quater cs_SysInfoType2quater(template (value) SI2quaterRO p_SI2quaterRO) :=
  { /* @status    APPROVED */
    l2PseudoLength  := '05'O,                        // L2 pseudo length = 1
    skipIndicator   := '0000'B,                      // skip indicator
    rRProtocolDiscriminator := '0110'B,              // RR protocol discriminator
    msgType         := '00000111'B,                  // message type
    sI2quaterRO     := p_SI2quaterRO                 // UTRAN parameters
  };

  template (value) SYSTEMINFORMATIONTYPE3 cs_SysInfoType3(template (value) O2_Type p_CellIdentity,
                                                          template (value) LocAreaId p_LAI,
                                                          template (value) ControlChDescr p_ControlChDescr,
                                                          template (value) CellOptionBCCH p_CellOption,
                                                          template (value) CellSelParam p_CellSelParam,
                                                          template (value) RACHControlParam p_RACHControlParam,
                                                          template (value) SI3RO p_SI3RO) :=
  { /* @status    APPROVED */
    l2PseudoLength  := '49'O,                        // L2 pseudo length = 18
    skipIndicator   := '0000'B,                      // skip indicator
    rRProtocolDiscriminator := '0110'B,              // RR protocol discriminator
    msgType         := '00011011'B,                  // message type
    celIId          := p_CellIdentity,               // cell identity
    lai             := p_LAI,                        // location area identification
    controlChDescr  := p_ControlChDescr,             // control channel description
    cellOption      := p_CellOption,                 // cell options/BCCH
    cellSelParam    := p_CellSelParam,               // cell selection parameters
    rACHControlParam := p_RACHControlParam,          // rach control parameters
    sI3RO           := p_SI3RO                       // SI3 rest octets
  };

  template (value) SYSTEMINFORMATIONTYPE4 cs_SysInfoType4(template (value) LocAreaId p_LAI,
                                                          template (value) CellSelParam p_CellSelParam,
                                                          template (value) RACHControlParam p_RACHControlParam,
                                                          template (value) SI4RO p_SI4RO) :=
  { /* no cell broadcast channel description IE, no cell broadcast channel mobile allocation IE. */
    /* @status    APPROVED */
    l2PseudoLength  := '31'O,                        // L2 pseudo length = 12
    skipIndicator   := '0000'B,                      // skip indicator
    rRProtocolDiscriminator := '0110'B,              // RR protocol discriminator
    msgType         := '00011100'B,                  // message type
    lai             := p_LAI,                        // location area identification
    cellSelParam    := p_CellSelParam,               // cell selection parameters
    rACHControlParam := p_RACHControlParam,          // rach control parameters
    cbchd           := omit,                         // cbch channel description
    cbchmobileAlloc := omit,                         // mobile allocation
    si4roct         := p_SI4RO                       // SI4 rest octets
                                                     // OCTETSTRING [10]
  };

  template (value) SYSTEMINFORMATIONTYPE5 cs_SysInfoType5(template (value) NeighCellDescr p_NeighCellFreqList) :=
  { /* @status    APPROVED */
    l2PseudoLength  := '49'O,                        // L2 pseudo length =18
    skipIndicator   := '0000'B,                      // skip indicator
    rRProtocolDiscriminator := '0110'B,              // RR protocol discriminator
    msgType         := '00011101'B,                  // message type
    bCCHFreqList    := p_NeighCellFreqList           // bcch frequency list
  };

  template (value) SYSTEMINFORMATIONTYPE5bis cs_SysInfoType5bis(template (value) NeighCellDescr p_ExtBCCHs) :=
  { /* @status    APPROVED */
    l2PseudoLength  := '49'O,                        // L2 pseudo length = 18
    skipIndicator   := '0000'B,                      // skip indicator
    rRProtocolDiscriminator := '0110'B,              // RR protocol discriminator
    msgType         := '00000101'B,                  // message type
    extNeighBCCHFreqList := p_ExtBCCHs               // extended bcch frequency list of neighbour cells
  };

  template (value) SYSTEMINFORMATIONTYPE6 cs_SysInfoType6(template (value) O2_Type p_CellIdentity,
                                                          template (value) LocAreaId p_LAI,
                                                          template (value) CellOptionSACCH p_CellOptionSACCH,
                                                          template (value) NCCPermitted p_NCCPermitted,
                                                          template (value) SI6RO p_SI6RO) :=
  { /* @status    APPROVED */
    l2PseudoLength  := '2D'O,                        // L2 pseudo length = 11
    skipIndicator   := '0000'B,                      // skip indicator
    rRProtocolDiscriminator := '0110'B,              // RR protocol discriminator
    msgType         := '00011110'B,                  // message type
    ci              := p_CellIdentity,               // cell identity
    lai             := p_LAI,                        // location area identification
    co              := p_CellOptionSACCH,            // cell options /SACCH
    nCCPermitted    := p_NCCPermitted,               // ncc permitted
    si6roct         := p_SI6RO                       // SI6 Rest Octets
  };

  template AccessIndType cr_G_ChannelReq(template (present) B8_Type p_EstCauRandomRef) :=
  { /* @status    APPROVED */
    chReq := {
      estCauRandomRef := p_EstCauRandomRef
    }
  };

  template AccessIndType cr_G_ChannelReq_Any :=       cr_G_ChannelReq(?);                  /* To match any received CHANNEL REQUEST message; @status    APPROVED */

  template AccessIndType cr_G_ChannelReq_LocUpdate := cr_G_ChannelReq('000?????'B);        /* A CHANNEL REQUEST message containing establishment cause location update; @status    APPROVED */

  template AccessIndType cr_ChanReqOnePhase :=        cr_G_ChannelReq(('011110??'B, '01111?0?'B, '01111??0'B)); /* @status    APPROVED */

  template AccessIndType cr_ChanReqTwoPhase :=        cr_G_ChannelReq('01110???'B);                             /* @status    APPROVED; @sic R5s120521 sic@ */

  template L2DataIndType cr_GPRS_SuspensionReq(template (present) TLLI p_TLLI,
                                               template (present) RoutingAreaId p_RAI,
                                               template (present) O1_Type p_Cause := ?) :=
  { /* RR GPRS Suspension Request ue/ms -> ntw
       3GPP TS 44.018 clause 9.1.13b */
    /* @status    APPROVED */
    gprsSuspendReq := {
      skipIndicator   := tsc_SkipIndicator,        // skip indicator
      rRProtocolDiscriminator := tsc_PD_RR, // RR protocol discriminator
      msgType         := '00110100'B,                        // '00110100'B
      tlli            := p_TLLI,                       // Temporary Logical Link Identity
      raIdentification := p_RAI,                       // Routeing Area Identification
      cause           := p_Cause,                      // SuspensionCause
      serviceSupport  := *
    }
  };

  template L2DataIndType cr_G_AssignmentComplete :=
  { /* RR ASSSIGNMENT  COMPLETE  ue/ms -> ntw
       3GPP TS 44.018 clause 9.1.3 */
    /* @status    APPROVED */
    assignmentComplete := {
      skipIndicator   := ?,                            // skip indicator
      rRProtocolDiscriminator := '0110'B,              // RR protocol discriminator
      msgType         := '00101001'B,                        // message type
      rRCau           := cr_G_RR_Cause                  // RR cause  M BITSTRING [8] without IEI
    }
  };

  template L2DataIndType cr_G_AssignmentFailure :=
  { /* RR ASSSIGNMENT  FAILURE ue/ms -> ntw
       3GPP TS 44.018 clause 9.1.4 */
    /* @status    APPROVED */
    assignmentFail := {
      skipIndicator   := ?,                            // skip indicator   M
      rRProtocolDiscriminator := '0110'B,              // RR protocol discriminator   M
      msgType         := '00101111'B,                        // message type   M
      rRCau           := cr_G_RR_Cause                  // RR cause  M BITSTRING [8] without IEI
    }
  };

  template L2DataIndType cr_G_CipheringModeComplete :=
  { /* RR CIPHERING MODE COMPLETE  ue/ms -> ntw/ue
       3GPP TS 44.018 clause 9.1.10 */
    /* @status    APPROVED */
    cipherComplete := {
      skipIndicator   := ?,                            // skip indicator   M
      rRProtocolDiscriminator := tsc_PD_RR, // RR protocol discriminator   M
      msgType         := tsc_MT_CipheringModeComplete, // message type   M
      mobileEquipId   := omit                          // mobile equipment identity   O OCTETSTRING [10], 15  digits, BCD
    }
  };

  template L2DataIndType cr_G_ClassmarkChangeAny :=
  { /* RR CLASSMARK CHANGE  ue/ms -> ntw
       3GPP TS 44.018 clause 9.1.11 */
    /* @status    APPROVED */
    classmarkChange := {
      skipIndicator   := '0000'B,                      // skip indicator   M
      rRProtocolDiscriminator := '0110'B,              // RR protocol discriminator   M
      msgType         := '00010110'B,                        // message type   M
      msclsmk         := cr_MS_Clsmk2_Any,           // mobile station classmark   M
      additionalMsclsmk := cr_MSCLSMK3_Any             // addtional mobile station classmark information       C OCTETSTRING [14]
    }
  };

  template L2DataIndType cr_G_Alerting (template TI p_TI) :=
  { /* @status    APPROVED */
    alerting := cr_Alert_Common (p_TI)
  };

  template L2DataIndType cr_G_Connect (template TI p_TI) :=
  { /* @status    APPROVED */
    connectul := cr_Connect_Common (p_TI)
  };

  template (value) L2DataReqType cs_G_ConnectAck (template (value) TI p_TI ) :=
  { /* @status    APPROVED */
    connectAcknowledge := cs_ConnAck_Common(p_TI)
  };

  template L2DataIndType cr_G_CallConfirmed ( template TI p_TI,
                                              template StreamId p_StrId := *) :=
  { /* @status    APPROVED */
    callConfirmed := cr_CallConf_Common (p_TI, p_StrId)
  };

  template EstablishIndType cr_G_CMServiceRequest(template (present) KeySeq p_KeySeq) :=
  { /* @status    APPROVED */
    cmServiceReq := cr_CM_ServReq (p_KeySeq)
  };

  template (value) L2DataReqType cs_G_CMServiceReject(template (value) RejCau p_RejCau) :=
  { /* @status    APPROVED */
    cmServiceReject := cs_CM_ServRej (p_RejCau)
  };

  template (value) L2DataReqType cs_G_CallProc(template (value) TI p_TI) :=
  { /* @status    APPROVED */
    callProceeding := cs_CallProc_Common(p_TI)
  };

  template (value) L2DataReqType cs_G_Alert(template (value) TI p_TI) :=
  { /* @status    APPROVED */
    alerting := cs_Alert_Common(p_TI)
  };

  template (value) L2DataReqType cs_G_Connect(template (value) TI p_TI) :=
  { /* @status    APPROVED */
    connectdl := cs_Connect_Common(p_TI)
  };

  template L2DataIndType cr_G_ConnAck(template (present) TI p_TI) :=
  { /* @status    APPROVED */
    connectAcknowledge := cr_ConnAck_Common(p_TI)
  };

  template (value) L2DataReqType cs_G_Disconnect (template (value) TI p_Ti) :=
  { /* @status    APPROVED */
    disconnectdl := cs_Disconnect_Common(p_Ti)
  };

  template L2DataIndType cr_G_Release(template (present) TI p_TI) :=
  { /* @status    APPROVED */
    release := cr_Rel_Common(p_TI)
  };

  template (value) L2DataReqType cs_G_RelCmpl (template (value) TI p_Ti) :=
  { /* @status    APPROVED */
    releaseComplete := cs_RelCmpl_Common(p_Ti)
  };

  template EstablishIndType cr_G_LocationUpdatingRequest :=
  { /* TS 24.008 V3.4.0  cl. 9.2.15 */
    /* @status    APPROVED */
    locUpdReq := cr_LocUpdReq_Common (?, -, -, -, -, omit) // @sic R5s110801 sic@
  };

  template EstablishIndType cr_G_LocationUpdatingRequestIMSI :=
  { /* @status    APPROVED */
    locUpdReq := cr_LocUpdReq_Common (?, cdr_LocUpdTypeIMSI, -, -, -, omit) // @sic R5s110801 sic@
  };

  template EstablishIndType cr_G_PagRsp ( template (present) KeySeq         p_KeySeq,
                                          template (present) MobileIdentity p_MobileId ) :=
  { /* @status    APPROVED */
    pagingRsp := cr_PagRsp_Common ( p_KeySeq, p_MobileId )
  };

  template (value) L2DataReqType cs_G_SetupMTCall( template (value) Bcap p_Bcap) :=
  { /* @status    APPROVED */
    setupdl := cs_SetupMT_Common (p_Bcap)
  };

  template L2DataIndType cr_G_SetupUL_MO :=
  { /* @status    APPROVED */
    setupul := cr_SetupMO_Common
  };

  template L2DataIndType cr_G_UtranClassmarkChange :=
  { /* RR UTRAN CLASSMARK CHANGE  ue/ms -> ntw
       3GPP TS 44.018 clause 9.1.11a */
    /* @status    APPROVED */
    utranClassmarkChange := {
      skipIndicator   := '0000'B,                      // skip indicator   M
      rRProtocolDiscriminator := '0110'B,              // RR protocol discriminator   M
      msgType         := '01100000'B,                  // message type   M
      uTRANPreConfigInfo := cr_UtranPreConfigInfo      // UTRAN predefined configuration status informatiom   M OCTETSTRING [2..n]
    }
  };

  template GRLCCntrlMsgIndType cr_PacketControlAcknowledgement :=
  { /* @status    APPROVED */
    pktCtrlAck := {
      msgType         := '000001'B,                    // Message type
      tLLI            := ?,
      ctrlAck         := ?,
      mask            := *,
      rRBPMask        := *,                            // not present if mask=0
      tn_RRBP         := *,                            // not present if mask=0 or if rRBPMask=0
      gRNTIMask       := *,                            // not present if mask=0
      gRNTIExt        := *,                            // not present if mask=0 or if gRNTIMask=0
      rel6mask        := *,
      extMask         := *,                            // not present if rel6mask = 0
      ctrlAckExt      := *,                            // not present if rel6mask or extMask = 0
      paddingBits     := *
    }
  };

  template (value) L2DataReqType cs_G_AssignmentCommand(template (value) ChMode p_ChMode,
                                                        template (value) ChannelDescr p_Ch_Desc,
                                                        template (omit) FreqList p_FreqList_at,
                                                        template (omit) CellChDescr p_CellChDescr,
                                                        template (omit) MultislotAlloc p_MultiSlot,
                                                        template (omit) MobileAlloc p_MobileAlloc,
                                                        template (omit) CipherModeSetting p_Cphms) :=
  { /* RR ASSSIGNMENT COMMAND  ntw -> ue/ms
       3GPP TS 44.018 clause 9.1.2 */
    /* @status    APPROVED */
    assignmentCmd := {
      skipIndicator   := '0000'B,                      // skip indicator  M
      rRProtocolDiscriminator := '0110'B,              // RR protocol discriminator   M
      msgType         := '00101110'B,                  // message type   M @sic R5s120498 sic@
      ch1Descr_at     := p_Ch_Desc,                    // description of the 1st channel, after time      M   OCTETSTRING [3]
      powerCmd        := cs_PowerCommand,               // power command   M OCTETSTRING [1] without IEI
      freqList_at     := p_FreqList_at,                // frequency list, after time  C OCTETSTRING [4..132]
      cellChDescr     := p_CellChDescr,                // cell channel description      O OCTETSTRING [17]
      multiSlotConfig := p_MultiSlot,                  // multislot allocation     C OCTETSTRING [3..12]
      ch1Mode         := p_ChMode,                     // mode of the 1st channel (channel set 1)  O OCTETSTRING [2]
      channelSet2Mode := omit,                         // mode of channel set 2  O OCTETSTRING [2]
      channelSet3Mode := omit,                         // mode of channel set 3  O OCTETSTRING [2]
      channelSet4mode := omit,                         // mode of channel set 4  O OCTETSTRING [2]
      channelSet5mode := omit,                         // mode of channel set 5  O OCTETSTRING [2]
      channelSet6mode := omit,                         // mode of channel set 6  O OCTETSTRING [2]
      channelSet7mode := omit,                         // mode of channel set 7  O OCTETSTRING [2]
      channelSet8mode := omit,                         // mode of channel set 8  O OCTETSTRING [2]
      ch2Descr_at     := omit,                         // description of the 2nd channel, after time      O   OCTETSTRING [4]
      ch2Mode         := omit,                         // mode 2 of the 2nd channel   O OCTETSTRING [2]
      mobileAlloc_at  := p_MobileAlloc,                // mobile allocation after time    C OCTETSTRING [3..10]
      startingTime    := omit,                         // starting time  O OCTETSTRING [3]
      freqList_bt     := omit,                         // frequency list, before time  C OCTETSTRING [4..132]
      ch1Descr_bt     := omit,                         // description of the 1st channel, before time      O   OCTETSTRING [4]
      ch2Descr_bt     := omit,                         // description of the 2nd channel, before time      O   OCTETSTRING [4]
      frqchs_bt       := omit,                         // frequency channel sequence before time      C   OCTETSTRING [10]
      mobileAlloc_bt  := omit,                         // mobile allocation before time    C OCTETSTRING [3..10]
      cphms           := p_Cphms,                      // cipher mode setting        O OCTETSTRING [1]
      vGCS_TargetMode := omit,                         // VGCS target mode Indication O OCTETSTRING [3]
      mltiRateConfig  := omit,                          // multiRate configuration  O OCTETSTRING [4..8]
      vGCS_CipherParams := omit
    }
  };

  template (value) L2DataReqType cs_G_CipheringModeCommand(B1_Type p_StartCiph) :=
  { /* RR CIPHERING MODE COMMAND  ntw -> ue/ms
       3GPP TS 44.018 clause  9.1.9 */
    /* @status    APPROVED */
    cipherModeCmd := {
      skipIndicator   := tsc_SkipIndicator,        // skip indicator
      rRProtocolDiscriminator := tsc_PD_RR, // RR protocol discriminator
      msgType         := tsc_MT_CipheringModeCommand, // message type
      cipherResponse  := cs_CipherResponse,             // cipher response
      cipherModeSetting := cs_CipherModeSetting(p_StartCiph) // cipher mode setting
    }
  };

  template (value) L2DataReqType cs_G_LocationUpdatingAccept(octetstring p_PLMN,
                                                             octetstring p_LAC,
                                                             template (omit) MobileIdentity p_MS_Id) :=
  { /* MM LOCATION UPDATING ACCEPT n -> ms
       3G TS 24.008 V3.4.0  cl. 9.2.13
       (1) In messages sent from the network bits 7 and 8 are "0" (see 3G TS 24.008 cl. 10.4). */
    /* @status    APPROVED */
    locUpdAccept := cs_LocUpdAcp_Common (p_PLMN, p_LAC, p_MS_Id, omit)
  };

  template EstablishIndType cr_G_Imsi_DetachInd (template (present) MobileIdentity p_MobileIdentity := cr_MobileIdTMSI_lv (px_TMSI_Def)) :=
  { /* @status    APPROVED */
    imsiDetachInd := cr_IMSI_DetachInd_Common (-, p_MobileIdentity)  // @sic R5s120632 sic@
  };

  template (value) IMMEDIATEASSIGNMENT cs_ImmediateAssignment_Common(O1_Type p_L2PseudoLength := '2D'O,
                                                                     template (value) DedicatedModeOrTBF p_DedicatedModeOrTBF,
                                                                     template (omit)  ChannelDescr p_ChannelDescr,
                                                                     template (omit)  PacketChDescr p_PacketChDescr,
                                                                     template (value) ReqRef p_ReqRef,
                                                                     B6_Type p_TA,
                                                                     template (value) MobileAlloc p_MobileAlloc := cs_G_MobileAlloc,
                                                                     template (omit)  IARO p_RO := omit) :=
  { /* @status    APPROVED */
    l2PseudoLength  := p_L2PseudoLength,             // L2 pseudo length
    skipIndicator   := tsc_SkipIndicator,            // skip indicator
    rRProtocolDiscriminator := tsc_PD_RR,            // RR protocol discriminator
    msgType         := tsc_MT_ImmediateAssignment,   // message type
    dedicatedModeOrTBF := p_DedicatedModeOrTBF,      // dedicated mode or TBF   M BITSTRING [4] without IEI
    pageMode        := cs_G_PageModeIE,              // page mode   M BITSTRING [4] without IEI
    chDescr         := p_ChannelDescr,
    packetChDescr   := p_PacketChDescr,
    reqRef          := p_ReqRef,
    ta              := cs_G_TA (p_TA),               // timing advance        M OCTETSTRING [1] @sic R5s120587 sic@
    mobileAlloc     := p_MobileAlloc,
    startingTime    := omit,                         // starting time  O OCTETSTRING [3]
    iaroct          := p_RO                          // IA rest octets / frequency parameter, before time      M
  };

  template (value) IMMEDIATEASSIGNMENT cs_ImmediateAssignment(B10_Type p_ARFCN,
                                                              B3_Type p_TSC,
                                                              integer p_RR_RA,
                                                              RFN p_RR_RFN,
                                                              B6_Type p_TA) :=
  /* RR IMMEDIATE ASSIGNMENT  ntw -> ue/ms
     3GPP TS 44.018 clause  9.1.18
     The message has a fixed length of 23 octets. */
  /* @status    APPROVED */
    cs_ImmediateAssignment_Common(-,
                                  cs_G_DedicatedModeOrTBF,
                                  cs_G_ChannelDescr ('00101'B, '000'B, p_ARFCN, p_TSC),
                                  omit,
                                  cs_G_ReqRef (p_RR_RA, p_RR_RFN),
                                  p_TA);

  template (value) IMMEDIATEASSIGNMENT cs_P_ImmediateAssignment(B1_Type p_Downlink,
                                                                B10_Type p_ARFCN,
                                                                integer p_RR_RA,
                                                                template (value) RFN p_RR_RFN,
                                                                B6_Type p_TA,
                                                                template (value) IARO p_RO) :=
  /* @status    APPROVED */
    cs_ImmediateAssignment_Common(-,
                                  cs_G_TBFMode(p_Downlink),
                                  omit,
                                  cs_PacketChDescr(p_ARFCN),
                                  cs_G_ReqRef (p_RR_RA, p_RR_RFN),
                                  p_TA,
                                  -,
                                  p_RO);

  template LLCUnitDataIndType cr_G_AttachReq (template (present) AttachType p_AttachType,
                                              template (present) MobileIdentity p_MobId,
                                              template (present) RoutingAreaId p_RAI,
                                              template (present) KeySeq p_KeySeq,
                                              template (present) MS_RadioAccessCap_LV p_MS_RadioAccessCap := cr_MS_RadioAccessCapLVAny) :=
  { /* @status    APPROVED */
    attReq := cr_AttachReq_Common(p_AttachType,
                                  p_MobId,
                                  p_RAI,
                                  p_KeySeq,
                                  p_MS_RadioAccessCap)
  };

  template LLCUnitDataIndType cr_G_AttachReqWithIMSI (template (present)  AttachType p_AttachType,
                                                      template (present)  MobileIdentity p_MobId,
                                                      template (present)  RoutingAreaId p_RAI,
                                                      template TMSI_Status p_TMSI_Status := cr_TMSI_Status ('0'B)) :=
  { /* @status    APPROVED */
    attReq := cr_AttachReq_Common(p_AttachType,
                                  p_MobId,
                                  p_RAI,
                                  '111'B, // No key available
                                  -,
                                  omit, // No PTMSI
                                  -,
                                  p_TMSI_Status, // @sic R5s110279 sic@
                                  -,
                                  -,
                                  -,
                                  -,
                                  -,
                                  omit,
                                  omit)
  };

  template LLCUnitDataIndType cr_G_AttachReq_MSandUENetworkCap (template (present) AttachType p_AttachType,
                                              template (present) MobileIdentity p_MobId,
                                              template (present) RoutingAreaId p_RAI,
                                              template (present) KeySeq p_KeySeq,
                                              template (present) MS_RadioAccessCap_LV p_MS_RadioAccessCap := cr_MS_RadioAccessCapLVAny,
                                              template UE_NetworkCap p_UENetworkCap := cr_UENetworkCap_Any ('58'O) ifpresent) :=
  { /* @status    APPROVED */
    attReq := cr_AttachReq_Common(p_AttachType,
                                  p_MobId,
                                  p_RAI,
                                  p_KeySeq,
                                  p_MS_RadioAccessCap,
                                  -,
                                  -,
                                  -,
                                  -,
                                  -,
                                  -,
                                  -,
                                  p_UENetworkCap)
  };

  template (value) LLCUnitDataReqType cs_G_AttachAccept(template (value) AttachResult p_AttachRes,
                                                        template (value)  RoutingAreaId p_RAI,
                                                        template (omit) PTMSI_Signature p_PTMSIsig,
                                                        template (omit) MobileIdentity p_PTMSI,
                                                        template (omit) MobileIdentity p_TMSI) :=
  { /* As per default message in 51.010, clause 40.2.4 */
    /* @status    APPROVED */
    attAccept := cs_AttachAcc_Common (p_AttachRes, p_RAI, p_PTMSIsig, p_PTMSI, omit, p_TMSI) // @sic R5-123114 sic@
  };

  template LLCUnitDataIndType cr_G_AttachComplete :=
  { /* @status    APPROVED */
    attComplete := cr_AttachComplete_Common
  };

  template (value) LLCUnitDataReqType cs_G_AttachReject( RejCau p_Cause) :=
  { /* As per default message in 51.010, clause 40.2.4 */
    /* @status    APPROVED */
    attReject := cs_AttachRej_Common(p_Cause)
  };

  template (value) LLCUnitDataReqType cs_G_AuthAndCiphReq(template (value) RAND p_RAND,
                                                          template (value) CiphKeySeqNum p_CiphKeySeqNum,
                                                          template (value) GPRS_CipherAlg p_CipherAlg,
                                                          template (value) AUTN p_AUTN) :=
  { /* @status    APPROVED */
    autnCipherReq := cs_AuthAndCiphReq_Common(p_RAND, p_CiphKeySeqNum, p_CipherAlg, p_AUTN)
  };

  template LLCUnitDataIndType cr_G_AuthAndCiphFailureAny :=
  { /* @status    APPROVED */
    authCipherFail := cr_AuthAndCiphFailure_Common
  };

  template LLCUnitDataIndType cr_G_AuthAndCiphRsp (template AuthRsp p_AuthRsp,
                                                   template AuthRspExt p_AuthRspExt) :=
  { /* @status    APPROVED */
    authCipherResp := cr_AuthAndCiphRsp_Common (p_AuthRsp, p_AuthRspExt)
  };

  template LLCUnitDataIndType cr_G_DetachRequest(template DetachType p_Type,
                                                 template MobileIdentity p_Ptmsi,
                                                 template PTMSI_Signature p_Signature := cr_PTMSI_Signature2Any ifpresent) :=
  { /* @status    APPROVED */
    detachReq := cr_DetachReq_Common (p_Type, p_Ptmsi, p_Signature)
  };

  template LLCUnitDataIndType cr_G_RA_UpdReqAny (template (present) UpdateType p_UpdateType,
                                                 template (present) RoutingAreaId p_RAI,
                                                 template PTMSI_Signature p_PTMSISig,
                                                 template (present) KeySeq p_KeySeq) :=
  { /* @status    APPROVED */
    rauReq := cr_RAURequest_Common(p_UpdateType,
                                   p_RAI,
                                   p_PTMSISig,
                                   cr_TMSI_Status ('0'B),
                                   p_KeySeq)
  };

  template LLCUnitDataIndType cr_G_RA_UpdReqMSRadioAccessCap (template (present) UpdateType p_UpdateType,
                                                              template (present) RoutingAreaId p_RAI,
                                                              template PTMSI_Signature p_PTMSISig,
                                                              template (present) KeySeq p_KeySeq,
                                                              template (present) MS_RadioAccessCap_LV  p_MsRadioAccessCap,
                                                              template UE_NetworkCap p_UeNetworkCapability := cr_UENetworkCap_Any ('58'O)) :=
  { /* @status    APPROVED */
    rauReq := cr_RAURequest_Common(p_UpdateType,
                                   p_RAI,
                                   p_PTMSISig,
                                   cr_TMSI_Status ('0'B),
                                   p_KeySeq,
                                   p_MsRadioAccessCap,
                                   -,
                                   -,
                                   -,
                                   -,
                                   -,
                                   -,
                                   -,
                                   p_UeNetworkCapability)
  };

  template (value) LLCUnitDataReqType cs_G_RA_UpdAcc3(template (value) UpdateResult p_UpdateResult,
                                                      template (value) RoutingAreaId p_RAI,
                                                      template (omit) PTMSI_Signature p_PTMSIsig,
                                                      template (omit) MobileIdentity p_PTMSI,
                                                      template (omit) PDP_ContextStatus p_PDP_ContextStatus := omit,
                                                      template (omit) RequestedMS_Info p_ReqMSInfo := omit) :=
  { /* @status    APPROVED */
    rauAccept := cs_RA_UpdAcc_Common (p_UpdateResult,
                                      p_RAI,
                                      p_PTMSIsig,
                                      p_PTMSI,
                                      p_PDP_ContextStatus,      /* @sic R5s120570 Additional change sic@ */
                                      p_ReqMSInfo)
  };

  template (value) LLCUnitDataReqType cs_G_RAUpdReject(template (value) GMM_Cause p_RejectCause)  :=
  { /* @status    APPROVED */
    rauReject:= cs_RAUpdReject_Common (p_RejectCause)
  };

  template LLCUnitDataIndType cr_G_RA_UpdComplete(template EUTRAN_HO_Info p_EUTRAN_HO_Info := omit) :=
  { /* @status    APPROVED */
    rauComplete := cr_RAUpdComplete_Common(p_EUTRAN_HO_Info)
  };

  template LLCUnitDataIndType cr_G_ActPDP_ContextReqMO_Any :=
  { /* @status    APPROVED */
    actPDPContextReq := cr_ActPDP_ContextReqMO_Common (cr_QualityOfService_Any)
  };

  template (value) LLCUnitDataReqType cs_G_PDPContextAccept(TI p_TI,
                                                            template (value) LLC_SAPI p_LLC_SAPI,
                                                            template (value) QualityOfService p_QOS,
                                                            template (omit) PktDataProtoAddr p_PDP_Addr,
                                                            template (omit) ProtocolConfigOptions p_ProtoCfgOpt) :=
  { /* @status    APPROVED */
    actPDPAccept := cs_ActPDP_ContextAcpMT_Common (p_TI, p_LLC_SAPI, p_QOS, cs_RadioPriorityLow (omit), p_PDP_Addr, p_ProtoCfgOpt, omit)
  };

  template LLCUnitDataIndType cr_PacketData (template (present) octetstring p_Data):=
  { /* @status    APPROVED */
    data := {
      data := p_Data
    }
  };

  template (value) LLCUnitDataReqType cs_PacketData (template (value) octetstring p_Data := f_GetN_OctetsFromPRBS (0, 22)):=
  { // Default value is one RLC block
    /* @status    APPROVED */
    data := {
      data := p_Data
    }
  };

  template G_CPHY_CONFIG_CNF car_G_CPHY_Config_CNF :=
  { /* @status    APPROVED */
    None := true
  };

  template G_CPHY_CONFIG_CNF car_G_CL1_ComingFN_CNF :=
  { /* @status    APPROVED */
    comingFN        := ?        // the reduced frame number (FN modulo 42432) which is about 5 seconds later than current frame number and is able to carry L3 message
  };

  template (value) G_CPHY_CONFIG_REQ cas_G_CL1_ChangePowerLevel_REQ(GERAN_CellId_Type p_CellId,
                                                                    PhysicalChId p_PhyChId,
                                                                    TX_Power p_TX_Power) :=
  { /* @status    APPROVED */
    changePowerLevel := {
      cellId          := enum2int(p_CellId),
      physicalChId    := p_PhyChId,                    // Channel identifier
      txPower         := p_TX_Power                    // the new transmission power level. in dBuVemf()
    }
  };

  template (value) G_CPHY_CONFIG_REQ cas_G_CPHY_CONFIG_CreatePhyCh(GERAN_CellId_Type p_CellId,
                                                                   PhysicalChId p_PhyChId,
                                                                   ChannelCombination_Enum p_ChComb,
                                                                   template (value) FreqInfo p_FreqInfo,
                                                                   template (value) TN p_TimeSlot,
                                                                   template (value) TSC p_TSC,
                                                                   template (omit)  ChannelSpecificInfo p_ChSpecificPara := omit,
                                                                   TX_Power p_DownlinkPowerLevel,
                                                                   B1_Type p_BandIndicator) :=
  { /* @status    APPROVED */
    createPhyCh := {
      cellId          := enum2int(p_CellId),
      physicalChId    := p_PhyChId,                    // identifier of the physical channel created
      channelCombination := enum2int(p_ChComb),
      freqInfo        := p_FreqInfo,
      timeSlot        := p_TimeSlot,                   // the time slot number of the physical channel
      tSC             := p_TSC,
      channelSpecificPara := p_ChSpecificPara,
      txPower         := p_DownlinkPowerLevel,
      bandIndicator   := p_BandIndicator
    }
  };

  template (value) G_CPHY_CONFIG_REQ cas_CreateGPRSCh(GERAN_CellId_Type p_CellId,
                                                      PhysicalChId p_PhyChId,
                                                      ChannelCombination_Enum p_ChComb,
                                                      template (value) FreqInfo p_FreqInfo,
                                                      template (value) TN p_TimeSlot,
                                                      template (value) TSC p_TSC,
                                                      TX_Power p_DownlinkPowerLevel,
                                                      B1_Type p_BandIndicator) :=
  /* @status    APPROVED */
    cas_G_CPHY_CONFIG_CreatePhyCh(p_CellId, p_PhyChId, p_ChComb, p_FreqInfo, p_TimeSlot, p_TSC, -, p_DownlinkPowerLevel, p_BandIndicator);

  template (value) G_CPHY_CONFIG_REQ cas_CombinedCellControlCh(GERAN_CellId_Type p_CellId,
                                                               PhysicalChId p_PhyChId,
                                                               ChannelCombination_Enum p_ChComb, // := CombinedControlCH,
                                                               B10_Type p_BCCHFreq,
                                                               TSC p_TSC,
                                                               template (value) ChannelSpecificInfo p_ChSpecificPara,
                                                               TX_Power p_DownlinkPowerLevel,
                                                               B1_Type p_BandIndicator) :=
  /* FCCH + SCH + BCCH + CCCH + SDCCH/4(0..3) + SACCH/C4(0..3) */
  /* @status    APPROVED */
    cas_G_CPHY_CONFIG_CreatePhyCh(p_CellId, p_PhyChId, p_ChComb, cs_FreqInfo(p_BCCHFreq), tsc_TN0, p_TSC, p_ChSpecificPara, p_DownlinkPowerLevel, p_BandIndicator);

  template (value) G_CPHY_CONFIG_REQ cas_CreateTCH(GERAN_CellId_Type p_CellId,
                                                   PhysicalChId p_PhyChId,
                                                   ChannelCombination_Enum p_ChComb,
                                                   template (value) FreqInfo p_FreqInfo,
                                                   template (value) TN p_TimeSlot,
                                                   template (value) TSC p_TSC,
                                                   template (value) DedCH_Info p_DedChInfo,
                                                   TX_Power p_DownlinkPowerLevel,
                                                   B1_Type p_BandIndicator) :=
  /* TCH/F + FACCH/F + SACCH/F */
  /* @status    APPROVED */
    cas_G_CPHY_CONFIG_CreatePhyCh(p_CellId, p_PhyChId, p_ChComb, p_FreqInfo, p_TimeSlot, p_TSC, cs_ChSpecificPara(p_DedChInfo, omit), p_DownlinkPowerLevel, p_BandIndicator);

  template (value) G_CPHY_CONFIG_REQ cas_G_CL1_CipheringControl_REQ(GERAN_CellId_Type p_CellId,
                                                                    PhysicalChId p_PhyCh,
                                                                    B1_Type p_CiphMode) :=
  { /* @status    APPROVED */
    cipheringControl := {
      cellId          := enum2int(p_CellId),
      physicalChId    := p_PhyCh,                      // Channel Identifier
      rcvCipherMode   := p_CiphMode                    // Ciphering Mode in SS receiving direction: 0 -> not ciphered, 1 -> ciphered
    }
  };

  template (value) G_CPHY_CONFIG_REQ cas_G_CL1_CreateCell_REQ(GERAN_CellId_Type p_CellId,
                                                              B3_Type p_NCC,
                                                              B3_Type p_BCC,
                                                              O1_Type p_TA) :=
  { /* @status    APPROVED */
    createCell := {
      cellId          := enum2int(p_CellId),
      baseId          := p_NCC & p_BCC,
      timingAdvance   := oct2bit( p_TA)
    }
  };

  template (value) G_CPHY_CONFIG_REQ cas_G_CL1_CipherModeModify_REQ(GERAN_CellId_Type p_CellId,
                                                                    PhysicalChId p_PhyCh,
                                                                    G_LogicChType p_LogCh,
                                                                    SubChannelNumber p_SubCh,
                                                                    template (value) CipherModeSetting p_CipherMode) :=
  { /* @status    APPROVED */
    cipherModeModify := {
      cellId          := enum2int(p_CellId),
      physicalChId    := p_PhyCh,                      // Channel identifier
      g_LogicChType   := p_LogCh,
      subChannel      := p_SubCh,                      // Valid only for logical channel types: TCH/H, FACCH/H, SACCH/TH, SDCCH/8, SACCH/C8, SDCCH/4, and SACCH/C4. For TCH/H, FACCH/H and SACCH/TH value is (0..1); For SDCCH/8 and SACCH/C8 value is (0..7); for SDCCH/4 and SACCH/C4 value is (0..3). This field is not applicable and the SS shall ignore it if this field is coded as 15.
      cipherMode      := p_CipherMode                  // the new cipher mode. definition see 3GPP TS 44.018 section 10.5.2.9
    }
  };

  template (value) G_CPHY_CONFIG_REQ cas_G_CL1_DeleteCell_REQ(GERAN_CellId_Type p_CellId) :=
  { /* @status    APPROVED */
    deleteCell := {
      cellId := enum2int(p_CellId)
    }
  };

  template (value) G_CPHY_CONFIG_REQ cas_G_CL1_DeleteChannel_REQ(GERAN_CellId_Type p_CellId,
                                                                 PhysicalChId p_PhyChId) :=
  { /* @status    APPROVED */
    deleteChannel := {
      cellId          := enum2int(p_CellId),
      physicalChId    := p_PhyChId                     // identifier of the physical channel or the multi-slot configuration to be deleted
    }
  };

  template (value) G_L2_DATAMESSAGE_REQ cas_G_Paging_REQ(GERAN_CellId_Type p_CellId,
                                                                PAGING_GROUP p_PagingGroup,
                                                                template (value) PagingReqType p_Msg) :=
  { /* @status    APPROVED */
    page := {
      cellId          := enum2int(p_CellId),
      sAPI            := 0,
      physicalChId    := 0,                            // Channel identifier of the right CCCH_GROUP or PCCCH_GROUP
      g_LogicChType   := tsc_PCH,                      // PCH
      pAGING_GROUP    := p_PagingGroup,                // INTEGER
      pagingMode      := 0,                            // 0 -- normal paging; 1-- exteded paging; 3 -- paging reorganization
      msg             := p_Msg                         // paging message  to be sent
    }
  };

  template (value) G_L2_DATAMESSAGE_REQ cas_GPRS_Paging_REQ(GERAN_CellId_Type p_CellId,
                                                            PAGING_GROUP p_PagingGroup,
                                                            integer p_PGcode,
                                                            template (value) PagingReqType p_Msg) :=
  { /* @status    APPROVED */
    pageGPRS := {
      cellId          := enum2int(p_CellId),
      sAPI            := 0,                            // 0
      physicalChId    := 0,                            // Channel identifier of the right CCCH_GROUP or PCCCH_GROUP
      g_LogicChType   := tsc_PCH,                      // PCH
      pAGING_GROUP    := p_PagingGroup,                // INTEGER
      pagingMode      := 0,                            // 0 -- normal paging; 1-- exteded paging; 3 -- paging reorganization
      splitPGcycleCode := p_PGcode,                    // 0 -- No Split Paging, 1..32 -- Split Paging
      msg             := p_Msg                         // paging message  to be sent
    }
  };

  template (value) G_L2_DATAMESSAGE_REQ cas_SysInfo_Common(GERAN_CellId_Type p_CellId,
                                                           PhysicalChId p_PhyCh := tsc_PhyCh0,
                                                           G_LogicChType p_LogicChType := tsc_BCCH,
                                                           integer p_InstanceIndex := 0,
                                                           B1_Type p_BCCHExt := '0'B,
                                                           template (value) SysInfoMsg p_SysInfoMsg) :=
  { /* @status    APPROVED */
    si := {
      cellId          := enum2int(p_CellId),
      sAPI            := tsc_SAPI_0,                   // 0
      physicalChId    := p_PhyCh,                      // Channel identifier
      g_LogicChType   := p_LogicChType,
      instanceIndex   := p_InstanceIndex,
      bCCHExt         := p_BCCHExt,                    // '0' indicates message sent on BCCH Norm
                                                       // '1' indicates message sent on BCCH Ext.  Only valid for SI2quater, 7, 8, 13, 16, 17.  Default value '0'.
      msg             := p_SysInfoMsg
    }
  };

  template (value) G_L2_DATAMESSAGE_REQ cas_SysInfo1(GERAN_CellId_Type p_CellId,
                                                     template (value) SYSTEMINFORMATIONTYPE1 p_SI1) :=
    /* @status    APPROVED */
    cas_SysInfo_Common(p_CellId, -, -, -, -, {si1 := p_SI1 });

  template (value) G_L2_DATAMESSAGE_REQ cas_SysInfo2(GERAN_CellId_Type p_CellId,
                                                     template (value) SYSTEMINFORMATIONTYPE2 p_SI2) :=
    /* @status    APPROVED */
    cas_SysInfo_Common(p_CellId, -, -, -, -, {si2 := p_SI2 });

  template (value) G_L2_DATAMESSAGE_REQ cas_SysInfo2bis(GERAN_CellId_Type p_CellId,
                                                        integer p_InstanceIndex,
                                                        template (value) SYSTEMINFORMATIONTYPE2bis p_SI2bis) :=
    /* @status    APPROVED */
    cas_SysInfo_Common(p_CellId, -, -, p_InstanceIndex, -, {si2bis := p_SI2bis });

  template (value) G_L2_DATAMESSAGE_REQ cas_SysInfo2quater(GERAN_CellId_Type p_CellId,
                                                           integer p_InstanceIndex,
                                                           template (value) SYSTEMINFORMATIONTYPE2quater p_SI2quater) :=
    /* @status    APPROVED */
    cas_SysInfo_Common(p_CellId, -, -, p_InstanceIndex, -, {si2quater := p_SI2quater });

  template (value) G_L2_DATAMESSAGE_REQ cas_SysInfo3(GERAN_CellId_Type p_CellId,
                                                     template (value) SYSTEMINFORMATIONTYPE3 p_SI3) :=
    /* @status    APPROVED */
    cas_SysInfo_Common(p_CellId, -, -, -, -, {si3 := p_SI3 });

  template (value) G_L2_DATAMESSAGE_REQ cas_SysInfo4(GERAN_CellId_Type p_CellId,
                                                     template (value) SYSTEMINFORMATIONTYPE4 p_SI4) :=
    /* @status    APPROVED */
    cas_SysInfo_Common(p_CellId, -, -, -, -, {si4 := p_SI4 });

  template (value) G_L2_DATAMESSAGE_REQ cas_SysInfo5(GERAN_CellId_Type p_CellId,
                                                     PhysicalChId p_PhyCh,
                                                     G_LogicChType p_LogicChType,
                                                     template (value) SYSTEMINFORMATIONTYPE5 p_SI5) :=
    /* @status    APPROVED */
    cas_SysInfo_Common(p_CellId, p_PhyCh, p_LogicChType, -, -, {si5 := p_SI5 });

  template (value) G_L2_DATAMESSAGE_REQ cas_SysInfo5bis(GERAN_CellId_Type p_CellId,
                                                        PhysicalChId p_PhyCh,
                                                        G_LogicChType p_LogicChType,
                                                        template (value) SYSTEMINFORMATIONTYPE5bis p_SI5bis) :=
    /* @status    APPROVED */
    cas_SysInfo_Common(p_CellId, p_PhyCh, p_LogicChType, -, -, {si5bis := p_SI5bis });

  template (value) G_L2_DATAMESSAGE_REQ cas_SysInfo6(GERAN_CellId_Type p_CellId,
                                                     PhysicalChId p_PhyCh,
                                                     G_LogicChType p_LogicChType,
                                                     template (value) SYSTEMINFORMATIONTYPE6 p_SI6) :=
    /* @status    APPROVED */
    cas_SysInfo_Common(p_CellId, p_PhyCh, p_LogicChType, -, -, {si6 := p_SI6 });

  template (value) G_L2_DATAMESSAGE_REQ cas_SysInfo13(GERAN_CellId_Type p_CellId,
                                                      B1_Type p_BCCHExt,
                                                      template (value) SYSTEMINFORMATIONTYPE13 p_SI13) :=
    /* @status    APPROVED */
    cas_SysInfo_Common(p_CellId, -, -, -, p_BCCHExt, {si13 := p_SI13 });

  template (value) G_L2_DATAMESSAGE_REQ cas_SysInfo15(GERAN_CellId_Type p_CellId,
                                                      template (value) SYSTEMINFORMATIONTYPE15 p_SI15) :=
    /* @status    APPROVED */
    cas_SysInfo_Common(p_CellId, -, -, -, -, {si15 := p_SI15 });

  template G_L2_DATAMESSAGE_IND car_G_L2_ACCESS_IND(GERAN_CellId_Type p_CellId,
                                                    template (present) PhysicalChId p_PhysicalChId,
                                                    template (present) G_LogicChType p_G_LogicChType,
                                                    template (present) SubChannelNumber p_SubCN,
                                                    template (present) RFN p_RFN,
                                                    template (present) AccessIndType p_Burst) :=
  { /* @status    APPROVED */
    access := {
      cellId          := enum2int(p_CellId),
      physicalChId    := p_PhysicalChId,               // Channel identifier
      g_LogicChType   := p_G_LogicChType,
      subChannel      := p_SubCN,                      // Valid only for logical channel types: FACCH/H, SDCCH/8 and SDCCH/4.This field is not applicable and the SS shall ignore it if this field is coded as 15.
      rfn             := p_RFN,                        // The reduced frame number of the frame carrying the burst
      burst           := p_Burst                       // random access burst or handover access burst
    }
  };

  template (value) G_L2_DATAMESSAGE_REQ cas_G_L2_Release_REQ(GERAN_CellId_Type p_CellId,
                                                             PhysicalChId p_PhyId,
                                                             G_LogicChType p_LogType,
                                                             SubChannelNumber p_SubchNo) :=
  { /* This ASP requests L2 to send Layer 2 DISC command on the indicated SAPI. */
    /* @status    APPROVED */
    rel := {
      cellId          := enum2int(p_CellId),
      sAPI            := tsc_SAPI_0,
      physicalChId    := p_PhyId,                      // Channel identifier
      g_LogicChType   := p_LogType,
      subChannel      := p_SubchNo,                    // For SDCCH/8, SACCH/C8 value is (0..7); for SDCCH/4, and SACCH/C4 value is (0..3).
                                                       // This field is not applicable and the SS shall ignore it if this field is coded as 15.
      releaseMode     := '1'B                          // 0-normal release, 1-local release
    }
  };

  template G_L2_DATAMESSAGE_IND car_G_L2_Release_CNF :=
  { /* The ASP from L2, indicates that the multiple frame operation release was successful.
       This means that the UA message was received in response to L2 DISC command. */
    /* @status    APPROVED */
    relCnf := {
      cellId          := ?,
      sAPI            := ?,
      physicalChId    := ?,                            // Channel identifier
      g_LogicChType   := ?,
      subChannel      := ?,                            // For SDCCH/8, SACCH/C8 value is (0..7); for SDCCH/4, and SACCH/C4 value is (0..3).
                                                       // This field is not applicable and the SS shall ignore it if this field is coded as 15.
      releaseMode     := ?                             // 0-normal release, 1-local release
    }
  };

  template (value) G_L2_DATAMESSAGE_REQ cas_G_L2_DATA_REQ(GERAN_CellId_Type p_CellId,
                                                          SAPI p_SAPI,
                                                          PhysicalChId p_PhyId,
                                                          G_LogicChType p_LogType,
                                                          SubChannelNumber p_SubchNo,
                                                          template (value) RFN p_RFN,
                                                          template (value) L2DataReqType p_Msg) :=
  { /* The ASP is used to send L3 signalling message on the signalling channels or user data on the traffic channels to the UE/MS in acknowledged mode.
       Parameter fn is only used in the test cases which requires specific L3 message to be sent on specified frame number */
    /* @status    APPROVED */
    l3 := {
      cellId          := enum2int(p_CellId),
      sAPI            := p_SAPI,                       // 0
      physicalChId    := p_PhyId,                      // Channel identifier
      g_LogicChType   := p_LogType,
      subChannel      := p_SubchNo,                    // Valid only for logical channel types: TCH/H, FACCH/H, SACCH/TH, SDCCH/8, SACCH/C8, SDCCH/4, and SACCH/C4. For TCH/H, FACCH/H and SACCH/TH value is (0..1); for SDCCH/8 and SACCH/C8 value is (0..7); for SDCCH/4 and SACCH/C4 value is (0..3).
      rfn             := p_RFN,                        // The reduced frame number of the first frame on which this message is sent.If the field t2 of rfn is coded as '11111'B lower layer shall ignore this field.
      msg             := p_Msg                         // Signalling message or user data to be sent
    }
  };

  template (value) G_L2_DATAMESSAGE_REQ cas_G_L2_UNITDATA_REQ(GERAN_CellId_Type p_CellId,
                                                              PhysicalChId p_PhysicalChId,
                                                              G_LogicChType p_G_LogicChType,
                                                              SubChannelNumber p_SubCN,
                                                              template (value) RFN p_RFN,
                                                              template (value) L2UnitDataReqType p_Msg) :=
  { /* @status    APPROVED */
    unit := {
      cellId          := enum2int(p_CellId),
      sAPI            := tsc_SAPI_0,                            // 0
      physicalChId    := p_PhysicalChId,               // Channel identifier
      g_LogicChType   := p_G_LogicChType,
      subChannel      := p_SubCN,                      // Valid only for logical channel types: TCH/H, FACCH/H, SACCH/TH, SDCCH/8, SACCH/C8, SDCCH/4, and SACCH/C4. For TCH/H, FACCH/H and SACCH/TH value is (0..1); for SDCCH/8 and SACCH/C8 value is (0..7); for SDCCH/4 and SACCH/C4 value is (0..3).
      rfn             := p_RFN,                        // The reduced frame number of the first frame on which this message is sent.If the field t2 of rfn is coded as '11111'B lower layer shall ignore this field.
      msg             := p_Msg                         // @sic GP-110839 sic@
    }
  };

  template G_L2_DATAMESSAGE_IND car_G_L2_Release_IND_Any :=
  { /* The ASP is used to receive an indication of the termination of an established multiple frame operation or an indication of an unsuccessful establishment attempt. */
     /* @status    APPROVED */
   relInd := {
    cellId          := ?,
    sAPI            := ?,                            // 0
    physicalChId    := ?,                            // Channel identifier
    g_LogicChType   := ?,
    subChannel      := ?,                            // Valid only for logical channel types: TCH/H, FACCH/H, SACCH/TH, SDCCH/8, SACCH/C8, SDCCH/4, and SACCH/C4. For TCH/H, FACCH/H and SACCH/TH value is (0..1); for SDCCH/8 and SACCH/C8 value is (0..7); for SDCCH/4 and SACCH/C4 value is (0..3).
    release_Mode    := ?,                            // 0 = normal release; 1 = local end release
    outstanding_Indicator := ?                       // whether or not there are outstanding acknowledgements or unsolved G_L2_DATA_REQ primitives.
   }
  };

  template G_L2_DATAMESSAGE_IND car_G_L2_DATA_IND(GERAN_CellId_Type p_CellId,
                                                  template SAPI p_SAPI,
                                                  template PhysicalChId p_PhyId,
                                                  template G_LogicChType p_LogType,
                                                  template SubChannelNumber p_SubchNo,
                                                  template RFN p_RFN,
                                                  template L2DataIndType p_Msg) :=
  { /* The ASP is used to receive a L3 signalling message on the signalling channels or user data on the traffic channels from the UE/MS in acknowledged mode. */
    /* @status    APPROVED */
    l3 := {
      cellId          := enum2int(p_CellId),
      sAPI            := p_SAPI,                       // 0
      physicalChId    := p_PhyId,                      // Channel identifier
      g_LogicChType   := p_LogType,
      subChannel      := p_SubchNo,                    // Valid only for logical channel types: TCH/H, FACCH/H, SACCH/TH, SDCCH/8, SACCH/C8, SDCCH/4, and SACCH/C4. For TCH/H, FACCH/H and SACCH/TH value is (0..1); for SDCCH/8 and SACCH/C8 value is (0..7); for SDCCH/4 and SACCH/C4 value is (0..3).
      rfn             := p_RFN,                        // The reduced frame number of the first frame on which this message is received
      msg             := p_Msg                         // Signalling message or user data received
    }
  };

  template (value) G_CPHY_CONFIG_REQ cas_G_CL2_MeasRptControl_REQ(GERAN_CellId_Type p_CellId,
                                                                  PhysicalChId p_PhyCh,
                                                                  G_LogicChType p_LogCh,
                                                                  SubChannelNumber p_SubCh,
                                                                  boolean p_OnOff) :=
  { /* @status    APPROVED */
    measReportCtrl := {
      cellId          := enum2int(p_CellId),
      physicalChId    := p_PhyCh,                      // Channel identifier
      g_LogicChType   := p_LogCh,                      // Valid only for lofical channel types: SACCH/TF, SACCH/TH, SACCH/C8 and SACCH/C4
      subChannel      := p_SubCh,                      // For SACCH/TH value is (0..1), for SACCH/C8 value is (0..7) and for SACCH/C4 value is (0..3)
      sendMeasRpts    := p_OnOff                       // Whether or not to report received Measurement Reports to the TTCN
    }
  };

  template G_RLC_DATAMESSAGE_IND car_G_RLC_ControlMsg_IND(GERAN_CellId_Type p_CellId,
                                                          template PhysicalChId p_PhyChId,
                                                          template GRLCCntrlMsgIndType p_Msg) :=
  { /* @status    APPROVED */
    ctrl := {
      cellId          := enum2int(p_CellId),
      physicalChId    := p_PhyChId,                    // Channel identifier
      g_LogicChType   := tsc_PACCH_F,                  // PCCCH or PACCH or PTCCH
      tBF_Direction   := ?,                            // 0 -- downlink; 1 -- uplink
      tFI             := ?,                            // temporary flow identity
      rfn             := ?,                            // the reduced frame number of the frame carrying this message
      msg             := p_Msg                         // uplink RLC/MAC control message
    }
  };

  template (value) G_RLC_CONFIG_REQ cas_G_CRLC_CreateRLC_MAC_REQ(GERAN_CellId_Type p_CellId) :=
  { /* The ASP is used to create a RLC/MAC entity in GERAN RLC/MAC emulation module.
       One RLC/MAC entity per cell can exist, cellId will be used for couping LLC layer module to the RLC/MAC emulation module.
       The packet channel description given in the ChannelSpecificInfo of G_CL1_CreateBasicPhyCh_REQ shall be used to configure this layer.
       This ASP shall be called after the G_CL1_CreateBasicPhyCh_REQ ASP. */
    /* @status    APPROVED */
    createRLC := {
      cellId          := enum2int(p_CellId)                      // The identifier of the cell
    }
  };

  template (value) G_RLC_DATAMESSAGE_REQ cas_G_RLC_ControlMsg_REQ_PACCH(GERAN_CellId_Type p_CellId,
                                                                        PhysicalChId p_PhyChId,
                                                                        integer p_Dir,
                                                                        B5_Type p_TFI,
                                                                        template (value) GRLCCntrlMsgReqType p_Msg) :=
  { /* The constraint is used to transmitt the down link RLC/MAC control message to the UE/MS on PCCCH channel. */
    /* @status    APPROVED */
    ctrl := {
      cellId := enum2int(p_CellId),
      physicalChId := p_PhyChId, //PACCH
      g_LogicChType := tsc_PACCH_F,
      tBF_Direction := p_Dir, //0 -- downlink; 1 -- uplink
      tFI := p_TFI, // relative reserved block period
      rRBP := '00'B, //supplementary/polling bit
      s_P_Bit := '0'B, //The reduced frame number of the first frame on which this message is sent.If the field t2 of rfn is coded as '11111'B lower layer shall ignore this field.
      rfn := cs_G_RFN_Omit,//for message other than PACKET PAGING REQUEST this field shall be omitted
      pagingGroup := omit,// 0 -- normal paging;1-- exteded paging;3 -- paging reorganization.this field is valid only for PACKET PAGING REQUEST control message, for message other than PACKET PAGING REQUEST this field shall be omitted
      pagingMode := tsc_NormalPaging, //Signalling message or user data to be sent
      msg := p_Msg
    }
  };

  template G_RLC_CONFIG_CNF car_G_RLC_Config_CNF := {};  /* @status    APPROVED */

  template G_LLC_CONFIG_CNF car_G_CLLC_Config_CNF := {};  /* @status    APPROVED */

  template G_L2_DATAMESSAGE_IND car_G_L2_Estab_IND(GERAN_CellId_Type p_CellId,
                                                   template PhysicalChId p_PhysicalChId,
                                                   template G_LogicChType p_G_LogicChType,
                                                   template SubChannelNumber p_SubCN,
                                                   template EstablishIndType p_Msg) :=
  { /* @status    APPROVED */
    sabm := {
      cellId          := enum2int(p_CellId),
      physicalChId    := p_PhysicalChId,               // Channel identifier
      g_LogicChType   := p_G_LogicChType,
      subChannel      := p_SubCN,                      // Valid only for logical channel types: FACCH/H, SDCCH/8 and SDCCH/4,This field shall be coded as 15 if it is not applicable.
      sAPI            := 0,                            // 0
      establish_mode  := ?,                            // Norm
      rfn             := ?,
      msg             := p_Msg                         // this field is present only when the establidg mode is CoRes (collision resolution)
    }
  };

  template G_LLC_DATAMESSAGE_IND car_G_LLC_UnitData_IND(template LLCUnitDataIndType p_Msg,
                                                        template (present) integer p_SAPI := ?) :=
  { /* The ASP is used to receive an L3 PDU from the UE/MS in LLC unconfirmed transmission.
       3GPP TS 44.064 clause 8.4.2 */
    /* @status    APPROVED */
    unit := {
      lLMEId          := ?,  // @sic R5s120572 sic@
      tLLI            := ?,                            // temporary logical link identifier
      sAPI            := p_SAPI,
      msg             := p_Msg                         // L3 PDU
    }
  };

  template (value) G_LLC_DATAMESSAGE_REQ cas_G_LLC_UnitData_Req(TLLI p_TLLI,
                                                                SAPI p_Sapi,
                                                                B1_Type p_ProtectMode,
                                                                B1_Type p_CipherMode,
                                                                template (value) LLCUnitDataReqType p_Msg,
                                                                integer p_LLMEId := 1) :=
  { /* The ASP is used to transmit an L3 PDU to the UE/MS in LLC unconfirmed transmission.
       3GPP TS 44.064 clause 8.4.1 */
    /* @status    APPROVED */
    unit := {
      lLMEId          := p_LLMEId,   // @sic R5s120572 sic@
      tLLI            := p_TLLI,                       // temporary logical link identifier
      sAPI            := p_Sapi,
      protectMode     := p_ProtectMode,                // 0 -- unprotected; 1 -- protected
      cipherMode      := p_CipherMode,                 // 0 -- no encryption; 1 -- encrypted
      msg             := p_Msg                         // L3 PDU
    }
  };

  template G_LLC_DATAMESSAGE_IND car_G_LLC_XID_IndAny :=
  { /* The ASP is used to receive the XID requested by the UE/MS. */
    /* @status    APPROVED */
    xid := {
      lLMEId          := ?,
      tLLI            := ?,                            // temporary logical link identifier
      sAPI            := ?,
      xID_Info        := ?                             // the XID parameters requested by the UE/MS
    }
  };

  template (value) G_LLC_DATAMESSAGE_REQ cas_G_LLC_XID_Res(TLLI p_TLLI,
                                                           SAPI p_SAPI,
                                                           template (omit) XID_Info p_XID_Info,
                                                           integer p_LLMEId := 1) :=
  { /* The ASP is used to send to the UE/MS  the negotiated XID parameters agreed by the SS. */
    /* @status    APPROVED */
    xid := {
      lLMEId          := p_LLMEId,   // @sic R5s120572 sic@
      tLLI            := p_TLLI,                       // temporary logical link identifier
      sAPI            := p_SAPI,
      xID_Info        := p_XID_Info                    // the negotiated XID parameters agreed by the SS
    }
  };

  template (value) G_RLC_CONFIG_REQ cas_ActivateTBF_UplinkDyn(GERAN_CellId_Type p_CellId,
                                                              integer p_USFRate) :=
  { /* the ASP is used to configure a TBF used for uplink data transfer
       For GPRS channel coding can be: CS-1, CS-2, CS-3 and CS-4;For EGPRS channel coding can be:
       MCS-1, MCS-2, MCS-3, MCS-4, MCS-5, MCS-6, MCS-7, MCS-8, MCS-9, MCS-5-7 and MCS-6-9. */
    /* @status    APPROVED */
    ulTBFConfig := {
      cellId          := enum2int(p_CellId),
      tFI             := tsc_UplinkTFI,
      tBF_Mode        := '0'B,                         // 0 - GPRS; 1 - EGPRS
      channelCoding   := 1,                            // CS-1
      tLLI_BlockChannelCoding := '1'B,                 // 0 - CS-1 or MCS-1(EGPRS); 1 - same as channelCoding
      rLC_Mode        := '0'B,                         // 0 - acknowledged mode; 1 - unacknowledged mode
      startingTime    := cs_G_RFN_Omit,                // This field is not applicable and the SS shall ignore it if the field t2 of rfn is coded as '11111'B.
      uSF_Rate        := p_USFRate,                    // This parameter controls the speed of the UL TBF transferring data blocks by controlling the USF rate:
                                                       // 1---> implementation dependent. TTCN does not specify the USF generating rate;
                                                       // 2---> 10 USF's per second;
                                                       // 3---> 5 USF's per second;
                                                       // 4---> 1 USF per second;
                                                       // 5---> 1 USF per 2 seconds;
                                                       // 6---> 1 USF per 3 seconds;
                                                       // 7---> 1 USF per 4 seconds
      dynamicAllocation := cs_DynamicAllocation
    }
  };

  template (value) G_LLC_CONFIG_REQ cas_G_CLLC_Assign_Req(GERAN_CellId_Type p_CellId,
                                                          TLLI p_OldTLLI,
                                                          TLLI p_NewTLLI,
                                                          GPRS_CipherAlg p_CipherAlg,
                                                          B64_Type p_CipherKey) :=
  { /* The constraint is used to assign the TLLI, the cipher key (Kc) and the cipher algorithm of GERAN LLC emulator module. */
    /* @status    APPROVED */
    assign := {
      cellId          := enum2int(p_CellId),
      oldTLLI         := p_OldTLLI,                    // OCTETSTRING[4]
      newTLLI         := p_NewTLLI,
      cipherKey       := p_CipherKey,
      cipherAlgorithm := p_CipherAlg                   // BITSTRING[3], 3GPP TS 24.008 section 10.5.5.3
    }
  };

  template (value) G_LLC_CONFIG_REQ cas_G_CLLC_CreateLLE_REQ(GERAN_CellId_Type p_CellId,
                                                             integer p_LLMEId := 1) :=
  { /* The ASP is used to create an LLE (LLC Entity) in GERAN LLC emulation module.
       The RlcMacEntityId needs to be created prior to this by G_CRLC_CreateRLC_MAC_REQ ASP. */
    /* @status    APPROVED */
    createLLC := {
      lLMEId          := p_LLMEId,                // Logical Layer Management Entity Id @sic R5s120572 sic@
      rLC_MAC_MappingInfo := enum2int(p_CellId)   // This parameter indicates the RLC/MAC emulation module in the cell, not the cell itself.
    }
  };

  template (value) G_RLC_CONFIG_REQ cas_ActivateTBF_Downlink(GERAN_CellId_Type p_CellId,
                                                             PhysicalChId p_PhyChId,
                                                             integer p_USFRate) :=
  { /* @status    APPROVED */
    dlTBFConfig := {
      cellId          := enum2int(p_CellId),
      tFI             := tsc_DownlinkTFI,
      tBF_Mode        := '0'B,                         // 0 - GPRS; 1 - EGPRS
      channelCoding   := 1,
      rLC_Mode        := '0'B,                   // 0 - acknowledged mode; 1 - unacknowledged mode
      timeSlotAllocation := cs_TimeSlotAllocation_TN4 (p_PhyChId), // Downlink TBF time slot allocation
      startingTime    := cs_G_RFN_Omit,                // This field is not applicable and the SS shall ignore it if the field t2 of rfn is coded as '11111'B.
      dataBlockRate   := p_USFRate                     // This parameter controls the speed of the DL TBF transferring data blocks by controlling the USF rate:
                                                       // 1---> implementation dependent. TTCN does not specify the USF generating rate;
                                                       // 2---> 10 data blocks per second;
                                                       // 3---> 5 data blocks per second;
                                                       // 4---> 1 data block per second;
                                                       // 5---> 1 data block 2 seconds;
                                                       // 6---> 1 data block 3 seconds;
                                                       // 7---> 1 data block 4 seconds
    }
  };

  template (value) G_CPHY_CONFIG_REQ cas_G_CL1_ComingFN_REQ(GERAN_CellId_Type p_CellId,
                                                            PhysicalChId p_PhysicalChId,
                                                            G_LogicChType p_G_LogicChType) :=
  { /* @status    APPROVED */
    comingFN := {
      cellId          := enum2int(p_CellId),
      physicalChId    := p_PhysicalChId,               // Channel identifier
      g_LogicChType   := p_G_LogicChType,
      subChannel      := omit                          // Valid only for logical channel types: TCH/H, FACCH/H, SACCH/TH, SDCCH/8, SACCH/C8, SDCCH/4, and SACCH/C4. For TCH/H, FACCH/H and SACCH/TH value is (0..1); for SDCCH/8 and SACCH/C8 value is (0..7); for SDCCH/4 and SACCH/C4 value is (0..3).
      // this field is not applicable and the SS shall ignore it if  this field is coded as 15
    }
  };

  template (value) L2UnitDataReqType cas_ImmAss (template (value) IMMEDIATEASSIGNMENT p_PDU) :=
  { /* @status    APPROVED */
    immedAss := p_PDU
  };

}
