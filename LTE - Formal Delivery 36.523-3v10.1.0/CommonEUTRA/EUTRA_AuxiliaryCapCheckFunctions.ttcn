/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2012, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3v10.1.0
// $Date: 2012-09-04 16:26:06 +0200 (Tue, 04 Sep 2012) $
// $Rev: 7315 $
/******************************************************************************/

module EUTRA_AuxiliaryCapCheckFunctions {

  import from CommonDefs all;
  import from EUTRA_Parameters all;

  function f_DeriveSuppEutraBandsFromPics() return bitstring
  {
    var bitstring v_Bitstring := f_ConvertBoolToBit(pc_eBand1_Supp) &
                                 f_ConvertBoolToBit(pc_eBand2_Supp) &
                                 f_ConvertBoolToBit(pc_eBand3_Supp) &
                                 f_ConvertBoolToBit(pc_eBand4_Supp) &
                                 f_ConvertBoolToBit(pc_eBand5_Supp) &
                                 f_ConvertBoolToBit(pc_eBand6_Supp) &
                                 f_ConvertBoolToBit(pc_eBand7_Supp) &
                                 f_ConvertBoolToBit(pc_eBand8_Supp) &
                                 f_ConvertBoolToBit(pc_eBand9_Supp) &
                                 f_ConvertBoolToBit(pc_eBand10_Supp) &
                                 f_ConvertBoolToBit(pc_eBand11_Supp) &
                                 f_ConvertBoolToBit(pc_eBand12_Supp) &
                                 f_ConvertBoolToBit(pc_eBand13_Supp) &
                                 f_ConvertBoolToBit(pc_eBand14_Supp) &
                                 '0'B &//Band 15 is reserved
                                 '0'B &//Band 16 is reserved
                                 f_ConvertBoolToBit(pc_eBand17_Supp) &
                                 f_ConvertBoolToBit(pc_eBand18_Supp) &
                                 f_ConvertBoolToBit(pc_eBand19_Supp) &
                                 f_ConvertBoolToBit(pc_eBand20_Supp) & // @sic R5-103122 sic@
                                 f_ConvertBoolToBit(pc_eBand21_Supp) & // @sic R5-103122 sic@
                                 f_ConvertBoolToBit(pc_eBand22_Supp) & // @sic R5-115190 sic@
                                 f_ConvertBoolToBit(pc_eBand23_Supp) & // @sic R5-113669 sic@
                                 f_ConvertBoolToBit(pc_eBand24_Supp) &  // @sic R5-112489 sic@
                                 f_ConvertBoolToBit(pc_eBand25_Supp) &  // @sic R5-113156 sic@
                                 f_ConvertBoolToBit(pc_eBand26_Supp) &  // @sic R5-121224 sic@
                                 '0'B &//Band 27
                                 '0'B &//Band 28
                                 '0'B &//Band 29
                                 '0'B &//Band 30
                                  '0'B &//Band 31
                                 '0'B &//Band 32
                                 f_ConvertBoolToBit(pc_eBand33_Supp) &
                                 f_ConvertBoolToBit(pc_eBand34_Supp) &
                                 f_ConvertBoolToBit(pc_eBand35_Supp) &
                                 f_ConvertBoolToBit(pc_eBand36_Supp) & //@sic R5s100020 sic@
                                 f_ConvertBoolToBit(pc_eBand37_Supp) &
                                 f_ConvertBoolToBit(pc_eBand38_Supp) &
                                 f_ConvertBoolToBit(pc_eBand39_Supp) &
                                 f_ConvertBoolToBit(pc_eBand40_Supp) &
                                 f_ConvertBoolToBit(pc_eBand41_Supp) & //@sic R5-106554 sic@
                                 f_ConvertBoolToBit(pc_eBand42_Supp) & //@sic R5-110537 sic@
                                 f_ConvertBoolToBit(pc_eBand43_Supp);  //@sic R5-110537 sic@
    return v_Bitstring;
  } // f_DeriveSuppEutraBandsFromPics

  function f_GetNrOfSuppEutraBands(bitstring p_Bitstring) return integer
  {
    var integer v_NrOfSuppEutraBands := 0;
    var integer i;

    for (i := 0; i < lengthof(p_Bitstring); i := i + 1) {
      if (f_Bitstring_BitIsSet(p_Bitstring, i)) {
        v_NrOfSuppEutraBands := v_NrOfSuppEutraBands + 1;
      }
    }
    return v_NrOfSuppEutraBands;
  } // f_GetNrOfSuppEutraBands

}
