/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2012, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3v10.1.0
// $Date: 2012-08-19 14:09:05 +0200 (Sun, 19 Aug 2012) $
// $Rev: 7121 $
/******************************************************************************/

module EUTRA_IRATFunctions {

  import from EUTRA_RRC_ASN1_Definitions language "ASN.1:1997" all;
  import from CommonDefs all;
  import from CommonIratDefs all;
  import from EUTRA_ASP_SrbDefs all;
  import from EUTRA_AspCommon_Templates all;
  import from EUTRA_CellInfo all;
  import from EUTRA_CommonDefs all;
  import from EUTRA_CommonProcedures all;
  import from EUTRA_Component all;
  import from EUTRA_NASSteps all;
  import from EUTRA_RRC_Templates all;
  import from EUTRA_SRB_Templates all;
  import from EUTRA_SecurityFunctions all;
  import from EUTRA_SecuritySteps all;
  import from NAS_AuthenticationCommon all;
  import from Parameters all;
  import from UTRAN_CapabilityFunctions all;

  function f_EUTRA_SendAuthCoOrdParameters (IRAT_CO_ORD_PORT p_Port,
                                            EUTRA_CellId_Type p_CellId,
                                            Common_AuthenticationParams_Type p_AuthParams,
                                            template (omit) Common_AuthenticationParams_Type p_AuthParamsCS := omit,
                                            template (omit) B20_Type p_StartPS := omit,
                                            template (omit) B20_Type p_StartCS := omit) runs on EUTRA_PTC
  {
    var GutiParameters_Type v_Guti_Params := f_EUTRA_CellInfo_GetGuti(p_CellId);
    
    p_Port.send (cms_IRAT_AuthInfo(p_AuthParams,
                                   p_AuthParamsCS,
                                   cs_IRAT_GUTIStuff (v_Guti_Params.MME_GroupId, v_Guti_Params.MME_Code, v_Guti_Params.M_TMSI),
                                   -,
                                   p_StartPS,
                                   p_StartCS)); //@sic R5-120764 sic@
  }

  function f_EUTRA_SendAuthParameters (EUTRA_CellId_Type p_CellId,
                                       IRAT_CO_ORD_PORT p_Port,
                                       boolean p_ForIdleMode := true,
                                       boolean p_SRVCCKeys  := false,
                                       template (omit) B20_Type p_StartPS := omit,
                                       template (omit) B20_Type p_StartCS := omit) runs on EUTRA_PTC
  {
    var EUTRA_SecurityParams_Type v_SecurityParams;
    var Common_AuthenticationParams_Type v_CommonAuthParams;
    var template (omit) Common_AuthenticationParams_Type v_CommonAuthParamsCS := omit;
    var B256_Type v_CkIk, v_CkIkSRVCC;
    var B128_Type v_CK,  v_CKSRVCC;
    var B128_Type v_IK,  v_IKSRVCC;
    var O4_Type v_DL_NAS_Count := f_EUTRA_SS_NAS_CountGetDLNext(); // @sic R5s110382 sic@
    var O4_Type v_UL_NAS_Count := f_EUTRA_SS_NAS_CountGetULNext(); // @sic R5s110382 sic@
    
    //Get latest security params...
    v_SecurityParams := f_EUTRA_Security_Get();
    //...and use them to update CK and IK
    
    if (p_ForIdleMode) {
      v_CkIk := f_EUTRA_Authentication_S1B(v_SecurityParams, v_UL_NAS_Count);
    } else {
      v_CkIk := f_EUTRA_Authentication_S16(v_SecurityParams, v_DL_NAS_Count);
    }
    
    v_CK := substr(v_CkIk, 0, 128);
    v_IK := substr(v_CkIk, 128, 128);
    
    v_CommonAuthParams := v_SecurityParams.AuthParams;
    v_CommonAuthParams.CK := v_CK;
    v_CommonAuthParams.IK := v_IK;
    //@sic R5-120637 enhancements for SRVCC sic@
    if (p_SRVCCKeys)
    {
      v_CkIkSRVCC := fl_EUTRA_Authentication_S1A(v_SecurityParams, v_UL_NAS_Count);
      v_CKSRVCC := substr(v_CkIkSRVCC, 0, 128);
      v_IKSRVCC := substr(v_CkIkSRVCC, 128, 128);
      v_CommonAuthParamsCS := cs_CommonAuthParams_Init(px_eAuthRAND);
      v_CommonAuthParamsCS.CK := v_CKSRVCC;
      v_CommonAuthParamsCS.IK := v_IKSRVCC;
      v_CommonAuthParamsCS.KeySeq := v_SecurityParams.AuthParams.KeySeq;
      }
    
    //Now send these over to the other RAT, but DON'T store them
    f_EUTRA_SendAuthCoOrdParameters (p_Port, p_CellId, v_CommonAuthParams, v_CommonAuthParamsCS, p_StartPS, p_StartCS); // @sic R5-120764 sic@
  }

  function f_EUTRA_Preamble_InterRAT (EUTRA_CellId_Type p_CellId,
                                      IDLEUPDATED_STATE_Type p_State,
                                      IRAT_CO_ORD_PORT p_Port,
                                      EUTRA_ATTACH_Type p_ForcedAttach := NORMAL) runs on EUTRA_PTC
  {
    // Do normal preamble
    f_EUTRA_Preamble (p_CellId, p_State, p_ForcedAttach);
    
    // then get latest security params and send them over
    f_EUTRA_SendAuthParameters (p_CellId, p_Port);
  }

  function f_EUTRA_InterRAT_InitialiseAuthParams (IRAT_CO_ORD_PORT p_Port) runs on EUTRA_PTC return boolean
  {
    var IRAT_Coordination_MSG v_RxdMsg;
    var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get();
    
    p_Port.receive (cmr_IRAT_AuthInfo) -> value v_RxdMsg;
    
    v_SecurityParams.AuthParams := v_RxdMsg.Authentication.AuthPS;
    f_EUTRA_Security_Set (v_SecurityParams);
    return v_RxdMsg.Authentication.CSinOtherRAT;
  }

  function f_EUTRA_GetOtherRAT() return charstring
  {
    select (px_RATComb_Tested) {
      case (EUTRA_UTRA) {
        return "UTRAN";
      }
      case (EUTRA_GERAN) {
        return "GERAN";
      }
      case else {
        return "NONE";
      }
    }
  }

  function f_EUTRA_NAS_InitIRATorEUTRAonly (EUTRA_NAS_NumOfPLMN_Type p_CellsOnSamePLMN,
                                            Combination_Type p_SibCombinationUTRANorGERAN := c10,
                                            Combination_Type p_SibCombinationEUTRAonly := c1,
                                            EUTRA_NAS_CellSpecialFreq p_CellSpecialFreq := LTE_NAS_NormalFreq) runs on EUTRA_PTC
  { /* NOTE: Consistency check of px_RATComb_Tested and pc_UTRA/pc_GERAN will be done at top-level */
    /* @sic R5-113805, R5-113696, R5-113734 sic@ */
    var charstring v_OtherRAT := f_EUTRA_GetOtherRAT();
    var Combination_Type v_Combination;

    if (v_OtherRAT == "NONE") {
      v_Combination := p_SibCombinationEUTRAonly;
    } else {
      v_Combination := p_SibCombinationUTRANorGERAN;
    }
    f_EUTRA_NAS_Init(p_CellsOnSamePLMN, v_Combination, p_CellSpecialFreq);
  }

  function f_EUTRA_SendTriggerToOtherRAT (boolean p_WaitForTrigger := false) runs on EUTRA_PTC
  { /* @sic R5s110232 sic@ */
    /* @sic R5-113805, R5-113696, R5-113734 sic@ */

    var charstring v_OtherRAT := f_EUTRA_GetOtherRAT();
    
    select (v_OtherRAT) {
      case ("UTRAN") {
        f_IRAT_SendCoOrd (UTRAN, cms_IRAT_Trigger);
        if (p_WaitForTrigger) {
          f_IRAT_WaitForCoOrd_Trigger(UTRAN); // wait for trigger from UTRAN side
        }
      }
      case ("GERAN") {
        f_IRAT_SendCoOrd (GERAN, cms_IRAT_Trigger);
        if (p_WaitForTrigger) {
          f_IRAT_WaitForCoOrd_Trigger(GERAN); // wait for trigger from GERAN side
        }
      }
      case else {
        // Do nothing
      }
    }
  }

  function f_EUTRA_PreambleOtherRAT (EUTRA_CellId_Type p_CellId,
                                     EUTRA_ATTACH_Type p_ForcedAttach := NORMAL,
                                     boolean p_WaitForTrigger := false,
                                     IDLEUPDATED_STATE_Type p_State := STATE2_IDLEUPDATE) runs on EUTRA_PTC
  { /* @sic R5-113805, R5-113696, R5-113734 sic@ */
    var charstring v_OtherRAT := f_EUTRA_GetOtherRAT();
    
    select (v_OtherRAT) {
      case ("UTRAN") {
        if (p_WaitForTrigger) {
          f_IRAT_WaitForCoOrd_Trigger(UTRAN); // wait for trigger from UTRAN side
        }
        f_EUTRA_Preamble_InterRAT(p_CellId, p_State, UTRAN, p_ForcedAttach);
      }
      case ("GERAN") {
        if (p_WaitForTrigger) {
          f_IRAT_WaitForCoOrd_Trigger(GERAN); // wait for trigger from GERAN side
        }
        f_EUTRA_Preamble_InterRAT(p_CellId, p_State, GERAN, p_ForcedAttach);
      }
      case else {
        f_EUTRA_Preamble(p_CellId, p_State, p_ForcedAttach);
      }
    }
  }

  function f_EUTRA_UTRA_Capability(EUTRA_CellId_Type p_CellId, boolean p_StartCS := false)  runs on EUTRA_PTC
  {
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var SRB_COMMON_IND v_RxdAsp;
    var B20_Type v_UTRAN_StartPS;
    var template (omit) B20_Type v_UTRAN_StartCS := omit;
    
    SRB.send(cas_SRB1_RrcPdu_REQ( p_CellId,
                                    cs_TimingInfo_Now,
                                    cs_508_UeCapabilityEnquiry(v_RRC_TI, cs_UE_CapabilityRequest_EUTRA_UTRA)));
    
    SRB.receive(car_SRB1_RrcPdu_IND(p_CellId, cr_508_UeCapabilityInformation(v_RRC_TI, cr_EutraCapInfo_EUTRA_UTRA))) -> value v_RxdAsp; // @sic R5s120138 sic@
    
    v_UTRAN_StartPS := f_U_DecodeInterRatHandoverInfo_AndGetStartPSValue (v_RxdAsp.Signalling.Rrc.Dcch.message_.c1.ueCapabilityInformation.criticalExtensions.c1.ueCapabilityInformation_r8.ue_CapabilityRAT_ContainerList[1].ueCapabilityRAT_Container);
    if (p_StartCS) {
      v_UTRAN_StartCS := f_U_DecodeInterRatHandoverInfo_AndGetStartCSValue (v_RxdAsp.Signalling.Rrc.Dcch.message_.c1.ueCapabilityInformation.criticalExtensions.c1.ueCapabilityInformation_r8.ue_CapabilityRAT_ContainerList[1].ueCapabilityRAT_Container);
    }
    // then get latest security params and send them over
    f_EUTRA_SendAuthParameters (p_CellId, UTRAN, false, p_StartCS, v_UTRAN_StartPS, v_UTRAN_StartCS);
  }

}
