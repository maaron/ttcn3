/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2012, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3v10.1.0
// $Date: 2012-09-02 22:44:17 +0200 (Sun, 02 Sep 2012) $
// $Rev: 7242 $
/******************************************************************************/
module MAC_718 {

  import from EUTRA_RRC_ASN1_Definitions language "ASN.1:1997" all;
  import from CommonDefs all;
  import from EUTRA_ASP_TypeDefs all;
  import from EUTRA_AspCommon_Templates all;
  import from EUTRA_CellInfo all;
  import from EUTRA_CommonDefs all;
  import from EUTRA_CommonProcedures all;
  import from EUTRA_Component all;
  import from EUTRA_ConfigurationSteps all;
  import from EUTRA_RRC_Templates all;
  import from EUTRA_Timing all;
  import from L2_CommonFunctions all;
  import from MAC_Functions all;
  import from MAC_Templates all;

  template (value) AntennaInfoDedicated cs_AntennaInfoDedicated_2TX_TM4 :=
  { /* acc to 36.523-1 Table 4.8.2.1.6-1 */
    /* @status    APPROVED */
    transmissionMode := tm4,
    codebookSubsetRestriction  := {
      n2TxAntenna_tm4 := '111111'B
    },
    ue_TransmitAntennaSelection := {
      release := NULL
    }
  };

   template (value) PhysicalConfigDedicated_AntennaInfo_Type cs_PhysicalConfigDedicated_AntennaInfo_2TX_TM4 :=
  { /* @status    APPROVED */
    explicitValue := cs_AntennaInfoDedicated_2TX_TM4
  };

  template (value) CQI_ReportConfig cds_508_CQI_ReportConfig_RM31(template (omit) CQI_ReportPeriodic p_CQI_ReportingPeriodic)
     modifies cs_508_CQI_ReportConfig_Default :=
  { /* Default values according to 7.1.8.1 test case to be used for TM4 */
    /* @status    APPROVED */
    cqi_ReportModeAperiodic := rm31
  };

  template (value) SYSTEM_CTRL_REQ cas_CQI_ReportRM31_AntennaInfo_REQ(EUTRA_CellId_Type   p_CellId,
                                                                      template (value) TimingInfo_Type p_TimingInfo,
                                                                      template (value) CQI_ReportPeriodic p_CqiReportPeriodic,
                                                                      template (value) AntennaInfoDedicated p_AntennaInfoDedicated,
                                                                      template (omit) boolean p_CnfFlag := omit) :=
  { /* @desc      common template to configure SS antenna information */
    /* @status    APPROVED */
    Common := cs_ReqAspCommonPart_CellCfg(p_CellId, p_TimingInfo, p_CnfFlag),
    Request := {
      Cell := {
      AddOrReconfigure := {
        Basic := omit,
        Active := {
            C_RNTI := omit,
            PhysicalLayerConfigUL := {
              Prach := omit,
              Pucch := omit,
              Pusch := omit,
              TimingAdvance := omit,
              SRS_UL_Config := omit,
              SR_Config := omit,
              CQI_ReportConfig := {
                R8andLater := {
                  cqi_ReportConfig := cds_508_CQI_ReportConfig_RM31 (p_CqiReportPeriodic),
                  cqi_ReportConfig_v920 := omit
                }
              },
              UplinkPowerControlCommon := omit,
              UplinkPowerControlDedicated := omit
            },
            RachProcedureConfig := omit,
            CcchDcchDtchConfig := {
              MeasGapCtrl := omit,
              DL := {
                DciInfo := omit,
                AntennaInfo := cs_AntennaInfoDedicated_r8andLater( p_AntennaInfoDedicated ),
                HarqProcessConfig := omit
              },
              UL := omit,
              DrxCtrl := omit,
              TtiBundling := omit
            }
          }
        }
      }
    }
  };

  template (value) PhysicalConfigDedicated cds_508_PhysicalConfigDedicated_RM31(template (omit) CQI_ReportPeriodic p_CQI_ReportingPeriodic,
                                                                                      template (omit) SoundingRS_UL_ConfigDedicated p_SoundingRsUl_ConfigDedicated,
                                                                                      template (value) PhysicalConfigDedicated_AntennaInfo_Type p_AntennaInfo,
                                                                                      template (omit) SchedulingRequestConfig p_SchedulingRequestConfig := omit)
  modifies cs_508_PhysicalConfigDedicated_Default_RBC :=
  { /* Default values according to 7.1.8.1 test case to be used for TM4 */
    /* @status    APPROVED */
    cqi_ReportConfig := {
      cqi_ReportModeAperiodic := rm31
    }
  };

  function f_EUTRA_CellInfo_GetSS_AntennaInfoDedicated(EUTRA_CellId_Type p_CellId) runs on EUTRA_PTC return AntennaInfoDedicated
  {
    var EUTRA_CellInfo_Type v_CellInfo := f_EUTRA_CellInfo_Get(p_CellId);
    return v_CellInfo.AntennaInfo.SS_AntennaInfoDedicated;
  }

  function fl_CalculateNextPeriodicRI_Timing (EUTRA_FDD_TDD_Mode_Type p_EUTRA_FDD_TDD_Mode,
                                              SubFrameTiming_Type p_TimingInfo) return SubFrameTiming_Type
  {
    var SubFrameTiming_Type v_Timing := p_TimingInfo;
    var integer v_NpNri := 16;  // Np =20; Nri=8 Np*Nri =160 ms = 16 frames;
    //Based on default value of cqi-pmi-ConfigIndex [25 FDD/24TDD] in 36.508 Table 4.6.3-2 and 36.213 table 7.2.2-1A/7.2.2-1C
    //Based on default value of ri-ConfigIndex[483 FDD/484TDD]  in 36.508 Table 4.6.3-2 and 36.213 table 7.2.2-1B
    var integer v_NoffstRI; // -(Iri -483) ri-ConfigIndex[483 FDD/484TDD]  in 36.508 Table 4.6.3-2 and 36.213 table 7.2.2-1B
    var integer v_NoffsetCQI := 8; // 25-17 FDD/24-16 TDD
    var integer v_NetOffset;
    var integer v_NextFrameNumOffset := v_Timing.SFN.Number mod v_NpNri;
    
    if (p_EUTRA_FDD_TDD_Mode == FDD) {
      v_NoffstRI := 0;          // -(483-483)
    } else {
      v_NoffstRI := -1;         //-(484-483)
    }
    
    v_NetOffset := v_NoffsetCQI + v_NoffstRI;
    v_Timing.Subframe.Number := v_NetOffset mod 10;
    v_Timing.SFN.Number := (v_Timing.SFN.Number + ((v_NpNri - v_NextFrameNumOffset) mod v_NpNri) + v_NetOffset/10 ) mod 1024;   //@sic R5s120304 sic@
    return v_Timing;
  }

  function f_EUTRA_CellInfo_SetMIMO_2TX_TM4(EUTRA_CellId_Type p_CellId) runs on EUTRA_PTC
  {
    var template (value) EUTRA_CellInfo_Type v_CellInfo := f_EUTRA_CellInfo_Get(p_CellId);
    
    v_CellInfo.AntennaInfo.SS_AntennaInfoDedicated := cs_AntennaInfoDedicated_2TX_TM4;
    v_CellInfo.AntennaInfo.AntennaInfoDedicated := cs_PhysicalConfigDedicated_AntennaInfo_2TX_TM4;
    f_EUTRA_CellInfo_Set ( p_CellId, v_CellInfo );
  }

  function fl_CheckRIRecption () runs on EUTRA_PTC
  {
    var SubFrameTiming_Type v_Timing;
    var EUTRA_FDD_TDD_Mode_Type v_EUTRA_FDD_TDD_Mode := f_EUTRA_CellInfo_GetFDD_TDD(eutra_Cell1);
    var integer j;
    timer t_Watchdog := 5.0;
    
    v_Timing := f_EUTRA_GetNextSendOccasion(eutra_Cell1);  // per default 100ms in advance
    f_SS_ConfigPeriodicRI_IndMode(eutra_Cell1,
                                  cs_TimingInfo(v_Timing.SFN.Number, 0), // By default Subframe is 4, 0 used to ensure the timing info is not an occasion of periodic RI
                                  tsc_L1Mac_IndicationMode_Enable );
    // Configure stop of UL grant to ensure Periodic RI is received only on PUCCH
    f_EUTRA_StopULGrantTransmission_PUCCH_Sync (eutra_Cell1, cs_TimingInfo(v_Timing.SFN.Number, 0)); //@sic R5s120304 sic@
    v_Timing := fl_CalculateNextPeriodicRI_Timing (v_EUTRA_FDD_TDD_Mode, v_Timing);
    
    //@siclog "Step 7" siclog@
    t_Watchdog.start;
    for (j := 0; j < 5; j := j+1) {
      SYSIND.receive ( car_PeriodicRI_IND (eutra_Cell1, cr_TimingInfo(v_Timing.SFN.Number, v_Timing.Subframe.Number), 1 ));
      v_Timing.SFN.Number := (v_Timing.SFN.Number + 16) mod 1024; // Next periodic RI timing
    }
    t_Watchdog.stop;
    // to configure SS to stop reception of Periodic RI on PUCCH /PUSCH
    f_SS_ConfigPeriodicRI_IndMode(eutra_Cell1, cs_TimingInfo_Now, tsc_L1Mac_IndicationMode_Disable);
    f_EUTRA_StartDefULGrantTransmission(eutra_Cell1); // Configure SS for normal UL grant allocation
  }

  function f_TC_7_1_8_1_EUTRA ( ) runs on EUTRA_PTC
  { /* 7.1.8.1 : Periodic RI reporting using PUCCH / Category 1 UE / Transmission mode 3/4 */
    var template (value) PhysicalConfigDedicated v_PhysicalConfigDedicated;
    var template (value) EUTRA_FDD_TDD_CellInfo_Type v_EUTRA_FDD_TDD_Info ;
    var template (value) PhysicalConfigDedicated_AntennaInfo_Type v_AntennaInfo ;
    var template (value) AntennaInfoDedicated v_SS_AntennaInfo;
    
    ///////////////////////////////////////////////////////////////////////////////////
    //      PREAMBLE
    //////////////////////////////////////////////////////////////////////////////////
    
    f_EUTRA_Init (c1);
    f_EUTRA_CellInfo_SetMIMO_2TX(eutra_Cell1);
    f_EUTRA_CellConfig_Def(eutra_Cell1);
    f_EUTRA_Preamble (eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_GenericRbEst_DisableBSR_PHR(eutra_Cell1,
                                        0,
                                        0,
                                        omit,
                                        omit,
                                        omit,
                                        omit,
                                        omit);     // bring UE to State 3

    ///////////////////////////////////////////////////////////////////////////////////
    //      Test Body
    //////////////////////////////////////////////////////////////////////////////////
    f_EUTRA_TestBody_Set(true,layer2);
    // Test body starts
    //@siclog "Step 1" siclog@
    fl_CheckRIRecption();
    //@siclog "Step 8-10" siclog@

    f_EUTRA_CellInfo_SetMIMO_2TX_TM4(eutra_Cell1); // Initialise TM4 specific gloal variables
    // Update SS configuration
    v_SS_AntennaInfo:= f_EUTRA_CellInfo_GetSS_AntennaInfoDedicated (eutra_Cell1);
    //f_EUTRA_SS_CommonCellConfig(eutra_Cell1, cas_CcchDcchDtchDL_Config_REQ(eutra_Cell1, cs_TimingInfo_Now, -, cs_AntennaInfoDedicated_r8andLater(v_SS_AntennaInfo)));
    v_EUTRA_FDD_TDD_Info := f_EUTRA_CellInfo_GetFDD_TDD_Info (eutra_Cell1); //Get FDD or TDD mode from Cell-configuration
    f_EUTRA_SS_CommonCellConfig(eutra_Cell1, cas_CQI_ReportRM31_AntennaInfo_REQ(eutra_Cell1, cs_TimingInfo_Now,
                                                                                v_EUTRA_FDD_TDD_Info.cqi_ReportConfig,
                                                                              v_SS_AntennaInfo));
    
    v_AntennaInfo := f_EUTRA_CellInfo_GetAntennaInfoDedicated (eutra_Cell1);
    v_PhysicalConfigDedicated :=  cds_508_PhysicalConfigDedicated_RM31(v_EUTRA_FDD_TDD_Info.cqi_ReportConfig,
                                                                       v_EUTRA_FDD_TDD_Info.soundingRS_UL_Config,
                                                                       v_AntennaInfo);
    f_RRC_ConnectionReconfiguration_MAC_MainConfig_PhysicalConfig(eutra_Cell1, omit, v_PhysicalConfigDedicated);
    
    fl_CheckRIRecption();
    
    //@siclog "Step 12" siclog@
    //Check: Does the test result of generic test procedure in TS 36.508 subclause 6.4.2.3 indicate that the UE is in E-UTRA RRC_CONNECTED state on Cell 3?
    f_EUTRA_508Check_ConnectedState( eutra_Cell1 );
    
    //-----------------------------------------------------
    //End TestBody
    //------------------------------------------------
    
    f_EUTRA_TestBody_Set( false );
    
    f_EUTRA_Postamble( eutra_Cell1, E2_CONNECTED ); //@sic R5-103875 sic@
  } //End of 7.1.8.1

}
