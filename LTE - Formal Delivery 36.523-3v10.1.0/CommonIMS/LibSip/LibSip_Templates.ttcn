/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2012, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TTA, TTC).
//   All rights reserved.
// @version: LTE_IWD_12wk36
/******************************************************************************/

/*
  Simplified version for STF160
  FFS how to split the templates to reuse them in different STFs.
*/

/*
 *  @author   STF 346, STF366, STF368, STF369
 *  @version  $Id: LibSip_Templates.ttcn 491 2010-12-17 08:51:46Z bergengruen $
 *  @desc     This module defines SIP Templates for message, header, and
 *            structured types. <br>
 *            Note that any changes made to the definitions in this module
 *            may be overwritten by future releases of this library
 *            End users are encouraged to contact the distributers of this
 *            module regarding their modifications or additions
 *  @remark   Any additions to the templates shall follow the design rules
 *            and always modify base templates only;
 *            Existing templates shall not be changed or removed -
 *            change requests shall be made to http://t-ort.etsi.org
 */

module LibSip_Templates
{
    //LibSip
    import from LibSip_SIPTypesAndValues all;
    // import from LibSip_SDPTypes all;
    // import from LibSip_Interface all;
    // import from LibSip_PIXITS all;
    import from LibSip_XMLTypes all;
    // import from LibSip_SimpleMsgSummaryTypes all;




group MessageTemplates {
group dummy_templates {
  group dummy_parameter_send {

    template RequestLine m_requestLine_dummy(Method p_method) :=
    {
        method := p_method,
        requestUri := c_unavailableUri,
        sipVersion := c_sipNameVersion
    }

    template MessageHeader m_msgHeader_dummy :=
    {
        accept := omit,
        acceptContact := omit,
        acceptEncoding := omit,
        acceptLanguage := omit,
        alertInfo := omit,
        allow := omit,
        allowEvents := omit, //*  RFC3265
        authenticationInfo := omit,
        authorization := omit,
        callId := c_empty_CallId,
        callInfo := omit,
        contact := omit,
        contentDisposition := omit,
        contentEncoding := omit,
        contentLanguage := omit,
        contentLength := {fieldName := CONTENT_LENGTH_E, len:=  0},
        contentType := omit, //* if message body present m, else not present
        cSeq := c_empty_cSeq,
        date := omit,
        errorInfo := omit,
        event := omit, //*  RFC3265
        expires := omit,
        fromField := c_empty_From,
        geolocation := omit,
        historyInfo := omit, //*  RFC4244
        inReplyTo := omit,
        maxForwards := c_maxForwards70,
        mimeVersion := omit,
        minExpires := omit,
        minSE := omit, //*  RFC4028
        organization := omit,
        pAccessNetworkInfo := omit, //*  RFC3455
        pAssertedID := omit,
        pAssertedService := omit,
        pAssociatedURI := omit,
        path := omit, //*  RFC3327
        pCalledPartyID := omit, //*  RFC3455
        pChargingFunctionAddresses := omit, //*  RFC3455
        pChargingVector := omit, //*  RFC3455
        pEarlyMedia := omit, //*  RFC5009
        pMediaAuthorization := omit, //*  RFC3313
        pPreferredID := omit,
        pPreferredService := omit,
        priority := omit,
        privacy := omit,
        proxyAuthenticate := omit,
        proxyAuthorization := omit,
        proxyRequire := omit,
        pVisitedNetworkID := omit, //*  RFC3455
        rAck := omit,
        rSeq := omit,
        reason := omit,
        recordRoute := omit,
        requestDisposition := omit,
        referredBy := omit, //*  RFC3892 - REFER method
        referTo := omit, //*  RFC3515 - REFER method
        replaces := omit, //* RFC3891
        replyTo := omit,
        require := omit,
        retryAfter := omit,
        route := omit,
        securityClient := omit, //*  RFC3329
        securityServer := omit, //*  RFC3329
        securityVerify := omit, //*  RFC3329
        server := omit,
        serviceRoute := omit, //*  RFC3608
        sessionExpires := omit, //*  RFC4028
        subject := omit,
        subscriptionState := omit, //*  RFC3265
        supported := omit,
        timestamp := omit,
        toField := c_empty_To,
        unsupported := omit,
        userToUser := omit,
        userAgent := omit,
        via := c_empty_Via,
        warning := omit,
        wwwAuthenticate := omit,
        undefinedHeader_List := omit
    }
  } //*  group dummy_parameter_send
  
  group dummy_parameter_receive {

    template RequestLine mw_requestLine_dummy(Method p_method) :=
    {
        method := p_method,
        requestUri := ?,
        sipVersion := c_sipNameVersion
    }

    template MessageHeader mw_msgHeader_dummy :=
    {
        accept := *,
        acceptContact := *,
        acceptEncoding := *,
        acceptLanguage := *,
        alertInfo := *,
        allow := *,
        allowEvents := *, //*  RFC3265
        authenticationInfo := *,
        authorization := *,
        callId := ?,
        callInfo := *,
        contact := *,
        contentDisposition := *,
        contentEncoding := *,
        contentLanguage := *,
        contentLength := ?,
        contentType := *,
        cSeq := ?,
        date := *,
        errorInfo := *,
        event := *, //*  RFC3265
        expires := *,
        fromField := ?,
        geolocation := *,
        historyInfo := *, //*  RFC4244
        inReplyTo := *,
        maxForwards := *,
        mimeVersion := *,
        minExpires := *,
        minSE := *, //*  RFC4028
        organization := *,
        pAccessNetworkInfo := *, //*  RFC3455
        pAssertedID := *,
        pAssertedService := *,
        pAssociatedURI := *,
        path := *, //*  RFC3327
        pCalledPartyID := *, //*  RFC3455
        pChargingFunctionAddresses := *, //*  RFC3455
        pChargingVector := *, //*  RFC3455
        pEarlyMedia := *, //*  RFC5009
        pMediaAuthorization := *, //*  RFC3313
        pPreferredID := *,
        pPreferredService := *,
        priority := *,
        privacy := *,
        proxyAuthenticate := *,
        proxyAuthorization := *,
        proxyRequire := *,
        pVisitedNetworkID := *, //*  RFC3455
        rAck := *,
        rSeq := *,
        reason := *,
        recordRoute := *,
        requestDisposition := *,
        referredBy := *, //*  RFC3892 - REFER method
        referTo := *, //*  RFC3515 - REFER method
        replaces := *, //* RFC 3891
        replyTo := *,
        require := *,
        retryAfter := *,
        route := *,
        securityClient := *, //*  RFC3329
        securityServer := *, //*  RFC3329
        securityVerify := *, //*  RFC3329
        server := *,
        serviceRoute := *, //*  RFC3608
        sessionExpires := *, //*  RFC4028
        subject := *,
        subscriptionState := *, //*  RFC3265
        supported := *,
        timestamp := *,
        toField := ?,
        unsupported := *,
        userToUser := *,
        userAgent := *,
        via := ?,
        warning := *,
        wwwAuthenticate := *,
        undefinedHeader_List := *
    }
  }//* end group dummy_parameter_receive
  
  group dummy_request_templates_send {

    template ACK_Request m_ACK_Dummy :=
    {
        requestLine := m_requestLine_dummy(ACK_E),
        msgHeader := m_msgHeader_dummy,
        messageBody := omit,
        payload := omit
    }

    template BYE_Request m_BYE_Dummy :=
    {
        requestLine := m_requestLine_dummy(BYE_E),
        msgHeader := m_msgHeader_dummy,
        messageBody := omit,
        payload := omit
    }

    template CANCEL_Request m_CANCEL_Dummy :=
    {
        requestLine := m_requestLine_dummy(CANCEL_E),
        msgHeader := m_msgHeader_dummy,
        messageBody := omit,
        payload := omit
    }

    template INFO_Request m_INFO_Dummy :=
    {
        requestLine := m_requestLine_dummy(INFO_E),
        msgHeader := m_msgHeader_dummy,
        messageBody := omit,
        payload := omit
    }

    template INVITE_Request m_INVITE_Dummy :=
    {
        requestLine := m_requestLine_dummy(INVITE_E),
        msgHeader := m_msgHeader_dummy,
        messageBody := omit,
        payload := omit
    }

    template MESSAGE_Request m_MESSAGE_Dummy :=
    {
        requestLine := m_requestLine_dummy(MESSAGE_E),
        msgHeader := m_msgHeader_dummy,
        messageBody := omit,
        payload := omit
    }

    template NOTIFY_Request m_NOTIFY_Dummy :=
    {
        requestLine := m_requestLine_dummy(NOTIFY_E),
        msgHeader := m_msgHeader_dummy,
        messageBody := omit,
        payload := omit
    }

    template OPTIONS_Request m_OPTIONS_Dummy :=
    {
        requestLine := m_requestLine_dummy(OPTIONS_E),
        msgHeader := m_msgHeader_dummy,
        messageBody := omit,
        payload := omit
    }

    template PRACK_Request m_PRACK_Dummy :=
    {
        requestLine := m_requestLine_dummy(PRACK_E),
        msgHeader := m_msgHeader_dummy,
        messageBody := omit,
        payload := omit
    }

    template PUBLISH_Request m_PUBLISH_Dummy :=
    {
        requestLine := m_requestLine_dummy(PUBLISH_E),
        msgHeader := m_msgHeader_dummy,
        messageBody := omit,
        payload := omit
    }

    template REGISTER_Request m_REGISTER_Dummy :=
    {
        requestLine := m_requestLine_dummy(REGISTER_E),
        msgHeader := m_msgHeader_dummy,
        messageBody := omit,
        payload := omit
    }

    template REFER_Request m_REFER_Dummy :=
    {
        requestLine := m_requestLine_dummy(REFER_E),
        msgHeader := m_msgHeader_dummy,
        messageBody := omit,
        payload := omit
    }

    template SUBSCRIBE_Request m_SUBSCRIBE_Dummy :=
    {
        requestLine := m_requestLine_dummy(SUBSCRIBE_E),
        msgHeader := m_msgHeader_dummy,
        messageBody := omit,
        payload := omit
    }

    template UPDATE_Request m_UPDATE_Dummy :=
    {
        requestLine := m_requestLine_dummy(UPDATE_E),
        msgHeader := m_msgHeader_dummy,
        messageBody := omit,
        payload := omit
    }
  }//* end group dummy_request_templates_send
  group dummy_request_templates_receive{

    template ACK_Request mw_ACK_Dummy :=
    {
        requestLine := mw_requestLine_dummy(ACK_E),
        msgHeader := mw_msgHeader_dummy,
        messageBody := *,
        payload := omit
    }

    template BYE_Request mw_BYE_Dummy :=
    {
        requestLine := mw_requestLine_dummy(BYE_E),
        msgHeader := mw_msgHeader_dummy,
        messageBody := *,
        payload := omit
    }

    template CANCEL_Request mw_CANCEL_Dummy :=
    {
        requestLine := mw_requestLine_dummy(CANCEL_E),
        msgHeader := mw_msgHeader_dummy,
        messageBody := *,
        payload := *
    }

    template INFO_Request mw_INFO_Dummy :=
    {
        requestLine := mw_requestLine_dummy(INFO_E),
        msgHeader := mw_msgHeader_dummy,
        messageBody := *,
        payload := *
    }

    template INVITE_Request mw_INVITE_Dummy :=
    {
        requestLine := mw_requestLine_dummy(INVITE_E),
        msgHeader := mw_msgHeader_dummy,
        messageBody := *,
        payload := omit
    }

    template MESSAGE_Request mw_MESSAGE_Dummy :=
    {
        requestLine := mw_requestLine_dummy(MESSAGE_E),
        msgHeader := mw_msgHeader_dummy,
        messageBody := *,
        payload := *
    }

    template OPTIONS_Request mw_OPTIONS_Dummy :=
    {
        requestLine := mw_requestLine_dummy(OPTIONS_E),
        msgHeader := mw_msgHeader_dummy,
        messageBody := *,
        payload := *
    }

    template NOTIFY_Request mw_NOTIFY_Dummy :=
    {
        requestLine := mw_requestLine_dummy(NOTIFY_E),
        msgHeader := mw_msgHeader_dummy,
        messageBody := *,
        payload := omit
    }

    template PRACK_Request mw_PRACK_Dummy :=
    {
        requestLine := mw_requestLine_dummy(PRACK_E),
        msgHeader := mw_msgHeader_dummy,
        messageBody := *,
        payload := omit
    }

    template PUBLISH_Request mw_PUBLISH_Dummy :=
    {
        requestLine := mw_requestLine_dummy(PUBLISH_E),
        msgHeader := mw_msgHeader_dummy,
        messageBody := *,
        payload := *
    }

    template REFER_Request mw_REFER_Dummy :=
    {
        requestLine := mw_requestLine_dummy(REFER_E),
        msgHeader := mw_msgHeader_dummy,
        messageBody := *,
        payload := *
    }

    template REGISTER_Request mw_REGISTER_Dummy :=
    {
        requestLine := mw_requestLine_dummy(REGISTER_E),
        msgHeader := mw_msgHeader_dummy,
        messageBody := *,
        payload := *
    }

    template SUBSCRIBE_Request mw_SUBSCRIBE_Dummy :=
    {
        requestLine := mw_requestLine_dummy(SUBSCRIBE_E),
        msgHeader := mw_msgHeader_dummy,
        messageBody := *,
        payload := *
    }

    template UPDATE_Request mw_UPDATE_Dummy :=
    {
        requestLine := mw_requestLine_dummy(UPDATE_E),
        msgHeader := mw_msgHeader_dummy,
        messageBody := *,
        payload := *
    }
  }//* end group dummy_request_templates_receive
  
  group dummy_response_templates_send{

    template Response m_Response_Dummy :=
    {
        statusLine  := c_statusLine100,
        msgHeader := m_msgHeader_dummy,
        messageBody := omit,
        payload := omit
    }
  } //*  group dummy_response_templates_send
  
  group dummy_response_templates_receive{
    template Response mw_Response_Dummy :=
    {
        statusLine  := ?,
        msgHeader := mw_msgHeader_dummy,
        messageBody := *,
        payload := *
    }
  } //*  group dummy_response_templates_receive
}

group base_templates{

    group request_send {


        template ACK_Request m_ACK_Request_Base (SipUrl p_requestUri, CallId p_callId, CSeq p_cSeq,
            From p_from, To p_to, Via p_via) modifies m_ACK_Dummy :=
        {
            requestLine :=
            {
                requestUri := p_requestUri
            },
            msgHeader :=
            {
                callId := p_callId,
                cSeq := {fieldName:=CSEQ_E, seqNumber:= p_cSeq.seqNumber, method:= "ACK"},
                fromField := p_from,
                toField := p_to,
                via := p_via
            }
        }

        template BYE_Request m_BYE_Request_Base (SipUrl p_requestUri, CallId p_callId, CSeq p_cSeq, From p_from, To p_to,
            Via p_via) modifies m_BYE_Dummy :=
        {
            requestLine :=
            {
                requestUri := p_requestUri
            },
            msgHeader :=
            {
                callId := p_callId,
                cSeq := p_cSeq,
                fromField := p_from,
                toField := p_to,
                via := p_via
            }
        }

        template CANCEL_Request m_CANCEL_Request_Base (SipUrl p_requestUri, CallId p_callId, CSeq p_cSeq, From p_from, To p_to,
            Via p_via) modifies m_CANCEL_Dummy :=
        {
            requestLine :=
            {
                requestUri := p_requestUri

            },
            msgHeader :=
            {
                callId := p_callId,
                cSeq := p_cSeq,
                fromField := p_from,
                toField := p_to,
                via := p_via
            }
        }

        template INFO_Request m_INFO_Request_Base (SipUrl p_requestUri, CallId p_callId, CSeq p_cSeq, From p_from, To p_to,
            Via p_via) modifies m_INFO_Dummy :=
        {
            requestLine :=
            {
                requestUri := p_requestUri
            },
            msgHeader :=
            {
                callId := p_callId,
                cSeq := p_cSeq,
                fromField := p_from,
                toField := p_to,
                via := p_via
            }
        }

        template INVITE_Request m_INVITE_Request_Base (SipUrl p_requestUri, CallId p_callId, CSeq p_cSeq,
             From p_from, To p_to, Via p_via, Contact p_contact) modifies m_INVITE_Dummy :=
        {
            requestLine :=
            {
                requestUri := p_requestUri
            },
            msgHeader :=
            {
                callId := p_callId,
                contact := p_contact,
                cSeq := p_cSeq,
                fromField := p_from,
                toField := p_to,
                via := p_via
            }
        }

        template MESSAGE_Request m_MESSAGE_Request_Base (SipUrl p_requestUri, CallId p_callId, CSeq p_cSeq, From p_from, To p_to, Via p_via) modifies m_MESSAGE_Dummy :=
        {
            requestLine :=
            {
                requestUri := p_requestUri
            },
            msgHeader :=
            {
                callId := p_callId,
                cSeq := p_cSeq,
                fromField := p_from,
                toField := p_to,
                via := p_via
            }
        }

        template NOTIFY_Request m_NOTIFY_Request_Base (SipUrl p_requestUri, CallId p_callId, CSeq p_cSeq,
          From p_from, To p_to, Via p_via) modifies m_NOTIFY_Dummy :=
        {
            requestLine :=
            {
                requestUri := p_requestUri
            },
            msgHeader :=
            {
                callId := p_callId,
                cSeq :=  {fieldName:=CSEQ_E, seqNumber:= p_cSeq.seqNumber, method:= "NOTIFY"},
                fromField := p_from,
                toField := p_to,
                via := p_via
            }
        }

        template OPTIONS_Request m_OPTIONS_Request_Base (SipUrl p_requestUri, CallId p_callId, CSeq p_cSeq,
          From p_from, To p_to, Via p_via) modifies m_OPTIONS_Dummy :=
        {
            requestLine :=
            {
                requestUri := p_requestUri
            },
            msgHeader :=
            {
                callId := p_callId,
                cSeq :=  {fieldName:=CSEQ_E, seqNumber:= p_cSeq.seqNumber, method:= "OPTIONS"},
                fromField := p_from,
                toField := p_to,
                via := p_via
            }
        }

        template PRACK_Request m_PRACK_Request_Base (SipUrl p_requestUri, CallId p_callId, CSeq p_cSeq,
          From p_from, To p_to, Via p_via, RAck p_RAck)
          modifies m_PRACK_Dummy :=
        {
            requestLine :=
            {
                requestUri := p_requestUri
            },
            msgHeader :=
            {
                callId := p_callId,
                cSeq := {fieldName:=CSEQ_E, seqNumber:= p_cSeq.seqNumber, method:= "PRACK"},
                fromField := p_from,
                rAck := p_RAck,
                toField := p_to,
                via := p_via
            },
            messageBody := omit
        }


        template PUBLISH_Request m_PUBLISH_Request_Base (SipUrl p_requestUri, CallId p_callId, CSeq p_cSeq,
          From p_from, To p_to, Via p_via, template Event p_event, template RAck p_RAck, template MessageBody p_mb)
          modifies m_PUBLISH_Dummy :=
        {
            requestLine :=
            {
                requestUri := p_requestUri
            },
            msgHeader :=
            {
                callId := p_callId,
                // contentLength    := {fieldName := CONTENT_LENGTH_E, len:= f_MessageBodyLength(valueof(p_mb))},
                contentType := {fieldName := CONTENT_TYPE_E, mediaType :=  c_plainText/*c_sdpAplication*/},
                cSeq := {fieldName:=CSEQ_E, seqNumber:= p_cSeq.seqNumber, method:= "PUBLISH"},
                event := p_event,
                fromField := p_from,
                toField := p_to,
                via := p_via
            },
            messageBody := p_mb
        }

        template REFER_Request m_REFER_Request_Base (SipUrl p_requestUri, CallId p_callId, CSeq p_cSeq, Contact p_contact,
            From p_from, template To p_to, Via p_via, template ReferTo p_referTo, template ReferredBy p_referredBy)
            modifies m_REFER_Dummy :=
        {
            requestLine :=
            {
                requestUri := p_requestUri
            },
            msgHeader :=
            {
                callId      := p_callId,
                contact := p_contact,
                cSeq        := {fieldName:=CSEQ_E, seqNumber:= p_cSeq.seqNumber, method:= "REFER"},
                fromField   := p_from,
                referTo := p_referTo,
                referredBy := p_referredBy,
                toField     := p_to,
                via     := p_via
            }
        }

        template REFER_Request m_REFER_Request_replaces (
            SipUrl p_requestUri,
            CallId p_callId,
            CSeq p_cSeq,
            Contact p_contact,
            From p_from,
            template To p_to,
            Via p_via,
            template ReferTo p_referTo,
            template ReferredBy p_referredBy,
            template Replaces p_replaces,
            template Require p_require
        ) modifies m_REFER_Request_Base := {
            msgHeader :=
            {
                replaces := p_replaces,
                require := p_require
            }
        }

        template REGISTER_Request m_REGISTER_Request_Base (SipUrl p_requestUri, CallId p_callId, CSeq p_cSeq,
            From p_from, To p_to, Via p_via, Contact p_contact, template Authorization p_authorization) modifies m_REGISTER_Dummy :=
        {
            requestLine :=
            {
                requestUri := p_requestUri
            },
            msgHeader :=
            {
                authorization := p_authorization,
                callId      := p_callId,
                contact     := p_contact,
                cSeq        := p_cSeq,
                fromField   := p_from,
                toField     := p_to,
                supported := {
                    fieldName := SUPPORTED_E, optionsTags := {"path"}
                },
                via     := p_via
            }
        }

        template SUBSCRIBE_Request m_SUBSCRIBE_Request_Base (SipUrl p_requestUri, CallId p_callId,
            CSeq p_cSeq, From p_from, To p_to, Via p_via)  modifies m_SUBSCRIBE_Dummy :=
        {
            requestLine :=
            {
                requestUri := p_requestUri
            },
            msgHeader :=
            {
                callId      := p_callId,
                cSeq        := {fieldName:=CSEQ_E, seqNumber:= p_cSeq.seqNumber, method:= "SUBSCRIBE"},
                fromField   := p_from,
                toField     := p_to,
                via     := p_via
            }
        }

        template UPDATE_Request m_UPDATE_Request_Base (SipUrl p_requestUri, CallId p_callId, CSeq p_cSeq,
          From p_from, To p_to, Via p_via, Contact p_contact, template MessageBody p_mb) modifies m_UPDATE_Dummy :=
        {
            requestLine :=
            {
                requestUri := p_requestUri
            },
            msgHeader :=
            {
                callId      := p_callId,
                contact     := p_contact,
                // contentLength    := {fieldName := CONTENT_LENGTH_E, len:= f_MessageBodyLength(valueof(p_mb))},
                contentType := {fieldName := CONTENT_TYPE_E, mediaType :=  c_sdpAplication},
                cSeq        := {fieldName:=CSEQ_E, seqNumber:= p_cSeq.seqNumber, method:= "UPDATE"},
                fromField   := p_from,
                toField     := p_to,
                via     := p_via
             },
            messageBody := p_mb
        }

    } //*  end of group message_send

    group request_receive {

        template ACK_Request mw_ACK_Request_Base (template CallId p_callId) modifies mw_ACK_Dummy :=
        {
            msgHeader :=
            {
                callId      := p_callId
            }
        }

        template BYE_Request mw_BYE_Request_Base(template CallId p_callId) modifies mw_BYE_Dummy :=
          {
            msgHeader :=
            {
                callId := p_callId
            }
        }

        template CANCEL_Request mw_CANCEL_Request_Base (template CallId p_callId) modifies mw_CANCEL_Dummy :=
        {
            msgHeader :=
            {
                callId := p_callId
            }
        }
  
        template INFO_Request mw_INFO_Request_Base(template CallId p_callId) modifies mw_INFO_Dummy :=
        {
            msgHeader :=
            {
                callId := p_callId
            }
        }

        template INVITE_Request mw_INVITE_Request_Base modifies mw_INVITE_Dummy :=
        {
            requestLine :=
            {
                method := INVITE_E
            }
        }

        template MESSAGE_Request mw_MESSAGE_Request_Base modifies mw_MESSAGE_Dummy :=
        {
            msgHeader :=
            {
                contact := *
            }
        }

        template NOTIFY_Request mw_NOTIFY_Request_Base (template CallId p_callId) modifies mw_NOTIFY_Dummy :=
        {
            msgHeader :=
            {
                callId := p_callId
            }
        }

        template OPTIONS_Request mw_OPTIONS_Request_Base (template CallId p_callId) modifies mw_OPTIONS_Dummy :=
        {
            msgHeader :=
            {
                callId := p_callId
            }
        }

        template PRACK_Request mw_PRACK_Request_Base(template CallId p_callId) modifies mw_PRACK_Dummy :=
        {
            msgHeader :=
            {
                callId := p_callId
            }
        }

        template PUBLISH_Request mw_PUBLISH_Request_Base(template CallId p_callId) modifies mw_PUBLISH_Dummy :=
        {
            msgHeader :=
            {
                callId := p_callId
            }
        }

        template REFER_Request mw_REFER_Request_Base (template CallId p_callId) modifies mw_REFER_Dummy :=
        {
            msgHeader :=
            {
                callId := p_callId
            }
        }

        template REFER_Request
        mw_REFER_Request(template CallId p_callId, SipUrl p_requestUri,
                         SipUrl p_referredBy)
        modifies mw_REFER_Request_Base := {
            requestLine := {requestUri := p_requestUri},
            msgHeader := {
                callId := p_callId,
                referredBy := {
                    fieldName := REFERRED_BY_E,
                    nameAddr := {displayName := *, addrSpec := p_referredBy},
                    referredbyIdParams := *
                }
            }
        }

        template INVITE_Request mw_INVITE_Request(template Require p_require,
                         SipUrl p_referredBy) modifies mw_INVITE_Request_Base := {
            msgHeader := {
                require := p_require,
                referredBy := {
                    fieldName := REFERRED_BY_E,
                    nameAddr := {displayName := *, addrSpec := p_referredBy},
                    referredbyIdParams := *
                }
            }
        }

        template REGISTER_Request mw_REGISTER_Request_Base modifies mw_REGISTER_Dummy :=
        {
            requestLine :=
            {
                method := REGISTER_E
            }
        }

        template SUBSCRIBE_Request mw_SUBSCRIBE_Request_Base modifies mw_SUBSCRIBE_Dummy :=
        {
            requestLine :=
            {
                method := SUBSCRIBE_E
            }
        }

        template UPDATE_Request mw_UPDATE_Request_Base(template CallId p_callId) modifies mw_UPDATE_Dummy :=
        {
            msgHeader :=
            {
                callId := p_callId
            }
        }

    } //*  end group request_receive

    group response_send {

        template Response m_Response_Base (StatusLine p_statusLine, CallId p_callId, CSeq p_cSeq,
          From p_from, To p_to, Via p_via) modifies m_Response_Dummy:=
        {
            statusLine := p_statusLine,
            msgHeader :=
            {
                callId      := p_callId,
                cSeq        := p_cSeq,
                fromField   := p_from,
                maxForwards := omit,
                toField     := p_to,
                via     := p_via
            },
            messageBody := omit,
            payload         := omit
        }



    } //*  end group response_send

    group response_receive {

        template Response mw_Response_Base (template StatusLine p_statusLine, template CallId p_callId,
            template CSeq p_cSeq) modifies mw_Response_Dummy:=
        {
            statusLine := p_statusLine,
            msgHeader :=
            {
              callId        := p_callId,
              contentLength := *,
              cSeq      := p_cSeq,
              fromField := ?,
              maxForwards := *,
              toField       := ?,
              via       := ?
          }
        }
    } //*  end group message_receive

} //*  end group full_templates


} //*  end group MessageTemplates

group SDP_Templates {

} //*  end group SDP_Templates

group SimpleMsgSummary_Templates {
    
} //end group Templates_SMS

group MessageBodies {

}


} //*  end module LibSip_Templates
