/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2012, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3v10.1.0
// $Date: 2012-09-02 22:44:17 +0200 (Sun, 02 Sep 2012) $
// $Rev: 7242 $
/******************************************************************************/
module PDCP_Security {

  import from EUTRA_RRC_ASN1_Definitions language "ASN.1:1997" all;
  import from CommonDefs all;
  import from EPS_NAS_Constants all;
  import from EPS_NAS_MsgContainers all;
  import from EPS_NAS_Templates all;
  import from EPS_NAS_TypeDefs all;
  import from EUTRA_AspCommon_Templates all;
  import from EUTRA_CellInfo all;
  import from EUTRA_CommonDefs all;
  import from EUTRA_CommonProcedures all;
  import from EUTRA_Component all;
  import from EUTRA_ConfigurationSteps all;
  import from EUTRA_DRB_Templates all;
  import from EUTRA_LoopBack all;
  import from EUTRA_NASSteps all;
  import from EUTRA_Paging all;
  import from EUTRA_RRCSteps all;
  import from EUTRA_RRC_Templates all;
  import from EUTRA_SRB_Templates all;
  import from EUTRA_SecurityFunctions all;
  import from EUTRA_SecuritySteps all;
  import from EUTRA_Timing all;
  import from L2_CommonFunctions all;
  import from L2_CommonTemplates all;

  group Local_Functions {

  function fl_Test_7_3_3_1Or7_3_3_3(EUTRA_CellId_Type p_CellId,
                                    CipheringAlgorithm_Type p_AS_CipheringAlgorithm) runs on EUTRA_PTC
  {
    ///////////////////////////////////////////////////////////////////////////////////
    //      PREAMBLE
    //////////////////////////////////////////////////////////////////////////////////
    f_EUTRA_Init (c1);
    f_EUTRA_CellConfig_Def (eutra_Cell1);
    f_EUTRA_AS_CipheringAlgorithm_Set (p_AS_CipheringAlgorithm); // set snow 3G or AES  as Ciphering algorithm.
    f_EUTRA_Preamble ( p_CellId,  STATE2_IDLEUPDATE  );       // creates cell and performs registration
    ///////////////////////////////////////////////////////////////////////////////////
    //      Test Body
    //////////////////////////////////////////////////////////////////////////////////
    f_EUTRA_TestBody_Set(true);

    //@siclog "Step 1" siclog@
    f_EUTRA_RbEst_Def(p_CellId);
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "UE has transmitted UE Capability Information with valid Ciphering protected");
    //@siclog "Steps 2 - 3" siclog@
    //fl_CheckUECapability(p_CellId)
    f_EUTRA_TestBody_Set(false);
    //test body ends

    ///////////////////////////////////////////////////////////////////////////////////
    //      Post Amble
    //////////////////////////////////////////////////////////////////////////////////

    //Switch off UE and expect a DETACH REQUEST message
    f_EUTRA_Postamble ( p_CellId, E2_CONNECTED );//@sic R5-103875 sic@
  };// end of fl_Test_7_3_3_1Or7_3_3_3

  function fl_TC_7_3_3_2_TC_7_3_3_4(EUTRA_CellId_Type p_CellId,
                                    CipheringAlgorithm_Type p_AS_CipheringAlgorithm)runs on EUTRA_PTC
  {
    timer t_WaitTimer := 5.0;              // Local wait Timer
    ///////////////////////////////////////////////////////////////////////////////////
    //      PREAMBLE
    //////////////////////////////////////////////////////////////////////////////////
    f_EUTRA_Init (c1);
    f_EUTRA_CellConfig_Def (eutra_Cell1);
    f_EUTRA_AS_CipheringAlgorithm_Set (p_AS_CipheringAlgorithm); // set snow 3G or AES as Ciphering algorithm.
    f_EUTRA_Preamble ( p_CellId, STATE2A_TESTLOOP_ModeA );
    // creates cell and performs registration
    f_EUTRA_LoopBackActivation_State4_Def(eutra_Cell1, cs_UE_TestLoopModeA_LB_Setup_NoScaling );
    ///////////////////////////////////////////////////////////////////////////////////
    //      Test Body
    //////////////////////////////////////////////////////////////////////////////////
    f_EUTRA_TestBody_Set(true,layer2); // @sic R5-101050 sic@

    //@siclog "Step 1" siclog@
    DRB.send (cas_DRB_COMMON_REQ_PDCP_SDU (p_CellId,tsc_RbId_DRB1, cs_TimingInfo_Now, cs_PDCP_SDUList_1 (crs_PDCP_SDU_16B)));
    t_WaitTimer.start;
    //@siclog "Step 2" siclog@
    // Proper application of Ciphering is implicitly tested.
    alt {
      [] DRB.receive (car_DRB_COMMON_IND_PDCP_SDUList (p_CellId,tsc_RbId_DRB1, ?, cr_PDCP_SDUList_1(crs_PDCP_SDU_16B)))
        {
          f_EUTRA_PreliminaryPass(__FILE__, __LINE__, " UE has loop backed Data");
          t_WaitTimer.stop;
        }
      [] t_WaitTimer.timeout
        {
          f_EUTRA_SetVerdictFailOrInconc (__FILE__, __LINE__, "UE is not sending loop back data");
        }
    };
    f_EUTRA_TestBody_Set(false);
    //test body ends

    ///////////////////////////////////////////////////////////////////////////////////
    //      Post Amble

    //////////////////////////////////////////////////////////////////////////////////

    //Switch off UE and expect a DETACH REQUEST message
    f_EUTRA_Postamble ( p_CellId, E3_TESTMODE );//@sic R5-103875 sic@

  }; // end of fl_TC_7_3_3_2_TC_7_3_3_4

  function fl_Test_7_3_4_1Or7_3_4_2(EUTRA_CellId_Type p_CellId,
                                    IntegrityProtAlgorithm_Type p_AS_IntegrityProtAlgorithm) runs on EUTRA_PTC
  {
    var GutiParameters_Type v_GutiParameters ;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NasInd;
    var NAS_KsiValue v_KsiValue;
    var EUTRA_SecurityParams_Type v_AuthParams ;
    var ShortMAC_I v_ShortMAC_I;
    var SubFrameTiming_Type v_Timing, v_Timing2, v_Timing3, v_Timing4; //@sic R5s110418 sic@
    
    ///////////////////////////////////////////////////////////////////////////////////
    //      PREAMBLE
    //////////////////////////////////////////////////////////////////////////////////
    f_EUTRA_Init (c1);
    f_EUTRA_CellConfig_Def (eutra_Cell1);
    f_EUTRA_AS_IntegrityAlgorithm_Set (p_AS_IntegrityProtAlgorithm); // set snow 3G or AES  as Ciphering algorithm.
    f_EUTRA_Preamble ( p_CellId,STATE2_IDLEUPDATE  );
    v_GutiParameters := f_EUTRA_CellInfo_GetGuti ( p_CellId ); //@sic R5s110092 sic@
    v_AuthParams := f_EUTRA_Security_Get();//@sic R5s110092 sic@
    // creates cell and performs registration
    ///////////////////////////////////////////////////////////////////////////////////
    //      Test Body
    //////////////////////////////////////////////////////////////////////////////////
    f_EUTRA_TestBody_Set(true);

    //@siclog "Step 1" siclog@
    f_EUTRA_UE_Page ( p_CellId,
                      cs_NasPaging_OneRecord ( cs_PagingUE_Identity_S_TMSI ( v_GutiParameters.MME_Code, v_GutiParameters.M_TMSI )));
    //@siclog "Step 2-4" siclog@
    //Check the Service Request message
    v_KsiValue := f_EUTRA_SecurityKSIasme_Get ( );
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas ( p_CellId,
                                                 v_RRC_TI,
                                                 ?,
                                                 cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                   cr_508_SERVICE_REQUEST ( v_KsiValue )));

    
    //@siclog "Step 5-7" siclog@
    v_AuthParams := f_EUTRA_Authentication_InitAS ( v_AuthParams, v_NasInd.SecurityProtection.NasCount );
    v_AuthParams := f_EUTRA_RRC_ActivateSecurity ( p_CellId, v_AuthParams, v_NasInd.SecurityProtection.NasCount);
    f_EUTRA_Security_Set ( v_AuthParams );
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 6 & 7 TP 1");
    
    //@siclog "Step 8" siclog@
    f_EUTRA_RRC_ConnectionRelease(p_CellId);
    
    //@siclog "Step 9" siclog@
    f_Delay(5.0);
    
    //@siclog "Step 10" siclog@
    f_EUTRA_UE_Page ( p_CellId,
                      cs_NasPaging_OneRecord ( cs_PagingUE_Identity_S_TMSI ( v_GutiParameters.MME_Code, v_GutiParameters.M_TMSI )));
    //@siclog "Step 11-13" siclog@
    //Check the Service Request message
    v_KsiValue := f_EUTRA_SecurityKSIasme_Get ( );
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas ( p_CellId,
                                                 v_RRC_TI,
                                                 ?,
                                                 cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                   cr_508_SERVICE_REQUEST ( v_KsiValue )));
    //@siclog "Step 14" siclog@
    // send SecurityModeCommand on SRB1; SS is not configured for Integrity and Security pretection
    //This should result in MAC-I failure as SS will set MAC-I as all zeros;
    SRB.send(cas_SRB1_RrcPdu_REQ(p_CellId,
                                 cs_TimingInfo_Now,
                                 cs_508_SecurityModeCommand(v_RRC_TI,
                                                            v_AuthParams.AS_Integrity.Algorithm,
                                                            v_AuthParams.AS_Ciphering.Algorithm)));
    //@siclog "Step 15" siclog@
    //Receive Security Mode Failure
    SRB.receive(car_SRB1_RrcPdu_IND(p_CellId,
                                    cr_508_SecurityModeFailure(v_RRC_TI)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 15 TP 2");
    
    
    //@siclog "Step 16-17" siclog@
    v_AuthParams := f_EUTRA_Authentication_InitAS ( v_AuthParams, v_NasInd.SecurityProtection.NasCount );
    v_AuthParams := f_EUTRA_RRC_ActivateSecurity ( p_CellId, v_AuthParams, v_NasInd.SecurityProtection.NasCount);
    f_EUTRA_Security_Set ( v_AuthParams );
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 16 & 17");
    

    v_ShortMAC_I := f_Calculate_ShortMAC ( p_CellId, p_CellId );
    //Stop UL grant transmission on cell to avoid TA trasnmission with other desired events
    f_EUTRA_StopULGrantTransmission ( p_CellId, cs_TimingInfo_Now );
    //@sic R5s110418 sic@
    v_Timing :=  f_EUTRA_GetNextSendOccasion(eutra_Cell1, 200);      // >200ms in advance; Subframe.Number = 4 Schedule transmission of MAC_I failure message
    v_Timing2 := f_EUTRA_TimingInfoAdd (v_Timing, 20); //To schedule an UL grant for RLC Status PDU by conforment UE or STATUS PDU + UECapabilityInformation by a non conforment UE
    // selected to be less than t-PollRetransmit =45ms for SRB1 and greater than latency requirement = 10 ms
    // UE transmits 4 TTI after reception of grant
    v_Timing3 := f_EUTRA_TimingInfoAdd (v_Timing, 40); // To schedule local SS release
    v_Timing4 := f_EUTRA_TimingInfoAdd (v_Timing, 45); // To establish the SS resources
    //@sic R5s110418 removed RACH procedure configuration sic@
    //@siclog "Step 18" siclog@
    // Consfigure SS to use differnt algorithm for integrity so that will result in MAC-I failure at UE
    f_EUTRA_SS_TriggerMAC_I_Failure(p_CellId);
    SRB.send ( cas_SRB1_RrcPdu_REQ ( p_CellId, cs_TimingInfo(v_Timing.SFN.Number, v_Timing.Subframe.Number ), cs_508_UeCapabilityEnquiry ( tsc_RRC_TI_Def ) ) );
    f_EUTRA_OneULGrantTransmission(eutra_Cell1, cs_TimingInfo(v_Timing2.SFN.Number, v_Timing2.Subframe.Number), 5, 10);// Nprb =10, Imcs=Itbs=5 => TBsize of 872, sufficiently large for UECapabilityInformation + Status PDU
    // Reconfiguration of SRB0 is not needed because TM mode RLC,
    // DRB is not needed as no data sent or received hence seqence numbers are intact.
    f_EUTRA_SS_SRBs_DRBs_Release(p_CellId,cs_TimingInfo(v_Timing3.SFN.Number, v_Timing3.Subframe.Number) );//@sic R5s110602 sic@
    f_EUTRA_SS_SRBs_DRBs_Config(p_CellId,cs_TimingInfo(v_Timing4.SFN.Number, v_Timing4.Subframe.Number) );//@sic R5s110602 sic@
    //@siclog "Step 19" siclog@
    SRB.receive( car_SRB0_RrcPdu_IND( p_CellId,
                                      cr_508_RRCConnectionReestablishmentRequest ( tsc_C_RNTI_Def,
                                                                                   f_EUTRA_CellInfo_GetPhyCellId(p_CellId),
                                                                                   cr_ReestablishmentCause_OtherFailure,
                                                                                   v_ShortMAC_I ) ) );
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, " Step 19, TP 3");
    //Reset SRB SRB's and DRB of source cell (cell 1)
    //f_EUTRA_SS_SRBs_DRBs_Reset ( p_CellId );
    
    // Activate RRC security at SS target cell (Cell1) for SRB 1, 2 and 1 AM DRB
    v_AuthParams := f_EUTRA_SS_AS_ActivateSecurity_HO_Reest ( p_CellId, f_EUTRA_Security_Get ( ), 0 );
    f_EUTRA_Security_Set ( v_AuthParams );
    
    //@siclog "Step 20" siclog@
    /* The SS transmits RRCConnectionReestablishment message. */
    f_EUTRA_RRC_RRCConnectionReestablishment_Def ( p_CellId );
    
    //@siclog "Step 21" siclog@
    /* UE transmits an RRCConnectionReestablishmentComplete message */
    SRB.receive ( car_SRB1_RrcPdu_IND ( p_CellId,  cr_508_RRCConnectionReestablishmentComplete( tsc_RRC_TI_Def ) ) );
    
    //@siclog "step 21a" siclog@
    f_EUTRA_Activate_SRB2_DRB_SendRrcMsg_Step8(eutra_Cell1,
                                               tsc_RRC_TI_Def ,
                                               0,
                                               0);
    /* Step 21b - 21c */
    f_EUTRA_Activate_SRB2_DRB_ReceiveRrcAndNasMsg(eutra_Cell1,
                                                  tsc_RRC_TI_Def,
                                                  0,
                                                  0);
    
    //@siclog "Step 22" siclog@
    //Check UE is in connected state
    f_EUTRA_508Check_ConnectedState(p_CellId);
    
    f_EUTRA_TestBody_Set(false);
    //test body ends
    
    ///////////////////////////////////////////////////////////////////////////////////
    //      Post Amble
    //////////////////////////////////////////////////////////////////////////////////
    
    //Switch off UE and expect a DETACH REQUEST message
    f_EUTRA_Postamble ( p_CellId, E2_CONNECTED );//@sic R5-103875 sic@
    
  } // end of fl_Test_7_3_4_1Or7_3_4_2

  } // end of group Local_Functions

  function f_TC_7_3_3_1_EUTRA ( ) runs on EUTRA_PTC
  { /* L2/PDCP/
     * 7.3.3.1 : Ciphering and Deciphering: Correct functionality of EPS AS encription algorithms (SNOW 3G)
     */
    fl_Test_7_3_3_1Or7_3_3_3(eutra_Cell1,eea1); // set snow 3G as Ciphering algorithm.
  };

  function f_TC_7_3_3_2_EUTRA ( ) runs on EUTRA_PTC
  { /* L2/PDCP/
     * 7.3.3.2 : Ciphering and Deciphering: Correct functionality of EPS AS encription algorithms (SNOW 3G)
     */
    fl_TC_7_3_3_2_TC_7_3_3_4 (eutra_Cell1, eea1); // set snow 3G as Ciphering algorithm.
  };

  function f_TC_7_3_3_3_EUTRA ( ) runs on EUTRA_PTC
  { /* L2/PDCP/
     * 7.3.3.3 : Ciphering and Deciphering: Correct functionality of EPS AS encription algorithms (AES)
     */
    fl_Test_7_3_3_1Or7_3_3_3(eutra_Cell1,eea2); // set AES as Ciphering algorithm.
  };

  function f_TC_7_3_3_4_EUTRA ( ) runs on EUTRA_PTC
  {  /* L2/PDCP/
      * 7.3.3.4 : Ciphering and Deciphering: Correct functionality of EPS AS encription algorithms (AES)
      */
    fl_TC_7_3_3_2_TC_7_3_3_4 (eutra_Cell1, eea2); // set AES as Ciphering algorithm.
  };

  function f_TC_7_3_4_1_EUTRA ( ) runs on EUTRA_PTC
  { /* L2/PDCP/
     * 7.3.4.1 : Integrity protection: Correct functionality of EPS AS integrity algorithms (SNOW3G)
     */
    fl_Test_7_3_4_1Or7_3_4_2(eutra_Cell1, eia1); //set snow 3G as integrity algorithm.
  };

  function f_TC_7_3_4_2_EUTRA ( ) runs on EUTRA_PTC
  { /* L2/PDCP/
     * 7.3.4.2 : Integrity protection: Correct functionality of EPS AS integrity algorithms (AES)
     */
    fl_Test_7_3_4_1Or7_3_4_2(eutra_Cell1, eia2); //set AES as integrity algorithm.
  };

}
