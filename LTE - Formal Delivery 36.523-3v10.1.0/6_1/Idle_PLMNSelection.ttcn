/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2012, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3v10.1.0
// $Date: 2012-09-03 11:59:47 +0200 (Mon, 03 Sep 2012) $
// $Rev: 7256 $
/******************************************************************************/
module Idle_PLMNSelection {

  import from EUTRA_RRC_ASN1_Definitions language "ASN.1:1997" all;
  import from CommonDefs all;
  import from EPS_NAS_Constants all;
  import from EPS_NAS_MsgContainers all;
  import from EPS_NAS_Templates all;
  import from EPS_NAS_TypeDefs all;
  import from EUTRA_AuxiliaryFunctions all;
  import from EUTRA_BandDependentParam all;
  import from EUTRA_CellInfo all;
  import from EUTRA_CellInfoFrequency all;
  import from EUTRA_CommonDefs all;
  import from EUTRA_CommonProcedures all;
  import from EUTRA_Component all;
  import from EUTRA_ConfigurationSteps all;
  import from EUTRA_IdleMode all;
  import from EUTRA_NASCommonFunctions all;
  import from EUTRA_NASSteps all;
  import from EUTRA_Parameters all;
  import from EUTRA_RRCSteps all;
  import from EUTRA_RRC_Templates all;
  import from EUTRA_SRB_Templates all;
  import from EUTRA_SysInfo_Templates all;
  import from EUTRA_Timing all;
  import from NAS_CommonTemplates all;
  import from NAS_CommonTypeDefs all;
  import from UpperTesterFunctions all;

  function fl_EUTRA_InitSIB5ForTc6_1_1_3() runs on EUTRA_PTC
  {
    var template (value) SystemInformationBlockType5 v_SIB5;
    var Frequency_fList_Type v_Frequency_PrimaryBand := f_EUTRA_InitFrequency_f1Tof4 (px_ePrimaryFrequencyBand,
                                                                                      px_ePrimaryBandChannelBandwidth,
                                                                                      f_ConvertDL_BandwidthToUL(px_ePrimaryBandChannelBandwidth));
    var ChannelBandwidthDependency_Type v_PrimaryChannelBandwidthDependency := f_EUTRA_BandDependentParam (px_ePrimaryBandChannelBandwidth,
                                                                                                           f_ConvertDL_BandwidthToUL(px_ePrimaryBandChannelBandwidth));
    var AllowedMeasBandwidth v_AllowedMeasBandwidth := v_PrimaryChannelBandwidthDependency.AllowedMeasBandwidth; //@sic R5-115640 sic@
    
    // For cell 1 with frequency of f1: v_Frequency_PrimaryBand.f1
    // SIB5 contents: f2, f3, f5 (f1 in secondary band)
    // However, f5 (f1 in secondary band) is not present in this case since f5 as part
    // of inter-frequency list is applicable only in case of multi-band scenarios (ref: 36.508 Table 6.3.1.2-1 Note 3).
    if (v_Frequency_PrimaryBand.f2.dl_CarrierFreq != tsc_DummyFrequency ) {   //f2 is defined for the Band px_ePrimaryFrequencyBand
      if (v_Frequency_PrimaryBand.f3.dl_CarrierFreq != tsc_DummyFrequency ) {   //f3 is defined for the Band px_ePrimaryFrequencyBand
        v_SIB5 := cs_508_SystemInformationBlockType5_Def ({cs_InterFreqCarrierFreq_CRPri (v_Frequency_PrimaryBand.f2,//f2 - Same downlink EARFCN as used for Cell 12
                                                                                          v_AllowedMeasBandwidth,
                                                                                          4),
                                                           cs_InterFreqCarrierFreq_CRPri (v_Frequency_PrimaryBand.f3,//f3 - Same downlink EARFCN as used for Cell 13
                                                                                          v_AllowedMeasBandwidth,
                                                                                          4)}); //@sic R5s110636 & R5-115640 sic@
        f_EUTRA_CellInfo_SetSIB5 (eutra_Cell1, v_SIB5);
        
        // For cell 12 with frequency of f2: v_Frequency_PrimaryBand.f2
        // SIB5 contents: f1, f3, f5 (f1 in secondary band)
        // However, f5 (f1 in secondary band) is not present in this case since f5 as part
        // of inter-frequency list is applicable only in case of multi-band scenarios (ref: 36.508 Table 6.3.1.2-1 Note 3).
        f_EUTRA_ChangeSIB5_Combination3 (eutra_Cell12,
                                         cs_508_SystemInformationBlockType5_Def ({cs_InterFreqCarrierFreq_CRPri (v_Frequency_PrimaryBand.f1,//f1= DL EARFCN for Cell 1
                                                                                                                 v_AllowedMeasBandwidth,
                                                                                                                 4),
                                                                                  cs_InterFreqCarrierFreq_CRPri (v_Frequency_PrimaryBand.f3,//f3= DL EARFCN for Cell 13
                                                                                                                 v_AllowedMeasBandwidth,
                                                                                                                 4)})); //@sic R5-115640 sic@
      }
      else { //f3 not defined
        FatalError (__FILE__, __LINE__, "Test case can not run on then chosen band - f3 is not defined");
      }
    }
    else {  //f2 not defined (e.g. band 13)
      FatalError (__FILE__, __LINE__, "Test case can not run on then chosen band - f2 is not defined");
    }
  }

  function f_TC_6_1_1_1_EUTRA ( ) runs on EUTRA_PTC {
    
    var template (value) CellPowerList_Type v_CellPowerList_AtT1, v_CellPowerList_AtT2;
    var float v_WaitTime := 720.0;
    timer t_HpPlmn_lower;
    timer t_HpPlmn_upper;
    timer t_IdleMode_GenericTimer := tsc_IdleMode_GenericTimer;
    
    v_CellPowerList_AtT1 := {
      cs_CellPower ( eutra_Cell1, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_Cell13, tsc_ServingCellRS_EPRE )
    };
    v_CellPowerList_AtT2 := {
      cs_CellPower ( eutra_Cell1, tsc_NonSuitableOffCellRS_EPRE )  //@sic R5s100675 cl. 4.2 Change 1 sic@
    };
    
    //Initialise all cell, security and mobile parameters
    f_EUTRA_Init(c1);//SIB2 & SIB3 are transmitted
    
    //Set Sys info and cell info for cell 12, 13 & 14 to be used @ creation
    f_EUTRA_CellInfo_SetPLMN_1Entry ( eutra_Cell12, cs_HPLMN_001_11 );  //PLMN1
    f_EUTRA_CellInfo_SetPLMN_1Entry ( eutra_Cell13, cs_HPLMN_001_21 );  //PLMN2
    f_EUTRA_CellInfo_SetPLMN_1Entry ( eutra_Cell14, cs_HPLMN_001_31 );  //PLMN3

    //Set TAC for Cell1, Cell12, Cell13 & Cell14
    //TAC for Cell1 is set to 1 in f_EUTRA_Init
    f_EUTRA_CellInfo_SetTAC ( eutra_Cell12, tsc_IdleMode_TAC_Cell12 );
    f_EUTRA_CellInfo_SetTAC ( eutra_Cell13, tsc_IdleMode_TAC_Cell13 );
    f_EUTRA_CellInfo_SetTAC ( eutra_Cell14, tsc_IdleMode_TAC_Cell14 );

    //Configure and activate all cells
    //Cell power level will be -85 dBm/15kHz & attenuation set so that cell is seen as OFF
    f_EUTRA_CellConfig_Def ( eutra_Cell12 );
    f_EUTRA_CellConfig_Def ( eutra_Cell1 );
    f_EUTRA_CellConfig_Def ( eutra_Cell13 );
    f_EUTRA_CellConfig_Def ( eutra_Cell14 );  //As postamble will be executed on this cell

    //Equip UE with a USIM containing default values except for those shown in Table 6.1.1.1.3.1-2
    f_UT_USIM_Insert ( UT, "36.523-1 Table 6.1.1.1.3.1-2" );

    //Preamble to ensure UE is in known state
    f_EUTRA_Preamble ( eutra_Cell12, STATE2_IDLEUPDATE );
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_Cell12, RRC_IDLE );

    f_EUTRA_TestBody_Set ( true );

    //@siclog "Step 1" siclog@
    //Adjust cell configuration according to T1
    f_EUTRA_SetCellPowerList ( v_CellPowerList_AtT1 );

    //@siclog "Step 2" siclog@
    //Power on UE
    f_EUTRA_SwitchOnUEandStartIP(eutra_Cell12); // @sic R5s120065 sic@
    t_HpPlmn_lower.start ( f_EUTRA_SetTimerToleranceMin ( eutra_Cell12, nonProtocolTimer, 120.0 ) );
    t_HpPlmn_upper.start ( f_EUTRA_SetTimerToleranceMax ( eutra_Cell12, nonProtocolTimer, 720.0 ) ) ; //@sic R5-115625 sic@
    t_IdleMode_GenericTimer.start;

    //@siclog "Step 3" siclog@
    //Receive RRCConnectionRequest on Cell 12
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_Cell12);   // @sic R5-120721 change 3 sic@
    t_IdleMode_GenericTimer.stop;
    //* @verdict pass RRCConnectionRequest message received on Cell 1
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.1 Step 3");

    //@siclog "Step 4 - 18" siclog@
    //Perform step 3 to 17 of registration procedure on cell 12
    f_EUTRA_IdleUpdated_WithoutRRCConnReq ( eutra_Cell12, STATE2_IDLEUPDATE );

    //@siclog "Step 19" siclog@
    //Check if PLMN1 is indicated by UE
    f_UT_PLMN_Check ( UT, "00111" );
    //* @verdict pass PLMN1 indicated by UE
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.1 Step 19");

    //@siclog "Step 20" siclog@
    //Check for RRCConnectionRequest on Cell1 / PLMN4
    alt {
      [] SRB.receive( car_SRB0_RrcPdu_IND ( eutra_Cell1, cr_508_RRCConnectionRequest ) )
        {
          //* @verdict fail RRCConnectionRequest received on PLMNN4 / Cell 1 within t_HpPlmn_lower time
          f_EUTRA_SetVerdictFailOrInconc (__FILE__, __LINE__, "Test Case 6.1.1.1 Step 20");
        }
      [] t_HpPlmn_lower.timeout
        {
          if (f_EUTRA_RRC_ConnectionRequest_Common(eutra_Cell1, t_HpPlmn_upper)) {  // @sic R5-120721 change 3 sic@
            //* @verdict pass RRC Connection request received on PLMN4 / Cell 1 after t_HpPlmn_lower time but before t_HpPlmn_upper
            f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.1 Step 20");
          }
          else {
            //* @verdict fail No RRCConnectionRequest received
            f_EUTRA_SetVerdictFailOrInconc (__FILE__, __LINE__, "Test Case 6.1.1.1 Step 20");
          }
        }
    }
    
    //@siclog "Step 21 - 25" siclog@
    //Perform TAU procedure steps 2 to 6
    f_EUTRA_TrackingAreaUpdate_WithoutRrcConnReq ( eutra_Cell1 );
    
    //@siclog "Step 26" siclog@
    //Check if PLMN4 is indicated by UE
    f_UT_PLMN_Check ( UT, "00101" );
    //* @verdict pass PLMN4 is indicated by UE
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.1 Step 26");
    
    //@siclog "Step 27" siclog@
    //Check for no RRCConnectionRequest message on any active cell
    f_EUTRA_CheckNoAttachOn3Cells ( eutra_Cell1,
                                    eutra_Cell12,
                                    eutra_Cell13,
                                    v_WaitTime,//Tolerance is taken care of inside function f_EUTRA_CheckNoAttachOn3Cells
                                    "Test Case 6.1.1.1 Step 27 : RRCConnectionRequest message received within no-response-time");
    
    //@siclog "Step 28" siclog@
    //Adjusts cell power level according to T2
    f_EUTRA_SetCellPowerList ( v_CellPowerList_AtT2 );
    t_HpPlmn_upper.start ( f_EUTRA_SetTimerToleranceMin ( eutra_Cell13, nonProtocolTimer, 120.0 ) ); //@sic R5-115625 sic@
    
    //@siclog "Step 29" siclog@
    //Check if UE camps on Cell13
    f_EUTRA_IdleMode_TAU ( eutra_Cell13 );
    
    //@siclog "Step 30" siclog@
    //Check if PLMN2 is indicated by UE
    f_UT_PLMN_Check ( UT, "00121" );
    //* @verdict pass PLMN2 is indicated by UE
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.1 Step 30");
    
    //@siclog "Step 31" siclog@
    //Adjusts cell power level according to T3
    f_EUTRA_SetCellPower ( eutra_Cell14, tsc_ServingCellRS_EPRE );
    
    //@siclog "Step 32" siclog@
    //Check for RRCConnectionRequest on Cell 14
    alt {
      [] SRB.receive( car_SRB0_RrcPdu_IND ( eutra_Cell14, cr_508_RRCConnectionRequest ) )
        {
          //* @verdict fail RRCConnectionRequest received within t_HpPlmn_upper time
          f_EUTRA_SetVerdictFailOrInconc (__FILE__, __LINE__, "Test Case 6.1.1.1 Step 32");
        }
      [] t_HpPlmn_upper.timeout
        {
          f_EUTRA_RRC_ConnectionRequest_Def(eutra_Cell14);  // @sic R5-120721 change 3 sic@
          //* @verdict pass RRC Connection Request received on PLMN3 / Cell 4 after t_HpPlmn_upper time
          f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.1 Step 32");
        }
    }
    
    //@siclog "Step 33 - 37" siclog@
    //Perform TAU procedure steps 2 to 6
    f_EUTRA_TrackingAreaUpdate_WithoutRrcConnReq ( eutra_Cell14 );
    
    //@siclog "Step 38" siclog@
    //Check if PLMN3 is indicated by UE
    f_UT_PLMN_Check ( UT, "00131" );
    //* @verdict PLMN3 is indicated by UE
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.1 Step 38");
    
    //@siclog "Step 39" siclog@
    //Check for no RRCConnectionRequest message on any active cell
    f_EUTRA_CheckNoAttachOn3Cells ( eutra_Cell12,
                                    eutra_Cell13,
                                    eutra_Cell14,
                                    v_WaitTime,//Tolerance is taken care of inside function f_EUTRA_CheckNoAttachOn3Cells
                                    "Test Case 6.1.1.1 Step 39 : RRCConnectionRequest message received within no-response-time");
    
    f_EUTRA_TestBody_Set ( false );

    //Switch/power off UE
    f_EUTRA_Postamble ( eutra_Cell14, E1_IDLE );
  };

  function f_TC_6_1_1_1b_EUTRA ( ) runs on EUTRA_PTC
  {
    var float v_WaitTime := 720.0;
    
    var template (value) CellPowerList_Type v_CellPowerList_AtT1 := {
      cs_CellPower ( eutra_Cell1, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_Cell2, -75 ),
      cs_CellPower ( eutra_Cell4, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_Cell11, tsc_NonSuitableOffCellRS_EPRE )
    };
    var template (value) CellPowerList_Type v_CellPowerList_T1toT2 := {
      cs_CellPower ( eutra_Cell1, -75 ),
      cs_CellPower ( eutra_Cell2, tsc_ServingCellRS_EPRE )
    };
    var template (value) CellPowerList_Type v_CellPowerList_T2toT3 := {
      cs_CellPower ( eutra_Cell1, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_Cell4, -75 )
    };
    var template (value) CellPowerList_Type v_CellPowerList_T3toT4 := {
      cs_CellPower ( eutra_Cell4, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_Cell11, -75 )
    };
    timer t_HpPlmn_lower;
    timer t_HpPlmn_upper;
    timer t_IdleMode_GenericTimer := tsc_IdleMode_GenericTimer;
    
    //Initialise all cell, security and mobile parameters
    f_EUTRA_Init(c1); //SIB2 & SIB3 are transmitted
    
    //Set Sys info and cell info for cell 2, 4 & 11 to be used @ creation
    f_EUTRA_CellInfo_SetPLMN_1Entry ( eutra_Cell2, cs_HPLMN_001_11 );  //PLMN1
    f_EUTRA_CellInfo_SetPLMN_1Entry ( eutra_Cell4, cs_HPLMN_001_21 );  //PLMN2
    f_EUTRA_CellInfo_SetPLMN_1Entry ( eutra_Cell11, cs_HPLMN_001_31 );  //PLMN3
    
    //Set TAC for Cell1, Cell2, Cell4 & Cell11
    //TAC for Cell1 is set to 1 in f_EUTRA_Init
    f_EUTRA_CellInfo_SetTAC ( eutra_Cell2, tsc_IdleMode_TAC_Cell2 );
    f_EUTRA_CellInfo_SetTAC ( eutra_Cell4, tsc_IdleMode_TAC_Cell4 );  // @sic R5s120322 sic@
    f_EUTRA_CellInfo_SetTAC ( eutra_Cell11, tsc_IdleMode_TAC_Cell11 );

    //Set maximum cell powel level for Cell 1, 2, 4 & 11 to be used in creation
    f_EUTRA_CellInfo_InitMaxReferencePower ( eutra_Cell1, -75 );
    f_EUTRA_CellInfo_InitMaxReferencePower ( eutra_Cell2, -75 );
    f_EUTRA_CellInfo_InitMaxReferencePower ( eutra_Cell4, -75 );
    f_EUTRA_CellInfo_InitMaxReferencePower ( eutra_Cell11, -75 );
    
    //Configure and activate all cells
    //Cell power level will be -85 dBm/15kHz & attenuation set so that cell is seen as OFF
    f_EUTRA_CellConfig_Def ( eutra_Cell2 );
    f_EUTRA_CellConfig_Def ( eutra_Cell1 );
    f_EUTRA_CellConfig_Def ( eutra_Cell4 );
    f_EUTRA_CellConfig_Def ( eutra_Cell11 );  // Postamble will be executed on this cell
    
    //Equip UE with a USIM containing default values except for those shown in Table 6.1.1.1b.3.1-2
    f_UT_USIM_Insert ( UT, "36.523-1 Table 6.1.1.1b.3.1-2" );
    
    //Preamble to ensure UE is in known state
    f_EUTRA_Preamble ( eutra_Cell2, STATE2_IDLEUPDATE );
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_Cell2, RRC_IDLE );

    f_EUTRA_TestBody_Set ( true );
    
    //@siclog "Step 1" siclog@
    //SS adjusts cell levels according to row T1 of table 6.1.1.1b.3.2-1
    f_EUTRA_SetCellPowerList ( v_CellPowerList_AtT1 );

    //@siclog "Step 2" siclog@
    //Power on UE
    f_EUTRA_SwitchOnUEandStartIP(eutra_Cell2);
    t_HpPlmn_lower.start ( f_EUTRA_SetTimerToleranceMin ( eutra_Cell2, nonProtocolTimer, 120.0 ) );
    t_HpPlmn_upper.start ( f_EUTRA_SetTimerToleranceMax ( eutra_Cell2, nonProtocolTimer, 720.0 ) ) ;
    t_IdleMode_GenericTimer.start;

    //@siclog "Step 3" siclog@
    //Check: Does the UE send an RRCConnectionRequest on Cell 2?
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_Cell2);   // @sic R5-120721 change 3 sic@
    t_IdleMode_GenericTimer.stop;
    //@verdict pass RRCConnectionRequest message received on Cell 1
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.1b Step 3");

    //@siclog "Step 4 - 18" siclog@
    //Steps 3 to 17 of the registration procedure described in TS 36.508 subclause 4.5.2.3 are performed on Cell 2.
    f_EUTRA_IdleUpdated_WithoutRRCConnReq ( eutra_Cell2, STATE2_IDLEUPDATE );
    
    //@siclog "Step 19" siclog@
    //Check if PLMN1 is indicated by UE
    f_UT_PLMN_Check ( UT, "00111" );
    //@verdict pass PLMN1 indicated by UE
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.1b Step 19");
    
    //@siclog "Step 20" siclog@
    //SS adjusts cell levels according to row T2 of table 6.1.1.1b.3.2-1
    f_EUTRA_SetCellPowerList ( v_CellPowerList_T1toT2 );

    //@siclog "Step 21" siclog@
    //Check for RRCConnectionRequest on Cell1 PLMN4
    alt {
      [] SRB.receive( car_SRB0_RrcPdu_IND ( eutra_Cell1, cr_508_RRCConnectionRequest ) )
        {
          // @verdict fail RRCConnectionRequest received on PLMNN4 / Cell 1 within t_HpPlmn_lower time
          f_EUTRA_SetVerdictFailOrInconc (__FILE__, __LINE__, "Test Case 6.1.1.1b Step 21");
        }
      [] t_HpPlmn_lower.timeout
        {
          if (f_EUTRA_RRC_ConnectionRequest_Common(eutra_Cell1, t_HpPlmn_upper)) {  // @sic R5-120721 change 3 sic@
            // @verdict pass RRC Connection request received on PLMN4 / Cell 1 after t_HpPlmn_lower time but before t_HpPlmn_upper
            f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.1b Step 21");
          }
          else {
            // @verdict fail No RRCConnectionRequest received
            f_EUTRA_SetVerdictFailOrInconc (__FILE__, __LINE__, "Test Case 6.1.1.1b Step 21");
          }
        }
    }
    
    //@siclog "Step 22 - 25" siclog@
    //Steps 2 to 6 of the generic test procedure in TS 36.508 subclause 6.4.2.7 are performed on Cell 1.
    f_EUTRA_TrackingAreaUpdate_WithoutRrcConnReq ( eutra_Cell1 );
    
    //@siclog "Step 26" siclog@
    //Check: Is PLMN4 indicated by the UE?
    f_UT_PLMN_Check ( UT, "00101" );
    // @verdict pass PLMN4 is indicated by UE
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.1b Step 26");
    
    //@siclog "Step 27" siclog@
    //Check for no RRCConnectionRequest message on any active cell
    f_EUTRA_CheckNoAttachOn3Cells(eutra_Cell1,
                                  eutra_Cell2,
                                  eutra_Cell4,
                                  v_WaitTime,//Tolerance is taken care of inside function f_EUTRA_CheckNoAttachOn3Cells
                                  "Test Case 6.1.1.1b Step 28 : RRCConnectionRequest message received within no-response-time");
    
    //@siclog "Step 28" siclog@
    //SS adjusts cell levels according to row T3 of table 6.1.1.1b.3.2-1
    f_EUTRA_SetCellPowerList ( v_CellPowerList_T2toT3 );
    t_HpPlmn_upper.start ( f_EUTRA_SetTimerToleranceMin ( eutra_Cell4, nonProtocolTimer, 120.0 ) );
    
    //@siclog "Step 29" siclog@
    //Check: Does the test result of generic test procedure in TS 36.508 subclause 6.4.2.7 indicate that the UE is camped on E-UTRAN Cell 4?
    f_EUTRA_IdleMode_TAU ( eutra_Cell4 );
    
    //@siclog "Step 30" siclog@
    //Check if PLMN2 is indicated by UE
    f_UT_PLMN_Check ( UT, "00121" );
    //@verdict pass PLMN2 is indicated by UE
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.1b Step 30");
    
    //@siclog "Step 31" siclog@
    //SS adjusts cell levels according to row T4 of table 6.1.1.1b.3.2-1
    f_EUTRA_SetCellPowerList ( v_CellPowerList_T3toT4 );
    
    //@siclog "Step 32" siclog@
    //Check: Does the UE send an RRCConnectionRequest on Cell 11 after 120 seconds after step 29?
    alt {
      [] SRB.receive( car_SRB0_RrcPdu_IND ( eutra_Cell11, cr_508_RRCConnectionRequest ) )
        {
          // @verdict fail RRCConnectionRequest received within t_HpPlmn_upper time
          f_EUTRA_SetVerdictFailOrInconc (__FILE__, __LINE__, "Test Case 6.1.1.1b Step 33");
        }
      [] t_HpPlmn_upper.timeout
        {
          f_EUTRA_RRC_ConnectionRequest_Def(eutra_Cell11);  // @sic R5-120721 change 3 sic@
          // @verdict pass RRC Connection Request received on PLMN3 / Cell 4 after t_HpPlmn_upper time
          f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.1b Step 33");
        }
    }
    
    //@siclog "Step 34 - 37" siclog@
    //Steps 2 to 6 of the generic test procedure in TS 36.508 subclause 6.4.2.7 are performed.
    f_EUTRA_TrackingAreaUpdate_WithoutRrcConnReq ( eutra_Cell11 );
    
    //@siclog "Step 38" siclog@
    //Check: Is PLMN3 indicated by the UE?
    f_UT_PLMN_Check ( UT, "00131" );
    //@verdict PLMN3 is indicated by UE
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.1b Step 38");
    
    //@siclog "Step 39" siclog@
    //Check for no RRCConnectionRequest message on any active cell
    f_EUTRA_CheckNoAttachOn3Cells ( eutra_Cell2,
                                    eutra_Cell4,
                                    eutra_Cell11,
                                    v_WaitTime,//Tolerance is taken care of inside function f_EUTRA_CheckNoAttachOn3Cells
                                    "Test Case 6.1.1.1b Step 40 : RRCConnectionRequest message received within no-response-time");
    
    f_EUTRA_TestBody_Set ( false );

    //Switch/power off UE
    f_EUTRA_Postamble ( eutra_Cell11, E1_IDLE );
  };

  function f_TC_6_1_1_2_EUTRA ( ) runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList_PreambletoT1, v_CellPowerList_T1toT2, v_CellPowerList_T2toT3, v_CellPowerList_T3toT4;
    timer t_IdleMode_GenericTimer := tsc_IdleMode_GenericTimer;
    
    v_CellPowerList_PreambletoT1 := {
      cs_CellPower ( eutra_Cell12, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_Cell13, tsc_ServingCellRS_EPRE )
    };
    v_CellPowerList_T1toT2 := {
      cs_CellPower ( eutra_Cell1, tsc_NonSuitableOffCellRS_EPRE),
      cs_CellPower ( eutra_Cell14, tsc_ServingCellRS_EPRE)
    };
    v_CellPowerList_T2toT3 := {
      cs_CellPower ( eutra_Cell12, tsc_NonSuitableOffCellRS_EPRE)
    };
    v_CellPowerList_T3toT4 := {
      cs_CellPower ( eutra_Cell13, tsc_NonSuitableOffCellRS_EPRE)
    };
    
    f_EUTRA_Init(c1);
    
    //Set TAC for Cell1, Cell12, Cell13 & Cell14
    //TAC for Cell1 is set to 1 in f_EUTRA_Init
    f_EUTRA_CellInfo_SetTAC (eutra_Cell12, tsc_IdleMode_TAC_Cell12);
    f_EUTRA_CellInfo_SetTAC (eutra_Cell13, tsc_IdleMode_TAC_Cell13);
    f_EUTRA_CellInfo_SetTAC (eutra_Cell14, tsc_IdleMode_TAC_Cell14);
    
    //Configure and activate all cells
    //Cell power level will be -85 dBm/15kHz & attenuation set so that cell is seen as OFF
    f_EUTRA_CellConfig_Def (eutra_Cell1);
    f_EUTRA_CellConfig_Def (eutra_Cell12);
    f_EUTRA_CellConfig_Def (eutra_Cell13);
    f_EUTRA_CellConfig_Def (eutra_Cell14);
    
    //Equip UE with a USIM containing default values except for those shown in Table 6.1.1.2.3.1-2
    f_UT_USIM_Insert ( UT, "36.523-1 Table 6.1.1.2.3.1-2" );
    
    //Preamble to ensure UE is in known state
    f_EUTRA_Preamble (eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_UE_Detach_SwitchOffUe (eutra_Cell1, RRC_IDLE); //@sic R5s110509 sic@
    
    f_EUTRA_TestBody_Set ( true );
    
    //@siclog "Step 1" siclog@
    //Set power level according to T1
    f_EUTRA_SetCellPowerList (v_CellPowerList_PreambletoT1);

    //@siclog "Step 2" siclog@
    //Power on UE
    f_EUTRA_SwitchOnUEandStartIP(eutra_Cell1); // @sic R5s120065 sic@
    t_IdleMode_GenericTimer.start;
    
    //@siclog "Step 3" siclog@
    //Receive RRCConnectionRequest on Cell 1
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_Cell1);   // @sic R5-120721 change 3 sic@
    t_IdleMode_GenericTimer.stop;
    //* @verdict pass RRCConnectionRequest message received on Cell 1
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.2 Step 3");
    
    //@siclog "Step 4 - 18" siclog@
    //Perform step 3 to 17 of registration procedure on cell 1
    f_EUTRA_IdleUpdated_WithoutRRCConnReq ( eutra_Cell1, STATE2_IDLEUPDATE ); //@sic R5s110509 sic@
    
    //@siclog "Step 19" siclog@
    //Check if PLMN1 is indicated by UE
    f_UT_PLMN_Check ( UT, tsc_UT_PLMN1 );
    //* @verdict pass PLMN1 indicated by UE
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.2 Step 19");
    
    //@siclog "Step 20" siclog@
    //Set power level according to T2
    f_EUTRA_SetCellPowerList ( v_CellPowerList_T1toT2 );
    t_IdleMode_GenericTimer.start;
    
    //@siclog "Step 21" siclog@
    //Receive RRCConnectionRequest on Cell 12
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_Cell12);   // @sic R5-120721 change 3 sic@
    t_IdleMode_GenericTimer.stop;
    //* @verdict pass RRCConnectionRequest message received on Cell 12
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.2 Step 21");
    
    //@siclog "Step 22 - 26" siclog@
    //Perform TAU procedure steps 2 to 6
    f_EUTRA_TrackingAreaUpdate_WithoutRrcConnReq (eutra_Cell12);
    
    //@siclog "Step 27" siclog@
    //Check if PLMN2 is indicated by UE
    f_UT_PLMN_Check ( UT, tsc_UT_PLMN2 );
    //* @verdict pass PLMN1 indicated by UE
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.2 Step 27");
    
    //@siclog "Step 28" siclog@
    //Set power level according to T3
    f_EUTRA_SetCellPowerList ( v_CellPowerList_T2toT3 );
    t_IdleMode_GenericTimer.start;
    
    //@siclog "Step 29" siclog@
    //Receive RRCConnectionRequest on Cell 13
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_Cell13);   // @sic R5-120721 change 3 sic@
    t_IdleMode_GenericTimer.stop;
    //* @verdict pass RRCConnectionRequest message received on Cell 13
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.2 Step 29");
    
    //@siclog "Step 30 - 34" siclog@
    //Perform TAU procedure steps 2 to 6
    f_EUTRA_TrackingAreaUpdate_WithoutRrcConnReq (eutra_Cell13);
    
    //@siclog "Step 35" siclog@
    //Check if PLMN3 is indicated by UE
    f_UT_PLMN_Check ( UT, tsc_UT_PLMN3 );
    //* @verdict pass PLMN1 indicated by UE
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.2 Step 35");
    
    //@siclog "Step 36" siclog@
    //Set power level according to T4
    f_EUTRA_SetCellPowerList ( v_CellPowerList_T3toT4 );
    t_IdleMode_GenericTimer.start;
    
    //@siclog "Step 37" siclog@
    //Receive RRCConnectionRequest on Cell 14
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_Cell14);   // @sic R5-120721 change 3 sic@
    t_IdleMode_GenericTimer.stop;
    //* @verdict pass RRCConnectionRequest message received on Cell 14
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.2 Step 37");
    
    //@siclog "Step 38 - 42" siclog@
    //Perform TAU procedure steps 2 to 6
    f_EUTRA_TrackingAreaUpdate_WithoutRrcConnReq (eutra_Cell14);
    
    //@siclog "Step 43" siclog@
    //Check if PLMN4 is indicated by UE
    f_UT_PLMN_Check ( UT, tsc_UT_PLMN4 );
    //* @verdict pass PLMN1 indicated by UE
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.2 Step 43");

    f_EUTRA_TestBody_Set ( false );

    //Switch/power off UE
    f_EUTRA_Postamble ( eutra_Cell14, E1_IDLE );
  }

  function f_TC_6_1_1_2a_EUTRA ( ) runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList_AtT1 := {
      cs_CellPower ( eutra_Cell1, -75 ),
      cs_CellPower ( eutra_Cell2, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_Cell4, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_Cell11, tsc_NonSuitableOffCellRS_EPRE )
    };
    var template (value) CellPowerList_Type v_CellPowerList_T1toT2 := {
      cs_CellPower ( eutra_Cell1, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_Cell2, -75 ),
      cs_CellPower ( eutra_Cell11, tsc_ServingCellRS_EPRE )
    };
    var template (value) CellPowerList_Type v_CellPowerList_T2toT3 := {
      cs_CellPower ( eutra_Cell2, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_Cell4, -75 )
    };
    var template (value) CellPowerList_Type v_CellPowerList_T3toT4 := {
      cs_CellPower ( eutra_Cell4, tsc_NonSuitableOffCellRS_EPRE )
    };
    timer t_IdleMode_GenericTimer := tsc_IdleMode_GenericTimer;
    
    f_EUTRA_Init(c1);
    
    //Set Sys info and cell info for cell 2, 4 & 11 to be used @ creation
    f_EUTRA_CellInfo_SetPLMN_1Entry ( eutra_Cell2, cs_HPLMN_002_11 );//PLMN2 according to 36.523-1 Table 6.0.1-1
    f_EUTRA_CellInfo_SetPLMN_1Entry ( eutra_Cell4, cs_HPLMN_003_21 );  //PLMN3 according to 36.523-1 Table 6.0.1-1
    f_EUTRA_CellInfo_SetPLMN_1Entry ( eutra_Cell11, cs_HPLMN_004_31 );  //PLMN4 according to 36.523-1 Table 6.0.1-1
    
    //Set TAC for Cell1, Cell2, Cell4 & Cell11
    //TAC for Cell1 is set to 1 in f_EUTRA_Init
    f_EUTRA_CellInfo_SetTAC (eutra_Cell2, tsc_IdleMode_TAC_Cell2);
    f_EUTRA_CellInfo_SetTAC (eutra_Cell4, tsc_IdleMode_TAC_Cell4);
    f_EUTRA_CellInfo_SetTAC (eutra_Cell11, tsc_IdleMode_TAC_Cell11);
    
    //Set maximum cell powel level for Cell 1, 2 & 4 to be used in creation
    f_EUTRA_CellInfo_InitMaxReferencePower ( eutra_Cell1, -75 );
    f_EUTRA_CellInfo_InitMaxReferencePower ( eutra_Cell2, -75 );
    f_EUTRA_CellInfo_InitMaxReferencePower ( eutra_Cell4, -75 );
    
    //Configure and activate all cells
    //Cell power level will be -85 dBm/15kHz & attenuation set so that cell is seen as OFF
    f_EUTRA_CellConfig_Def (eutra_Cell1);
    f_EUTRA_CellConfig_Def (eutra_Cell2);
    f_EUTRA_CellConfig_Def (eutra_Cell4);
    f_EUTRA_CellConfig_Def (eutra_Cell11);
    
    //Equip UE with a USIM containing default values except for those shown in Table 6.1.1.2a.3.1-2
    f_UT_USIM_Insert ( UT, "36.523-1 Table 6.1.1.2a.3.1-2" );
    
    //Preamble to ensure UE is in known state
    f_EUTRA_Preamble (eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_UE_Detach_SwitchOffUe (eutra_Cell1, RRC_IDLE);
    
    f_EUTRA_TestBody_Set ( true );
    
    //@siclog "Step 1" siclog@
    //SS adjusts cell levels according to row T1 of table 6.1.1.2a.3.2-1
    f_EUTRA_SetCellPowerList (v_CellPowerList_AtT1);

    //@siclog "Step 2" siclog@
    //Power on UE
    f_EUTRA_SwitchOnUEandStartIP(eutra_Cell1);
    t_IdleMode_GenericTimer.start;
    
    //@siclog "Step 3" siclog@
    //Check: Does the UE send an RRCConnectionRequest on Cell 1?
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_Cell1);   // @sic R5-120721 change 3 sic@
    t_IdleMode_GenericTimer.stop;
    // @verdict pass RRCConnectionRequest message received on Cell 1
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.2a Step 3");
    
    //@siclog "Step 4 - 18" siclog@
    //Steps 3 to 17 of the registration procedure described in TS 36.508 subclause 4.5.2.3 are performed on Cell 1.
    f_EUTRA_IdleUpdated_WithoutRRCConnReq ( eutra_Cell1, STATE2_IDLEUPDATE );
    
    //@siclog "Step 19" siclog@
    //Check: Is PLMN1 indicated by the UE?
    f_UT_PLMN_Check ( UT, tsc_UT_PLMN1 );
    //@verdict pass PLMN1 indicated by UE
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.2a Step 19");
    
    //@siclog "Step 20" siclog@
    //SS adjusts cell levels according to row T2 of table 6.1.1.2a.3.2-1
    f_EUTRA_SetCellPowerList ( v_CellPowerList_T1toT2 );
    t_IdleMode_GenericTimer.start;
    
    //@siclog "Step 21" siclog@
    //Check: Does the UE send an RRCConnectionRequest on Cell 2?
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_Cell2);   // @sic R5-120721 change 3 sic@
    t_IdleMode_GenericTimer.stop;
    // @verdict pass RRCConnectionRequest message received on Cell 2
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.2a Step 21");
    
    //@siclog "Step 22 - 26" siclog@
    //Steps 2 to 6 of the generic test procedure in TS 36.508 subclause 6.4.2.7 are performed on Cell 2.
    f_EUTRA_TrackingAreaUpdate_WithoutRrcConnReq (eutra_Cell2);
    
    //@siclog "Step 27" siclog@
    //Check: Is PLMN2 indicated by the UE?
    f_UT_PLMN_Check ( UT, tsc_UT_PLMN2 );
    //@verdict pass PLMN2 indicated by UE
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.2a Step 27");
    
    //@siclog "Step 28" siclog@
    //SS adjusts cell levels according to row T3 of table 6.1.1.2a.3.2-1
    f_EUTRA_SetCellPowerList ( v_CellPowerList_T2toT3 );
    t_IdleMode_GenericTimer.start;
    
    //@siclog "Step 29" siclog@
    //Check: Does the UE send an RRCConnectionRequest on Cell 4?
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_Cell4);   // @sic R5-120721 change 3 sic@
    t_IdleMode_GenericTimer.stop;
    //@verdict pass RRCConnectionRequest message received on Cell 4
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.2a Step 29");
    
    //@siclog "Step 30 - 34" siclog@
    //Steps 2 to 6 of the generic test procedure in TS 36.508 subclause 6.4.2.7 are performed on Cell 4.
    f_EUTRA_TrackingAreaUpdate_WithoutRrcConnReq (eutra_Cell4);
    
    //@siclog "Step 35" siclog@
    //Check: Is PLMN3 indicated by the UE?
    f_UT_PLMN_Check ( UT, tsc_UT_PLMN3 );
    //@verdict pass PLMN3 indicated by UE
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.2a Step 35");
    
    //@siclog "Step 36" siclog@
    //SS adjusts cell levels according to row T4 of table 6.1.1.2a.3.2-1
    f_EUTRA_SetCellPowerList ( v_CellPowerList_T3toT4 );
    t_IdleMode_GenericTimer.start;
    
    //@siclog "Step 37" siclog@
    //Check: Does the UE send an RRCConnectionRequest on Cell 11?
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_Cell11);   // @sic R5-120721 change 3 sic@
    t_IdleMode_GenericTimer.stop;
    //@verdict pass RRCConnectionRequest message received on Cell 11
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.2a Step 37");
    
    //@siclog "Step 38 - 41" siclog@
    //Steps 2 to 6 of the generic test procedure in TS 36.508 subclause 6.4.2.7 are performed on Cell 11.
    f_EUTRA_TrackingAreaUpdate_WithoutRrcConnReq (eutra_Cell11);
    
    //@siclog "Step 42" siclog@
    //Check: Is PLMN4 indicated by the UE?
    f_UT_PLMN_Check ( UT, tsc_UT_PLMN4 );
    //@verdict pass PLMN4 indicated by UE
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.2a Step 42");

    f_EUTRA_TestBody_Set ( false );

    //Switch/power off UE
    f_EUTRA_Postamble ( eutra_Cell11, E1_IDLE );
  }

  function f_TC_6_1_1_3_EUTRA ( ) runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList_AtT1 := {
      cs_CellPower (eutra_Cell1, -97),
      cs_CellPower (eutra_Cell12, -82),
      cs_CellPower (eutra_Cell13, -67)
    };
    var float v_WaitTime := 60.0;
    timer t_IdleMode_GenericTimer := tsc_IdleMode_GenericTimer;
    
    //Initialise all cell, security and mobile parameters
    f_EUTRA_Init (c3);
    
    //Set TAC according to 36.523-1 Table 6.0.1-2: Tracking Area Code (TAC) for E-UTRAN cells
    //TAC for Cell 1 is set to 1 in f_EUTRA_Init ();
    f_EUTRA_CellInfo_SetTAC (eutra_Cell12, tsc_IdleMode_TAC_Cell12);
    f_EUTRA_CellInfo_SetTAC (eutra_Cell13, tsc_IdleMode_TAC_Cell13);

    //Set sys info according to specific message contents
    fl_EUTRA_InitSIB5ForTc6_1_1_3();

    //Set maximum cell powel level for Cell 13 & 12 to be used in creation
    f_EUTRA_CellInfo_InitMaxReferencePower (eutra_Cell13, -67);
    f_EUTRA_CellInfo_InitMaxReferencePower (eutra_Cell12, -82);

    //Create and configure all cells
    f_EUTRA_CellConfig_Def (eutra_Cell1);
    f_EUTRA_CellConfig_Def (eutra_Cell12);
    f_EUTRA_CellConfig_Def (eutra_Cell13);

    //First switch cell back on
    f_EUTRA_SetCellPower (eutra_Cell1, tsc_ServingCellRS_EPRE);

    //Switch on UE
    f_EUTRA_SwitchOnUEandStartIP(eutra_Cell1); // @sic R5s120065 sic@

    //Bring UE to inital state with Equivalent PLMN2
    f_EUTRA_IdleUpdated_WithEplmn (eutra_Cell1,
                                   PREAMBLE,
                                   cs_PLMN_List_1PLMN (f_Asn2Nas_PlmnId (f_EUTRA_CellInfo_GetGutiPLMN (eutra_Cell12))));
                                   
    //Set Manual PLMN selection by manually select the already registered PLMN
    f_UT_ManualPLMN_Select (UT,
                            f_Asn2Nas_PlmnId (f_EUTRA_CellInfo_GetGutiPLMN (eutra_Cell1)),
                            -,
                            CNF_REQUIRED); //@sic R5s110633 Change 2 sic@

    f_EUTRA_TestBody_Set (true);

    //@siclog "Step 1" siclog@
    //SS adjusts cell levels according to row T1 of table 6.1.1.3.3.2-1
    f_EUTRA_SetCellPowerList (v_CellPowerList_AtT1);

    //Start the Idle Mode Generic timer for Step 2
    t_IdleMode_GenericTimer.start;

    //@siclog "Step 2" siclog@
    //Check if UE camps on Cell 12.
    //Send TAU accept with PLMN1 listed as Equivalent PLMN
    f_EUTRA_TrackingAreaUpdate_WithEplmn (eutra_Cell12,
                                          tsc_RRC_TI_Def,
                                          cs_PLMN_List_1PLMN(f_Asn2Nas_PlmnId(f_EUTRA_CellInfo_GetGutiPLMN(eutra_Cell1))));
    
    //Stop the Idle Mode Generic timer since TAU has happened
    t_IdleMode_GenericTimer.stop;
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.3 Step 2");

    //@siclog "Step 3" siclog@
    //Check if PLMN2 is indicated by UE
    f_UT_PLMN_Check ( UT, tsc_UT_PLMN2 );
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.3 Step 3");

    //@siclog "Step 4" siclog@
    //Check for no RRCConnectionRequest message on on Cell 13 within 60s
    f_EUTRA_CheckNoAttachOn1Cell (eutra_Cell13,
                                  v_WaitTime,
                                  "Test Case 6.1.1.3 Step 4 : RRCConnectionRequest message received on Cell 13 within wait time");

    f_EUTRA_TestBody_Set (false);

    //Switch/power off UE
    f_EUTRA_Postamble (eutra_Cell12, E1_IDLE);
  };

  function f_TC_6_1_1_3b_EUTRA ( ) runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList_AtT1 := {
      cs_CellPower (eutra_Cell1, -88),
      cs_CellPower (eutra_Cell2, -82)
    };
    var float v_WaitTime := 60.0;
    timer t_IdleMode_GenericTimer := tsc_IdleMode_GenericTimer;
    
    //Initialise all cell, security and mobile parameters
    f_EUTRA_Init (c1);
    
    //Set Sys info and cell info for cell 2 to be used @ creation
    f_EUTRA_CellInfo_SetPLMN_1Entry ( eutra_Cell2, cs_HPLMN_002_11 );//PLMN2 according to 36.523-1 Table 6.0.1-1
    
    //Set TAC according to 36.523-1 Table 6.0.1-2: Tracking Area Code (TAC) for E-UTRAN cells
    //TAC for Cell 1 is set to 1 in f_EUTRA_Init ();
    f_EUTRA_CellInfo_SetTAC (eutra_Cell2, tsc_IdleMode_TAC_Cell2);
    
    //Set maximum cell powel level for Cell 2 to be used in creation
    f_EUTRA_CellInfo_InitMaxReferencePower (eutra_Cell2, -82);
    
    //Create and configure all cells
    f_EUTRA_CellConfig_Def (eutra_Cell1);
    f_EUTRA_CellConfig_Def (eutra_Cell2);
    
    //First switch cell back on
    f_EUTRA_SetCellPower (eutra_Cell1, tsc_ServingCellRS_EPRE);
    
    //Switch on UE
    f_EUTRA_SwitchOnUEandStartIP(eutra_Cell1);
    
    //Bring UE to inital state with Equivalent PLMN2
    f_EUTRA_IdleUpdated_WithEplmn (eutra_Cell1,
                                   PREAMBLE,
                                   cs_PLMN_List_1PLMN (f_Asn2Nas_PlmnId (f_EUTRA_CellInfo_GetGutiPLMN (eutra_Cell2))));
    
    //Set Manual PLMN selection by manually select the already registered PLMN
    f_UT_ManualPLMN_Select (UT,
                            f_Asn2Nas_PlmnId (f_EUTRA_CellInfo_GetGutiPLMN (eutra_Cell1)),
                            -,
                            CNF_REQUIRED);
    
    f_EUTRA_TestBody_Set (true);
    
    //@siclog "Step 1" siclog@
    //SS adjusts cell levels according to row T1 of table 6.1.1.3b.3.2-1
    f_EUTRA_SetCellPowerList (v_CellPowerList_AtT1);
    
    //Start the Idle Mode Generic timer for Step 2
    t_IdleMode_GenericTimer.start;

    //@siclog "Step 2" siclog@
    //Check: Does the test result of generic test procedure in TS 36.508 subclause 6.4.2.7 indicate that the UE is camped on E-UTRAN Cell 2?
    //The TAU is accepted with PLMN1 listed as an Equivalent PLMN
    f_EUTRA_TrackingAreaUpdate_WithEplmn (eutra_Cell2,
                                          tsc_RRC_TI_Def,
                                          cs_PLMN_List_1PLMN(f_Asn2Nas_PlmnId(f_EUTRA_CellInfo_GetGutiPLMN(eutra_Cell1))));
    
    //Stop the Idle Mode Generic timer since TAU has happened
    t_IdleMode_GenericTimer.stop;
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.3b Step 2");
    
    //@siclog "Step 3" siclog@
    //Check: Is PLMN2 indicated by the UE?
    f_UT_PLMN_Check ( UT, tsc_UT_PLMN2 );
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.3b Step 3");
    
    //@siclog "Step 4" siclog@
    //Check: Does the UE send an RRCConnectionRequest on Cell 1 within 60s?
    f_EUTRA_CheckNoAttachOn1Cell (eutra_Cell1,
                                  v_WaitTime,
                                  "Test Case 6.1.1.3b Step 4 : RRCConnectionRequest message received on Cell 1 within wait time");
    
    f_EUTRA_TestBody_Set (false);

    //Switch/power off UE
    f_EUTRA_Postamble (eutra_Cell2, E1_IDLE);
  };

  function f_TC_6_1_1_4_EUTRA ( ) runs on EUTRA_PTC
  {
    var NAS_MSG_Indication_Type v_NasInd;
    var template (value) CellPowerList_Type v_CellPowerList_AtT0, v_CellPowerList_AtT1;
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(NORMAL); // @sic R5s110176 sic@
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType();
    var B3_Type v_PDNType := f_GetPdnType();
    timer t_IdleMode_GenericTimer := tsc_IdleMode_GenericTimer;
    
    v_CellPowerList_AtT0 := {
      cs_CellPower (eutra_Cell1, tsc_ServingCellRS_EPRE),
      cs_CellPower (eutra_Cell2, tsc_NonSuitableOffCellRS_EPRE) //@sic R5s110511 change 1/1 sic@

    };
    
    v_CellPowerList_AtT1 := {
      cs_CellPower (eutra_Cell1, tsc_NonSuitableOffCellRS_EPRE),
      cs_CellPower (eutra_Cell2, tsc_ServingCellRS_EPRE)
    };

    //Initialise all cell, security and mobile parameters
    f_EUTRA_Init(c1);//SIB2 & SIB3 are transmitted

    //Set Sys info and cell info for cell 1 & 2 to be used @ creation
    f_EUTRA_CellInfo_SetPLMN_1Entry (eutra_Cell1, cs_HPLMN_004_31);//PLMN4 for preamble
    f_EUTRA_CellInfo_SetPLMN_3Entries (eutra_Cell2,
                                       cs_HPLMN_001_11, //PLMN15
                                       cs_HPLMN_Def, //PLMN1
                                       cs_HPLMN_001_21, //PLMN16
                                       1); //Index which indicates what PLMN will be sent back in Accept messages => PLMN1 @sic R5s110511 change 1/2 sic@
    //Set TAC for cells
    //TAC for Cell1 is set to 1 in f_EUTRA_Init
    f_EUTRA_CellInfo_SetTAC (eutra_Cell2, tsc_IdleMode_TAC_Cell2);

    //Configure and activate all cells
    f_EUTRA_CellConfig_Def (eutra_Cell1);
    f_EUTRA_CellConfig_Def (eutra_Cell2);

    //Equip UE with a USIM containing default values except for those shown in Table 6.1.1.4.3.1-2
    f_UT_USIM_Insert (UT, "36.523-1 Table 6.1.1.4.3.1-2");
    
    //Make sure the UE is in automatic PLMN selection mode
    f_UT_AutomaticPLMN_Select (UT);
    
    //Preamble to ensure USIM is updated
    f_EUTRA_Preamble (eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_UE_Detach_SwitchOffUe (eutra_Cell1, RRC_IDLE);
    
    //Give correct PLMN identities according to T0 to cell 12
    f_EUTRA_CellInfo_SetPLMN_2Entries (eutra_Cell1,
                                       cs_HPLMN_001_11, //PLMN15
                                       cs_HPLMN_Def, //PLMN1
                                       1); //Index which indicates what PLMN will be sent back in Accept messages => PLMN1 @sic R5s110511 change 1/2 sic@
    f_EUTRA_ModifySysinfoUE_Off (eutra_Cell1); //@sic R5s110618 Change 1 sic@
    
    f_EUTRA_TestBody_Set (true);
    
    //@siclog "Step 1" siclog@
    f_EUTRA_SetCellPowerList (v_CellPowerList_AtT0);
    
    //@siclog "Step 2" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_Cell1); // @sic R5s120065 sic@
    t_IdleMode_GenericTimer.start;
    
    //@siclog "Step 3" siclog@
    //Receive RRCConnectionRequest on Cell 1
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_Cell1);   // @sic R5-120721 change 3 sic@
    t_IdleMode_GenericTimer.stop;
    //* @verdict pass RRCConnectionRequest message received on Cell 1
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.4 Step 3");
    
    //@siclog "Step 4" siclog@
    //Transmits RRCConnectionSetup
    f_EUTRA_RRC_ConnectionSetup_Def (eutra_Cell1); //@sic R5s110511 change 1/1 sic@
    
    //@siclog "Step 5" siclog@
    //Receive RRCConnectionSetupComplete
    v_NasInd := f_EUTRA_RRCConnectionSetupComplete_Def(eutra_Cell1,                                       // @sic R5s120121 MCC160 implementation sic@
                                                       cr_508_RRCConnectionSetupComplete (tsc_RRC_TI_Def, ?, -, 2),   // selectedPLMN_Identity = 2
                                                       cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                         cr_508_ATTACH_REQUEST(v_AttachType,
                                                                                                               v_AdditionalUpdateType),
                                                                                         cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType)));

    //@siclog "Step 6-18" siclog@
    f_EUTRA_IdleUpdated_Step5_17 (eutra_Cell1, STATE2_IDLEUPDATE, NORMAL, v_NasInd);
    
    //@siclog "Step 19" siclog@
    f_UT_PLMN_Check (UT, tsc_UT_PLMN1);
    //* @verdict pass PLMN1 indicated by UE
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.4 Step 19");
    
    //@siclog "Step 20" siclog@
    f_EUTRA_SetCellPowerList (v_CellPowerList_AtT1);

    //@siclog "Step 21" siclog@
    //@sic R5s110511 change 1/4 - Step 21 added sic@
    t_IdleMode_GenericTimer.start;
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_Cell2);   // @sic R5-120721 change 3 sic@
    t_IdleMode_GenericTimer.stop;
    //* @verdict pass RRCConnectionRequest message received in Cell 2
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.4 Step 21");

    //@siclog "Step 22 - 26" siclog@
    f_EUTRA_TrackingAreaUpdate_WithoutRrcConnReq (eutra_Cell2,
                                                  -,
                                                  -,
                                                  2); //selectedPLMN_Identity = 2 @sic R5s110511 change 1/3 sic@

    //@siclog "Step 27" siclog@
    f_UT_PLMN_Check (UT, tsc_UT_PLMN1);
    //* @verdict pass PLMN1 is indicated by UE
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.4 Step 27");
    
    f_EUTRA_TestBody_Set (false);
    
    //Switch/Power off UE
    f_EUTRA_Postamble (eutra_Cell2,
                       E1_IDLE,
                       -,
                       -,
                       2); //selectedPLMN_Identity = 2 @sic R5s110511 change 1/3 sic@
  }

  function f_TC_6_1_1_6_EUTRA ( ) runs on EUTRA_PTC
  {
    var float v_RRC_NoResponseTime := 90.0;//Value according to 36.523-1 Table 6.1.1.6.3.2-1 Step 12. @sic R5-121753 sic@
    var template (value) CellPowerList_Type v_CellPowerList_AtT1, v_CellPowerList_T1toT2, v_CellPowerList_T2toT1, v_CellPowerList_T1toT3;
    timer t_IdleMode_GenericTimer := tsc_IdleMode_GenericTimer;
    
    v_CellPowerList_AtT1 := {
      cs_CellPower (eutra_Cell12, tsc_ServingCellRS_EPRE),
      cs_CellPower (eutra_Cell14, tsc_ServingCellRS_EPRE)
    };
    v_CellPowerList_T1toT2 := {
      cs_CellPower (eutra_Cell1, tsc_NonSuitableOffCellRS_EPRE),
      cs_CellPower (eutra_Cell14, tsc_NonSuitableOffCellRS_EPRE)
    };
    v_CellPowerList_T2toT1 := {
      cs_CellPower (eutra_Cell1, tsc_ServingCellRS_EPRE),
      cs_CellPower (eutra_Cell14, tsc_ServingCellRS_EPRE)
    };
    v_CellPowerList_T1toT3 := {
      cs_CellPower (eutra_Cell12, tsc_NonSuitableOffCellRS_EPRE),
      cs_CellPower (eutra_Cell13, tsc_ServingCellRS_EPRE)
    };
    
    //Initialise all cell, security and mobile parameters
    //1. c3 initialises SIB2, SIB3 and SIB5 for all cells on same PLMN => no SIB5 would be initialised for cell 12, 13 & 14
    //2. Since cells 12, 13 & 14 are on different PLMN than cell 1 => cell 12, 13 & 14 will not be present in SIB5 of cell 1
    //3. Prose does not specify any non default combination
    //=> combination 1 will be used
    f_EUTRA_Init(c1);//SIB2 & SIB3 are transmitted
    
    //PLMNs will be according to 36.508 Table 4.4.2-2. i.e.:
    //Cell1 PLMN1 : 00101
    //Cell12 PLMN2  : 00211
    //Cell13 PLMN3 : 00321
    //Cell14 PLMN4 : 00431
    
    //Set TAC for Cell1, Cell12 & Cell13
    //TAC for Cell1 is set to 1 in f_EUTRA_Init
    f_EUTRA_CellInfo_SetTAC (eutra_Cell12, tsc_IdleMode_TAC_Cell12);
    f_EUTRA_CellInfo_SetTAC (eutra_Cell13, tsc_IdleMode_TAC_Cell13);
    f_EUTRA_CellInfo_SetTAC (eutra_Cell14, tsc_IdleMode_TAC_Cell14);
    
    //Create and configure all cells
    f_EUTRA_CellConfig_Def (eutra_Cell1);
    f_EUTRA_CellConfig_Def (eutra_Cell12);
    f_EUTRA_CellConfig_Def (eutra_Cell13);
    f_EUTRA_CellConfig_Def (eutra_Cell14);
  
    //Equip UE with a USIM containing default values except for those shown in Table 6.1.1.6.3.1-2
    f_UT_USIM_Insert (UT, "36.523-1 Table 6.1.1.6.3.1-2");
    
    //Make sure the UE is in automatic PLMN selection mode
    f_UT_AutomaticPLMN_Select (UT);
    
    //Bring UE to initial state
    f_EUTRA_Preamble (eutra_Cell1, STATE2_IDLEUPDATE);
    
    f_EUTRA_TestBody_Set (true);
    
    //@siclog "Step 1" siclog@
    //Set power level setting according to the row "T1" in table 6.1.1.6.3.2-1
    f_EUTRA_SetCellPowerList (v_CellPowerList_AtT1);
    t_IdleMode_GenericTimer.start;
    
    //@siclog "Step 2" siclog@
    //Cause the UE in Automatic network selection mode to initiate user reselection and registration onto an available PLMN
    f_UT_TriggerUserReselection (UT);  // @sic R5-121753 sic@
    
    //@siclog "Step 3" siclog@
    //Start Idle Mode generic timer and wait for RRCConnectionRequest on Cell 12
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_Cell12);   // @sic R5-120721 change 3 sic@

    t_IdleMode_GenericTimer.stop;
    //* @verdict pass RRCConnectionRequest message received on Cell 12
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.6 Step 3");
    
    //@siclog "Step 4-8" siclog@
    //Perform steps 2-6 of TAU procedure (36.508 cl. 6.4.2.7)
    f_EUTRA_TrackingAreaUpdate_WithoutRrcConnReq (eutra_Cell12);
    
    //@siclog "Step 9" siclog@
    //Check if PLMN2 is indicated by UE
    f_UT_PLMN_Check (UT, tsc_UT_PLMN2);
    
    //@siclog "Step 10" siclog@
    //Set power level setting according to the row "T2" in table 6.1.1.6.3.2-1
    f_EUTRA_SetCellPowerList (v_CellPowerList_T1toT2);
    
    //@siclog "Step 11" siclog@
    // Cause the UE in Automatic network selection mode to initiate user reselection and registration onto an available PLMN
    f_UT_TriggerUserReselection (UT);  // @sic R5-121753 sic@
    
    //@siclog "Step 12" siclog@
    //Start wait timer and wait for RRCConnectionRequest on Cell 12
    f_EUTRA_CheckNoAttachOn1Cell (eutra_Cell12,
                                  v_RRC_NoResponseTime,
                                  "Test Case 6.1.1.6 Step 12 : RRCConnectionRequest message received on Cell 12 within wait time");
    
    //@siclog "Step 13" siclog@
    //Check if PLMN2 is indicated by UE
    f_UT_PLMN_Check (UT, tsc_UT_PLMN2);
    //* @verdict pass PLMN2 is indicated by UE
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.6 Step 13");
    
    //@siclog "Step 14" siclog@
    //Set power level setting according to the row "T1" in table 6.1.1.6.3.2-1
    f_EUTRA_SetCellPowerList (v_CellPowerList_T2toT1);
    t_IdleMode_GenericTimer.start;
    
    //@siclog "Step 15" siclog@
    //Cause the UE in Automatic network selection mode to initiate user reselection and registration onto an available PLMN
    f_UT_TriggerUserReselection (UT);  // @sic R5-121753 sic@
    
    //@siclog "Step 16" siclog@
    //Start Idle Mode generic timer and wait for RRCConnectionRequest on Cell 1
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_Cell1);   // @sic R5-120721 change 3 sic@

    t_IdleMode_GenericTimer.stop;
    //* @verdict pass RRCConnectionRequest message received on Cell 1
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.6 Step 16");
    
    //@siclog "Step 17-21" siclog@
    //Perform steps 2-6 of TAU procedure (36.508 cl. 6.4.2.7)
    f_EUTRA_TrackingAreaUpdate_WithoutRrcConnReq (eutra_Cell1);
    
    //@siclog "Step 22" siclog@
    //Check if PLMN1 is indicated by UE
    f_UT_PLMN_Check (UT, tsc_UT_PLMN1);
    //* @verdict pass PLMN1 is indicated by UE
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.6 Step 22");
    
    //@siclog "Step 23" siclog@
    //Set power level setting according to the row "T3" in table 6.1.1.6.3.2-1
    f_EUTRA_SetCellPowerList (v_CellPowerList_T1toT3);
    t_IdleMode_GenericTimer.start;
    
    //@siclog "Step 24" siclog@
    //Cause the UE in Automatic network selection mode to initiate user reselection and registration onto an available PLMN
    f_UT_TriggerUserReselection (UT);  // @sic R5-121753 sic@
    
    //@siclog "Step 25" siclog@
    //Start Idle Mode generic timer and wait for RRCConnectionRequest on Cell 13
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_Cell13);   // @sic R5-120721 change 3 sic@

    t_IdleMode_GenericTimer.stop;
    //* @verdict pass RRCConnectionRequest message received on Cell 13
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.6 Step 25");
    
    //@siclog "Step 26-30" siclog@
    //Perform steps 2-6 of TAU procedure (36.508 cl. 6.4.2.7)
    f_EUTRA_TrackingAreaUpdate_WithoutRrcConnReq (eutra_Cell13);
    
    //@siclog "Step 31" siclog@
    //Check if PLMN3 is indicated by UE
    f_UT_PLMN_Check (UT, tsc_UT_PLMN3);
    //* @verdict pass PLMN1 is indicated by UE
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.6 Step 31");
    
    f_EUTRA_TestBody_Set (false);
    
    //Switch/Power off UE
    f_EUTRA_Postamble (eutra_Cell13, E1_IDLE);
  }

  function f_TC_6_1_1_6a_EUTRA ( ) runs on EUTRA_PTC
  {
    var float v_RRC_NoResponseTime := 90.0; //Value according to 36.523-1 Table 6.1.1.6.3.2-1 Step 12. @sic R5-121753 sic@
    var template (value) CellPowerList_Type v_CellPowerList_AtT1;
    var template (value) CellPowerList_Type v_CellPowerList_T1toT2;
    var template (value) CellPowerList_Type v_CellPowerList_T3toT4;
    var template (value) CellPowerList_Type v_CellPowerList_T3;
    timer t_IdleMode_GenericTimer := tsc_IdleMode_GenericTimer;
    
    v_CellPowerList_AtT1 := {
      cs_CellPower (eutra_Cell1, tsc_ServingCellRS_EPRE),
      cs_CellPower (eutra_Cell2, -75),
      cs_CellPower (eutra_Cell11, tsc_ServingCellRS_EPRE)
    };
    v_CellPowerList_T1toT2 := {
      cs_CellPower (eutra_Cell1, tsc_NonSuitableOffCellRS_EPRE),
      cs_CellPower (eutra_Cell2, tsc_ServingCellRS_EPRE),
      cs_CellPower (eutra_Cell11, tsc_NonSuitableOffCellRS_EPRE)
    };
    v_CellPowerList_T3 := {    // @sic R5s120158 sic@
      cs_CellPower (eutra_Cell1, -75),
      cs_CellPower (eutra_Cell2, tsc_ServingCellRS_EPRE),
      cs_CellPower (eutra_Cell11, tsc_ServingCellRS_EPRE)
    };
    v_CellPowerList_T3toT4 := {  // @sic R5s120158 sic@
      cs_CellPower (eutra_Cell1, tsc_ServingCellRS_EPRE),
      cs_CellPower (eutra_Cell2, tsc_NonSuitableOffCellRS_EPRE),
      cs_CellPower (eutra_Cell4, -75),
      cs_CellPower (eutra_Cell11, tsc_ServingCellRS_EPRE)
    };
    
    //Initialise all cell, security and mobile parameters
    f_EUTRA_Init(c1);
    
    //Set Sys info and cell info for cell 2, 4 & 11 to be used @ creation
    f_EUTRA_CellInfo_SetPLMN_1Entry ( eutra_Cell2, cs_HPLMN_002_11 );//PLMN2 according to 36.523-1 Table 6.0.1-1
    f_EUTRA_CellInfo_SetPLMN_1Entry ( eutra_Cell4, cs_HPLMN_003_21 );  //PLMN3 according to 36.523-1 Table 6.0.1-1
    f_EUTRA_CellInfo_SetPLMN_1Entry ( eutra_Cell11, cs_HPLMN_004_31 );  //PLMN4 according to 36.523-1 Table 6.0.1-1
    
    //Set TAC for Cell1, Cell2, Cell4 & Cell11
    //TAC for Cell1 is set to 1 in f_EUTRA_Init
    f_EUTRA_CellInfo_SetTAC (eutra_Cell2, tsc_IdleMode_TAC_Cell2);
    f_EUTRA_CellInfo_SetTAC (eutra_Cell4, tsc_IdleMode_TAC_Cell4);
    f_EUTRA_CellInfo_SetTAC (eutra_Cell11, tsc_IdleMode_TAC_Cell11);

    //Set maximum cell powel level for Cell 2 & 11 to be used in creation
    f_EUTRA_CellInfo_InitMaxReferencePower ( eutra_Cell1, -75 ); // @sic R5s120158 sic@
    f_EUTRA_CellInfo_InitMaxReferencePower ( eutra_Cell2, -75 );
    f_EUTRA_CellInfo_InitMaxReferencePower ( eutra_Cell4, -75 );  // @sic R5s120158 sic@
    f_EUTRA_CellInfo_InitMaxReferencePower ( eutra_Cell11, -75 );
    
    //Configure and activate all cells
    //Cell power level will be -85 dBm/15kHz & attenuation set so that cell is seen as OFF
    f_EUTRA_CellConfig_Def (eutra_Cell1);
    f_EUTRA_CellConfig_Def (eutra_Cell2);
    f_EUTRA_CellConfig_Def (eutra_Cell4);
    f_EUTRA_CellConfig_Def (eutra_Cell11);
  
    //Equip UE with a USIM containing default values except for those shown in Table 6.1.1.6a.3.1-2
    f_UT_USIM_Insert (UT, "36.523-1 Table 6.1.1.6a.3.1-2");
    
    //Make sure the UE is in automatic PLMN selection mode
    f_UT_AutomaticPLMN_Select (UT);
    
    //Bring UE to initial state
    f_EUTRA_Preamble (eutra_Cell1, STATE2_IDLEUPDATE);
    
    f_EUTRA_TestBody_Set (true);
    
    //@siclog "Step 1" siclog@
    //The SS changes the power level setting according to the row T1 in table 6.1.1.6a.3.2-1
    f_EUTRA_SetCellPowerList (v_CellPowerList_AtT1);
    t_IdleMode_GenericTimer.start;
    
    //@siclog "Step 2" siclog@
    //Cause the UE in Automatic network selection mode to initiate user reselection and registration onto an available PLMN
    f_UT_TriggerUserReselection (UT);  // @sic R5-121753 sic@
    
    //@siclog "Step 3" siclog@
    //Check: Does the UE send an RRCConnectionRequest on Cell 2?
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_Cell2);   // @sic R5-120721 change 3 sic@

    t_IdleMode_GenericTimer.stop;
    //@verdict pass RRCConnectionRequest message received on Cell 2
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.6a Step 3");
    
    //@siclog "Step 4-8" siclog@
    //Steps 2 to 6 of the generic test procedure in TS 36.508 subclause 6.4.2.7 are performed on Cell 2.
    f_EUTRA_TrackingAreaUpdate_WithoutRrcConnReq (eutra_Cell2);
    
    //@siclog "Step 9" siclog@
    //Check: Is PLMN 2 indicated by the UE?
    f_UT_PLMN_Check (UT, tsc_UT_PLMN2);
    //@verdict pass PLMN2 is indicated by UE
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.6a Step 9");
    
    //@siclog "Step 10" siclog@
    //The SS changes the power level setting according to the row T2 in table 6.1.1.6a.3.2-1.
    f_EUTRA_SetCellPowerList (v_CellPowerList_T1toT2);
    
    //@siclog "Step 11" siclog@
    //Cause the UE in Automatic network selection mode to initiate user reselection and registration onto an available PLMN
    f_UT_TriggerUserReselection (UT);  // @sic R5-121753 sic@
    
    //@siclog "Step 12" siclog@
    //Check: Does the UE send an RRCConnectionRequest on Cell 2 within 30 s?
    f_EUTRA_CheckNoAttachOn1Cell (eutra_Cell2,
                                  v_RRC_NoResponseTime,
                                  "Test Case 6.1.1.6a Step 12 : RRCConnectionRequest message received on Cell 2 within wait time");
    //@siclog "Step 13" siclog@
    //Check: Is PLMN 2 indicated by the UE?
    f_UT_PLMN_Check (UT, tsc_UT_PLMN2);
    //@verdict pass PLMN2 is indicated by UE
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.6a Step 13");
    
    //@siclog "Step 14" siclog@
    //The SS changes the power level setting according to the row T3 in table 6.1.1.6a.3.2-1.
    f_EUTRA_SetCellPowerList (v_CellPowerList_T3);   // @sic R5s120158 sic@
    t_IdleMode_GenericTimer.start;
    
    //@siclog "Step 15" siclog@
    //Cause the UE in Automatic network selection mode to initiate user reselection and registration onto an available PLMN.
    f_UT_TriggerUserReselection (UT);  // @sic R5-121753 sic@
    
    //@siclog "Step 16" siclog@
    //Check: Does the UE send an RRCConnectionRequest on Cell 1?
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_Cell1);   // @sic R5-120721 change 3 sic@
    
    t_IdleMode_GenericTimer.stop;
    //@verdict pass RRCConnectionRequest message received on Cell 1
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.6a Step 16");
    
    //@siclog "Step 17-21" siclog@
    //Steps 2 to 6 of the generic test procedure in TS 36.508 subclause 6.4.2.7 are performed on Cell 1.
    f_EUTRA_TrackingAreaUpdate_WithoutRrcConnReq (eutra_Cell1);
    
    //@siclog "Step 22" siclog@
    //Check: Is PLMN 1 indicated by the UE?
    f_UT_PLMN_Check (UT, tsc_UT_PLMN1);
    //@verdict pass PLMN1 is indicated by UE
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.6a Step 22");
    
    //@siclog "Step 23" siclog@
    //The SS changes the power level setting according to the row T3 in table 6.1.1.6a.3.2-1.
    f_EUTRA_SetCellPowerList (v_CellPowerList_T3toT4);  // @sic R5s120158 sic@
    t_IdleMode_GenericTimer.start;
    
    //@siclog "Step 24" siclog@
    //Cause the UE in Automatic network selection mode to initiate user reselection and registration onto an available PLMN.
    f_UT_TriggerUserReselection (UT);  // @sic R5-121753 sic@
    
    //@siclog "Step 25" siclog@
    //Check: Does the UE send an RRCConnectionRequest on Cell 4?
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_Cell4);   // @sic R5-120721 change 3 sic@
    
    t_IdleMode_GenericTimer.stop;
    //@verdict pass RRCConnectionRequest message received on Cell 4
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.6a Step 25");
    
    //@siclog "Step 26-30" siclog@
    //Steps 2 to 6 of the generic test procedure in TS 36.508 subclause 6.4.2.7 are performed on Cell 4.
    f_EUTRA_TrackingAreaUpdate_WithoutRrcConnReq (eutra_Cell4);
    
    //@siclog "Step 31" siclog@
    //Check: Is PLMN 3 indicated by the UE?
    f_UT_PLMN_Check (UT, tsc_UT_PLMN3);
    //@verdict pass PLMN3 is indicated by UE
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Test Case 6.1.1.6a Step 31");
    
    f_EUTRA_TestBody_Set (false);
    
    //Switch/Power off UE
    f_EUTRA_Postamble (eutra_Cell4, E1_IDLE);
  }

}
