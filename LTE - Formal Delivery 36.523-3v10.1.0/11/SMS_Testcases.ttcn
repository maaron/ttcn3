// ***************************************************************************
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2012, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3v10.1.0
// * $Date: 2012-08-08 15:47:43 +0200 (Wed, 08 Aug 2012) $
// * $Rev: 7106 $
// ***************************************************************************

module SMS_Testcases {

  import from EUTRA_RRC_ASN1_Definitions language "ASN.1:1997" all;
  import from CommonDefs all;
  import from EPS_NAS_Constants all;
  import from EPS_NAS_MsgContainers all;
  import from EPS_NAS_SMS_Templates all;
  import from EPS_NAS_Templates all;
  import from EPS_NAS_TypeDefs all;
  import from EUTRA_ASP_SrbDefs all;
  import from EUTRA_AspCommon_Templates all;
  import from EUTRA_CellInfo all;
  import from EUTRA_CommonDefs all;
  import from EUTRA_CommonProcedures all;
  import from EUTRA_Component all;
  import from EUTRA_ConfigurationSteps all;
  import from EUTRA_NASSteps all;
  import from EUTRA_Paging all;
  import from EUTRA_RRCSteps all;
  import from EUTRA_RRC_Templates all;
  import from EUTRA_SRB_Templates all;
  import from EUTRA_SecurityFunctions all;
  import from EUTRA_SecuritySteps all;
  import from Parameters all;
  import from SMS_Templates all;
  import from SMS_TypeDefs all;
  import from UpperTesterFunctions all;

const charstring tsc_AT_ResultOK := "<CR><LF>OK<CR><LF>";   /* @status    APPROVED */

group LocalFunctions {

function f_SMS_PDU_Encvalue(template (value) CP_PDU_Type p_CP_PDU) return octetstring
{
  var bitstring v_Bitstring := encvalue(p_CP_PDU);
  var octetstring v_Octetstring := bit2oct(f_OctetAlignedBitString(v_Bitstring));
  return v_Octetstring;
}

function f_SMS_CP_PDU_DecodeAndMatch(bitstring p_EncodedSMS_Message,
                                     template CP_PDU_Type p_Expected_CP_PDU,
                                     charstring p_Testcase,
                                     charstring p_Step) runs on EUTRA_PTC return CP_PDU_Type
{
  var CP_PDU_Type v_Received_CP_PDU;
  var integer v_DecodeResult := decvalue(p_EncodedSMS_Message, v_Received_CP_PDU);
  
  if (v_DecodeResult != 0) {
    f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, p_Testcase & ": SMS_CP_PDU cannot be decoded in " & p_Step);
  }
  if (not match(v_Received_CP_PDU, p_Expected_CP_PDU))  {
    //* @verdict fail Received decoded template does not match with the expected template
    f_EUTRA_SetVerdictFailOrInconc (__FILE__, __LINE__, p_Testcase & ": SMS_CP_PDU cannot be matched in " & p_Step);
  }
  return v_Received_CP_PDU;
}

function fl_CheckStringStartWith(charstring p_SourceString,
                                 charstring p_StartString)
  return boolean
{
  var integer v_Length := lengthof(p_StartString);
  var charstring v_SubStr;
  var boolean v_Result := false;
  
  if (v_Length <= lengthof(p_SourceString)) {
    v_SubStr := substr(p_SourceString, 0, v_Length);
    v_Result := (v_SubStr == p_StartString);
  }
  return v_Result;
}

function fl_SMS_CheckResultString(charstring p_ResultString,
                                  charstring p_ExpectedStartString) runs on EUTRA_PTC
{
  if (not fl_CheckStringStartWith(p_ResultString, p_ExpectedStartString))
    {
      f_EUTRA_SetVerdictFailOrInconc (__FILE__, __LINE__, "The AT CMD results in an error.");
    }
}

function f_SMS_AT_CSMS(charstring p_MsgService) runs on EUTRA_PTC
{
  var charstring v_ResultStr := f_UT_SelectMessageService(UT, p_MsgService);
  fl_SMS_CheckResultString(v_ResultStr, "<CR><LF>+CSMS:");
}

function f_SMS_AT_CPMS(charstring p_Mem1,
                       charstring p_Mem2,
                       charstring p_Mem3) runs on EUTRA_PTC
{
  var charstring v_ResultStr := f_UT_SetPreferredMessageStorage(UT, p_Mem1, p_Mem2, p_Mem3);
  fl_SMS_CheckResultString(v_ResultStr, "<CR><LF>+CPMS:");
}

function f_SMS_AT_CMGF(charstring p_Mode) runs on EUTRA_PTC
{
  var charstring v_ResultStr := f_UT_SetMessageFormat(UT, p_Mode);
  fl_SMS_CheckResultString(v_ResultStr, tsc_AT_ResultOK);
}

function f_SMS_AT_CSCS(charstring p_Chset) runs on EUTRA_PTC
{
  var charstring v_ResultStr := f_UT_SelectCharacterSet(UT, p_Chset);
  fl_SMS_CheckResultString(v_ResultStr, tsc_AT_ResultOK);
}

function f_SMS_AT_CMGD_ALL() runs on EUTRA_PTC
{
  var charstring v_ResultStr := f_UT_DeleteMessageFromStorage_DELFLAG(UT, 1, 4);
  fl_SMS_CheckResultString(v_ResultStr, tsc_AT_ResultOK);
}

function f_SMS_AT_CSCA(charstring p_Sca,
                       integer p_Tosca) runs on EUTRA_PTC
{
  var charstring v_ResultStr := f_UT_ServiceCentreAddress(UT, p_Sca, p_Tosca);
  fl_SMS_CheckResultString(v_ResultStr, tsc_AT_ResultOK);
}

function f_SMS_AT_CMGW_Text(charstring p_Da,
                            integer p_Toda,
                            charstring p_Text) runs on EUTRA_PTC
{ // @sic R5s110064 sic@
  var charstring v_ResultStr := f_UT_WriteMessageToMemoryText(UT, p_Da, int2str(p_Toda), p_Text);
  fl_SMS_CheckResultString(v_ResultStr, "<CR><LF>+CMGW:");
}

function f_SMS_AT_CMGW_PDU(integer p_Len,
                           charstring p_Text) runs on EUTRA_PTC
{
  var charstring v_ResultStr := f_UT_WriteMessageToMemoryPDU(UT, int2str(p_Len), p_Text);
  fl_SMS_CheckResultString(v_ResultStr, "<CR><LF>+CMGW:");
}

function f_SMS_AT_CMSS(integer p_Index) runs on EUTRA_PTC
{ // @sic R5s110091 sic@
  f_UT_SendStoredOneMessage(UT, p_Index);
}

function f_SMS_AT_CSMP(integer p_Fo,
                       integer p_Vp,
                       integer p_Pid) runs on EUTRA_PTC
{
  var charstring v_ResultStr := f_UT_SetTextModeParameters(UT, p_Fo, p_Vp, p_Pid);
  fl_SMS_CheckResultString(v_ResultStr, tsc_AT_ResultOK);
}

function f_SMS_MMI_ChkMsgDisplayed(integer p_Length,
                                   charstring p_Msg) runs on EUTRA_PTC
{
  var boolean v_Result := f_UT_ChkMsgDisplayed(UT, p_Length, p_Msg);
  if (v_Result == false) {
    f_EUTRA_SetVerdictFailOrInconc (__FILE__, __LINE__, "The MMI CMD results in an error.");
  }
}

} // end of group LocalFunctions

group TestcaseImplementations {

function f_TC_11_1_1_EUTRA() runs on EUTRA_PTC
{
  // @desc MT-SMS over SGs / idle mode
  // @sic R5s100586 sic@

  if ((pc_Combined_Attach==false) or (px_AttachTypeTested!=COMBINED_ATTACH)){
    FatalError(__FILE__, __LINE__, "invalid value for Attach type");
  } // @sic R5s110517 sic@ @sic R5-113623 sic@ @sic R5-113814 sic@
  
  f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);  // @sic R5s106627 sic@

  // create cell and send out system information
  f_EUTRA_CellConfig_Def (eutra_CellA);
  // -  UE is in state Registered, Idle Mode (state 2) on Cell A
  f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, Combined);  // @sic R5s110517 sic@
  // Set message service as indicated in the PIXIT.
  f_SMS_AT_CSMS(px_SMS_Service);
  // Set Preferrred memory to preferred memories as indicated in the PIXIT.
  f_SMS_AT_CPMS(px_SMS_PrefMem1, px_SMS_PrefMem2, px_SMS_PrefMem3);
  // Set message format to value given as PIXIT parameter
  f_SMS_AT_CMGF(px_SMS_MsgFrmt);  // @sic R5s110750 sic@
  // Set Character Set "GSM"
  f_SMS_AT_CSCS("""GSM""");
  // Set the UE to delete all messages from Preferred message store
  f_SMS_AT_CMGD_ALL();
  
  f_EUTRA_TestBody_Set(true);
  
  fl_TC_11_1_1_Body();
  
  // Postamble
  f_EUTRA_TestBody_Set(false);
  f_EUTRA_Postamble(eutra_CellA, E2_CONNECTED);
  
} // f_TC_11_1_1_EUTRA

function fl_TC_11_1_1_Body() runs on EUTRA_PTC
{
  var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get(); // get current security parameters
  var GutiParameters_Type v_GutiParams := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
  //
  var SRB_COMMON_IND v_ReceivedAsp;
  var NAS_MSG_Indication_Type v_NasInd;
  var NAS_MessageContainer v_NAS_RcvMsgContainer_SMS;
  var template CP_PDU_Type v_ExpSMS_CP_PDU;
  var bitstring v_NAS_RcvBitsMsgContainer_SMS;

  var O4_Type v_NasCountUL;
  var template (value) EUTRA_FDD_TDD_CellInfo_Type  v_EUTRA_FDD_TDD_Info;
  var template (value) PhysicalConfigDedicated_AntennaInfo_Type  v_AntennaInfo;
  
  //@siclog "Step 1" siclog@
  //The SS pages the UE using S-TMSI with CN domain indicator set to 'PS'.
  f_EUTRA_UE_Page(eutra_CellA,
                  cs_NasPaging_OneRecord(cs_PagingUE_Identity_S_TMSI(v_GutiParams.MME_Code,
                                                                     v_GutiParams.M_TMSI)));
  
  //@siclog "Step 2" siclog@
  //The UE transmits a SERVICE REQUEST message.
  v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                             tsc_RRC_TI_Def,
                                             cr_EstablishmentCause_mt_Access,
                                             cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                               cr_508_SERVICE_REQUEST(v_SecurityParams.KSIasme)));
  
  v_NasCountUL := v_NasInd.SecurityProtection.NasCount;
  v_SecurityParams := f_EUTRA_RRC_ActivateSecurity(eutra_CellA, v_SecurityParams, v_NasCountUL); // RRC SECURITY COMMAND & COMPLETE
  f_EUTRA_Security_Set ( v_SecurityParams ); //Saving security parameters
  
  // RRC Connection Reconfiguration to configure DRB
  v_EUTRA_FDD_TDD_Info := f_EUTRA_CellInfo_GetFDD_TDD_Info (eutra_CellA);
  v_AntennaInfo := f_EUTRA_CellInfo_GetAntennaInfoDedicated (eutra_CellA);
  f_EUTRA_RRCConnectionReconfiguration_RadioResConfig(eutra_CellA,
                                                      tsc_RRC_TI_Def,
                                                      cs_SRB2_1AM_DRB_Config_Def(v_EUTRA_FDD_TDD_Info.cqi_ReportConfig,
                                                                                 v_EUTRA_FDD_TDD_Info.soundingRS_UL_Config,
                                                                                 v_AntennaInfo));
  
  //@siclog "Step 3" siclog@
  // The SS transmits a CP-DATA containing an RP-DATA RPDU (SMS DELIVER TPDU)
  // encapsulated in a Downlink NAS transport message to the UE.
  SRB.send(cas_SRB2_NasPdu_REQ(eutra_CellA,
                               cs_TimingInfo_Now,
                               cs_NAS_Request (tsc_SHT_IntegrityProtected_Ciphered,
                                               cs_SMS_DL_NAS_Transport (tsc_SHT_NoSecurityProtection,
                                                                        cs_NAS_MsgContainer_SMS (f_SMS_PDU_Encvalue(cs_CP_DATA_PDU (cs_MT_TI0_FromSS,
                                                                                                                                    cs_CP_UserData_DELIVER('7788996655'O))))))));

  //@siclog "Step 4" siclog@
  //Check: Does the UE transmit a CP-ACK encapsulated in an Uplink NAS transport message?  // Store procedure transaction id to be used in SS responses.
  SRB.receive(car_SRB2_NasPdu_IND(eutra_CellA,
                                  cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                    cr_SMS_UL_NAS_Transport (tsc_SHT_NoSecurityProtection,
                                                                             cr_NAS_MsgContainer_SMS (?) )))) -> value v_ReceivedAsp;
  v_NAS_RcvMsgContainer_SMS := v_ReceivedAsp.Signalling.Nas[0].Pdu.Msg.ul_NAS_TRANSPORT.nasMessage;
  v_NAS_RcvBitsMsgContainer_SMS := oct2bit(v_NAS_RcvMsgContainer_SMS.smsmessage);

  v_ExpSMS_CP_PDU := cr_CP_ACK_PDU (cr_MT_TI0_FromUE);
  f_SMS_CP_PDU_DecodeAndMatch(v_NAS_RcvBitsMsgContainer_SMS, v_ExpSMS_CP_PDU, "Test Case 11.1.1", "Step 4");
  f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 11.1.1 Step 4");
  
  //@siclog "Step 5" siclog@
  //Check: Does the UE transmit a CP-DATA containing an RP-ACK RPDU encapsulated in an Uplink NAS transport message?
  SRB.receive(car_SRB2_NasPdu_IND(eutra_CellA,
                                  cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                    cr_SMS_UL_NAS_Transport (tsc_SHT_NoSecurityProtection,
                                                                             cr_NAS_MsgContainer_SMS (?))))) -> value v_ReceivedAsp;
  // Store procedure transaction id to be used in SS responses.
  // needs to be decoded with Decvalue !!
  v_NAS_RcvMsgContainer_SMS := v_ReceivedAsp.Signalling.Nas[0].Pdu.Msg.ul_NAS_TRANSPORT.nasMessage;
  v_NAS_RcvBitsMsgContainer_SMS := oct2bit(v_NAS_RcvMsgContainer_SMS.smsmessage);
  v_ExpSMS_CP_PDU := cr_CP_DATA_PDU (cr_MT_TI0_FromUE, cr_CP_UserData_RP_ACK_ul); // @sic R5-110830 sic@

  f_SMS_CP_PDU_DecodeAndMatch(v_NAS_RcvBitsMsgContainer_SMS, v_ExpSMS_CP_PDU, "Test Case 11.1.1", "Step 5");
  f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 11.1.1 Step 5");
  
  //@siclog "Step 6" siclog@
  //The SS transmits a CP-ACK encapsulated in a Downlink NAS transport message to the UE.
  SRB.send(cas_SRB2_NasPdu_REQ(eutra_CellA,
                               cs_TimingInfo_Now,
                               cs_NAS_Request (tsc_SHT_IntegrityProtected_Ciphered,
                                               cs_SMS_DL_NAS_Transport (tsc_SHT_NoSecurityProtection,
                                                                        cs_NAS_MsgContainer_SMS (f_SMS_PDU_Encvalue(cs_CP_ACK_PDU (cs_MT_TI0_FromSS)))))));

  //@siclog "Step 7" siclog@
  //Make the operator check an MT Short Message received.
  if (px_SMS_ChkMsgReceived == true) {
    f_SMS_MMI_ChkMsgDisplayed(160, tsc_Fox);
  }
  
} // function fl_TC_11_1_1_Body

function f_TC_11_1_2_EUTRA() runs on EUTRA_PTC
{
  // @desc MT-SMS over SGs / active mode
  // @sic R5s100588 sic@

  if ((pc_Combined_Attach==false) or (px_AttachTypeTested!=COMBINED_ATTACH)){
    FatalError(__FILE__, __LINE__, "invalid value for Attach type");
  } // @sic R5s110517 sic@ @sic R5-113623 sic@ @sic R5-113814 sic@

  f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);  // @sic R5s106627 sic@
  
  // create cell and send out system information
  f_EUTRA_CellConfig_Def (eutra_CellA);
  // -  UE is in state Registered, Idle Mode (state 2) on Cell A
  f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, Combined);  // @sic R5s110517 sic@
  //entering UE test state 3
  f_EUTRA_RbEst_Def ( eutra_CellA );
  
  // Set message service as indicated in the PIXIT.
  f_SMS_AT_CSMS(px_SMS_Service);
  // Set Preferrred memory to preferred memories as indicated in the PIXIT.
  f_SMS_AT_CPMS(px_SMS_PrefMem1, px_SMS_PrefMem2, px_SMS_PrefMem3);
  // Set message format to value given as PIXIT parameter
  f_SMS_AT_CMGF(px_SMS_MsgFrmt);  // @sic R5s110750 sic@
  // Set Character Set "GSM"
  f_SMS_AT_CSCS("""GSM""");
  // Set the UE to delete all messages from Preferred message store
  f_SMS_AT_CMGD_ALL();
  
  f_EUTRA_TestBody_Set(true);
  
  fl_TC_11_1_2_Body();
  
  // Postamble
  f_EUTRA_TestBody_Set(false);
  f_EUTRA_Postamble(eutra_CellA, E2_CONNECTED);
  
} // f_TC_11_1_2_EUTRA

function fl_TC_11_1_2_Body() runs on EUTRA_PTC
{
  var SRB_COMMON_IND v_ReceivedAsp;
  var NAS_MessageContainer v_NAS_RcvMsgContainer_SMS;
  var template CP_PDU_Type v_ExpSMS_CP_PDU;
  var bitstring v_NAS_RcvBitsMsgContainer_SMS;
  
  //@siclog "Step 1" siclog@
  //The SS transmits a CP-DATA containing an RP-DATA RPDU (SMS DELIVER TPDU)
  // encapsulated in a Downlink NAS transport message to the UE.
  SRB.send(cas_SRB2_NasPdu_REQ(eutra_CellA,
                               cs_TimingInfo_Now,
                               cs_NAS_Request (tsc_SHT_IntegrityProtected_Ciphered,
                                               cs_SMS_DL_NAS_Transport (tsc_SHT_NoSecurityProtection,
                                                                        cs_NAS_MsgContainer_SMS (f_SMS_PDU_Encvalue( cs_CP_DATA_PDU ( cs_MT_TI0_FromSS,
                                                                                                                                      cs_CP_UserData_DELIVER('4433226655'O))))))));
  
  //@siclog "Step 2" siclog@
  //Check: Does the UE transmit a CP-ACK encapsulated in an Uplink NAS transport message?  // Store procedure transaction id to be used in SS responses.
  SRB.receive(car_SRB2_NasPdu_IND(eutra_CellA,
                                  cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                    cr_SMS_UL_NAS_Transport (tsc_SHT_NoSecurityProtection,
                                                                             cr_NAS_MsgContainer_SMS (?))))) -> value v_ReceivedAsp;
  v_NAS_RcvMsgContainer_SMS :=  v_ReceivedAsp.Signalling.Nas[0].Pdu.Msg.ul_NAS_TRANSPORT.nasMessage;
  v_NAS_RcvBitsMsgContainer_SMS := oct2bit(v_NAS_RcvMsgContainer_SMS.smsmessage);
  v_ExpSMS_CP_PDU := cr_CP_ACK_PDU (cr_MT_TI0_FromUE);

  f_SMS_CP_PDU_DecodeAndMatch(v_NAS_RcvBitsMsgContainer_SMS, v_ExpSMS_CP_PDU, "Test Case 11.1.2", "Step 2");
  f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 2");
  
  //@siclog "Step 3" siclog@
  //Check: Does the UE transmit a CP-DATA containing an RP-ACK RPDU encapsulated in an Uplink NAS transport message?
  SRB.receive(car_SRB2_NasPdu_IND(eutra_CellA,
                                  cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                    cr_SMS_UL_NAS_Transport (tsc_SHT_NoSecurityProtection,
                                                                             cr_NAS_MsgContainer_SMS (?))))) -> value v_ReceivedAsp;
  // Store procedure transaction id to be used in SS responses.
  // needs to be decoded with Decvalue !!
  v_NAS_RcvMsgContainer_SMS := v_ReceivedAsp.Signalling.Nas[0].Pdu.Msg.ul_NAS_TRANSPORT.nasMessage;
  v_NAS_RcvBitsMsgContainer_SMS := oct2bit(v_NAS_RcvMsgContainer_SMS.smsmessage);
  v_ExpSMS_CP_PDU := cr_CP_DATA_PDU (cr_MT_TI0_FromUE, cr_CP_UserData_RP_ACK_ul);  // @sic R5-110830 sic@

  f_SMS_CP_PDU_DecodeAndMatch(v_NAS_RcvBitsMsgContainer_SMS, v_ExpSMS_CP_PDU, "Test Case 11.1.2", "Step 3");
  f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 11.1.2 Step 3");
  
  //@siclog "Step 4" siclog@
  //The SS transmits a CP-ACK encapsulated in a Downlink NAS transport message to the UE.
  SRB.send(cas_SRB2_NasPdu_REQ(eutra_CellA,
                               cs_TimingInfo_Now,
                               cs_NAS_Request (tsc_SHT_IntegrityProtected_Ciphered,
                                               cs_SMS_DL_NAS_Transport (tsc_SHT_NoSecurityProtection,
                                                                        cs_NAS_MsgContainer_SMS (f_SMS_PDU_Encvalue(cs_CP_ACK_PDU (cs_MT_TI0_FromSS)))))));
  
  //Make the operator check an MT Short Message received.
  if(px_SMS_ChkMsgReceived == true) {
    f_SMS_MMI_ChkMsgDisplayed(160, tsc_Fox);
  }
} // function fl_TC_11_1_2_Body

function f_TC_11_1_3_EUTRA() runs on EUTRA_PTC
{
  // @desc MO-SMS over SGs / idle modeMO-SMS over SGs in Idle Mode
  // @sic R5s100604 sic@

  if ((pc_Combined_Attach==false) or (px_AttachTypeTested!=COMBINED_ATTACH)){
    FatalError(__FILE__, __LINE__, "invalid value for Attach type");
  } // @sic R5s110517 sic@ @sic R5-113623 sic@ @sic R5-113814 sic@

  f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);  // @sic R5s106627 sic@
  
  // create cell and send out system information
  f_EUTRA_CellConfig_Def (eutra_CellA);
  // -  UE is in state Registered, Idle Mode (state 2) on Cell A
  f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, Combined); // @sic R5s110517 sic@
  // Set message service as indicated in the PIXIT.
  f_SMS_AT_CSMS(px_SMS_Service);
  // Set Preferrred memory to preferred memories as indicated in the PIXIT.
  f_SMS_AT_CPMS(px_SMS_PrefMem1, px_SMS_PrefMem2, px_SMS_PrefMem3);
  // Set message format to value given as PIXIT parameter
  f_SMS_AT_CMGF(px_SMS_MsgFrmt);  // @sic R5s110751 sic@
  // Set Character Set "GSM"
  f_SMS_AT_CSCS("""GSM""");
  // Set the UE to delete all messages from Preferred message store
  f_SMS_AT_CMGD_ALL();
  // Set service center address
  f_SMS_AT_CSCA("""2222222222""", 129);
  
  f_EUTRA_TestBody_Set(true);
  
  fl_TC_11_1_3_Body();

  // Postamble
  f_EUTRA_TestBody_Set(false);
  f_EUTRA_Postamble(eutra_CellA, E2_CONNECTED);
  
} // f_TC_11_1_3_EUTRA

function fl_TC_11_1_3_Body() runs on EUTRA_PTC
{ // @sic R5s110064 sic@
  var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get();
  var SRB_COMMON_IND v_ReceivedAsp;
  var NAS_MSG_Indication_Type v_NasInd;
  var NAS_MessageContainer v_NAS_RcvMsgContainer_SMS;
  var CP_PDU_Type v_RcvSMS_CP_PDU;
  var template CP_PDU_Type v_ExpSMS_CP_PDU;
  var bitstring v_NAS_RcvBitsMsgContainer_SMS;
  var B3_Type v_TI_Value;
  var TransactionIdentifier_Type v_MO_TI_FromSS, v_MO_TI_FromUE;
  var O1_Type v_RpMsgRefRcvd;
  var O4_Type v_NasCountUL;
  var EUTRA_SecurityParams_Type v_AuthParams := f_EUTRA_Security_Get();
  var template (value) EUTRA_FDD_TDD_CellInfo_Type  v_EUTRA_FDD_TDD_Info;
  var template (value) PhysicalConfigDedicated_AntennaInfo_Type  v_AntennaInfo;
  
  //@siclog "Step 1" siclog@
  // Sending of a 160 character MO SMS is initiated at the UE via MMI or  AT command
  if (px_SMS_MsgFrmt=="1") // @sic R5s110751 sic@
  {
    // Set text mode parameters to trigger status report.
    // bit 7(RP) 6(UDHI) 5(SRR) 4 3(VPF) 2(RD) 1 0(MIT)
    //     0     0       1      1 0      0     0 1
    f_SMS_AT_CSMP(49, 167, 0);  // @sic R5s100773 sic@
    // Write message to memory storage
    f_SMS_AT_CMGW_Text("""1111111111""", 129, tsc_Fox);
  }
  else // PDU mode
  {
    // Write message to memory storage
    f_SMS_AT_CMGW_PDU(153, tsc_Fox_PDU);
  }
  // Send message from storage.
  f_SMS_AT_CMSS(px_SMS_IndexOffset);
  
  //@siclog "Step 2" siclog@
  // Check: Does the UE transmit a SERVICE REQUEST message?
  v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                             tsc_RRC_TI_Def,
                                             cr_EstablishmentCause_MoData,
                                             cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                               cr_508_SERVICE_REQUEST(v_SecurityParams.KSIasme)));
  
  v_NasCountUL := v_NasInd.SecurityProtection.NasCount;
  v_AuthParams := f_EUTRA_RRC_ActivateSecurity(eutra_CellA, v_AuthParams, v_NasCountUL); // RRC SECURITY COMMAND & COMPLETE
  f_EUTRA_Security_Set ( v_AuthParams );//Saving security parameters

  // RRC Connection Reconfiguration to configure DRB
  v_EUTRA_FDD_TDD_Info:=f_EUTRA_CellInfo_GetFDD_TDD_Info (eutra_CellA);
  v_AntennaInfo := f_EUTRA_CellInfo_GetAntennaInfoDedicated (eutra_CellA);
  f_EUTRA_RRCConnectionReconfiguration_RadioResConfig(eutra_CellA,
                                                      tsc_RRC_TI_Def,
                                                      cs_SRB2_1AM_DRB_Config_Def(v_EUTRA_FDD_TDD_Info.cqi_ReportConfig,
                                                                                 v_EUTRA_FDD_TDD_Info.soundingRS_UL_Config,
                                                                                 v_AntennaInfo));
  
  //@siclog "Step 3" siclog@
  // Check: Does the UE transmit a CP-DATA containing an RP-DATA RPDU (SMS SUBMIT TPDU) encapsulated in an Uplink NAS transport message?
  SRB.receive(car_SRB2_NasPdu_IND(eutra_CellA,
                                  cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                    cr_SMS_UL_NAS_Transport (tsc_SHT_NoSecurityProtection,
                                                                             cr_NAS_MsgContainer_SMS (?))))) -> value v_ReceivedAsp;
  // Store procedure transaction id to be used in SS responses.
  // needs to be decoded with Decvalue !!
  v_NAS_RcvMsgContainer_SMS :=  v_ReceivedAsp.Signalling.Nas[0].Pdu.Msg.ul_NAS_TRANSPORT.nasMessage;
  v_NAS_RcvBitsMsgContainer_SMS := oct2bit(v_NAS_RcvMsgContainer_SMS.smsmessage);
  v_ExpSMS_CP_PDU := cr_CP_DATA_PDU (cr_MO_AnyTI_FromUE, cr_CP_UserData_SUBMIT );

  v_RcvSMS_CP_PDU := f_SMS_CP_PDU_DecodeAndMatch(v_NAS_RcvBitsMsgContainer_SMS, v_ExpSMS_CP_PDU, "Test case 11.1.3", "Step 3");
  f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test case 11.1.3 Step 3");
  
  // Note TI value used by the UE and set TI variables accordingly
  v_TI_Value := v_RcvSMS_CP_PDU.CP_DATA.transactionIdentifier.tI_Value;
  v_MO_TI_FromSS.tI_Flag := '1'B;
  v_MO_TI_FromSS.tI_Value := v_TI_Value;
  v_MO_TI_FromUE.tI_Flag := '0'B;
  v_MO_TI_FromUE.tI_Value := v_TI_Value;
  v_RpMsgRefRcvd :=  v_RcvSMS_CP_PDU.CP_DATA.cP_UserData.rP_PDU.RP_DATA_ul.rP_MessageReference;

  //@siclog "Step 4" siclog@
  // The SS transmits a CP-ACK encapsulated in a Downlink NAS Transport message.
  SRB.send(cas_SRB2_NasPdu_REQ(eutra_CellA,
                               cs_TimingInfo_Now,
                               cs_NAS_Request (tsc_SHT_IntegrityProtected_Ciphered,
                                               cs_SMS_DL_NAS_Transport (tsc_SHT_NoSecurityProtection,
                                                                        cs_NAS_MsgContainer_SMS (f_SMS_PDU_Encvalue(cs_CP_ACK_PDU (v_MO_TI_FromSS)))))));
  
  //@siclog "Step 5" siclog@
  // The SS transmits a CP-DATA containing an RP-ACK RPDU encapsulated in an Downlink NAS transport message
  SRB.send(cas_SRB2_NasPdu_REQ(eutra_CellA,
                               cs_TimingInfo_Now,
                               cs_NAS_Request (tsc_SHT_IntegrityProtected_Ciphered,
                                               cs_SMS_DL_NAS_Transport (tsc_SHT_NoSecurityProtection,
                                                                        cs_NAS_MsgContainer_SMS (f_SMS_PDU_Encvalue(cs_CP_DATA_PDU (v_MO_TI_FromSS,
                                                                                                                                    cs_CP_UserData_RP_ACK_dl(v_RpMsgRefRcvd))))))));  // @sic R5-110830 sic@
  
  //@siclog "Step 6" siclog@
  // Check: Does the UE transmit a CP-ACK encapsulated in an Uplink NAS Transport message?
  SRB.receive(car_SRB2_NasPdu_IND(eutra_CellA,
                                  cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                    cr_SMS_UL_NAS_Transport (tsc_SHT_NoSecurityProtection,
                                                                             cr_NAS_MsgContainer_SMS (?))))) -> value v_ReceivedAsp;
  // Store procedure transaction id to be used in SS responses.
  // needs to be decoded with Decvalue !!
  v_NAS_RcvMsgContainer_SMS :=  v_ReceivedAsp.Signalling.Nas[0].Pdu.Msg.ul_NAS_TRANSPORT.nasMessage;
  v_NAS_RcvBitsMsgContainer_SMS := oct2bit(v_NAS_RcvMsgContainer_SMS.smsmessage);
  v_ExpSMS_CP_PDU := cr_CP_ACK_PDU (v_MO_TI_FromUE);

  f_SMS_CP_PDU_DecodeAndMatch(v_NAS_RcvBitsMsgContainer_SMS, v_ExpSMS_CP_PDU, "Test case 11.1.3", "Step 6");
  f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test case 11.1.3 Step 6");
  
} // function fl_TC_11_1_3_Body

function f_TC_11_1_4_EUTRA() runs on EUTRA_PTC
{
  // @desc MO-SMS over SGs / active mode
  // @sic R5s100606 sic@
  
  if ((pc_Combined_Attach==false) or (px_AttachTypeTested!=COMBINED_ATTACH)){
    FatalError(__FILE__, __LINE__, "invalid value for Attach type");
  } // @sic R5s110517 sic@ @sic R5-113623 sic@ @sic R5-113814 sic@

  f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);  // @sic R5s106627 sic@
  
  // create cell and send out system information
  f_EUTRA_CellConfig_Def (eutra_CellA);
  // -  UE is in state Registered, Idle Mode (state 2) on Cell A
  f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, Combined); // @sic R5s110517 sic@
  //entering UE test state 3
  f_EUTRA_RbEst_Def ( eutra_CellA );
  
  // Set message service as indicated in the PIXIT.
  f_SMS_AT_CSMS(px_SMS_Service);
  // Set Preferrred memory to preferred memories as indicated in the PIXIT.
  f_SMS_AT_CPMS(px_SMS_PrefMem1, px_SMS_PrefMem2, px_SMS_PrefMem3);
  // Set message format to value given as PIXIT parameter
  f_SMS_AT_CMGF(px_SMS_MsgFrmt);  // @sic R5s110751 sic@
  // Set Character Set "GSM"
  f_SMS_AT_CSCS("""GSM""");
  // Set the UE to delete all messages from Preferred message store
  f_SMS_AT_CMGD_ALL();
  // Set service center address
  f_SMS_AT_CSCA("""2222222222""", 129);
  
  f_EUTRA_TestBody_Set(true);
  
  fl_TC_11_1_4_Body();

  // Postamble
  f_EUTRA_TestBody_Set(false);
  f_EUTRA_Postamble(eutra_CellA, E2_CONNECTED);
  
} // f_TC_11_1_4_EUTRA

function fl_TC_11_1_4_Body() runs on EUTRA_PTC
{ // @sic R5s110064 sic@
  var SRB_COMMON_IND v_ReceivedAsp;
  var NAS_MessageContainer v_NAS_RcvMsgContainer_SMS;
  var CP_PDU_Type v_RcvSMS_CP_PDU;
  var template CP_PDU_Type v_ExpSMS_CP_PDU;
  var bitstring v_NAS_RcvBitsMsgContainer_SMS;
  var B3_Type v_TI_Value;
  var TransactionIdentifier_Type v_MO_TI_FromSS, v_MO_TI_FromUE;
  var O1_Type v_RpMsgRefRcvd;
  
  //@siclog "Step 1" siclog@
  // Sending of a 160 character MO SMS is initiated at the UE via MMI or  AT command
  if (px_SMS_MsgFrmt=="1") // @sic R5s110751 sic@
  {
    // Set text mode parameters to trigger status report.
    // bit 7(RP) 6(UDHI) 5(SRR) 4 3(VPF) 2(RD) 1 0(MIT)
    //     0     0       1      1 0      0     0 1
    f_SMS_AT_CSMP(49, 167, 0);  // @sic R5s100773 sic@
    // Write message to memory storage
    f_SMS_AT_CMGW_Text("""1111111111""", 129, tsc_Fox);
  }
  else // PDU mode
  {
    // Write message to memory storage
    f_SMS_AT_CMGW_PDU(153, tsc_Fox_PDU);
  }
  // Send message from storage.
  f_SMS_AT_CMSS(px_SMS_IndexOffset);

  //@siclog "Step 2" siclog@
  // Check: Does the UE transmit a CP-DATA containing an RP-DATA RPDU (SMS SUBMIT TPDU) encapsulated in an Uplink NAS transport message?
  SRB.receive(car_SRB2_NasPdu_IND(eutra_CellA,
                                  cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                    cr_SMS_UL_NAS_Transport (tsc_SHT_NoSecurityProtection,
                                                                             cr_NAS_MsgContainer_SMS (?))))) -> value v_ReceivedAsp;
  // Store procedure transaction id to be used in SS responses.
  // needs to be decoded with Decvalue !!
  v_NAS_RcvMsgContainer_SMS :=  v_ReceivedAsp.Signalling.Nas[0].Pdu.Msg.ul_NAS_TRANSPORT.nasMessage;
  v_NAS_RcvBitsMsgContainer_SMS := oct2bit(v_NAS_RcvMsgContainer_SMS.smsmessage);
  v_ExpSMS_CP_PDU := cr_CP_DATA_PDU (cr_MO_AnyTI_FromUE, cr_CP_UserData_SUBMIT );

  v_RcvSMS_CP_PDU := f_SMS_CP_PDU_DecodeAndMatch(v_NAS_RcvBitsMsgContainer_SMS, v_ExpSMS_CP_PDU, "Test case 11.1.4", "Step 2");
  f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test case 11.1.4 Step 2");
  
  v_TI_Value := v_RcvSMS_CP_PDU.CP_DATA.transactionIdentifier.tI_Value;
  v_MO_TI_FromSS.tI_Flag := '1'B;
  v_MO_TI_FromSS.tI_Value := v_TI_Value;
  v_MO_TI_FromUE.tI_Flag := '0'B;
  v_MO_TI_FromUE.tI_Value := v_TI_Value;
  v_RpMsgRefRcvd := v_RcvSMS_CP_PDU.CP_DATA.cP_UserData.rP_PDU.RP_DATA_ul.rP_MessageReference;
  
  //@siclog "Step 3" siclog@
  // The SS transmits a CP-ACK encapsulated in a Downlink NAS Transport message.
  SRB.send(cas_SRB2_NasPdu_REQ(eutra_CellA,
                               cs_TimingInfo_Now,
                               cs_NAS_Request (tsc_SHT_IntegrityProtected_Ciphered,
                                               cs_SMS_DL_NAS_Transport (tsc_SHT_NoSecurityProtection,
                                                                        cs_NAS_MsgContainer_SMS (f_SMS_PDU_Encvalue(cs_CP_ACK_PDU (v_MO_TI_FromSS)))))));
  
  //@siclog "Step 4" siclog@
  // The SS transmits a CP-DATA containing an RP-ACK RPDU(SMS SUBMIT REPORT TPDU) encapsulated in an Downlink NAS transport message
  SRB.send(cas_SRB2_NasPdu_REQ(eutra_CellA,
                               cs_TimingInfo_Now,
                               cs_NAS_Request (tsc_SHT_IntegrityProtected_Ciphered,
                                               cs_SMS_DL_NAS_Transport (tsc_SHT_NoSecurityProtection,
                                                                        cs_NAS_MsgContainer_SMS (f_SMS_PDU_Encvalue(cs_CP_DATA_PDU (v_MO_TI_FromSS,
                                                                                                                                    cs_CP_UserData_RP_ACK_dl(v_RpMsgRefRcvd))))))));  // @sic R5-110830 sic@

  //@siclog "Step 5" siclog@
  // Check: Does the UE transmit a CP-ACK encapsulated in an Uplink NAS Transport message?
  SRB.receive(car_SRB2_NasPdu_IND(eutra_CellA,
                                  cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                    cr_SMS_UL_NAS_Transport (tsc_SHT_NoSecurityProtection,
                                                                             cr_NAS_MsgContainer_SMS (?))))) -> value v_ReceivedAsp;
  // Store procedure transaction id to be used in SS responses.
  // needs to be decoded with Decvalue !!
  v_NAS_RcvMsgContainer_SMS :=  v_ReceivedAsp.Signalling.Nas[0].Pdu.Msg.ul_NAS_TRANSPORT.nasMessage;
  v_NAS_RcvBitsMsgContainer_SMS := oct2bit(v_NAS_RcvMsgContainer_SMS.smsmessage);
  v_ExpSMS_CP_PDU := cr_CP_ACK_PDU (v_MO_TI_FromUE);

  f_SMS_CP_PDU_DecodeAndMatch(v_NAS_RcvBitsMsgContainer_SMS, v_ExpSMS_CP_PDU, "Test case 11.1.4", "Step 5");
  f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test case 11.1.4 Step 5");
  
} // function fl_TC_11_1_4_Body

} // end of group TestcaseImplementations

}
