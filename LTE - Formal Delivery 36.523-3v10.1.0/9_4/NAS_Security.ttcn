// ***************************************************************************
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2012, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3v10.1.0
// * $Date: 2012-02-01 23:53:18 +0100 (Wed, 01 Feb 2012) $
// * $Rev: 6162 $
// ***************************************************************************

module NAS_Security {

  import from EUTRA_RRC_ASN1_Definitions language "ASN.1:1997" all;
  import from CommonDefs all;
  import from EPS_NAS_Constants all;
  import from EPS_NAS_MsgContainers all;
  import from EPS_NAS_Templates all;
  import from EPS_NAS_TypeDefs all;
  import from EUTRA_AspCommon_Templates all;
  import from EUTRA_AuxiliaryFunctions all;
  import from EUTRA_CellInfo all;
  import from EUTRA_CommonDefs all;
  import from EUTRA_CommonProcedures all;
  import from EUTRA_Component all;
  import from EUTRA_ConfigurationSteps all;
  import from EUTRA_NASSteps all;
  import from EUTRA_RRC_Templates all;
  import from EUTRA_SRB_Templates all;
  import from EUTRA_SecurityFunctions all;
  import from EUTRA_SecuritySteps all;
  import from EUTRA_Timing all;
  import from NAS_AuxiliaryDefsAndFunctions all;
  import from NAS_CommonTemplates all;
  import from NAS_CommonTypeDefs all;
  import from Parameters all;

  group AlgorithmConstants {

  const B3_Type tsc_EPS_Integerity_Snow3G := '001'B;            /* @status    APPROVED */

  const B3_Type tsc_EPS_Integerity_AES := '010'B;               /* @status    APPROVED */

  const B3_Type tsc_EPS_Encryption_Snow3G := '001'B;            /* @status    APPROVED */

  const B3_Type tsc_EPS_Encryption_AES := '010'B;               /* @status    APPROVED */

  } // end of group AlgorithmConstants

  group LocalFunction9_4 {

  function fl_TC_9_4_Integrity (B3_Type p_NAS_IntegrityProtAlgorithm) runs on EUTRA_PTC
  {
    timer t_WaitTimer := f_EUTRA_SetTimerToleranceMin(eutra_CellA, nasTTCNTimer, 5.0) ; //5 seconds timer acc. to the test case prose @sic R5w100302, R5-106675 sic@
    // Initialise the integrity algorithm to test
    f_EUTRA_NAS_IntegrityAlgorithm_Set (p_NAS_IntegrityProtAlgorithm);
    //steps 1 to 10
    fl_TC_9_4_Steps1To10();
    
    //+   The SS Transmits an IDENTITY REQUEST message [Not integrity protected] <- IDENTITY REQUEST
    //@siclog "Step 11" siclog@
    SRB.send(cas_SRB2_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_IDENTITY_REQUEST(tsc_IdType_IMEI))));
    //+   Check: Does the UE transmit an IDENTIY RESPONSE message
    //+   in 5 seonds ? -> IDENTITY RESPONSE [2,F]
    //@siclog "Step 12" siclog@
    t_WaitTimer.start;
    alt {
      []SRB.receive(car_SRB2_NasPdu_IND(eutra_CellA,
                                        cr_NAS_Indication(?,
                                                          cr_IDENTITY_RESPONSE(f_Imei2MobileIdentity(px_IMEI_Def)))))
        {
          t_WaitTimer.stop;
          f_EUTRA_SetVerdictFailOrInconc (__FILE__, __LINE__, "Step 12: UE is responding to non integrity protected SMC");
        }
      [] t_WaitTimer.timeout {}
    };
    
  }; //function fl_TC_9_4_Integrity

  function fl_TC_9_4_Steps1To10() runs on EUTRA_PTC
  {
    var HalfOctet_Type v_EpsBearerId := tsc_EpsDefaultBearerId;
    var ProcedureTransactionIdentifier v_EpsPti := tsc_PTI_1;
    var GutiParameters_Type v_GutiParams := f_EUTRA_CellInfo_GetGuti(eutra_CellA);   // get all data which are required for a GUTI
    var NAS_MSG_Indication_Type v_NasInd;                                            // temporary variable which is used when receiving NAS ASPs
    // initialize security parameters
    var NasCount_Type v_NasCountUL;
    var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get();
    //v_AdditionalUpdateType is defined to follow TTCN3 v411 standard
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (); // @sic R5-103681 sic@
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(NORMAL); // @sic R5s110176 sic@
    var template (omit) AccessPointName v_APN := omit;
    var template (omit) ProtocolConfigOptions v_Pco := omit;
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId(v_GutiParams.PLMN_Identity);
    var NAS_Lac v_LAC := f_EUTRA_CellInfo_GetLocationAreaCode ( eutra_CellA );
    var template (omit) LocAreaId v_LAI := f_GetLAI ( v_PLMN, v_LAC, NORMAL); // @sic R5s110427 sic@
    var template (omit) MobileIdentity v_MSId := f_GetMSId (NORMAL); // @sic R5s110427 sic@
  
    //+   The UE is switched on.
    //@siclog "Step 1" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@
    
    //+   The UE transmits an ATTACH REQUEST message --> ATTACH REQUEST
    //@siclog "Step 2" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                 cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType), // @sic R5-103681 sic@
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                 f_GetPdnType())));
    v_EpsPti := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    if (ispresent( v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions)) { // @sic R5s100084 sic@
      v_Pco := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    }
    //+   The SS transmits an AUTHENTICATION REQUEST message to initiate
    //+   the EPS authentication and AKA procedure. <-- AUTHENTICATION
    //+   REQUEST
    //+   The UE transmits an AUTHENTICATION RESPONSE message and
    //+   establishes mutual authentication. --> AUTHENTICATION RESPONSE
    //@siclog "Steps 3 - 4" siclog@
    v_SecurityParams := f_EUTRA_NAS_Authentication(eutra_CellA, tsc_SRB1,
                                                   v_SecurityParams,
                                                   tsc_SHT_IntegrityProtected_Ciphered, //  @sic R5-102226 sic@,
                                                   tsc_SHT_IntegrityProtected_Ciphered, //  @sic R5-102226 sic@,
                                                   f_Asn2Nas_PlmnId(v_GutiParams.PLMN_Identity));
    
    //+   The SS transmits a SECURITY MODE COMMAND message to activate NAS
    //+   security. It is integrity protected and includes request to
    //+   include IMEISV <-- SECURITY MODE COMMAND
    //+   Check: Does the UE transmit a SECURITY MODE COMPLETE message and
    //+   does it establish the initial security configuration? -->
    //+   SECURITY MODE COMPLETE [1,P]
    //@siclog "Steps 5 - 6" siclog@
    v_NasCountUL := f_EUTRA_NAS_ActivateSecurity(eutra_CellA, v_SecurityParams);
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 6");
    
    //@siclog "Steps 6a1 - 6a2" siclog@
    v_APN := f_ESM_InitAPN (eutra_CellA, f_CheckEsmInfoTransferFlag(v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST), v_EpsPti); // @sic R5-110708 sic@
    
    v_SecurityParams := f_EUTRA_RRC_ActivateSecurity(eutra_CellA,
                                                     v_SecurityParams,
                                                     v_NasCountUL);
    f_EUTRA_Security_Set(v_SecurityParams);

    //+   The SS transmits an ATTACH ACCEPT message.  <-- ATTACH ACCEPT
    //@siclog "Step 7" siclog@
    f_EUTRA_RRCConnectionReconfigurationWithAttachAcceptAllParams(eutra_CellA,
                                                                  v_EpsBearerId,
                                                                  tsc_RRC_TI_Def,
                                                                  v_EpsPti,
                                                                  v_AttachType,  // @sic R5s110228 sic@
                                                                  f_EUTRA_GetPDNAddress (f_CheckPCOforIPallocationViaNas (v_Pco)),
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_GutiParams),
                                                                  cs_TrackingAreaIdListDef_lv,
                                                                  v_LAI,   // @sic R5s110427 sic@
                                                                  v_MSId,
                                                                  omit,
                                                                  v_APN,
                                                                  f_GetDefPCOforPCSCFAddress (v_Pco), // @sic R5-104703 sic@
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType, // @sic R5-103681 sic@
                                                                                              NORMAL)); // @sic R5s110176 sic@
    
    //+   The UE transmits an ATTACH COMPLETE message --> ATTACH COMPLETE
    //@siclog "Step 8" siclog@
    f_EUTRA_NAS_AttachComplete(eutra_CellA, v_EpsBearerId);

    //+   The SS Transmits an IDENTITY REQUEST message [Security
    //+   protected] <- IDENTITY REQUEST
    //@siclog "Step 9" siclog@
    SRB.send(cas_SRB2_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_IDENTITY_REQUEST(tsc_IdType_IMSI))));
    //+   Check: Does the UE transmit an IDENTIY RESPONSE message
    //+   [Security Protected]? -> IDENTITY RESPONSE [1,P]
    //@siclog "Step 10" siclog@
    SRB.receive(car_SRB2_NasPdu_IND(eutra_CellA,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_IDENTITY_RESPONSE(f_Imsi2MobileIdentity(px_IMSI_Def)))));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 10");
    
  }; //function fl_TC_9_4_Steps1To10

  } // end of group LocalFunction9_4

  function f_TC_9_4_1_EUTRA() runs on EUTRA_PTC
  {
    //@desc Integrity protection: Correct functionality of EPS NAS integrity algorithm (SNOW3G)
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);  // @sic R5s106627 sic@
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    
    // Preamble: The UE is in state Switched OFF (state 1)
    // ==========================================================================
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE);
    f_EUTRA_UE_Detach_SwitchOffUe(eutra_CellA, RRC_IDLE);
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_4_Integrity(tsc_EPS_Integerity_Snow3G);
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E2_CONNECTED); // @sic R5-103847 sic@
  } // function f_TC_9_4_1_EUTRA

  function f_TC_9_4_2_EUTRA() runs on EUTRA_PTC
  {
    //@desc Integrity protection: Correct functionality of EPS NAS integrity algorithm (AES)
       
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);  // @sic R5s106627 sic@
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    
    // Preamble: The UE is in state Switched OFF (state 1)
    // ==========================================================================
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE);
    f_EUTRA_UE_Detach_SwitchOffUe(eutra_CellA, RRC_IDLE);
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_4_Integrity(tsc_EPS_Integerity_AES);
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E2_CONNECTED); // @sic R5-103847 sic@
  } // function f_TC_9_4_1_EUTRA

  function f_TC_9_4_3_EUTRA() runs on EUTRA_PTC
  {
    //@desc Ciphering and Deciphering: Correct functionality of EPS NAS encryption algorithm (SNOW3G)
        
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);  // @sic R5s106627 sic@
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    
    // Preamble: The UE is in state Switched OFF (state 1)
    // ==========================================================================
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE);
    f_EUTRA_UE_Detach_SwitchOffUe(eutra_CellA, RRC_IDLE);
    f_EUTRA_TestBody_Set(true);
    f_EUTRA_NAS_CipheringAlgorithm_Set(tsc_EPS_Encryption_Snow3G);
    fl_TC_9_4_Steps1To10();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E2_CONNECTED); // @sic R5-103847 sic@
  } // function f_TC_9_4_3_EUTRA

  function f_TC_9_4_4_EUTRA() runs on EUTRA_PTC
  {
    //@desc Ciphering and Deciphering: Correct functionality of EPS NAS encryption algorithm (AES)
        
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);  // @sic R5s106627 sic@
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    
    // Preamble: The UE is in state Switched OFF (state 1)
    // ==========================================================================
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE);
    f_EUTRA_UE_Detach_SwitchOffUe(eutra_CellA, RRC_IDLE);
    f_EUTRA_TestBody_Set(true);
    f_EUTRA_NAS_CipheringAlgorithm_Set(tsc_EPS_Encryption_AES);
    fl_TC_9_4_Steps1To10();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E2_CONNECTED); // @sic R5-103847 sic@
  } // function f_TC_9_4_4_EUTRA

}
