/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2012, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3v10.1.0
// $Date: 2012-09-04 22:41:12 +0200 (Tue, 04 Sep 2012) $
// $Rev: 7327 $
/******************************************************************************/

module NAS_24008Templates {

  import from CommonDefs all;
  import from NAS_24008TypeDefs all;
  import from NAS_CommonTemplates all;
  import from NAS_CommonTypeDefs all;
  import from Parameters all;
  import from UTRAN_Parameters all;

  const ProtocolDiscriminator tsc_GMM_PD := '1000'B;                            /* GMM protocol discriminator 3GPP 24.008 clause 10.4
                                                                                   @status    APPROVED */

  const ProtocolDiscriminator tsc_SMPD := '1010'B;                              /* SM protocol discriminator
                                                                                   @status    APPROVED */

  const B4_Type               tsc_PDP_TypeOrg := '0001'B;                       /* Default value IETF allocated address
                                                                                   @status    APPROVED */

  const PDP_TypeNo            tsc_PDP_TypeNoIPv4 := '21'O;                      /* Indicates IP v4.
                                                                                   @status    APPROVED */

  const PDP_TypeNo            tsc_PDP_TypeNoIPv6 := '57'O;                      /* Indicates IP v6.
                                                                                   @status    APPROVED */

  const PDP_TypeNo            tsc_PDP_TypeNoIPv4v6 := '8D'O;                    /* Indicates IP v4 and v6.
                                                                                   @status    APPROVED */

  const B3_Type               tsc_I_AttachTypeCombined := '011'B;               /* For UTRAN/GERAN only
                                                                                   @status    APPROVED */

  const B3_Type               tsc_I_AttachTypeGPRSAtt := '001'B;                /* For UTRAN/GERAN only
                                                                                   @status    APPROVED */

  const B3_Type               tsc_I_UpdateTypeCombined := '001'B;               /* For UTRAN/GERAN only
                                                                                   @status    APPROVED */

  const B3_Type               tsc_I_UpdateTypeCombinedWithIMSI := '010'B;       /* For UTRAN/GERAN only
                                                                                   @status    APPROVED */

  const B3_Type               tsc_I_UpdateTypeRAOnly := '000'B;                 /* For UTRAN/GERAN only
                                                                                   @status    APPROVED */

  const B3_Type               tsc_I_UpdateTypePeriodic := '011'B;                 /* For UTRAN/GERAN only
                                                                                   @status    APPROVED */

  const RejCau                tsc_ServiceOptionNotSupported := '20'O;   /* reject cause: Service option not supported (24.008 cl. 10.5.3.6)
                                                                           @status    APPROVED */

  const B2_Type     tsc_NMO_I := '00'B;                    /* Network Mode of Operation I (3GPP 24.008 / 10.5.1.12.3)
                                                                  @status    APPROVED */

  const B2_Type     tsc_NMO_II := '01'B;                   /* Network Mode of Operation II (3GPP 24.008 / 10.5.1.12.3)
                                                                  @status    APPROVED */

  template (value) AC_ReferenceNumber cs_AC_RefNum3 :=
  { /* @status    APPROVED */
    aCValue      := '0011'B
  };

  template AttachType cr_AttachType (template (present) B1_Type p_FOR,
                                     template (present) B3_Type p_AttType) :=
  { /* @status    APPROVED */
    forValue        := p_FOR,                            // Follow-on request
    attachType      := p_AttType                         // Type of attach
  };

  template AttachType cr_AttachTypeAny := cr_AttachType(?, ?);  /* @status    APPROVED */

  template AuthRspExt cr_AuthCiphRspExtAny :=
  { /* @status    APPROVED */
    iei             := '29'O,                  // IEI is 0x29 (see 24.008 / 9.4.10)
    iel             := ?,
    rES             := ?
  };

  template AuthRsp cr_AuthRspAny (template (omit) IEI8_Type p_IEI := '22'O) :=
  { /* @status    APPROVED */
    iei      := p_IEI,                  // '00100010'B (22 hex)
    rES      := ?                             // Authentication Parameter RES
  };

  template AuthRspExt cr_AuthRspExtAny :=
  { /* @status    APPROVED */
    iei             := '21'O,                  // '00100001'B
    iel             := ?,
    rES             := ?
  };

  template (value) CiphAlgorithm cs_CiphAlgorithm(template (value) B3_Type p_Alg) :=
  { /* @status    APPROVED */
    spare1          := '0'B,
    algorithm       := p_Alg
  };

  template (value) ForceToStandby cs_ForceToStandby(B3_Type p_Val := '000'B) :=
  { /* @status    APPROVED */
    spare           := '0'B,
    forceToStandbyValue      := p_Val
  };

  template (value) AttachResult cs_GMM_AttachResult(B3_Type p_Result) :=
  { /* @status    APPROVED */
    fOP             := '0'B,
    result          := p_Result
  };

  template (value) CiphKeySeqNum cs_GMM_KeySeq(KeySeq p_Key) := cs_CiphKeySeqNum('8'H, p_Key);  /* @status    APPROVED */

  template GPRS_Timer cr_GPRS_TimerAny :=
  { /* @status    APPROVED */
    iei             := '17'O,                        // 00010111'B (17 hex)
    unit            := ?,                            // Unit
    timerValue      := ?                             // Timer  value
  };

  template (value) GMM_Cause cs_GMM_Cause (B8_Type p_RejectCause) :=
  { // @sic R5s110718 sic@
  /* @status    APPROVED */
   iei := omit,
   gmmCauseValue := p_RejectCause
  };

  template UpdateType cr_GMM_UpdateType(template (present) B1_Type p_For := ?,
                                        template (present) B3_Type p_Type := (tsc_I_UpdateTypeRAOnly, tsc_I_UpdateTypeCombined)) := // @sic R5s110081 sic@
  { /* @status    APPROVED */
    followOnReq        := p_For,
    updateValue      := p_Type
  };

  template LocUpdType cr_LocUpdTypeNormal (template (present) B1_Type p_FOR := ?) :=
  { /* @status    APPROVED */
    fOR             := p_FOR,
    spare1          := '0'B,
    lUT             := '00'B
  };

  template LocUpdType cdr_LocUpdTypeIMSI (template (present) B1_Type p_FOR := ?)
    modifies cr_LocUpdTypeNormal :=
  { /* @status    APPROVED */
    lUT             := '10'B
  };

  template MS_Clsmk1 cr_MS_Clsmk1_Any :=
  { /* @status    APPROVED */
    spare1          := '0'B,
    revLvl          := ?,
    eSIND           := ?,
    a5_1            := ?,
    rFPwrCap        := ?
  };

  template MS_Clsmk1 cr_MS_Clsmk1_Def :=
  { /* @status    APPROVED */
    spare1          := '0'B,
    revLvl          := px_MS_ClsmkRevLvl,
    eSIND           := px_MS_ClsmkESIND,
    a5_1            := f_ConvertBoolToBit (not pc_GERAN), // @sic R5s110549 sic@
    rFPwrCap        := ?
  };

  template RoutingAreaId cr_RAI( template (omit) IEI8_Type p_IEI,
                                 template (present) LocAreaId p_Lai := ?,
                                 template (present) octetstring p_Rac := ?) :=
  { /* @status    APPROVED */
    iei             := p_IEI,
    lai             := p_Lai,
    rac             := p_Rac
  };

  template (value) RoutingAreaId cs_RAI( template (omit) IEI8_Type p_IEI,
                                         template (value) LocAreaId p_Lai,
                                         octetstring p_Rac) :=
  { /* @status    APPROVED */
    iei             := p_IEI,
    lai             := p_Lai,
    rac             := p_Rac
  };

  template ServiceType cr_ServiceType(template (present) B3_Type p_Type) :=
  { /* @status    APPROVED */
    spare1          := '0'B,
    serviceType       := p_Type
  };

  template (value) IMEISV_Request cs_IMEISV_Request(B3_Type p_Value) :=
  { /* @status    APPROVED */
    iei             := omit,
    spare           := '0'B,
    requestValue    := p_Value
  };

  template Cau cr_CauAny :=
  { /* @status    APPROVED */
    iei             := '08'O,
    iel             := ?,
    extBit3         := ?,
    codingStd       := ?,
    spare1          := ?,
    location        := ?,
    extBit3a        := *, // @sic R5110596 sic@
    recommend       := *, // @sic R5110596 sic@
    extBit4         := ?,
    cauValue        := ?,
    diagnostic      := * // @sic R5110596 sic@
  };

  template EUTRAN_HO_Info cr_EUTRAN_HO_InfoAny :=
  { /* @status    APPROVED */
    iei             := '2B'O,
    iel             := ?,
    info            := ?
  };

  template MBMS_ContextStatus cr_MBMS_ContextStatusAny :=
  { /* @status    APPROVED */
    iei             := '35'O,    // '00110101'B (35 hex)
    iel             := ?,
    nSAPI           := ?         // NSAPI(x), for x = 128 to 255
  };

  template PDP_ContextStatus cr_PDP_ContextStatusAny :=
  { /* @status    APPROVED */
    iei             := '32'O,    // '00110010'B
    iel             := ?,
    nSAPI           := ?
  };

  template (value) PDP_ContextStatus cs_PDP_ContextStatusInactive :=
  { /* @status    (APPROVED) */
    iei             := '32'O,    // '00110010'B
    iel             := '02'O,
    nSAPI           := '0000000000000000'B //inactive PDP context
  };

  template PS_LCS_Capability cr_PS_LCS_CapabilityAny :=
  { /* @status    APPROVED */
    iei             := '33'O,                  // '00110011'B (33 hex)
    iel             := '01'O,
    spare           := '00'B,
    aPC             := ?,
    oTD_A           := ?,
    oTD_B           := ?,
    gPS_A           := ?,
    gPS_B           := ?,
    gPS_C           := ?
  };

  template PktDataProtoAddr cr_PDP_AddressAny :=
  { /* @status    APPROVED */
    iei             := omit,
    iel             := '02'O,
    spare           := '0000'B,
    pDP_TypeOrg     := ?,
    pDP_TypeNo      := ?,
    addrInfo        := omit
  };

  template (value) PktDataProtoAddr cs_PktDataProtoAddrMT(template (value) Type4Length_Type p_Len,
                                                          template (value) PDP_TypeNo       p_PDP_TypeNo,
                                                          template (omit) AddressInfo      p_Addr) :=
  { /* @status    APPROVED */
    iei             := '2B'O,  // @sic R5s110315 sic@
    iel             := p_Len,
    spare           := '0000'B,
    pDP_TypeOrg     := tsc_PDP_TypeOrg,
    pDP_TypeNo      := p_PDP_TypeNo,
    addrInfo        := p_Addr
  };

  template QualityOfService cr_QualityOfService_Any :=
  { /* @status    APPROVED */
    iei             := omit,
    iel             := ?,
    spare1          := ?,
    delayClass      := ?,
    relabilityClass := ?,
    peakThroughput  := ?,
    spare2          := ?,
    precedenceClass := ?,
    spare3          := ?,
    meanThroughput  := ?,
    trafficClass    := ?,
    deliveryOrder   := ?,
    deliveryErrorSDU := ?,
    maxSduSize      := ?,
    maxBitRateUL    := ?,
    maxBitRateDL    := ?,
    residualBER     := ?,
    sduErrorRatio   := ?,
    transferDelay   := ?,
    trafficHandlingPrio  := ?,
    guaranteedBitRateUL   := ?,
    guaranteedBitRateDL   := ?,
    spare4          := ?,
    signallingInd   := ?,
    sourceStatisticsDescriptor   := ?,
    maxBitRateDL_Ext := *,
    guaranteedBitRateDL_Ext := *,
    maxBitRateUL_Ext := *,
    guaranteedBitRateUL_Ext := *
  };

  template (value) QualityOfService cs_QoS_InteractiveOrBackgroundMT(template (value) B3_Type p_DlyClass,
                                                                     template (value) B3_Type p_TrafficClass) :=
  { /* @status    APPROVED */
    iei             := omit,
    iel             := '0C'O,  // @sic R5s110315 sic@
    spare1          := '00'B,
    delayClass      := p_DlyClass,
    relabilityClass := '011'B,                       // Unacknowledged GTP, LLC, and acknowledged RLC; Protected Data
    peakThroughput  := '0100'B,                      // 64 kbps
    spare2          := '0'B,
    precedenceClass := '011'B,                       // class 3
    spare3          := '000'B,
    meanThroughput  := '11111'B,                     // best effort
    trafficClass    := p_TrafficClass,
    deliveryOrder   := '10'B,                        // Without delivery order
    deliveryErrorSDU := '010'B,
    maxSduSize      := '00100000'B,
    maxBitRateUL    := '01000000'B,                  // 64 kbps
    maxBitRateDL    := '01000000'B,                  // 64 kbps
    residualBER     := '0111'B,                      // 1 x 10E (-5)
    sduErrorRatio   := '0100'B,                      // 1 X 10 E(-4)
    transferDelay   := '111111'B,                    // Transfer delay will be neglected in case of interactive or background. Hence the value is set to spare
    trafficHandlingPrio  := '11'B,                   // This is set to 3, but has to be neglected by the UE as the traffic class is interactive.
    guaranteedBitRateUL   := '00010000'B,            // The guaranteed bit rate is set equal to 16 kbps
    guaranteedBitRateDL   := '00010000'B,            // The guaranteed bit rate is set equal to 16 kbps
    spare4          := '000'B,
    signallingInd   := '0'B,
    sourceStatisticsDescriptor   := '0000'B,
    maxBitRateDL_Ext := omit,
    guaranteedBitRateDL_Ext := omit,
    maxBitRateUL_Ext := omit,
    guaranteedBitRateUL_Ext := omit
  };

  template (value) QualityOfService cds_QoS_InteractiveOrBackgroundMT_HS ( template (value) B3_Type p_DlyClass,
                                                                           template (value) B3_Type p_TrafficClass,
                                                                           template (value) B4_Type p_PeakThroughput,
                                                                           template (value) B8_Type p_MaxSduSize,
                                                                           template (value) B8_Type p_BitRateUL,
                                                                           template (value) B8_Type p_BitRateDL,
                                                                           template (omit) B8_Type p_BitRateExt )
    modifies cs_QoS_InteractiveOrBackgroundMT :=
  { /* @status    APPROVED */
    iel              := '0E'O,  // @sic R5s110315 sic@
    peakThroughput   := p_PeakThroughput,
    maxSduSize       := p_MaxSduSize,
    maxBitRateUL     := p_BitRateUL,
    maxBitRateDL     := p_BitRateDL,                  // Depending on UE Category
    maxBitRateDL_Ext           := p_BitRateExt,
    guaranteedBitRateDL_Ext    := p_BitRateExt
  };

  template TI cr_TI_Any :=
  { /* @status    APPROVED */
    tiFlag          := ?,                            // from network to MS
    tiVal           := ?
  };

  template TI cr_TI_MO :=
  { /* @status    APPROVED */
    tiFlag          := '0'B,                         // from network to MS
    tiVal           := ?
  };

  template (value) TI cs_TI_MT :=
  { /* @status    APPROVED */
    tiFlag          := '0'B,                         // from network to MS
    tiVal           := '000'B
  };

  template (value) TI cs_TI_MO :=
  { /* @status    APPROVED */
    tiFlag          := '1'B,                         // from MS to network
    tiVal           := '000'B
  };

  template (value) UpdateResult cs_GMM_UpdateResult(B3_Type p_Result) :=
  { /* @status    APPROVED */
    fOP             := '0'B,
    ttcn_value      := p_Result
  };

  template PriorityLvl cr_PriorityLvlAny :=
  { /* @status    APPROVED */
    iei             := '8'H,
    spare1          := '0'B,
    callPrio        := ?
  };

  template RepeatInd cr_RepeatInd(template (present) B4_Type p_RepeatInd := ?) :=
  { /* @status    APPROVED */
    iei             := 'D'H,
    repeatInd       := p_RepeatInd
  };

  template Bcap3aEtc cr_Bcap3aEtcAny :=
  { /* @status    APPROVED */
    extBit          := ?,
    coding          := ?,
    spare2          := ?,
    speechVersion   := ?
  };

  template Bcap cr_BcapAnyMO :=
  { /* Any bearer capability for direction n <- ue */
    /* @status    APPROVED */
    iei             := '04'O,
    iel             := ?,
    extBit3         := ?,
    radioChRequirement := ?,
    codingStd       := ?,
    transferMode    := ?,
    itc             := ?,
    bcap3aEtc1      := cr_Bcap3aEtcAny ifpresent,
    bcap3aEtc2      := cr_Bcap3aEtcAny ifpresent,
    bcap3aEtc3      := cr_Bcap3aEtcAny ifpresent,
    bcap3aEtc4      := cr_Bcap3aEtcAny ifpresent,
    bcap3aEtc5      := cr_Bcap3aEtcAny ifpresent,
    bcap3aEtc6      := cr_Bcap3aEtcAny ifpresent,
    extBit4         := *,
    compress        := *,
    structure       := *,
    duplexMode      := *,
    cfg             := *,
    nirr            := *,
    establish       := *,
    extBit5         := *,
    accessId        := *,
    rateAdapt       := *,
    sacp            := *,
    extBit5a        := *,
    OherItc         := *,
    OtherRateAdapt  := *,
    spare3          := *,
    extBit5b        := *,
    rateAdaptHeader := *,
    multiFrame      := *,
    mode            := *,
    logLinkId       := *,
    assignorAssignee := *,
    inBandOutBand   := *,
    spare1          := *,
    extBit6         := *,
    layer1Id        := *,
    userInfoLayer1  := *,
    syncAsync       := *,
    extBit6a        := *,
    numStopBits     := *,
    negotiation     := *,
    numDataBits     := *,
    userRate        := *,
    extBit6b        := *,
    intermRate      := *,
    nicTx           := *,
    nicRx           := *,
    parity          := *,
    extBit6c        := *,
    connectElem     := *,
    modemType       := *,
    extBit6d        := *,
    OtherModemType  := *,
    FixedNtwUserRate := *,
    extBit6e        := *,
    acceptChCoding  := *,
    maxNumTrafficCh := *,
    extBit6f        := *,
    uIMI            := *,
    wAIUR           := *,
    extBit6g        := *,
    acceptChCodingExt := *,
    asymInd         := *,
    spare2          := *,
    extBit7         := *,
    layer2id        := *,
    userInfoLayer2  := *
  };

  template Bcap cr_BcapSpeechMO :=
  { /* @status    APPROVED */
    iei             := '04'O,
    iel             := ?,
    extBit3         := ?,                            // extension bit
    radioChRequirement    := ?,
    codingStd       := '0'B,                         // coding standard : GSM
    transferMode    := '0'B,                         // circuit mode
    itc             := '000'B,                       // speech
    bcap3aEtc1      := cr_Bcap3aEtcAny ifpresent,
    bcap3aEtc2      := cr_Bcap3aEtcAny ifpresent,
    bcap3aEtc3      := cr_Bcap3aEtcAny ifpresent,
    bcap3aEtc4      := cr_Bcap3aEtcAny ifpresent,
    bcap3aEtc5      := cr_Bcap3aEtcAny ifpresent,
    bcap3aEtc6      := cr_Bcap3aEtcAny ifpresent,
    extBit4         := omit,
    compress        := omit,
    structure       := omit,
    duplexMode      := omit,
    cfg             := omit,
    nirr            := omit,
    establish       := omit,
    extBit5         := omit,
    accessId        := omit,
    rateAdapt       := omit,
    sacp            := omit,
    extBit5a        := omit,
    OherItc         := omit,
    OtherRateAdapt  := omit,
    spare3          := omit,
    extBit5b        := omit,
    rateAdaptHeader := omit,
    multiFrame      := omit,
    mode            := omit,
    logLinkId       := omit,
    assignorAssignee := omit,
    inBandOutBand   := omit,
    spare1          := omit,
    extBit6         := omit,
    layer1Id        := omit,
    userInfoLayer1  := omit,
    syncAsync       := omit,
    extBit6a        := omit,
    numStopBits     := omit,
    negotiation     := omit,
    numDataBits     := omit,
    userRate        := omit,
    extBit6b        := omit,
    intermRate      := omit,
    nicTx           := omit,
    nicRx           := omit,
    parity          := omit,
    extBit6c        := omit,
    connectElem     := omit,
    modemType       := omit,
    extBit6d        := omit,
    OtherModemType  := omit,
    FixedNtwUserRate := omit,
    extBit6e        := omit,
    acceptChCoding  := omit,
    maxNumTrafficCh := omit,
    extBit6f        := omit,
    uIMI            := omit,
    wAIUR           := omit,
    extBit6g        := omit,
    acceptChCodingExt := omit,
    asymInd         := omit,
    spare2          := omit,
    extBit7         := omit,
    layer2id        := omit,
    userInfoLayer2  := omit
  };

  template (value) Bcap cs_BcapSpeechMT :=
  { /* @status    APPROVED */
    iei             := '04'O,
    iel             := '01'O,
    extBit3         := '1'B,                         // extension bit
    radioChRequirement    := '01'B,                  // spare bits for n-> ue
    codingStd       := '0'B,                         // coding standard : GSM
    transferMode    := '0'B,                         // circuit mode
    itc             := '000'B,                       // speech
    bcap3aEtc1      := omit,
    bcap3aEtc2      := omit,
    bcap3aEtc3      := omit,
    bcap3aEtc4      := omit,
    bcap3aEtc5      := omit,
    bcap3aEtc6      := omit,
    extBit4         := omit,
    compress        := omit,
    structure       := omit,
    duplexMode      := omit,
    cfg             := omit,
    nirr            := omit,
    establish       := omit,
    extBit5         := omit,
    accessId        := omit,
    rateAdapt       := omit,
    sacp            := omit,
    extBit5a        := omit,
    OherItc         := omit,
    OtherRateAdapt  := omit,
    spare3          := omit,
    extBit5b        := omit,
    rateAdaptHeader := omit,
    multiFrame      := omit,
    mode            := omit,
    logLinkId       := omit,
    assignorAssignee := omit,
    inBandOutBand   := omit,
    spare1          := omit,
    extBit6         := omit,
    layer1Id        := omit,
    userInfoLayer1  := omit,
    syncAsync       := omit,
    extBit6a        := omit,
    numStopBits     := omit,
    negotiation     := omit,
    numDataBits     := omit,
    userRate        := omit,
    extBit6b        := omit,
    intermRate      := omit,
    nicTx           := omit,
    nicRx           := omit,
    parity          := omit,
    extBit6c        := omit,
    connectElem     := omit,
    modemType       := omit,
    extBit6d        := omit,
    OtherModemType  := omit,
    FixedNtwUserRate := omit,
    extBit6e        := omit,
    acceptChCoding  := omit,
    maxNumTrafficCh := omit,
    extBit6f        := omit,
    uIMI            := omit,
    wAIUR           := omit,
    extBit6g        := omit,
    acceptChCodingExt := omit,
    asymInd         := omit,
    spare2          := omit,
    extBit7         := omit,
    layer2id        := omit,
    userInfoLayer2  := omit
  };

  template CC_Capabilities cr_CC_CapabilitiesAny :=
  { /* @status    APPROVED */
    iei             := '15'O,
    iel             := '02'O,
    maxNumBearer    := ?,
    mcat            := ?,
    enicm           := ?,
    pcp             := ?,
    dtmf            := ?,
    spare4          := ?,
    maxNumSpeechBearer := ?
  };

  template CDPN cr_CDPN_Any :=
  { /* @status    APPROVED */
    iei             := '5E'O,                  // information element identifier
    iel             := ?,                            // length
    typeOfNumPlan   := cr_TypeOfNumPlanAny,          // type of number and numbering plan identification
    digits          := *                             // BCD numbers
  };

  template CDPS cr_CDPS_Any :=
  { /* @status    APPROVED */
    iei             := '6D'O,
    iel             := ?,
    subadrs         := cr_SubadrsAny
  };

  template CGPS cr_CGPS_Any :=
  { /* @status    APPROVED */
    iei             := '5D'O,                  // information element identifier
    iel             := ?,                            // length
    subadrs         := cr_SubadrsAny        // Subaddress
  };

  template ConnectedSubAdrs cr_ConnectedSubAdrs_Any :=
  { /* TS 24.008 cl. 10.5.4.14 */
    /* @status    APPROVED */
    iei             := '4D'O,
    iel             := ?,                            // length
    subadrs         := cr_SubadrsAny                 // Subaddress
  };

  template FacilityIE cr_Facility_Any(IEI8_Type p_IEI := '1C'O) :=
  { /* TS 24.008 cl. 10.5.4.15 */
    /* @status    APPROVED */
    iei             := p_IEI,                  // information element identifier '00011100'B
    iel             := ?,                      // length
    components      := ?                       // Component
  };

  template FacilityIE cr_FacilityAdvRecall := cr_Facility_Any('1D'O);     /* @status    APPROVED */

  template FacilityIE cr_FacilityRecallAlign := cr_Facility_Any('1B'O);   /* @status    APPROVED */

  template HLC cr_HLC_Any :=
  { /* @status    APPROVED */
    iei             := '7D'O,                  // information element identifier
    iel             := ?,
    extBit3         := *,
    codingStd       := *,
    interpretation  := *,
    presentModeProtocolProfile := *,
    extBit4         := *,
    hlcId           := *,
    extBit4a        := *,
    exteHlcId       := *
  };

  template LLC cr_LLC_Any :=
  { /* @status    APPROVED */
    iei             := '7C'O,
    iel             := ?,
    extBit3         := *,
    codingStd       := *,
    itc             := *,
    extBit3a        := *,
    negoInd         := *,
    spare6          := *,
    extBit4         := *,
    transferMode    := *,
    infoTransferRate := *,
    extBit4_1       := *,
    rateMultiplier  := *,
    extBit5         := *,
    layer1Id        := *,
    userInfoLayer1  := *,
    extBit5a        := *,
    syncAsync       := *,
    negotiation     := *,
    userRate        := *,
    extBit5b1       := *,
    intermRate      := *,
    nicTx           := *,
    nicRx           := *,
    flowCtrlTx      := *,
    flowCtrlRx      := *,
    spare1          := *,
    extBit5b2       := *,
    rateAdaptHeader := *,
    multiFrame      := *,
    mode            := *,
    logLinkId       := *,
    assignorAssignee := *,
    inBandOutBand   := *,
    spare1_5b2      := *,
    extBit5c        := *,
    numStopBits     := *,
    numDataBits     := *,
    parity          := *,
    extBit5d        := *,
    duplexMode      := *,
    modemType       := *,
    extBit6         := *,
    layer2id        := *,
    userInfoLayer2  := *,
    extBit6a1       := *,
    modeLayer2      := *,
    spare3          := *,
    q933            := *,
    extBit6a2       := *,
    userSpecifLayer2 := *,
    extBit6b        := *,
    windowSize      := *,
    extBit7         := *,
    layer3id        := *,
    userInfoLayer3  := *,
    extBit7a1       := *,
    OptionUserSpecifLayer3 := *,
    extBit7a2       := *,
    modeLayer3      := *,
    spare5          := *,
    extb7b1         := *,
    spare3_7b1      := *,
    defaultPacketSize := *,
    extBit7c        := *,
    packetWindowSize := *,
    extBit7a3       := *,
    spare3_7a3      := *,
    addLayer3ProtocolInfo := *,
    extBit7b2       := *,
    spare3_7b2      := *,
    addLayer3ProtocolInfoL := *
  };

  template LLC_SAPI cr_LLC_SAPI :=
  { /* LLC SAPI value assigned as SAPI 11 in order to ensure that there are no problems at the time of handover from UMTS to GSM */
    /* @status    APPROVED */
    iei             := omit,
    spare           := '0000'B,
    llcSapiValue    := ('0000'B, '0011'B, '0101'B, '1001'B, '1011'B)
  };

  template (value) LLC_SAPI cs_LLC_SAPI_UMTS := cs_LLC_SAPI(-, '0000'B);  /* The value of LLC SAPI for an  UE supporting ONLY UMTS;
                                                                             @status    APPROVED */

  template LocAreaId2 cr_LocAreaId2_Any :=
  { /* @sic R5s110178 Baseline Moving sic@*/
    /* @status    APPROVED */
    iei     := '14'O,
    iel     := ?,
    plmn    := ?,        // MCC  + MNC 3 digits each
    lac     := ?         // LAC
  };

  template  MS_RadioAccessCap_LV cr_MS_RadioAccessCapLVAny :=
  { /* @status    APPROVED */
    iel  := ?,
    valuePart := cr_MS_RadioAccessCapVAny  // @sic R5s110176 Baseline Moving sic@
  };

  template  MS_RadioAccessCap_V cr_MS_RadioAccessCapVAny :=
  { /* The 1st instance must be single access type, but after that everything is optional */
    /* @status    APPROVED */
    listofValues := (
      {cr_MSRadioAccessCapListSingle, *}, {cr_MSRadioAccessCapListSingle, cr_MSRadioAccessCapListSingle, *},
      {cr_MSRadioAccessCapListSingle, cr_MSRadioAccessCapListSingle, cr_MSRadioAccessCapListAny, *},
      {cr_MSRadioAccessCapListSingle, cr_MSRadioAccessCapListAny, *} ),
    sparebits := *
  };

  template MS_RadioAccessCapList cr_MSRadioAccessCapList(template (present) MS_RadioAccessCap p_MS_RadioAccessCap) :=
  { /* @status    APPROVED */
    raCapability   := p_MS_RadioAccessCap,
    repeatCap      := ? // this structure repeats itself, so need to indicate whether to go round again @sic R5s100135 sic@
  };

  template MS_RadioAccessCapList cr_MSRadioAccessCapListAny    := cr_MSRadioAccessCapList(cr_MSRadioAccessCapAny);      /* @status    APPROVED */

  template MS_RadioAccessCapList cr_MSRadioAccessCapListSingle := cr_MSRadioAccessCapList(cr_MSRadioAccessCapSingle);   /* @status    APPROVED */

  template MS_RadioAccessCapList cr_MSRadioAccessCapListNotSupportEUTRA := cr_MSRadioAccessCapList(cr_MSRadioAccessCapNotSupportEUTRA);   /* @status    APPROVED */

  template MS_RadioAccessCap cr_MSRadioAccessCapAny :=
  { /* @status    APPROVED */
    accessTechType := ?,
    singleAccess   := cr_SingleAccessCapAny ifpresent,  // only present if accessTechType != 1111
    addLength      := *,  // only present if accessTechType = 1111
    addAccess      := cr_AddMS_RadioAccessCapListAny ifpresent,   // only present if accessTechType = 1111; @sic R5s100871 sic@
    sparebits      := *
  };

  template MS_RadioAccessCap cr_MSRadioAccessCapSingle(template (present) SingleAccessCap p_SingleAccessCap := cr_SingleAccessCapAny) :=
  { /* @status    APPROVED */
    accessTechType := complement('1111'B),
    singleAccess   := p_SingleAccessCap,  // only present if accessTechType != 1111
    addLength      := omit,  // only present if accessTechType = 1111
    addAccess      := omit,
    sparebits      := *
  };

  template MS_RadioAccessCap cr_MSRadioAccessCapNotSupportEUTRA := cr_MSRadioAccessCapSingle(cdr_SingleAccessNotSupportEUTRA);  /* @status    APPROVED */

  template SingleAccessCap cr_SingleAccessCapAny :=
  { /* @status    APPROVED */
    accLength := ?,
    rfPwrCap := ?,
    mask1 := ?,
    a5_1      := *,  // not present if mask1 = 0
    a5_2      := *,  // not present if mask1 = 0
    a5_3      := *,  // not present if mask1 = 0
    a5_4      := *,  // not present if mask1 = 0
    a5_5      := *,  // not present if mask1 = 0
    a5_6      := *,  // not present if mask1 = 0
    a5_7      := *,  // not present if mask1 = 0
    esInd := ?,
    pS := ?,
    vGCS := ?,
    vBS := ?,
    mask2 := ?,
    multiSlotCap  := cr_MultiSlotCapAny ifpresent, // not present if mask2 = 0
    mask3 := ?,
    psk8PwrCap := *,  // not present if mask3 = 0
    compactIFMeas := ?,
    revLev := ?,
    fddRATCap := ?,
    tdd384RATCap := ?,
    cdma2000RATCap := ?,
    tdd128RATCap := ?,
    gERANFeatPkge1 := ?,
    mask4 := ?,
    extDTMGPRSMultiSlotClass := *, // not present if mask4 = 0
    extDTMEGPRSMultiSlotClass := *, // not present if mask4 = 0
    modulationBasedMultiSlot := ?,
    mask5 := ?,
    highMultislotCap := *, // not present if mask5 = 0
    mask6 := ?,
    gERANIuModeCapLength := *, // not present if mask6 = 0
    fLOIuCap    := *, // not present if mask6 = 0
    gmskMultislotPwrProfile := ?,
    psk8MultislotPwrProfile := ?,
    multiTBFCap := ?,
    dlAdvRxPerformance := ?,
    extRLCMACCtrlCap := ?,
    dTMEnhCap := ?,
    mask7 := ?,
    dTMGPRSHighClass := *,  // not present if mask7 = 0
    mask8        := *,  // not present if mask7 = 0
    dTMEGPRSHighClass := *, // not present if mask7 or mask8 = 0
    pSHOCap := ?,
    dTMHOCap := ?,
    mask9 := ?,
    multislotCapDlDualCarrier  := *, // not present if mask9 = 0
    dlDualCarrierDTMCap   := *, // not present if mask9 = 0
    flexTimeslotAssign := ?,
    gANPSHOCap := ?,
    rLCNonPersistentMode := ?,
    reducedLatencyCap := ?,
    ulEGPRS2 := ?,
    dlEGPRS2 := ?,
    eutraFDD := ?,
    eutraTDD := ?,
    geran2EutraSupport := ?,       // @sic R5s100135 sic@
    priorityBasedReselection := ?,
    mask10 := *, //  @sic R5s110176 Baseline Moving, R5s110242 sic@
    altEFTAMultislotClass := *, // not present if mask10 = 0  @sic R5s110176 Baseline Moving sic@
    eftaMultislotCapRedforDDC := *, // not present if mask10 = 0  @sic R5s110176 Baseline Moving sic@
    upperLayerPDUStartCapforRLCUMInd := *,  //  @sic R5s110176 Baseline Moving sic@
    emstCap := *, //  @sic R5s110176 Baseline Moving sic@
    mttiCap := *, //  @sic R5s110176 Baseline Moving sic@
    utraCSGCellsReporting := *, //  @sic R5s110176 Baseline Moving sic@
    eutraCSGCellsReporting := *, //  @sic R5s110176 Baseline Moving sic@
    dtrCap  := *, // @sic R5s120178 Baseline Moving sic@
    emsrCap  := *, // @sic R5s120178 Baseline Moving sic@
    fastDLFreqSwitchingCap  := *, // @sic R5s120178 Baseline Moving sic@
    tighterCap  := * // @sic R5s120178 Baseline Moving sic@
  };

  template SingleAccessCap cdr_SingleAccessNotSupportEUTRA modifies cr_SingleAccessCapAny :=
  { /* @status    APPROVED */
    eutraFDD := '0'B,
    eutraTDD := '0'B,
    geran2EutraSupport := '00'B
  };

  template MultiSlotCap cr_MultiSlotCapAny :=
  { /* @status    APPROVED */
    mask1 := ?,
    hSCSDClass   := *, // not present if mask1 = 0
    mask2 := ?,
    gPRSClass   := *, // not present if mask2 = 0
    gPRSExtDynAllocCap := *, // not present if mask2 = 0
    mask3 := ?,
    sMSValue   := *, // not present if mask3 = 0
    sMValue    := *, // not present if mask3 = 0
    mask4 := ?,
    eCSDClass   := *, // not present if mask4 = 0
    mask5 := ?,
    eGPRSClass   := *, // not present if mask5 = 0
    eGPRSExtDynAllocCap := *, // not present if mask5 = 0
    mask6 := ?,
    dTMGPRSClass   := *, // not present if mask6 = 0
    singleSlotDTM  := *, // not present if mask6 = 0
    mask7          := *, // not present if mask6 = 0
    dtmEGPRSClass  := * // not present if mask6 or mask7 = 0
  };

  template  MS_RadioAccessCap_LV cr_MS_RadioAccessCapLVNotSupportEUTRA :=
  { /* @status    APPROVED */
    iel  := ?,
    valuePart := cr_MS_RadioAccessCapVNotSupportEUTRA  // @sic R5s110176 Baseline Moving sic@
  };

  template  MS_RadioAccessCap_V cr_MS_RadioAccessCapVNotSupportEUTRA :=
  { // The 1st instance must be single access type, but after that everything is optional
    /* @status    APPROVED */
    listofValues := (
      {cr_MSRadioAccessCapListNotSupportEUTRA, *},
      {cr_MSRadioAccessCapListNotSupportEUTRA, cr_MSRadioAccessCapListSingle, *},
      {cr_MSRadioAccessCapListNotSupportEUTRA, cr_MSRadioAccessCapListSingle, cr_MSRadioAccessCapListAny, *},
      {cr_MSRadioAccessCapListNotSupportEUTRA, cr_MSRadioAccessCapListAny, *}), // @sic R5s100871 sic@
    sparebits := *
  };

  template AddMS_RadioAccessCapList cr_AddMS_RadioAccessCapListAny :=
  { /* @status    APPROVED */
    cr_AddMS_RadioAccessCapAny
  };

  template AddMS_RadioAccessCap cr_AddMS_RadioAccessCapAny :=
  { /* @status    APPROVED */
    prefix := '1'B,
    addTechType    := ?,  // not present if prefix = 0
    powerClassGMSK := ?,  // not present if prefix = 0
    powerClass8PSK := ?   // not present if prefix = 0
  };

  template NSAPI cr_NSAPI :=
  { /* @status    APPROVED */
    spare           := '0000'B,
    nSAPI_Value     := ('0101'B, '0110'B, '0111'B, '1000'B, '1001'B, '1010'B, '1011'B, '1100'B, '1101'B, '1110'B, '1111'B)
  };

  template PTMSI_Type cr_PTMSI_Type_Any :=
  { /* @sic R5s110178 Baseline Moving sic@*/
    /* @status    APPROVED */
    iei       := 'E'H,
    spare     := tsc_Spare3,
    ptmsiType := ?
  };

  template (value) RequestedMS_Info cs_RequestedMS_Info :=
  { /* @status    APPROVED */
    iei    := 'A'H,       // (A- hex)
    l_RAT  := '0'B,     // Inter RAT information container IE requested
    l_RAT2 := '1'B,    // E-UTRAN Inter RAT information container IE requested
    spare2 := '00'B
  };

  template RequestType cr_RequestType_Any :=
  { /* @status    APPROVED */
    iei               := 'A'H,
    spare             := '0'B,
    requestTypeValue  := ?
  };

  template RoutingAreaId2 cr_RoutingAreaId2 (template (present) O6_Type p_RAU2 := ?) :=
  { /* @status    APPROVED */
    iei  := '1B'O,
    iel  := '06'O,                   // length
    routingAreaId2  := p_RAU2
  };

  template SS_VersionInd cr_SS_VersionIndAny :=
  { /* @status    APPROVED */
    iei             := '7F'O,
    iel             := ?,
    sS_VersionInfo  := ?
  };

  template ServCategory cr_ServCategoryAny :=
  { /* 3GPP 24.008 / 10.5.4.33 */
    /* @status    APPROVED */
    iei             := '2E'O,                  // '00101110'B (2E hex)
    iel             := '01'O,                        // '01'O
    emergServCat    := cr_EmergServCatAny            // Emergency Service Category
  };

  template StreamId cr_StreamIdAny :=
  { /* @status    APPROVED */
    iei             := '2D'O,
    iel             := ?,
    streamIndValue  := ?
  };

  template Subadrs cr_SubadrsAny :=
  { /* @status    APPROVED */
    extBit          := ?,                            // extension bit
    typrOfSubadrs   := ?,                            // Type of subaddress
    oddEven         := ?,                            // odd/even indicator
    spare3          := ?,                            // 3 spare bits
    subadrsInfo     := *                             // subaddress information
  };

  template TypeOfNumPlan cr_TypeOfNumPlanAny :=
  { /* @status    APPROVED */
    extBit          := ?,                            // extension bit
    typeOfNum       := ?,                            // Type of number
    numbPlanId      := ?                             // Numbering plan id.
  };

  template UserUser cr_UserUserAny :=
  { /* In SETUP, ALERTING, CONNECT, DISCONNECT, RELEASE and RELEASE COMPLETE messages the userUserInfo length is of 0 - 32 bytes.
     * In USER INFORMATION messages the userUserInfo length is of 1 - 128. */
    /* @status    APPROVED */
    iei             := '7E'O,                  // information element identifier
    iel             := ?,                            // length
    userUserProtocolDiscr := ?,                      // user-user protocol discriminator
    userUserInfo    := *                             // user user information
  };

  template (value) Cau cs_CauNormCallClear :=
  { /* @status    APPROVED */
    iei             := omit,
    iel             := '02'O,
    extBit3         := '1'B,                         // no extension
    codingStd       := '11'B,                        // coding standard - GSM
    spare1          := '0'B,                         // bit
    location        := '0000'B,                      // location - user
    extBit3a        := omit,
    recommend       := omit,
    extBit4         := '1'B,                         // no extension
    cauValue        := int2bit ( 16, 7 ),            // Normal call clearing
    diagnostic      := omit
  };

  template UplinkDataStatus cr_UplinkDataStatusAny :=
  { /* @status    APPROVED */
    iei  := '36'O,
    iel  := ?,
    nsapiUplinkStatus  := ?
  };

  template AUTHENTICATIONFAILURE cr_AuthFailAny_Common :=
  { /* @status    APPROVED */
    skipIndicator   := '0000'B,
    mMProtocolDiscriminator := '0101'B,
    msgType         := '??011100'B,
    rejCau          := ?,
    authFailParam   := cdr_AuthFailParamGSM_Any ifpresent
  };

  template (value) AUTHENTICATIONREQUEST cs_AuthReq_Common(template (value) KeySeq p_KeySeq,
                                                           template (value) MM_RAND p_RAND,
                                                           template (value) AUTN p_AUTN) :=
  { /* @status    APPROVED */
    skipIndicator   := '0000'B,
    mMProtocolDiscriminator := '0101'B,
    msgType         := '00010010'B,
    spare4          := '0000'B,
    ciphKeySeqNum   := cs_CiphKeySeqNum(omit, p_KeySeq),
    rAND            := p_RAND,
    aUTN            := p_AUTN
  };

  template AUTHENTICATIONRESPONSE cr_AuthResponse_Common(template AuthRspExt p_AuthRspExt := omit) :=
  { /* @status    APPROVED */
    skipIndicator   := '0000'B,
    mMProtocolDiscriminator := '0101'B,
    msgType         := '??010100'B,
    authRsp         := cr_AuthRspAny (omit), // @sic R5s120346 sic@
    authRspExt      := p_AuthRspExt
  };

  template IMSIDETACHINDICATION cr_IMSI_DetachInd_Common(template (present) MS_Clsmk1 p_MS_Clsmk1 := cr_MS_Clsmk1_Def,
                                                         template (present) MobileIdentity p_MobileIdentity := cr_MobileIdTMSI_lv (px_TMSI_Def)) :=
  { /* @status    APPROVED */
    skipIndicator   := '0000'B,
    mMProtocolDiscriminator := '0101'B,
    msgType         := '??000001'B,
    mSClsmk1        := p_MS_Clsmk1,
    mobileId        := p_MobileIdentity            // IMSI DETACH INDICATION message carries TMSI information element
  };

  template (value) LOCATIONUPDATINGACCEPT cs_LocUpdAcp_Common(octetstring p_PLMN,
                                                              octetstring p_LAC,
                                                              template (omit) MobileIdentity p_MobileId, // @sic R5-112706 sic@
                                                              template (omit) PLMN_List p_EPLMN) :=
  { /* @status    APPROVED */
    skipIndicator   := '0000'B,
    mMProtocolDiscriminator := '0101'B,
    msgType         := '00000010'B,
    locAreaId       := cs_LAI(omit, p_PLMN, p_LAC),
    mobileId        := p_MobileId,
    followOnProceed := 'A1'O,
    cTSPerm         := omit,
    equivalentPLMN  := p_EPLMN,
    emergNumList    := omit,
    perMST3212      := omit   /* cl. 10.5.7.4a O TLV 3     IEI=0x35 @sic R5s120178 Baseline Moving sic@*/
  };

  template TMSIREALLOCATIONCOMPLETE cr_TMSI_ReallocCmpl_Common :=
  { /* @status    APPROVED */
    skipIndicator   := '0000'B,                      // Skip Indicator
    mMProtocolDiscriminator := '0101'B,              // MM Protocol Discriminator
    msgType         := '??011011'B                   // Message Type
  };

  template CMSERVICEREQUEST cr_CM_ServReq(template (present) KeySeq p_KeySeq,
                                          template (present) CMServType p_CMServType := ?,
                                          template (present) MobileIdentity p_MobileIdentity := cr_MobileIdAny(omit)) :=
  { /* @status    APPROVED */
    skipIndicator   := '0000'B,
    mMProtocolDiscriminator := '0101'B,
    msgType         := '??100100'B,
    ciphKeySeqNum   := cr_CiphKeySeqNum ( omit, p_KeySeq ),
    cMServType      := p_CMServType,
    mSClsmk2        := cr_MS_Clsmk2_Any,
    mobileId        := p_MobileIdentity,
    priorityLvl     := cr_PriorityLvlAny ifpresent,
    addUpdateParams := cr_AddUpdateParams_Any ifpresent,  /* cl. 10.3.14 O TV 1 IEI=0xC- @sic R5s120178 Baseline Moving sic@*/
    deviceProperties := cr_DeviceProperties_Any('D'H) ifpresent /* cl. 10.5.7.8 O TV 1 IEI=0xD- @sic R5s120178 Baseline Moving sic@*/
  };

  template (value) CMSERVICEREJECT cs_CM_ServRej(template (value) RejCau p_RejCau) :=
  { /* @status    APPROVED */
    skipIndicator   := '0000'B,
    mMProtocolDiscriminator := '0101'B,
    msgType         := '00100010'B,
    rejCau          := p_RejCau,
    t3246           := omit  // T3246 Value O TLV 3 IEI=36 @sic R5s120178 BaselineMoving sic@
  };

  template LOCATIONUPDATINGREQUEST cr_LocUpdReq_Common(template (present) KeySeq p_KeySeq,
                                                       template (present) LocUpdType p_Type := ?, // @sic R5-112114 sic@
                                                       template (present) LocAreaId p_LocAreaId := cr_LAI_Any_v,
                                                       template (present) MS_Clsmk1 p_MSClsmk1 := cr_MS_Clsmk1_Any,
                                                       template (present) MobileIdentity p_MobileId := cr_MobileIdAny(omit),
                                                       template MS_Clsmk2 p_MSClsmk2 := cr_MS_Clsmk2_Any_tlv('33'O)) :=
  { /* @status    APPROVED */
    skipIndicator   := '0000'B,
    mMProtocolDiscriminator := '0101'B,
    msgType         := '??001000'B,
    ciphKeySeqNum   := cr_CiphKeySeqNum ( omit, p_KeySeq ),
    locUpdType      := p_Type,
    locAreaId       := p_LocAreaId,
    mSClsmk1        := p_MSClsmk1,
    mobileId        := p_MobileId,
    mSClsmk2        := p_MSClsmk2,
    addUpdateParams := cr_AddUpdateParams_Any ifpresent, // @sic R5s110176 Baseline Moving sic@
    deviceProperties := cr_DeviceProperties_Any('D'H) ifpresent, /* cl. 10.5.7.8 O TV 1 IEI=0xD- @sic R5s120178 Baseline Moving sic@*/
    msNetworkFeatureSupport := cr_MS_NetworkFeatureSupport_Any ('E'H) ifpresent   /* cl. 10.5.1.15 O TV 1 IEI=0xE- @sic R5s120178 Baseline Moving sic@*/
  };

  template ATTACHCOMPLETE cr_AttachComplete_Common :=
  { /* @status    APPROVED */
    skipIndicator   := '0000'B,
    gMMProtocolDiscriminator := tsc_GMM_PD,
    msgType         := '00000011'B,
    interRAT_HO_Info := omit,
    eutranInterRAT_HO_Info := omit
  };

  template ATTACHREQUEST cr_AttachReq_Common(template AttachType p_AttachType,
                                             template MobileIdentity p_MobId,
                                             template RoutingAreaId p_RAI,
                                             template (present) KeySeq p_KeySeq,
                                             template (present) MS_RadioAccessCap_LV p_MS_RadioAccessCap := cr_MS_RadioAccessCapLVAny,
                                             template PTMSI_Signature p_PTMSI_Signature := cr_PTMSI_SignatureAny ifpresent,
                                             template GPRS_Timer p_GPRS_Timer := cr_GPRS_TimerAny ifpresent,
                                             template TMSI_Status p_TMSI_Status := cr_TMSI_Status ifpresent,
                                             template PS_LCS_Capability p_PS_LCS_Capability := cr_PS_LCS_CapabilityAny ifpresent,
                                             template MS_Clsmk2 p_MS_Clsmk2 := cr_MS_Clsmk2_Any_tlv ifpresent, // @sic R5s120586 sic@
                                             template MS_Clsmk3 p_MS_Clsmk3 := cr_MSCLSMK3_Any ifpresent,
                                             template CodecList p_CodecList := cr_CodecListAny ifpresent,
                                             template UE_NetworkCap p_UENetworkCap := cr_UENetworkCap_Any ('58'O) ifpresent,
                                             template MobileIdentity p_AddMobId := cr_MobileIdAny('1A'O) ifpresent,
                                             template RoutingAreaId2 p_OldRAI := cr_RoutingAreaId2 ifpresent) :=
  { /* @status    APPROVED */
    skipIndicator   := '0000'B,
    gMMProtocolDiscriminator := tsc_GMM_PD,
    msgType         := '00000001'B,
    msNetworkCap    := cdr_MS_NetworkCapAss_lv,
    gprsCiphKeySeqNo := cr_CiphKeySeqNum(omit, p_KeySeq),
    attachType      := p_AttachType,
    drxParameter    := cr_DRXparameter_Any (omit),
    mobileIdentity  := p_MobId,    // @sic R5s110176 Baseline Moving sic@
    oldRAI          := p_RAI,
    msRadioAccessCap := p_MS_RadioAccessCap,
    oldPTMSI_Signature := p_PTMSI_Signature,
    readyTimer      := p_GPRS_Timer,
    tmsiStatus      := p_TMSI_Status,
    pS_LCS_Capability := p_PS_LCS_Capability,
    msClassmark2     := p_MS_Clsmk2,
    msClassmark3     := p_MS_Clsmk3,
    supportedCodecList := p_CodecList,
    ueNetworkCapability := p_UENetworkCap,
    addMobileId      := p_AddMobId,
    addOldRAI        := p_OldRAI,
    voiceDomainPref  := cr_VoiceDomainPref_Any ifpresent, /* @sic R5s110176 Baseline Moving sic@ */
    deviceProperties := cr_DeviceProperties_Any('D'H) ifpresent,  /* cl. 10.5.7.8 O TV 1 IEI=0xD- @sic R5s120178 Baseline Moving sic@*/
    ptmsiType        := cr_PTMSI_Type_Any ifpresent,  /* cl. 10.5.5.29 O TV 1 IEI=0xE- @sic R5s120178 Baseline Moving sic@*/
    msNetworkFeatureSupport := cr_MS_NetworkFeatureSupport_Any ('C'H) ifpresent,   /* cl. 10.5.1.15 O TV 1 IEI=0xC- @sic R5s120178 Baseline Moving sic@*/
    oldLAI           := cr_LocAreaId2_Any ifpresent  /* cl. 10.5.5.30 O TLV 7 IEI=0x14 @sic R5s120178 Baseline Moving sic@*/
  };

  template AUTHENTICATIONANDCIPHERINGRESPONSE cr_AuthAndCiphRsp_Common(template AuthRsp p_AuthRsp,
                                                                       template AuthRspExt p_AuthRspExt) :=
  { /* @status    APPROVED */
    skipIndicator   := '0000'B,
    gMMProtocolDiscriminator := tsc_GMM_PD,
    msgType         := '00010011'B,
    spare4          := '0000'B,
    acRefNo         := ?,                            // Should be the one sent in the auth request
    authRsp         := p_AuthRsp,                    // Authentication RES
    imeisv          := omit,                         // No IMEISV requested
    authRspExt      := p_AuthRspExt                  // Authentication paramter AUTN, a UMTS challenge is requested
  };

  template CALLCONFIRMED cr_CallConf_Common(template TI p_TI,
                                            template StreamId p_StreamId) :=
  { /* @status    APPROVED */
    ti              := p_TI,
    cC_ProtocolDiscriminator := '0011'B,
    msgType         := '??001000'B,
    repeatInd       := cr_RepeatInd ifpresent,
    bcap1           := cr_BcapAnyMO ifpresent,
    bcap2           := cr_BcapAnyMO ifpresent,
    cau             := cr_CauAny ifpresent,
    cC_Capabilities := cr_CC_CapabilitiesAny ifpresent,
    streamId        := p_StreamId,
    supportedCodecs := cr_CodecListAny  ifpresent
  };

  template CONNECTACKNOWLEDGE cr_ConnAck_Common(template TI p_TI) :=
  { /* @status    APPROVED */
    ti              := p_TI,
    cC_ProtocolDiscriminator := '0011'B,
    msgType         := '??001111'B
  };

  template CONNECTul cr_Connect_Common(template TI p_TI) :=
  { /* @status    APPROVED */
    ti              := p_TI,
    cC_ProtocolDiscriminator := '0011'B,
    msgType         := '??000111'B,
    facility        := cr_Facility_Any ifpresent,
    connectedSubAdrs := cr_ConnectedSubAdrs_Any ifpresent,
    userUser        := cr_UserUserAny ifpresent,
    sS_VersionInd   := cr_SS_VersionIndAny ifpresent,
    streamId        := cr_StreamIdAny ifpresent
  };

  template DETACHREQUESTMO cr_DetachReq_Common(template DetachType p_Type,
                                               template MobileIdentity p_Ptmsi,
                                               template PTMSI_Signature p_Signature := cr_PTMSI_Signature2Any ifpresent) :=  // @sic R5s110112 sic@
  { /* @status    APPROVED */
    skipIndicator   := '0000'B,
    gMMProtocolDiscriminator := tsc_GMM_PD,
    msgType         := '00000101'B,
    spare4          := ?,
    detachType      := p_Type,
    ptmsi           := p_Ptmsi,
    ptmsiSignature  := p_Signature
  };

  template (value) ACTIVATEPDPCONTEXTACCEPTdl cs_ActPDP_ContextAcpMT_Common(TI p_TI,
                                                                            template (value) LLC_SAPI p_LLC_SAPI,
                                                                            template (value) QualityOfService p_Qos,
                                                                            template (value) RadioPriority p_RadioPriority,
                                                                            template (omit) PktDataProtoAddr p_Pdp_addr,
                                                                            template (omit) ProtocolConfigOptions p_PCO,
                                                                            template (omit) PacketFlowIdentifier p_PFI) :=
  { /* 24.008, 9.5.2 */
    /* @status    APPROVED */
    ti              := p_TI,                         // This will be overwritten in the test case with the received ti
    sM_ProtocolDiscriminator := tsc_SMPD,            // PD for SM
    msgType         := '01000010'B,                  // Msg type for PDP Context Accept
    negiotiatedLLC_SAPI := p_LLC_SAPI,             // Mobile in UMTS should neglect this IE. If in GSM domain, will use this SAPI.
    negiotiatedQoS  := p_Qos,
    spare           := '0000'B,
    radioPriority   := p_RadioPriority, // UTRAN = cs_RadioPriorityHigh (omit),
    pDP_Address     := p_Pdp_addr,
    protocolConfOpts := p_PCO, // UTRAN = omit,
    pktFlowID       := p_PFI, // UTRAN = cs_PktFlowId,
    smCause       := omit,
    connectivityType := omit  /* cl. 10.5.6.19 O TV 1 IEI=0xB- @sic R5s120178 Baseline Moving sic@*/
  };

  template (value) ALERTINGdl cs_Alert_Common( template (value) TI p_TI) :=
  { /* @status    APPROVED */
    ti              := p_TI,
    cC_ProtocolDiscriminator := '0011'B,
    msgType         := '00000001'B,
    facility        := omit,
    progInd         := omit,
    userUser        := omit
  };

  template (value) ATTACHACCEPT cs_AttachAcc_Common(template (value) AttachResult p_AttachRes,
                                                    template (value) RoutingAreaId p_RAI,
                                                    template (omit) PTMSI_Signature p_PTMSIsig,
                                                    template (omit) MobileIdentity p_PTMSI,
                                                    template (omit) PLMN_List p_EPLMN,
                                                    template (omit) MobileIdentity p_TMSI) :=
  { /* @status    APPROVED */
    skipIndicator   := '0000'B,
    gMMProtocolDiscriminator := tsc_GMM_PD,
    msgType         := '00000010'B,
    forceToStandby  := cs_ForceToStandby('000'B),     // Force to standby not indicated
    attachResult    := p_AttachRes,
    periodicRAupdateTimer := cs_GprsTimer_v('111'B, '00000'B), // Timer deactivated
    radioPrioTOM8   := cs_RadioPriority(omit, '100'B),     // Lowest
    radioPrioSMS    := cs_RadioPriority(omit, '100'B),      // Lowest
    rai             := p_RAI,
    ptmsiSignature  := p_PTMSIsig,
    negReadyTimer   := omit,
    allocatedPTMSI  := p_PTMSI,
    msIdentity      := p_TMSI,                       // @sic R5-123114 sic@
    gmmCause        := omit,
    t3302Value      := omit,
    cellNotification := omit,
    equivalentPLMN  := p_EPLMN,
    ntwFeatureSupport := omit,
    emergNumList    := omit,
    requestedMS_Info := omit,
    t3319Value      := omit,
    t3323Value      := omit,
    t3312ExtdValue  := omit /* cl. 10.5.7.4a O TLV 3 IEI=0x39 @sic R5s120178 Baseline Moving sic@*/
  };

  template (value) ATTACHREJECT cs_AttachRej_Common(RejCau p_Cause) :=
  { /* @status    APPROVED */
    skipIndicator   := '0000'B,
    gMMProtocolDiscriminator := tsc_GMM_PD,
    msgType         := '00000100'B,
    gmmCause        := p_Cause,
    t3302Value      := omit,
    t3346Value      := omit   /* cl. 10.5.7.4 O TLV 3     IEI=0x3A @sic R5s120178 Baseline Moving sic@*/
  };

  template (value) AUTHENTICATIONANDCIPHERINGREQUEST cs_AuthAndCiphReq_Common(template (value) RAND p_Rand,
                                                                              template (value) CiphKeySeqNum p_CiphKeySeqNum,
                                                                              template (value) GPRS_CipherAlg p_CipherAlg,
                                                                              template (value) AUTN p_Autn) :=
  { /* @status    APPROVED */
    skipIndicator   := '0000'B,
    gMMProtocolDiscriminator := tsc_GMM_PD,
    msgType         := '00010010'B,
    imeisvReq       := cs_IMEISV_Request('000'B),      // IMEISV not requested
    ciphAlgorithm   := cs_CiphAlgorithm(p_CipherAlg), // GPRS encryption algorithm GEA/1
    acRefNo         := cs_AC_RefNum3,                  // Use any reference value
    forceToStandby  := cs_ForceToStandby('000'B),      // Force to standby not indicated
    authRand        := p_Rand,                         // Authentication paramter RAND
    gprsCiphKeySeqNo := p_CiphKeySeqNum,               // GPRS ciphering key sequence number
    aUTN            := p_Autn                          // Authentication paramter AUTN, an UMTS challenge is requested
  };

  template (value) CALLPROCEEDING cs_CallProc_Common( template (value) TI p_TI) :=
  { /* @status    APPROVED */
    ti              := p_TI,
    cC_ProtocolDiscriminator := '0011'B,
    msgType         := '00000010'B,
    repeatInd       := omit,
    bcap1           := omit,
    bcap2           := omit,
    facility        := omit,
    progInd         := omit,
    priorityGranted := omit,
    ntwCC_Capabilities := omit
  };

  template (value) CONNECTACKNOWLEDGE cs_ConnAck_Common(template (value) TI p_TI) :=
  { /* @status    APPROVED */
    ti              := p_TI,
    cC_ProtocolDiscriminator := '0011'B,
    msgType         := '00001111'B
  };

  template (value) CONNECTdl cs_Connect_Common(template (value) TI p_TI) :=
  { /* @status    APPROVED */
    ti              := p_TI,
    cC_ProtocolDiscriminator := '0011'B,
    msgType         := '00000111'B,
    facility        := omit,
    progInd         := omit,
    connectedNum    := omit,
    connectedSubAdrs := omit,
    userUser        := omit
  };

  template (value) SETUPdl cs_SetupMT_Common(template (value) Bcap p_Bcap) :=
  { /* @status    APPROVED */
    ti              := cs_TI_MT,
    cC_ProtocolDiscriminator := '0011'B,
    msgType         := '00000101'B,
    repeatInd       := omit,
    bcap1           := p_Bcap,
    bcap2           := omit,
    facility        := omit,
    progInd         := omit,
    signal          := omit,
    cgpn            := omit,
    cgps            := omit,
    cdpn            := omit,
    cdps            := omit,
    redirectingPN   := omit,
    redirectingPSubadrs := omit,
    llcRepeatInd    := omit,
    llc1            := omit,
    llc2            := omit,
    hlcRepeatInd    := omit,
    hlc1            := omit,
    hlc2            := omit,
    userUser        := omit,
    priority        := omit,
    alert           := omit,
    ntwCCCapabilities := omit,
    cauNoCLI        := omit,
    buBcap          := omit
  };

  template PAGINGRESPONSE cr_PagRsp_Common(template (present) KeySeq p_KeySeq,
                                           template (present) MobileIdentity p_MobileId) :=
  { /* @status    APPROVED */
    skipIndicator   := '0000'B,
    rRProtocolDiscriminator := '0110'B,
    msgType         := '??100111'B,
    spare4          := '0000'B,
    ciphKeySeqNum   := cr_CiphKeySeqNum(omit, p_KeySeq),
    mSClsmk2        := cr_MS_Clsmk2_Any,
    mobileId        := p_MobileId
  };

  template ROUTINGAREAUPDATEREQUEST cr_RAURequest_Common(template (present) UpdateType p_UpdateType,
                                                         template (present) RoutingAreaId p_RAI,
                                                         template PTMSI_Signature p_PTMSISig,
                                                         template TMSI_Status p_TMSIStatus,
                                                         template (present) KeySeq p_KeySeq,
                                                         template (present) MS_RadioAccessCap_LV  p_MsRadioAccessCap := cr_MS_RadioAccessCapLVAny,
                                                         template GPRS_Timer        p_ReadyTimer := cr_GPRS_TimerAny ifpresent,
                                                         template DRXparameter      p_DrxParameter := cr_DRXparameter_Any('27'O) ifpresent,
                                                         template MobileIdentity    p_Ptmsi := cdr_MobileIdTMSI_tlv ifpresent,
                                                         template MS_NetworkCap     p_MsNetworkCap := cr_MS_NetworkCap_Any,
                                                         template PDP_ContextStatus p_PDP_ContextStatus := cr_PDP_ContextStatusAny,
                                                         template PS_LCS_Capability p_PS_LCS_Capability := cr_PS_LCS_CapabilityAny ifpresent,
                                                         template MBMS_ContextStatus p_MBMS_ContextStatus := omit,
                                                         template UE_NetworkCap     p_UeNetworkCapability := cr_UENetworkCap_Any ('58'O),
                                                         template MobileIdentity    p_AddMobileId := cr_MobileIdAny('1A'O) ifpresent,
                                                         template RoutingAreaId2    p_AddOldRAI := cr_RoutingAreaId2 ifpresent,
                                                         template MS_Clsmk2         p_MsClassmark2 := cr_MS_Clsmk2_Any_tlv ifpresent,
                                                         template MS_Clsmk3         p_MsClassmark3 := cr_MSCLSMK3_Any ifpresent,
                                                         template CodecList         p_SupportedCodecList := cr_CodecListAny ifpresent,
                                                         template PTMSI_Type        p_PTMSI_Type := cr_PTMSI_Type_Any ifpresent) :=
  { /* @status    APPROVED */
    skipIndicator   := '0000'B,
    gMMProtocolDiscriminator := tsc_GMM_PD,
    msgType         := '00001000'B,
    gprsCiphKeySeqNo := cr_CiphKeySeqNum(omit, p_KeySeq),
    updateType      := p_UpdateType,
    oldRAI          := p_RAI,
    msRadioAccessCap := p_MsRadioAccessCap,
    oldPTMSI_Signature := p_PTMSISig,
    readyTimer      := p_ReadyTimer,
    drxParameter    := p_DrxParameter,
    tmsiStatus      := p_TMSIStatus ifpresent,
    ptmsi           := p_Ptmsi,
    msNetworkCap    := p_MsNetworkCap,
    pDP_ContextStatus := p_PDP_ContextStatus,
    pS_LCS_Capability := p_PS_LCS_Capability,
    mBMS_ContextStatus := p_MBMS_ContextStatus,
    ueNetworkCapability := p_UeNetworkCapability,
    addMobileId      := p_AddMobileId,
    addOldRAI        := p_AddOldRAI,
    msClassmark2     := p_MsClassmark2,
    msClassmark3     := p_MsClassmark3,
    supportedCodecList := p_SupportedCodecList,
    voiceDomainPref    := cr_VoiceDomainPref_Any ifpresent, /* @sic R5s110176 Baseline Moving sic@ */
    ptmsiType        := p_PTMSI_Type,  /* cl. 10.5.5.29 O TV 1 IEI=0xE- @sic R5s120178 Baseline Moving, R5-123307 sic@*/
    deviceProperties := cr_DeviceProperties_Any('D'H) ifpresent,  /* cl. 10.5.7.8 O TV 1 IEI=0xD- @sic R5s120178 Baseline Moving sic@*/
    msNetworkFeatureSupport := cr_MS_NetworkFeatureSupport_Any ('C'H) ifpresent,   /* cl. 10.5.1.15 O TV 1 IEI=0xC- @sic R5s120178 Baseline Moving sic@*/
    oldLAI           := cr_LocAreaId2_Any ifpresent  /* cl. 10.5.5.30 O TLV 7 IEI=0x14 @sic R5s120178 Baseline Moving sic@*/
  };

  template (value) ROUTINGAREAUPDATEACCEPT cs_RA_UpdAcc_Common(template (value) UpdateResult p_UpdateResult,
                                                               template (value) RoutingAreaId p_RAI,
                                                               template (omit) PTMSI_Signature p_PTMSIsig,
                                                               template (omit) MobileIdentity p_PTMSI,
                                                               template (omit) PDP_ContextStatus p_PDP_ContextStatus := omit,
                                                               template (omit) RequestedMS_Info p_ReqMSInfo := omit) :=
  { /* @status    APPROVED */
    skipIndicator := '0000'B,
    gMMProtocolDiscriminator := tsc_GMM_PD,
    msgType := '00001001'B,
    updateResult := p_UpdateResult,
    forceToStandby := cs_ForceToStandby('000'B),
    periodicRAupdateTimer := cs_GprsTimer_v('111'B, '00000'B),
    rai := p_RAI,
    ptmsiSignature := p_PTMSIsig,
    allocatedPTMSI := p_PTMSI,
    msIdentity := omit,
    listNPDUnumbers := omit,
    readyTimer := omit,
    gmmCause := omit,
    t3302Value := omit,
    cellNotification := omit,
    equivalentPLMN := omit,
    pDP_ContextStatus := p_PDP_ContextStatus,      /* @sic R5s120570 Additional change sic@ */
    ntwFeatureSupport := omit,
    emergNumList := omit,
    mBMS_ContextStatus := omit,
    requestedMS_Info := p_ReqMSInfo,
    t3319Value := omit,
    t3323Value := omit,
    t3312ExtdValue  := omit   /* cl. 10.5.7.4a O TLV 3 IEI=0x39 @sic R5s120178 Baseline Moving sic@*/
  };

  template (value) ROUTINGAREAUPDATEREJECT cs_RAUpdReject_Common(template (value) GMM_Cause p_RejectCause) :=
  { /* @status    APPROVED */
    skipIndicator := '0000'B,         // Skip Indicator BITSTRING [4]
    gMMProtocolDiscriminator := tsc_GMM_PD, // GMM Protocol Discriminator '1000' BITSTRING [4]
    msgType := '00001011'B,               // Message Type '0000 1011' BITSTRING [8]
    gmmCause := p_RejectCause,              // GMM Cause M, 1/2 octet
    forceToStandby := cs_ForceToStandby('000'B),   // Force To Standby M, 1/2 octet  @sic R5s110718 sic@
    spare := '0000'B,                 // Spare Half Octet M, 1/2 octet
    t3302Value := omit,  // O TLV [3] IEI = 38
    t3346Value := omit  // O TLV [3] IEI = 3A  @sic R5s120178 Baseline Moving sic@
  };

  template ROUTING_AREA_UPDATE_COMPLETE cr_RAUpdComplete_Common(template EUTRAN_HO_Info p_EUTRAN_HO_Info := omit) :=
  { /* @status    APPROVED */
    skipIndicator := '0000'B,
    gMMProtocolDiscriminator := tsc_GMM_PD,
    msgType := '00001010'B,
    listNPDUnumbers := omit,
    interRAT_HO_Info := omit,
    eutranInterRAT_HO_Info := p_EUTRAN_HO_Info
  };

  template ACTIVATEPDPCONTEXTREQUESTul cr_ActPDP_ContextReqMO_Common(template QualityOfService p_QosReq) :=
  { /* 3GPP 24.008, 9.5.1 */
    /* @status    APPROVED */
    ti              := cr_TI_Any,
    sM_ProtocolDiscriminator := tsc_SMPD,
    msgType         := '01000001'B,
    requestedNSAPI  := cr_NSAPI,
    requestedLLC_SAPI := cr_LLC_SAPI,              // This has to be set to Not Assigned by UE in UMTS domain.
    requestedQoS    := p_QosReq,                     // The AT command interface will be used to set the QoS to this value.
    pDP_Address     := cr_PDP_AddressAny,
    accessPtName    := cr_AccessPointName_Any ifpresent, // The GGSN logical name or the external packet data network logical name
    protocolConfOpts := cr_ProtocolConfigOptionsAny ifpresent,
    requestType     := cr_RequestType_Any ifpresent,
    deviceProperties := cr_DeviceProperties_Any ('C'H) ifpresent  /* cl. 10.5.7.8 O TV 1 IEI=0xC- @sic R5s120178 Baseline Moving sic@*/
  };

  template ALERTINGul cr_Alert_Common(template TI p_TI) :=
  { /* @status    APPROVED */
    ti              := p_TI,
    cC_ProtocolDiscriminator := '0011'B,
    msgType         := '??000001'B,
    facility        := cr_Facility_Any ifpresent,
    userUser        := cr_UserUserAny ifpresent,
    sS_VersionInd   := cr_SS_VersionIndAny ifpresent
  };

  template AUTHENTICATION_AND_CIPHERING_FAILURE cr_AuthAndCiphFailure_Common(template (present) RejCau p_Cause := ?,
                                                                             template AuthenticationFailureParameter p_AuthFailParam := cr_AuthFailParam_Any ifpresent) :=
  { /* @status    APPROVED */
    skipIndicator   := '0000'B,
    gMMProtocolDiscriminator := tsc_GMM_PD,
    msgType         := '00011100'B,
    gmmCause        := p_Cause,
    authFailurePar  := p_AuthFailParam
  };

  template (value) DISCONNECTdl cs_Disconnect_Common(template (value) TI p_Ti) :=
  { /* @status    APPROVED */
    Ti                       := p_Ti,
    cC_ProtocolDiscriminator := '0011'B,
    msgType                  := '00100101'B,
    cau                      := cs_CauNormCallClear,
    facility                 := omit,
    progInd                  := omit,
    userUser                 := omit,
    allowedAction            := omit
  };

  template (value) RELEASECOMPLETE cs_RelCmpl_Common(template (value) TI p_Ti) :=
  { /* @status    APPROVED */
    ti                       := p_Ti,
    protocolDiscriminator    := '0011'B,
    msgType                  := '00101010'B,
    cau                      := omit,
    facility                 := omit,
    userUser                 := omit,
    sS_VersionInd            := omit
  };

  template RELEASEul cr_Rel_Common(template TI p_Ti) :=
  { /* @status    APPROVED */
    ti                       := p_Ti,
    cC_ProtocolDiscriminator := '0011'B,
    msgType                  := '??101101'B,
    cau                      := cr_CauAny ifpresent,
    cau2                     := cr_CauAny ifpresent,
    facility                 := cr_Facility_Any ifpresent,
    userUser                 := cr_UserUserAny ifpresent,
    sS_VersionInd            := cr_SS_VersionIndAny ifpresent
  };

  template SETUPul cr_SetupMO_Common :=
  { /* @status    APPROVED */
    ti              := cr_TI_MO,
    cC_ProtocolDiscriminator := '0011'B,
    msgType         := '??000101'B,
    repeatInd       := cr_RepeatInd ifpresent,
    bcap1           := cr_BcapAnyMO,
    bcap2           := cr_BcapAnyMO ifpresent,
    facility        := cr_Facility_Any ifpresent,
    cgps            := cr_CGPS_Any ifpresent,
    cdpn            := cr_CDPN_Any,
    cdps            := cr_CDPS_Any ifpresent,
    llcRepeatInd    := cr_RepeatInd ifpresent,
    llc1            := cr_LLC_Any ifpresent,
    llc2            := cr_LLC_Any ifpresent,
    hlcRepeatInd    := cr_RepeatInd ifpresent,
    hlc1            := cr_HLC_Any ifpresent,
    hlc2            := cr_HLC_Any ifpresent,
    userUser        := cr_UserUserAny ifpresent,
    sS_VersionInd   := cr_SS_VersionIndAny ifpresent,
    cLIR_Suppression := '10100001'B ifpresent,
    cLIR_Invocation := '10100010'B ifpresent,
    cC_Capabilities := cr_CC_CapabilitiesAny ifpresent,
    facilityCCBS_AdvRecall := cr_FacilityAdvRecall ifpresent,
    facilityCCBS_RecallAlign := cr_FacilityRecallAlign ifpresent,
    streamId        := cr_StreamIdAny ifpresent,
    supportedCodecs := cr_CodecListAny  ifpresent,
    redial          := '10100011'B ifpresent
  };

  template SETUPul cdr_SetupMO_Speech_Common(template (present) Bcap p_Bcap)
    modifies cr_SetupMO_Common :=
  { /* @status    APPROVED */
    repeatInd       := omit,
    bcap1           := p_Bcap,
    bcap2           := omit
  };

}
