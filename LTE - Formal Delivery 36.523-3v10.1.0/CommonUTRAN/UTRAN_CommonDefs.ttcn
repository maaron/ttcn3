/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2012, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3v10.1.0
// $Date: 2012-09-03 10:05:44 +0200 (Mon, 03 Sep 2012) $
// $Rev: 7248 $
/******************************************************************************/

module UTRAN_CommonDefs {
  import from CommonDefs all;
  import from UTRAN_ASP_Definitions language "ASN.1:2002" all;
  import from UTRAN_RRC_ASN1_Definitions language "ASN.1:2002" all;

  //=============================================================================
  // Type definitions
  //-----------------------------------------------------------------------------

  type enumerated UTRAN_CellId_Type  {                         /* @status    APPROVED */
    utran_CellDedicated (-1),
    utran_Cell5 (5),
    utran_Cell7 (7),
    utran_Cell8 (8),
    utran_Cell9 (9)
  };

  type integer SS_CN_DomainIdentity (0..1);                    /* CN domain identity type in TTCN tabular format; @status    APPROVED */

  // embedded RRC types:
  type TFCS_ReconfAdd.ctfcSize.ctfc2Bit TFCS_ReconfAdd_CtfcSize_Ctfc2Bit_List_Type;           /* auxiliary type definition; @status    APPROVED */
  type TFCS_ReconfAdd_CtfcSize_Ctfc2Bit_List_Type[0] TFCS_ReconfAdd_CtfcSize_Ctfc2Bit_Type;   /* auxiliary type definition; @status    APPROVED */

  type TFCS_ReconfAdd.ctfcSize.ctfc4Bit TFCS_ReconfAdd_CtfcSize_Ctfc4Bit_List_Type;           /* auxiliary type definition; @status    APPROVED */
  type TFCS_ReconfAdd_CtfcSize_Ctfc4Bit_List_Type[0] TFCS_ReconfAdd_CtfcSize_Ctfc4Bit_Type;   /* auxiliary type definition; @status    APPROVED */

  type TFCS_ReconfAdd.ctfcSize.ctfc6Bit TFCS_ReconfAdd_CtfcSize_Ctfc6Bit_List_Type;           /* auxiliary type definition; @status    APPROVED */
  type TFCS_ReconfAdd_CtfcSize_Ctfc6Bit_List_Type[0] TFCS_ReconfAdd_CtfcSize_Ctfc6Bit_Type;   /* auxiliary type definition; @status    APPROVED */

  type TFCS_ReconfAdd.ctfcSize.ctfc8Bit TFCS_ReconfAdd_CtfcSize_Ctfc8Bit_List_Type;           /* auxiliary type definition; @status    (APPROVED) */
  type TFCS_ReconfAdd_CtfcSize_Ctfc8Bit_List_Type[0] TFCS_ReconfAdd_CtfcSize_Ctfc8Bit_Type;   /* auxiliary type definition; @status    (APPROVED) */

  type PhysicalChannelCapability_edch_r6.fdd_edch.supported.edch_PhysicalLayerCategory Edch_PhysicalLayerCat_Type; /* @status    APPROVED */

  type UTRA_PriorityInfoList.utra_ServingCell.priority          UtraServingCellPriorityValue_Type;          /* @status    APPROVED */
  type UTRA_PriorityInfoList.utra_ServingCell.s_PrioritySearch1 UtraServingCellPrioritySearch1_Type;        /* @status    APPROVED */
  type UTRA_PriorityInfoList.utra_ServingCell.threshServingLow  UtraServingCellthreshServingLow_Type;       /* @status    APPROVED */
  type UTRANMobilityInformation.later_than_r3.criticalExtensions.criticalExtensions.r7.v860NonCriticalExtensions UTRANMobilityInformation_v860ext2_Type;

  type EUTRA_FrequencyAndPriorityInfo.priority                  EutraFrequencyAndPriorityInfoPriorityValue_Type;    /* @status    APPROVED */
  type EUTRA_FrequencyAndPriorityInfo.qRxLevMinEUTRA            EutraFrequencyAndPriorityInfoQrxLevMin_Type;        /* @status    APPROVED */
  type EUTRA_FrequencyAndPriorityInfo.threshXhigh               EutraFrequencyAndPriorityInfoThreshXhigh_Type;      /* @status    APPROVED */
  type EUTRA_FrequencyAndPriorityInfo.threshXlow                EutraFrequencyAndPriorityInfoThreshXlow_Type;       /* @status    APPROVED */

  type RRCConnectionSetupComplete.v370NonCriticalExtensions RRCConnSetupCmpl_v370NonCritExt_Type; /* auxiliary type definition; @status    APPROVED */
  type RRCConnectionRelease.later_than_r3.criticalExtensions.r4.v4d0NonCriticalExtensions RRCConnectionRelease_v4d0NonCriticalExtensions_Type; /* @status    APPROVED */

  type MultiplePLMN_List_r6.multiplePLMNs Multiple_PLMN_List_Type;

  type UL_CCTrCH_r7.tddOption UL_CCTrCH_r7_TddOption_Type;

  // embedded ASP types:
  type HARQ_Info_r7.numberOfProcesses            HarqNrOfProcesses_Type;
  type TrCHInfo.ulconnectedTrCHList              UlConnectedTrCHList_Type;
  type TrCHInfo.dlconnectedTrCHList              DlConnectedTrCHList_Type;
  type TrCHInfo_TDD.ulconnectedTrCHList          UlConnectedTrCHList_TDD_Type;
  type TrCHInfo_TDD.dlconnectedTrCHList          DlConnectedTrCHList_TDD_Type;
  type CphyTrchConfigReq.ulconnectedTrCHList     CphyUlConnectedTrCHList_Type;          /* @status    APPROVED */
  type CphyUlConnectedTrCHList_Type[0]           CphyUlConnectedTrCH_Type;              /* @status    APPROVED */
  type CphyTrchConfigReq.dlconnectedTrCHList     CphyDlConnectedTrCHList_Type;          /* @status    APPROVED */
  type CphyDlConnectedTrCHList_Type[0]           CphyDlConnectedTrCH_Type;              /* @status    APPROVED */
  type CphyTrchConfigReq_TDD.ulconnectedTrCHList CphyUlConnectedTrCHList_TDD_Type;      /* @status    APPROVED */
  type CphyUlConnectedTrCHList_TDD_Type[0]       CphyUlConnectedTrCH_TDD_Type;          /* @status    APPROVED */
  type CphyTrchConfigReq_TDD.dlconnectedTrCHList CphyDlConnectedTrCHList_TDD_Type;      /* @status    APPROVED */
  type CphyDlConnectedTrCHList_TDD_Type[0]       CphyDlConnectedTrCH_TDD_Type;          /* @status    APPROVED */
  type CphyRlSetupReq_FDD.physicalChannelInfo    RL_Setup_FDD_PhysicalChannelInfo_Type; /* @status    APPROVED */
  type CphyRlSetupReq_TDD.physicalChannelInfo    RL_Setup_TDD_PhysicalChannelInfo_Type; /* @status    APPROVED */
  
  type enumerated UTRAN_FddTddMessageClass_Type {FDDr8, FDDr9, TDDr9};

  //=============================================================================
  // AUXILIARY FUNCTION
  //-----------------------------------------------------------------------------
  /*
   * @desc      local function to convert template of UTRAN_CellId_Type into template of integer
   * @param     p_CellId
   * @return    template (present) integer
   * @status    APPROVED
   */
  function fl_TemplateCellId2Int(template (present) UTRAN_CellId_Type p_CellId) return template (present) integer
  {
    if (isvalue(p_CellId)) {
      return enum2int(valueof(p_CellId));
    } else {
      return ?;
    }
  }

  //=============================================================================
  // Constants
  //-----------------------------------------------------------------------------

  const float tsc_IdleMode_GenericTimer_UTRAN := 360.0;        /* Idle mode generic timer according to 36.523-3 cl. 7.8
                                                                  @status    APPROVED */
  const integer         tsc_AICH1 := 7;                        /* Physical channel identity for AICH channel associated with first PRACH
                                                                  @status    APPROVED */
  const integer         tsc_BCCH1 := 1;                        /* Logical channel identity for logical channel BCCH mapped on BCH
                                                                  @status    APPROVED */
  const integer         tsc_BCCH6 := 6;                        /* Logical channel identity for logical channel BCCH mapped on FACH
                                                                  @status    APPROVED */
  const integer         tsc_BCH1 := 11;                        /* Identity for transport channel BCH
                                                                  @status    APPROVED */
  const integer         tsc_E_AGCH := 14;
  const integer         tsc_E_DPCH := 22;
  const integer         tsc_E_HICH := 15;
  const integer         tsc_E_RGCH := 16;
  const integer         tsc_FACH1 := 13;                       /* transport channel identity for  FACH
                                                                  @status    APPROVED */
  const integer         tsc_FACH2 := 14;                       /* transport channel identity for second FACH when it is connected to a secondary CCPCH together with PCH
                                                                  (transport channel identity = 14)
                                                                  @status    APPROVED */
  const integer         tsc_F_DPCH := 28;
  const integer         tsc_HSPDSCH := 18;                     // physical channel identity for HS-PDSCH.
  const integer         tsc_PICH1 := 6;                        /* Physical channel identity for PICH channel associated with first secondary CCPCH
                                                                  @status    APPROVED */
  const integer         tsc_PICH2 := 11;                       // Physical channel identity for PICH2 channel associated with second secondary CCPCH
  const integer         tsc_PRACH1 := 8;                       /* Physical channel identity for first PRACH channel
                                                                  @status    APPROVED */
  const integer         tsc_PRACH2 := 9;                       // Physical channel identity for second PRACH channel
  const integer         tsc_P_CCPCH := 4;                      /* Physical channel identity for primary CCPCH channel
                                                                  @status    APPROVED */
  const integer         tsc_P_CPICH := 0;                      /* Physical channel identity for primary CPICH channel
                                                                  @status    APPROVED */
  const integer         tsc_P_SCH := 1;                        /* Physical channel identity for primary SCH channel
                                                                  @status    APPROVED */
  const integer         tsc_RACH1 := 15;                       /* transport channel identity for RACH
                                                                  @status    APPROVED */
  const integer         tsc_AttOn := 1;                        /* Attach flag value On
                                                                  @status    APPROVED */
  const integer         tsc_AttenuationCellOFF := 123;         /* Value of attenuator to be used when setting a  Cell OFF (3GPP 34.108 / Table 6.1.4)
                                                                  @status    APPROVED */
  const integer         tsc_AttenuationServingCell := -1;      /* Value different for FDD/TDD so this is just a flag to be used in f_UTRAN_SetCellPower
                                                                  @status    APPROVED */
  const integer         tsc_AttenuationSuitableNeighbourCell := -2;             /* Value different for FDD/TDD so this is just a flag to be used in f_UTRAN_SetCellPower
                                                                                   @status    APPROVED */
  const integer         tsc_AttenuationNonSuitableCell := -3;  /* Value different for FDD/TDD so this is just a flag to be used in f_UTRAN_SetCellPower
                                                                  @status    APPROVED */
  const bitstring       tsc_CellIdCell5 := '0000000000000000000000000000'B;     /* @status    APPROVED */
  const bitstring       tsc_CellIdCell7 := '0000000000000000000000000001'B;     /* @status    APPROVED */
  const bitstring       tsc_CellIdCell8 := '0000000000000000000000000010'B;     /* @status    APPROVED */
  const bitstring       tsc_CellIdCell9 := '0000000000000000000000000011'B;     /* @status    APPROVED */
  
  
  const integer         tsc_Now := 512;                        /* To indicate the system information change starts immediately
                                                                  @status    APPROVED */
  const octetstring     tsc_RAC_Def := '01'O;                  /* Routing Area Code, 1 octet, 3GPP 24.008 clause 10.5.1.12.3
                                                                  @status    APPROVED */
  const integer         tsc_SFN_Offset := 0;                   /* SFN offset value
                                                                  @status    APPROVED */
  const octetstring     tsc_T3212_Def := '1E'O;                /* infinite
                                                                  @status    APPROVED */
  const integer         tsc_TimingsCCPCH1 := 0;                /* timing offset for secondary CCPCH1. default is 0
                                                                  @status    APPROVED */
  const bitstring       tsc_URA_IdCell5 := '0000000000000001'B;                 /* @status    APPROVED */
  const bitstring       tsc_URA_IdCell7 := '0000000000000001'B;                 /* @status    APPROVED */
  const bitstring       tsc_URA_IdCell8 := '0000000000000010'B;                 /* @status    APPROVED */
  const bitstring       tsc_URA_IdCell9 := '0000000000000010'B;                 /* @status    APPROVED */
  const integer         tsc_CellParametersID_Cell5 := 0;                        /* CellParametersID for CELL5
                                                                                   @status    APPROVED */
  const integer         tsc_CellParametersID_Cell7 := 4;                        /* CellParametersID for CELL7
                                                                                   @status    APPROVED */
  const integer         tsc_CellParametersID_Cell8 := 8;                        /* CellParametersID for CELL8
                                                                                   @status    APPROVED */
  const integer         tsc_CellParametersID_Cell9 := 12;                       /* CellParametersID for CELL9
                                                                                   @status    APPROVED */
  
  const integer         tsc_DL_CCCH5 := 5;                     /* Logical channel identity for logical channel CCCH mapped on FACH (downlink)
                                                                  @status    APPROVED */
  const integer         tsc_DL_DCCH1 := 1;                     /* Logical channel identity for DCCH1 (downlink), used by signalling radio bearer 1
                                                                  @status    APPROVED */
  const integer         tsc_DL_DCCH2 := 2;                     /* Logical channel identity for DCCH2 (downlink), used by signalling radio bearer 2
                                                                  @status    APPROVED */
  const integer         tsc_DL_DCCH3 := 3;                     /* Logical channel identity for DCCH3 (downlink), used by signalling radio bearer 3
                                                                  @status    APPROVED */
  const integer         tsc_DL_DCCH4 := 4;                     /* Logical channel identity for DCCH4 (downlink), used by signalling radio bearer 4
                                                                  @status    APPROVED */
  const integer         tsc_DL_DCH1 := 6;                      /* identity for transport channel DCH1 (downlink),  in AMR speech this transport channel is used for RAB subflow#1
                                                                  @status    APPROVED */
  const integer         tsc_DL_DCH2 := 7;                      /* identity for transport channel DCH2 (downlink),  in AMR speech this transport channel is used for RAB subflow#2
                                                                  @status    APPROVED */
  const integer         tsc_DL_DCH3 := 8;                      /* identity for transport channel DCH3 (downlink), in AMR speech this transport channel is used for RAB subflow#3
                                                                  @status    APPROVED */
  const integer         tsc_DL_DCH4 := 9;                      // identity for transport channel DCH4 (downlink),  in AMR speech
  const integer         tsc_DL_DCH5 := 10;                     /* identity for transport channel DCH5 (downlink), in most case  this transport channel is used for signalling bearers.
                                                                  @status    APPROVED */
  const integer         tsc_DL_DPCH1 := 26;                    /* physical channel identity for DPCH1(downlink)
                                                                  @status    APPROVED */
  const integer         tsc_DL_DTCH1 := 7;                     /* Logical channel identity for DTCH1 (downlink)
                                                                  @status    APPROVED */
  const integer         tsc_DL_DTCH2 := 8;                     /* Logical channel identity for DTCH2 (downlink)
                                                                  @status    APPROVED */
  const integer         tsc_DL_DTCH3 := 9;                     /* Logical channel identity for DTCH3 (downlink)
                                                                  @status    APPROVED */
  const integer         tsc_DL_DTCH4 := 10;                    // Logical channel identity for DTCH4 (downlink)
  const integer         tsc_DPCH_PowerOffsetPILOT := 0;        /* Power offsett value of PILOT on DPCH
                                                                  @status    APPROVED */
  const integer         tsc_DPCH_PowerOffsetTFCI := 0;         /* Power offsett value of TFCI on DPCH
                                                                  @status    APPROVED */
  const integer         tsc_DPCH_PowerOffsetTPC := 0;          /* Power offsett value of TPC on DPCH
                                                                  @status    APPROVED */
  const integer         tsc_GainFactorBetaC_Below64k := 11;    /* Gain factor Beta C value  to be used for RAB UL below 64kbps
                                                                  @status    APPROVED */
  const integer         tsc_GainFactorBetaC_Higher64k := 9;    // Gain factor Beta C value  to be used for RAB UL higher than 64kbps
  const integer         tsc_GainFactorBetaD := 15;             /* @status    APPROVED */
  const integer         tsc_RB_BCCH := -1;                     /* radio bearer idenity for bearer on TM + BCCH + BCH used for broadcasting system information blocks
                                                                  @status    APPROVED */
  const integer         tsc_RB_BCCH_FACH := -3;                /* signalling radio bearer on TM + BCCH + FACH + sCCPCH1
                                                                  @status    APPROVED */
  const integer         tsc_RB_DTCH_E_DCH_MAC1 := -21;         // Special RB for DTCH configured in TM for MAC test cases
  const integer         tsc_RB_DTCH_E_DCH_MAC2 := -22;         // Special second RB for DTCH configured in TM for MAC test cases
  const integer         tsc_RB_PCCH := -2;                     /* radio bearer idenity for bearer on TM + PCCH + PCH used for sending paging message when there is no RAB subflows for speech
                                                                  @status    APPROVED */
  const integer         tsc_RB0 := 0;                          /* signalling radio bearer on TM + CCCH
                                                                  @status    APPROVED */
  const integer         tsc_RB1 := 1;                          /* sibnalling radio bearer on UM + DCCH
                                                                  @status    APPROVED */
  const integer         tsc_RB10 := 10;                        /* radio access bearer identity, in AMR speech this RB is RAB subflow#1,
                                                                  in other cases this is a radio access bearer
                                                                  @status    APPROVED */
  const integer         tsc_RB11 := 11;                        /* radio access bearer identity, in AMR speech this RB is RAB subflow#2,
                                                                  in some other cases this is the signalling radio bearer for TM + BCCH_FACH
                                                                  @status    APPROVED */
  const integer         tsc_RB12 := 12;                        /* radio access bearer, in AMR speech this RB is RAB subflow#3, in some other cases this is the bearer for TM PCCH
                                                                  @status    APPROVED */
  const integer         tsc_RB13 := 13;                        // radio access bearer, in AMR speech this RB is RAB subflow#3, in some other cases this is the bearer for TM PCCH
  const integer         tsc_RB17 := 17;                        // Fifth PS Radio Bearer associated with a DTCH on HS-DSCH
  const integer         tsc_RB26 := 26;                        // second PS Radio Bearer associated with a DTCH on HS-DSCH
  const integer         tsc_RB27 := 27;                        // Third PS Radio Bearer associated with a DTCH on HS-DSCH
  const integer         tsc_RB28 := 28;                        // Fourth PS Radio Bearer associated with a DTCH on HS-DSCH
  const integer         tsc_RB2 := 2;                          /* signalling radio bearer on AM + DCCH
                                                                  @status    APPROVED */
  const integer         tsc_RB20 := 20;                        /* radio access bearer for PS RAB
                                                                  @status    APPROVED */
  const integer         tsc_RB21 := 21;                        // radio access bearer for PS RAB
  const integer         tsc_RB22 := 22;                        // Second AM radio access bearer for PS
  const integer         tsc_RB24 := 24;                        // Second AM radio access bearer for PS
  const integer         tsc_RB25 := 25;                        /* PS Radio Bearer associated with a DTCH on HS-DSCH
                                                                  @status    APPROVED */
  const integer         tsc_RB29 := 29;                        // RB Id for Radio bearer that carries the 2nd CCCH in the DL
  const integer         tsc_RB3 := 3;                          /* signalling radio bearer on AM + DCCH for high priority NAS_DT
                                                                  @status    APPROVED */
  const integer         tsc_RB3_DCCH_RRC := -16;               /* RB identity used for configuration of AM RLC entity
                                                                * in the SS. SS will use it to simulate the high priority
                                                                * NAS SRB mapped to DCH for routing UL NAS messages in
                                                                * RRC test cases.
                                                                * A negative value is used to indicate that the SS
                                                                * configuration is not identical to the UE configuration */
  const integer         tsc_RB30 := 30;                        // radio access bearer for CBS RAB
  const integer         tsc_RB31 := 31;
  const integer         tsc_RB4 := 4;                          /* signalling radio bearer on AM + DCCH for low priority NAS_DT
                                                                  @status    APPROVED */
  const integer         tsc_RB5 := 5;                          /* signalling radio bearer on TM + DCCH for AMR Signalling
                                                                  @status    (APPROVED) */
  const integer         tsc_RRC_TI := 0;                       /* RRC Transaction Identifier
                                                                  @status    APPROVED */
  const integer         tsc_PCCH1 := 1;                        /* Logical channel identity for logical channel PCCH
                                                                  @status    APPROVED */
  const integer         tsc_PCH1 := 12;                        /* transport channel identity for PCH
                                                                  @status    APPROVED */
  const integer         tsc_N300 := 3;                         /* @status    APPROVED */
  const integer         tsc_S_CCPCH1 := 5;                     /* Physical channel identity for first secondary CCPCH channel
                                                                  @status    APPROVED */
  const integer         tsc_S_CCPCH_2ndScrCode := 0;           /* Secondary scrambling code for S-CCPCH channels
                                                                  @status    APPROVED */
  const integer         tsc_S_CCPCH_PowerOffsetPILOT := 6;     /* Power offsett value of PILOT on sCCPCH
                                                                  @status    APPROVED */
  const integer         tsc_S_CCPCH_PowerOffsetTFCI := 6;      /* Power offsett value of TFCI on sCCPCH
                                                                  @status    APPROVED */
  const integer         tsc_S_SCH := 2;                        /* Physical channel identity for secondary SCH channel
                                                                  @status    APPROVED */
  const SS_CN_DomainIdentity tsc_SS_PS_Domain := 1;            /* @status    APPROVED */
  const SS_CN_DomainIdentity tsc_SS_CS_Domain := 0;            /* @status    APPROVED */
  const integer         tsc_UL_CCCH5 := 5;                     /* Logical channel identity for logical channel CCCH mapped  RACH (uplink)
                                                                  @status    APPROVED */
  const integer         tsc_UL_DCCH1 := 1;                     /* Logical channel identity for DCCH1 (uplink), used by signalling radio bearer 1
                                                                  @status    APPROVED */
  const integer         tsc_UL_DCCH2 := 2;                     /* Logical channel identity for DCCH2 (uplink), used by signalling radio bearer 2
                                                                  @status    APPROVED */
  const integer         tsc_UL_DCCH3 := 3;                     /* Logical channel identity for DCCH3 (uplink), used by signalling radio bearer 3
                                                                  @status    APPROVED */
  const integer         tsc_UL_DCCH4 := 4;                     /* Logical channel identity for DCCH4 (uplink), used by signalling radio bearer 4
                                                                  @status    APPROVED */
  const integer         tsc_UL_DCH1 := 1;                      /* identity for transport channel DCH1 (uplink),  in AMR speech this transport channel is used for RAB subflow#1
                                                                  @status    APPROVED */
  const integer         tsc_UL_DCH2 := 2;                      /* identity for transport channel DCH2 (uplink),  in AMR speech this transport channel is used for RAB subflow#2
                                                                  @status    APPROVED */
  const integer         tsc_UL_DCH3 := 3;                      /* identity for transport channel DCH3 (uplink), in AMR speech this transport channel is used for RAB subflow#3
                                                                  @status    APPROVED */
  const integer         tsc_UL_DCH4 := 4;                      // identity for transport channel DCH4 (upink),  in AMR speech
  const integer         tsc_UL_DCH5 := 5;                      /* identity for transport channel DCH5 (uplink), in most case  this transport channel is used for signalling bearers.
                                                                  @status    APPROVED */
  const integer         tsc_UL_DPCH1 := 20;                    /* physical channel identity for DPCH1(uplink)
                                                                  @status    APPROVED */
  const integer         tsc_UL_DTCH1 := 7;                     /* Logical channel identity for DTCH1 (uplink)
                                                                  @status    APPROVED */
  const integer         tsc_UL_DTCH2 := 8;                     /* Logical channel identity for DTCH2 (uplink)
                                                                  @status    APPROVED */
  const integer         tsc_UL_DTCH3 := 9;                     /* Logical channel identity for DTCH3 (uplink)
                                                                  @status    APPROVED */
  const integer         tsc_UL_DTCH4 := 10;                    // Logical channel identity for DTCH4 (uplink)
    
  //-----------------------------------------------------------------------------

  const C_RNTI          tsc_CRNTI := '0000000000000001'B;       /* C RNTI.
                                                                   Default value: '0000 0000 0000 0001'B
                                                                   @status    APPROVED */
  const H_RNTI          tsc_H_RNTI := '1010101010101010'B;
  const E_RNTI          tsc_E_RNTI := '1010101010101010'B;

  const ChannelisationCode256 tsc_AICH1_ChC := 3;               /* Channelization code for tsc_AICH1
                                                                   @status    APPROVED */
  const SpreadingFactor tsc_UL_DPDCH_SF_SRB := sf64;            /* Channelization code for UL DPDCH for an SRB connection with a RAB established
                                                                   @status    APPROVED */
  const DPCCH_PowerOffset tsc_DPCCH_PowerOffset := -40;         /* DPCCH power offset value.
                                                                   @status    APPROVED */
  const SF512_AndCodeNumber tsc_DL_DPCH1_ChC_SRB := { sf128 := 0 };     /* Channelization code for tsc_DL_DPCH1 for a SRB connection with a RAB established
                                                                           @status    APPROVED */
  const B16_Type tsc_DL_DPCH1_ChC_SRB_TDD := '0000000000001000'B;       /* Channelization code for tsc_DL_DPCH1 for a SRB connection with a RAB established
                                                                           @status    APPROVED */
  const B16_Type tsc_DL_DPCH1_ChC_Speech_TDD := '1100000000000000'B;    // Channelization code for tsc_DL_DPCH1 for a SRB connection with a RAB established
  const SF512_AndPilot  tsc_DL_DPCH1_SFP_SRB := { sfd128 := pb4 };      /* Spreading factor and pilot bits for tsc_DL_DPCH1 for an SRB connection with a RAB established
                                                                           @status    APPROVED */
  const DefaultDPCH_OffsetValueFDD tsc_DefaultDPCH_OffsetValue := 459;  /* Default DPCH offset value. Actual value DefaultDPCH-OffsetValueFDD = IE value * 512
                                                                           @status    APPROVED */
  const DefaultDPCH_OffsetValueTDD tsc_DefaultDPCH_OffsetValue_TDD := 0;/* Default DPCH offset value. Actual value DefaultDPCH-OffsetValueTDD = IE value * 512
                                                                           @status    APPROVED */
  const ChannelisationCode256 tsc_PICH1_ChC := 2;               /* Channelization code for tsc_PICH1
                                                                   @status    APPROVED */
  const DL_TS_ChannelisationCode tsc_PICH1_ChC_TDD := cc16_5;   /* Channelization code for tsc_PICH1
                                                                   @status    APPROVED */
  const DL_TS_ChannelisationCode tsc_PICH2_ChC := cc16_6;       /* Channelization code for tsc_PICH2
                                                                   @status    APPROVED */
  const SF_PRACH        tsc_PRACH1_SF := sfpr64;                /* Channelization code for UL DPDCH for PRACH1
                                                                   @status    APPROVED */
  const PreambleScramblingCodeWordNumber tsc_PRACH1_ScrC := 0;  /* Scrambling code for preamble of PRACH1
                                                                   @status    APPROVED */
  const AvailableSignatures tsc_PRACH1_Signatures := '0000000011111111'B;       /* available signatures for PRACH. (from 34.108  cl. 6.1 (SIB5))
                                                                                   @status    APPROVED */
  
  const AICH_PowerOffset tsc_PowerAICH := -5;                   /* relative transmission power level of  AICH. The power level is specified relatively to power leve of CPICH in terms of AICH_Ec
                                                                   @status    APPROVED */
  const PICH_PowerOffset tsc_PowerPICH := -5;                   /* relative transmission power level of PICH. The power level is specified relatively to power level of CPICH  in terms of PICH_Ec*
                                                                   @status    APPROVED */
  
  const PuncturingLimit tsc_PuncLimit := pl1;                   /* puncturing limit for PRACH. default value is 1
                                                                   Default value: Pl1
                                                                   @status    APPROVED */
  const SecondaryScramblingCode tsc_DL_DPCH1_2ndScrC := 1;      /* secondary scrambling code for DL DPCH1
                                                                   @status    APPROVED */
  const SF256_AndCodeNumber tsc_S_CCPCH1_ChC := { sf64 := 1 };  /* Channelization code for tsc_S_CCPCH1
                                                                   @status    APPROVED */
   
  const PrimaryCCPCH_TX_Power tsc_PrimaryCCPCH_TX_Power := 30;  /* transmission power level of primary CCPCH. Default is 30 dBm in SIB5
                                                                   @status    APPROVED */
  const SCCPCH_ChannelisationCodeList tsc_S_CCPCH1_1P1F_ChC := {cc16_7, cc16_8};  /* Channelization code for secondary CCPCH
                                                                                     @status    APPROVED */
  const TDD_PRACH_CCode_LCR_r4        tsc_PRACH1_ChC := cc8_8;                    /* channel code for PRACH
                                                                                     @status    APPROVED */
  const TDD_FPACH_CCode16_r4          tsc_FPACH1_ChC := cc16_15;                  /* channel code for FPACH
                                                                                     @status    APPROVED */
  const TPC_CombinationIndex tsc_TPC_CombinationIndex := 0;                       /* @status    APPROVED */
  const TPC_StepSizeFDD     tsc_TpcStepSize_FDD := 0;                             /* Value 0 corresponds to 1 dB
                                                                                     @status    APPROVED */
  const TPC_StepSizeTDD     tsc_TPC_StepSize_TDD := 1;                            /* @status    APPROVED */
  const integer             tsc_SS_StepSize_TDD := 1;                             /* @status    APPROVED */
  const UL_TargetSIR        tsc_UL_TargetSIR := 48;                               /* @status    APPROVED */
  const integer             tsc_SS_Frequency := 1;                                /* @status    APPROVED */
  const UL_TS_ChannelisationCode tsc_UL_DPCH1_ChC_SRB_13_6 := cc8_1;              /* @status    APPROVED */
  const UL_TS_ChannelisationCode tsc_UL_DPCH1_ChC_Speech := cc8_1;
  const UL_TS_ChannelisationCode tsc_UL_DPCH1_ChC_64k_PS := cc2_1;                /* @status    APPROVED */
  const UL_TS_ChannelisationCode tsc_UL_DPCH1_ChC_PS_and_ConvSpeech := cc1_1;     /* @status    APPROVED */

  const CN_DomainIdentity tsc_PS_Domain := ps_domain;
  const CN_DomainIdentity tsc_CS_Domain := cs_domain;

  const MAC_LogicalChannelPriority tsc_MAC_LogicalChannelPrio1 := 1;              /* @status    APPROVED */
  const MAC_LogicalChannelPriority tsc_MAC_LogicalChannelPrio2 := 2;              /* @status    APPROVED */
  const MAC_LogicalChannelPriority tsc_MAC_LogicalChannelPrio3 := 3;              /* @status    APPROVED */
  const MAC_LogicalChannelPriority tsc_MAC_LogicalChannelPrio4 := 4;              /* @status    APPROVED */
  const MAC_LogicalChannelPriority tsc_MAC_LogicalChannelPrio6 := 6;              /* @status    APPROVED */
  const MAC_LogicalChannelPriority tsc_MAC_LogicalChannelPrio7 := 7;
  const MAC_LogicalChannelPriority tsc_MAC_LogicalChannelPrio8 := 8;              /* @status    APPROVED */

}
