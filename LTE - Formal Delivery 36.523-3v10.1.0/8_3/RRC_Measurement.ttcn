/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2012, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3v10.1.0
// $Date: 2012-09-05 12:16:49 +0200 (Wed, 05 Sep 2012) $
// $Rev: 7328 $
/******************************************************************************/

module RRC_Measurement {

  import from EUTRA_RRC_ASN1_Definitions language "ASN.1:1997" all;
  import from CommonDefs all;
  import from CommonIratDefs all;
  import from EUTRA_ASP_SrbDefs all;
  import from EUTRA_AspCommon_Templates all;
  import from EUTRA_AuxiliaryFunctions all;
  import from EUTRA_BandDependentParam all;
  import from EUTRA_CellCfg_Templates all;
  import from EUTRA_CellInfo all;
  import from EUTRA_CommonDefs all;
  import from EUTRA_CommonProcedures all;
  import from EUTRA_Component all;
  import from EUTRA_ConfigurationSteps all;
  import from EUTRA_Measurement_Specific_Templates all;
  import from EUTRA_Measurement_Templates all;
  import from EUTRA_RRCSteps all;
  import from EUTRA_RRC_Templates all;
  import from EUTRA_SRB_Templates all;
  import from EUTRA_SecurityFunctions all;
  import from EUTRA_SecuritySteps all;
  import from EUTRA_Timing all;
  import from NAS_CommonTypeDefs all;
  import from Parameters all;
  import from RRC_Measurement_Functions all;

  function fl_WaitAndIgnoreMeasurementReport(EUTRA_CellId_Type p_CellId,
                                             float p_Timer,
                                             template (present) UL_DCCH_Message p_MeasurementReport) runs on EUTRA_PTC
  {
    timer t_Wait;
    t_Wait.start(p_Timer);
    alt {
      [] t_Wait.timeout
        {
        }
      [] SRB.receive(car_SRB1_RrcPdu_IND(p_CellId, p_MeasurementReport))
        {
          repeat;
        }
    }
  } // end of function fl_WaitAndIgnoreMeasurementReport

  function fl_NoUplinkMessage(float p_Timer) runs on EUTRA_PTC
  {
    timer t_Wait;
    t_Wait.start(p_Timer);
    alt {
      [] t_Wait.timeout
        {
        }
      [] SRB.receive
        {
          f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Check failed: Uplink message received within a certain time");
        }
    }
  } // end of function fl_NoUplinkMessage

  function f_Check_EUTRA_HighFreq_PeriodicalMeasurmentReport(EUTRA_CellId_Type p_CellId,
                                                             float p_TotalTimer,
                                                             template (present) UL_DCCH_Message p_MeasurementReport,
                                                             float p_ReportInterval) runs on EUTRA_PTC
  {
    var SRB_COMMON_IND v_ReceivedAsp;
    var integer v_PreviousSFN;
    var integer v_CurrentSFN;
    var integer v_SFNLapse;
    var boolean v_MeasRpt1stFlag := true;
    
    timer t_TotalTimer;
    timer t_TimeoutTimer;
    
    t_TotalTimer.start(p_TotalTimer);
    t_TimeoutTimer.start(5.0);
    
    alt {
      []SRB.receive(car_SRB1_RrcPdu_IND(p_CellId, p_MeasurementReport)) -> value v_ReceivedAsp
        {
          t_TimeoutTimer.stop;
          t_TimeoutTimer.start(2.0);
          v_CurrentSFN := v_ReceivedAsp.Common.TimingInfo.SubFrame.SFN.Number;
          
          if (v_MeasRpt1stFlag == true) //the 1st MeasurementReport message
            {
              v_MeasRpt1stFlag := false;
            }
          else //subsequent MeasurementReport messages
            {
              v_SFNLapse := (v_CurrentSFN - v_PreviousSFN) mod 1024;
              
              if ((int2float(v_SFNLapse) > p_ReportInterval * 110.0) or //v_SFNLapse * 10 > p_ReportInterval * 110% * 1000
                  (int2float(v_SFNLapse) < p_ReportInterval * 90.0))    //v_SFNLapse * 10 < p_ReportInterval * 90% * 1000
                {
                  f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Abnormal report interval!");
                }
              else
                {
                  f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Preliminary pass: periodical MeasurementReport message received");
                }
            }
          
          v_PreviousSFN := v_CurrentSFN;
          repeat;
        }
      
      []t_TimeoutTimer.timeout
        {
          f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Timeout when receiving periodical MeasurementReport message!");
        }
      
      []t_TotalTimer.timeout
        {
          t_TimeoutTimer.stop;
          f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Periodical MeasurementReport test pass!");
        }
    }
  } //end of f_Check_EUTRA_HighFreq_PeriodicalMeasurmentReport

  function f_Check_EUTRA_HighFreq_PeriodicalMeasurmentReport_2Meas(EUTRA_CellId_Type p_CellId,
                                                                   float p_TotalTimer,
                                                                   template (present) UL_DCCH_Message p_MeasurementReport_1,
                                                                   template (present) UL_DCCH_Message p_MeasurementReport_2,
                                                                   float p_ReportInterval_1 := 1.024,
                                                                   float p_ReportInterval_2 := 1.024) runs on EUTRA_PTC
  {
    var SRB_COMMON_IND v_ReceivedAsp_1;
    var integer v_PreviousSFN_1;
    var integer v_CurrentSFN_1;
    var integer v_SFNLapse_1;
    var boolean v_MeasRpt1stFlag_1 := true;
    
    var SRB_COMMON_IND v_ReceivedAsp_2;
    var integer v_PreviousSFN_2;
    var integer v_CurrentSFN_2;
    var integer v_SFNLapse_2;
    var boolean v_MeasRpt1stFlag_2 := true;
    
    timer t_TotalTimer;
    timer t_TimeoutTimer_1;
    timer t_TimeoutTimer_2;

    t_TotalTimer.start(p_TotalTimer);
    t_TimeoutTimer_1.start(5.0);
    t_TimeoutTimer_2.start(5.0);
    
    alt {
      [] SRB.receive(car_SRB1_RrcPdu_IND(p_CellId, p_MeasurementReport_1)) -> value v_ReceivedAsp_1
        {
          t_TimeoutTimer_1.stop;
          t_TimeoutTimer_1.start(2.0);
          v_CurrentSFN_1 := v_ReceivedAsp_1.Common.TimingInfo.SubFrame.SFN.Number;
          
          if (v_MeasRpt1stFlag_1 == true) {      // the 1st MeasurementReport message
            v_MeasRpt1stFlag_1 := false;
          }
          else {                                 // subsequent MeasurementReport messages
            v_SFNLapse_1 := (v_CurrentSFN_1 - v_PreviousSFN_1) mod 1024;
            
            if ((int2float(v_SFNLapse_1) > p_ReportInterval_1 * 110.0) or   // v_SFNLapse * 10 > p_ReportInterval * 110% * 1000
                (int2float(v_SFNLapse_1) < p_ReportInterval_1 * 90.0)) {    // v_SFNLapse * 10 < p_ReportInterval * 90% * 1000
              f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Abnormal report interval of MeasurementReport_1!");
            }
            else {
              f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Preliminary pass: periodical MeasurementReport_1 message received");
            }
          }
          v_PreviousSFN_1 := v_CurrentSFN_1;
          repeat;
        }
      [] SRB.receive(car_SRB1_RrcPdu_IND(p_CellId, p_MeasurementReport_2)) -> value v_ReceivedAsp_2
        {
          t_TimeoutTimer_2.stop;
          t_TimeoutTimer_2.start(2.0);
          v_CurrentSFN_2 := v_ReceivedAsp_2.Common.TimingInfo.SubFrame.SFN.Number;
          
          if (v_MeasRpt1stFlag_2 == true) {      // the 1st MeasurementReport message
            v_MeasRpt1stFlag_2 := false;
          }
          else {                                 //subsequent MeasurementReport messages
            v_SFNLapse_2 := (v_CurrentSFN_2 - v_PreviousSFN_2) mod 1024;
            
            if ((int2float(v_SFNLapse_2) > p_ReportInterval_2 * 110.0) or   // v_SFNLapse * 10 > p_ReportInterval * 110% * 1000
                (int2float(v_SFNLapse_2) < p_ReportInterval_2 * 90.0)) {    // v_SFNLapse * 10 < p_ReportInterval * 90% * 1000
              f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Abnormal report interval of MeasurementReport_2!");
            }
            else {
              f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Preliminary pass: periodical MeasurementReport_2 message received");
            }
          }
          v_PreviousSFN_2 := v_CurrentSFN_2;
          repeat;
        }
      [] t_TimeoutTimer_1.timeout
        {
          f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Timeout when receiving periodical MeasurementReport_1 message!");
        }
      [] t_TimeoutTimer_2.timeout
        {
          f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Timeout when receiving periodical MeasurementReport_2 message!");
        }
      [] t_TotalTimer.timeout
        {
          t_TimeoutTimer_1.stop;
          t_TimeoutTimer_2.stop;
          f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Periodical MeasurementReport test pass!");
        }
    }
  } //end of f_Check_EUTRA_HighFreq_PeriodicalMeasurmentReport_2Meas

  function f_Check_EUTRA_HighFreq_PeriodicalMeasurmentReport_2Meas_2Opt(EUTRA_CellId_Type p_CellId,
                                                                        float p_TotalTimer,
                                                                        template (present) UL_DCCH_Message p_MeasurementReport_1,
                                                                        template (present) UL_DCCH_Message p_MeasurementReport_2,
                                                                        float p_ReportInterval_1 := 1.024) runs on EUTRA_PTC
  { // @sic R5s120552 sic@
    var SRB_COMMON_IND v_ReceivedAsp_1;
    var integer v_PreviousSFN_1;
    var integer v_CurrentSFN_1;
    var integer v_SFNLapse_1;
    var boolean v_MeasRpt1stFlag_1 := true;
    
    var SRB_COMMON_IND v_ReceivedAsp_2;
    
    timer t_TotalTimer;
    timer t_TimeoutTimer_1;

    t_TotalTimer.start(p_TotalTimer);
    t_TimeoutTimer_1.start(5.0);
    
    alt {
      [] SRB.receive(car_SRB1_RrcPdu_IND(p_CellId, p_MeasurementReport_1)) -> value v_ReceivedAsp_1
        {
          t_TimeoutTimer_1.stop;
          t_TimeoutTimer_1.start(2.0);
          v_CurrentSFN_1 := v_ReceivedAsp_1.Common.TimingInfo.SubFrame.SFN.Number;
          
          if (v_MeasRpt1stFlag_1 == true) { //the 1st MeasurementReport message
            v_MeasRpt1stFlag_1 := false;
          }
          else {                            //subsequent MeasurementReport messages
            v_SFNLapse_1 := (v_CurrentSFN_1 - v_PreviousSFN_1) mod 1024;
            
            if ((int2float(v_SFNLapse_1) > p_ReportInterval_1 * 110.0) or //v_SFNLapse * 10 > p_ReportInterval * 110% * 1000
                (int2float(v_SFNLapse_1) < p_ReportInterval_1 * 90.0)) {  //v_SFNLapse * 10 < p_ReportInterval * 90% * 1000
              f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Abnormal report interval of MeasurementReport_1!");
            }
            else {
              f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Preliminary pass: periodical MeasurementReport_1 message received");
            }
          }
          v_PreviousSFN_1 := v_CurrentSFN_1;
          repeat;
        }
      
      [] SRB.receive(car_SRB1_RrcPdu_IND(p_CellId, p_MeasurementReport_2)) -> value v_ReceivedAsp_2
        {
          f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Preliminary pass: periodical MeasurementReport_2 message received");
          repeat;
        }
      [] t_TimeoutTimer_1.timeout
        {
          f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Timeout when receiving periodical MeasurementReport_1 message!");
        }
      [] t_TotalTimer.timeout
        {
          t_TimeoutTimer_1.stop;
          f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Periodical MeasurementReport test pass!");
        }
    }
  }

  function f_Check_EUTRA_HighFreq_PeriodicalMeasurmentReport_2Meas_8_3_1_4(EUTRA_CellId_Type p_CellId,
                                                                           float p_TotalTimer,
                                                                           template (present) UL_DCCH_Message p_MeasurementReport_1srvcell,
                                                                           template (present) UL_DCCH_Message p_MeasurementReport_1,
                                                                           template (present) UL_DCCH_Message p_MeasurementReport_2srvcell,
                                                                           template (present) UL_DCCH_Message p_MeasurementReport_2,
                                                                           template (present) UL_DCCH_Message p_MeasurementReport_3srvcell,
                                                                           float p_ReportInterval_1 := 1.024,
                                                                           float p_ReportInterval_2 := 1.024,
                                                                           float p_ReportInterval_3 := 1.024 ) runs on EUTRA_PTC
  { //@sic R5s110020 sic@
    var SRB_COMMON_IND v_ReceivedAsp_1;
    var integer v_PreviousSFN_1;
    var integer v_CurrentSFN_1;
    var integer v_SFNLapse_1;
    var boolean v_MeasRpt1stFlag_1 := true;
    
    var SRB_COMMON_IND v_ReceivedAsp_2;
    var integer v_PreviousSFN_2;
    var integer v_CurrentSFN_2;
    var integer v_SFNLapse_2;
    var boolean v_MeasRpt1stFlag_2 := true;
    
    //@sic R5-110737 sic@
    var SRB_COMMON_IND v_ReceivedAsp_3;
    var integer v_PreviousSFN_3;
    var integer v_CurrentSFN_3;
    var integer v_SFNLapse_3;
    var boolean v_MeasRpt1stFlag_3 := true;

    timer t_TotalTimer;
    timer t_TimeoutTimer_1;
    timer t_TimeoutTimer_2;
    timer t_TimeoutTimer_3;

    t_TotalTimer.start(p_TotalTimer);
    t_TimeoutTimer_1.start(5.0);
    t_TimeoutTimer_2.start(5.0);
    t_TimeoutTimer_3.start(5.0);
    
    alt
      {
        [v_MeasRpt1stFlag_1 == false] SRB.receive(car_SRB1_RrcPdu_IND(p_CellId, p_MeasurementReport_1)) -> value v_ReceivedAsp_1
          {
            t_TimeoutTimer_1.stop;
            t_TimeoutTimer_1.start(2.0);
            v_CurrentSFN_1 := v_ReceivedAsp_1.Common.TimingInfo.SubFrame.SFN.Number;
            
            if (v_MeasRpt1stFlag_1 == true) //the 1st MeasurementReport message
              {
                v_MeasRpt1stFlag_1 := false;
              }
            else //subsequent MeasurementReport messages
              {
                v_SFNLapse_1 := (v_CurrentSFN_1 - v_PreviousSFN_1) mod 1024;
                
                if ((int2float(v_SFNLapse_1) > p_ReportInterval_1 * 110.0) or //v_SFNLapse * 10 > p_ReportInterval * 110% * 1000
                    (int2float(v_SFNLapse_1) < p_ReportInterval_1 * 90.0))   //v_SFNLapse * 10 < p_ReportInterval * 90% * 1000
                  {
                    f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Abnormal report interval of MeasurementReport_1!");
                  }
                else
                  {
                    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Preliminary pass: periodical MeasurementReport_1 message received");
                  }
              }
            
            v_PreviousSFN_1 := v_CurrentSFN_1;
            repeat;
          }
        [v_MeasRpt1stFlag_1] SRB.receive(car_SRB1_RrcPdu_IND(p_CellId, p_MeasurementReport_1srvcell)) -> value v_ReceivedAsp_1
          {
            t_TimeoutTimer_1.stop;
            t_TimeoutTimer_1.start(2.0);
            v_CurrentSFN_1 := v_ReceivedAsp_1.Common.TimingInfo.SubFrame.SFN.Number;
            
            if (v_MeasRpt1stFlag_1 == true) //the 1st MeasurementReport message
              {
                v_MeasRpt1stFlag_1 := false;
              }
            else //subsequent MeasurementReport messages
              {
                v_SFNLapse_1 := (v_CurrentSFN_1 - v_PreviousSFN_1) mod 1024;
  
                if ((int2float(v_SFNLapse_1) > p_ReportInterval_1 * 110.0) or //v_SFNLapse * 10 > p_ReportInterval * 110% * 1000
                   (int2float(v_SFNLapse_1) < p_ReportInterval_1 * 90.0))   //v_SFNLapse * 10 < p_ReportInterval * 90% * 1000
                  {
                    f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Abnormal report interval of MeasurementReport_1!");
                  }
                else
                  {
                    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Preliminary pass: periodical MeasurementReport_1 message received");
                  }
              }
            
            v_PreviousSFN_1 := v_CurrentSFN_1;
            repeat;
          }
        [v_MeasRpt1stFlag_2 == false] SRB.receive(car_SRB1_RrcPdu_IND(p_CellId, p_MeasurementReport_2)) -> value v_ReceivedAsp_2
          {
            t_TimeoutTimer_2.stop;
            t_TimeoutTimer_2.start(2.0);
            v_CurrentSFN_2 := v_ReceivedAsp_2.Common.TimingInfo.SubFrame.SFN.Number;
            
            if (v_MeasRpt1stFlag_2 == true) //the 1st MeasurementReport message
              {
                v_MeasRpt1stFlag_2 := false;
              }
            else //subsequent MeasurementReport messages
              {
                v_SFNLapse_2 := (v_CurrentSFN_2 - v_PreviousSFN_2) mod 1024;
                
                if ((int2float(v_SFNLapse_2) > p_ReportInterval_2 * 110.0) or //v_SFNLapse * 10 > p_ReportInterval * 110% * 1000
                    (int2float(v_SFNLapse_2) < p_ReportInterval_2 * 90.0))    //v_SFNLapse * 10 < p_ReportInterval * 90% * 1000
                  {
                    f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Abnormal report interval of MeasurementReport_2!");
                  }
                else
                  {
                    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Preliminary pass: periodical MeasurementReport_2 message received");
                  }
              }
            
            v_PreviousSFN_2 := v_CurrentSFN_2;
            repeat;
          }
        [v_MeasRpt1stFlag_2] SRB.receive(car_SRB1_RrcPdu_IND(p_CellId, p_MeasurementReport_2srvcell)) -> value v_ReceivedAsp_2
          {
            t_TimeoutTimer_2.stop;
            t_TimeoutTimer_2.start(2.0);
            v_CurrentSFN_2 := v_ReceivedAsp_2.Common.TimingInfo.SubFrame.SFN.Number;
            
            if (v_MeasRpt1stFlag_2 == true) //the 1st MeasurementReport message
              {
                v_MeasRpt1stFlag_2 := false;
              }
            else //subsequent MeasurementReport messages
              {
                v_SFNLapse_2 := (v_CurrentSFN_2 - v_PreviousSFN_2) mod 1024;
                
                if ((int2float(v_SFNLapse_2) > p_ReportInterval_2 * 110.0) or //v_SFNLapse * 10 > p_ReportInterval * 110% * 1000
                    (int2float(v_SFNLapse_2) < p_ReportInterval_2 * 90.0))    //v_SFNLapse * 10 < p_ReportInterval * 90% * 1000
                  {
                    f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Abnormal report interval of MeasurementReport_2!");
                  }
                else
                  {
                    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Preliminary pass: periodical MeasurementReport_2 message received");
                  }
              }
            
            v_PreviousSFN_2 := v_CurrentSFN_2;
            repeat;
          }
        [v_MeasRpt1stFlag_3 == false] SRB.receive(car_SRB1_RrcPdu_IND(p_CellId, p_MeasurementReport_3srvcell)) -> value v_ReceivedAsp_3
          {
            t_TimeoutTimer_3.stop;
            t_TimeoutTimer_3.start(2.0);
            v_CurrentSFN_3 := v_ReceivedAsp_3.Common.TimingInfo.SubFrame.SFN.Number;
            
            if (v_MeasRpt1stFlag_3 == true) //the 1st MeasurementReport message
              {
                v_MeasRpt1stFlag_3 := false;
              }
            else //subsequent MeasurementReport messages
              {
                v_SFNLapse_3 := (v_CurrentSFN_3 - v_PreviousSFN_3) mod 1024;
                
                if ((int2float(v_SFNLapse_3) > p_ReportInterval_3 * 110.0) or //v_SFNLapse * 10 > p_ReportInterval * 110% * 1000
                    (int2float(v_SFNLapse_3) < p_ReportInterval_3 * 90.0))   //v_SFNLapse * 10 < p_ReportInterval * 90% * 1000
                  {
                    f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Abnormal report interval of MeasurementReport_3!");
                  }
                else
                  {
                    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Preliminary pass: periodical MeasurementReport_3 message received");
                  }
              }
            
            v_PreviousSFN_3 := v_CurrentSFN_3;
            repeat;
          }
        [v_MeasRpt1stFlag_3] SRB.receive(car_SRB1_RrcPdu_IND(p_CellId, p_MeasurementReport_3srvcell)) -> value v_ReceivedAsp_3
          {
            t_TimeoutTimer_3.stop;
            t_TimeoutTimer_3.start(2.0);
            v_CurrentSFN_3 := v_ReceivedAsp_3.Common.TimingInfo.SubFrame.SFN.Number;
            
            if (v_MeasRpt1stFlag_3 == true) //the 1st MeasurementReport message
              {
                v_MeasRpt1stFlag_3 := false;
              }
            else //subsequent MeasurementReport messages
              {
                v_SFNLapse_3 := (v_CurrentSFN_3 - v_PreviousSFN_3) mod 1024;
  
                if ((int2float(v_SFNLapse_3) > p_ReportInterval_3 * 110.0) or //v_SFNLapse * 10 > p_ReportInterval * 110% * 1000
                   (int2float(v_SFNLapse_3) < p_ReportInterval_3 * 90.0))   //v_SFNLapse * 10 < p_ReportInterval * 90% * 1000
                  {
                    f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Abnormal report interval of MeasurementReport_3!");
                  }
                else
                  {
                    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Preliminary pass: periodical MeasurementReport_3 message received");
                  }
              }
            
            v_PreviousSFN_3 := v_CurrentSFN_3;
            repeat;
          }
        [] t_TimeoutTimer_1.timeout
          {
            f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Timeout when receiving periodical MeasurementReport_1 message!");
          }
        
        [] t_TimeoutTimer_2.timeout
          {
            f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Timeout when receiving periodical MeasurementReport_2 message!");
          }

         [] t_TimeoutTimer_3.timeout
          {
            f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Timeout when receiving periodical MeasurementReport_3 message!");
          }

        [] t_TotalTimer.timeout
          {
            t_TimeoutTimer_1.stop;
            t_TimeoutTimer_2.stop;
            f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Periodical MeasurementReport test pass!");
          }
      }
  } //end of f_Check_EUTRA_HighFreq_PeriodicalMeasurmentReport_2Meas_8_3_1_4

  function fl_Nas2Asn_PlmnId(NAS_PlmnId p_NAS_PlmnId) return PLMN_Identity
  {
    var PLMN_Identity v_PLMN_Identity;
    var hexstring v_PLMN_hexstring := oct2hex(p_NAS_PlmnId);
    
    v_PLMN_Identity := {
      mcc := {
        hex2int(v_PLMN_hexstring[1]),
        hex2int(v_PLMN_hexstring[0]),
        hex2int(v_PLMN_hexstring[3])
      },
      mnc := {
        hex2int(v_PLMN_hexstring[5]),
        hex2int(v_PLMN_hexstring[4])
      }
    }
    
    if (v_PLMN_hexstring[2] != 'F'H) {
      v_PLMN_Identity.mnc[2] := hex2int(v_PLMN_hexstring[2]);
    }
    
    return v_PLMN_Identity;
  } //end of fl_Nas2Asn_PlmnId

  function f_TC_8_3_1_1_EUTRA() runs on EUTRA_PTC
  { // Measurement configuration control and reporting / Intra E-UTRAN measurements / Event A1  //@sic R5-101186: Changed title sic@
    var integer v_T0_RS_EPRE := -85;
    var integer v_T1_RS_EPRE := -59;
    var integer v_T2_RS_EPRE := -85;

    var Frequency_IE_Type v_Frequency_IE_Cell1;
    var ChannelBandwidthDependency_Type v_ChBandDependency_Cell1;
    
    var float v_TimerValue1;
    var float v_TimerValue2;
    
    //Initialize testcase
    f_EUTRA_Init(c1);

    v_Frequency_IE_Cell1 := f_EUTRA_CellInfo_GetFrequencyIEs(eutra_Cell1);
    v_ChBandDependency_Cell1 := f_EUTRA_BandDependentParam(v_Frequency_IE_Cell1.DL_ChBandwidth, v_Frequency_IE_Cell1.UL_ChBandwidth);
    
    v_TimerValue1 := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 5.0);
    v_TimerValue2 := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 10.0);
    
    //Set EPRE for RF Initial
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell1, v_T1_RS_EPRE);
    
    //Create and configure Cell 1
    f_EUTRA_CellConfig_Def(eutra_Cell1);
    
    //Preamble
    f_EUTRA_Preamble(eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def(eutra_Cell1);
    f_EUTRA_TestBody_Set(true);
    
    //Set EPRE for T0
    f_EUTRA_SetCellPower(eutra_Cell1, v_T0_RS_EPRE); //@sic "Implement T0 after preamble" sic@
    
    //------------------------------------------------
    //Start TestBody

    //@siclog "Step 1-2" siclog@
    //SS transmits an RRCConnectionReconfiguration message including measurementConfiguration to setup intra LTE measurement and reporting for event A1 and receives an RCConnectionReconfigurationComplete message.
    //@sic R5s110743 sic@
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                    cs_RRCConnectionReconfiguration_8_3_1_1_Step1(tsc_RRC_TI_Def,
                                                                                                  v_Frequency_IE_Cell1.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                  v_ChBandDependency_Cell1.AllowedMeasBandwidth));
    //@siclog "Step 3" siclog@
    //SS re-adjusts the cell-specific reference signal level according to row "T1" in table 8.3.1.1.3.2.-1.
    f_EUTRA_SetCellPower(eutra_Cell1, v_T1_RS_EPRE);
    
    //@siclog "Step 4" siclog@
    //Check: does the UE transmit a MeasurementReport message to report event A1 with the measured RSRP value for Cell 1?
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1, cr_MeasurementReport(1, ?, ?, omit)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.1.1 Step 4");
    
    //EXCEPTION: Step 5 below is repeated until 3 MeasurementReport messages are received from the UE
    
    //@siclog "Step 5" siclog@
    //Repeat 1: Check: does the UE transmit a MeasurementReport message, with a measured RSRP value for Cell 1?
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1, cr_MeasurementReport(1, ?, ?, omit)));
    
    //@siclog "Step 5" siclog@
    //Repeat 2: Check: does the UE transmit a MeasurementReport message, with a measured RSRP value for Cell 1?
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1, cr_MeasurementReport(1, ?, ?, omit)));
    
    //@siclog "Step 5" siclog@
    //Repeat 3: Check: does the UE transmit a MeasurementReport message, with a measured RSRP value for Cell 1?
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1, cr_MeasurementReport(1, ?, ?, omit)));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.1.1 Step 5");
    
    //@siclog "Step 6" siclog@
    //SS re-adjusts the cell-specific reference signal level according to row "T2" in table 8.3.1.1.3.2.-1.
    f_EUTRA_SetCellPower(eutra_Cell1, v_T2_RS_EPRE);
    
    //@siclog "Step 7" siclog@
    //Wait and ignore MeasurementReport messages for 5 s to allow change of power levels for Cell 1
    fl_WaitAndIgnoreMeasurementReport(eutra_Cell1, v_TimerValue1, cr_MeasurementReport(1, ?, ?, omit));
    
    //@siclog "Step 8" siclog@
    //Check: does the UE attempt to transmit an uplink message within the next 10s?
    fl_NoUplinkMessage(v_TimerValue2);
    
    //End TestBody
    //------------------------------------------------
    
    f_EUTRA_TestBody_Set(false);
    
    f_EUTRA_Postamble(eutra_Cell1, E2_CONNECTED); //@sic R5-103875 sic@
    
  } //end of testcase 8.3.1.1

  function f_TC_8_3_1_2_EUTRA() runs on EUTRA_PTC
  { // Measurement configuration control and reporting / Intra E-UTRAN measurements / Event A2  //@sic R5-101186: Changed title sic@
    var integer v_T0_RS_EPRE := -70;
    var integer v_T1_RS_EPRE := -96;
    var integer v_T2_RS_EPRE := -70;
    
    var Frequency_IE_Type v_Frequency_IE_Cell1;
    var ChannelBandwidthDependency_Type v_ChBandDependency_Cell1;
    
    var float v_TimerValue1;
    var float v_TimerValue2;
    
    //Initialize testcase
    f_EUTRA_Init(c1);
    
    v_Frequency_IE_Cell1 := f_EUTRA_CellInfo_GetFrequencyIEs(eutra_Cell1);
    v_ChBandDependency_Cell1 := f_EUTRA_BandDependentParam(v_Frequency_IE_Cell1.DL_ChBandwidth, v_Frequency_IE_Cell1.UL_ChBandwidth);
    
    v_TimerValue1 := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 5.0);
    v_TimerValue2 := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 10.0);
    
    //Set EPRE for RF Initial
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell1, v_T0_RS_EPRE); //@sic R5s100176, Change 1: Initialize maximum reference power for cell1 sic@
    
    //Create and configure Cell 1
    f_EUTRA_CellConfig_Def(eutra_Cell1);
    
    //Preamble
    f_EUTRA_Preamble(eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def(eutra_Cell1);
    
    //Set EPRE for T0
    f_EUTRA_SetCellPower(eutra_Cell1, v_T0_RS_EPRE); //@sic R5s100556: Additional change from MCC160 sic@
    
    f_EUTRA_TestBody_Set(true);
    
    //------------------------------------------------
    //Start TestBody

    //@siclog "Step 1-2" siclog@
    //SS transmits an RRCConnectionReconfiguration message including measurementConfiguration to setup intra LTE measurement and reporting for event A2 and receives an RCConnectionReconfigurationComplete message.
    //@sic R5s110743 sic@
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                    cs_RRCConnectionReconfiguration_8_3_1_2_Step1(tsc_RRC_TI_Def,
                                                                                                  v_Frequency_IE_Cell1.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                  v_ChBandDependency_Cell1.AllowedMeasBandwidth));

    
    //@siclog "Step 3" siclog@
    //SS re-adjusts the cell-specific reference signal level according to row "T1" in table 8.3.1.2.3.2.-1.
    f_EUTRA_SetCellPower(eutra_Cell1, v_T1_RS_EPRE);
    
    //@siclog "Step 4" siclog@
    //Check: does the UE transmit a MeasurementReport message to report event A2 with the measured RSRP value for Cell 1?
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1, cr_MeasurementReport(1, ?, ?, omit)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.1.2 Step 4");
    
    //EXCEPTION: Step 5 below is repeated until 3 MeasurementReport messages are received from the UE
    
    //@siclog "Step 5" siclog@
    //Repeat 1: Check: does the UE transmit a MeasurementReport message, with a measured RSRP value for Cell 1? [ask NEC!!! 086301]
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1, cr_MeasurementReport(1, ?, ?, omit)));
    
    //@siclog "Step 5" siclog@
    //Repeat 2: Check: does the UE transmit a MeasurementReport message, with a measured RSRP value for Cell 1?
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1, cr_MeasurementReport(1, ?, ?, omit)));
    
    //@siclog "Step 5" siclog@
    //Repeat 3: Check: does the UE transmit a MeasurementReport message, with a measured RSRP value for Cell 1?
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1, cr_MeasurementReport(1, ?, ?, omit)));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.1.2 Step 5");
    
    //@siclog "Step 6" siclog@
    //SS re-adjusts the cell-specific reference signal level according to row "T2" in table 8.3.1.2.3.2.-1.
    f_EUTRA_SetCellPower(eutra_Cell1, v_T2_RS_EPRE);
    
    //@siclog "Step 7" siclog@
    //Wait and ignore MeasurementReport messages for 5 s to allow change of power levels for Cell 1.
    fl_WaitAndIgnoreMeasurementReport(eutra_Cell1, v_TimerValue1, cr_MeasurementReport(1, ?, ?, omit));
    
    //@siclog "Step 8" siclog@
    //Check: does the UE attempt to transmit an uplink message within the next 10s?
    fl_NoUplinkMessage(v_TimerValue2);
    
    //End TestBody
    //------------------------------------------------
    
    //@sic R5s100176, Change 2: send and receive UE capability enquiry is removed in test procedure before postamble sic@
    
    f_EUTRA_TestBody_Set(false);
    
    f_EUTRA_Postamble(eutra_Cell1, E2_CONNECTED); //@sic R5-103875 sic@
    
  } //end of testcase 8.3.1.2

  function f_TC_8_3_1_3_EUTRA() runs on EUTRA_PTC
  { //Measurement configuration control and reporting / Intra E-UTRAN measurements / 2 Two simultaneous events A3(intra and inter-frequency measurements)
    
    var integer v_T0_T1_T2_RS_EPRE_Cell1 := -85;  //@sic R5-101032r2: Changed from -80 to -85 sic@
    var integer v_T0_RS_EPRE_Cell2 := -91;  //@sic R5-101032r2: Changed from -110 to -91 sic@
    var integer v_T1_RS_EPRE_Cell2 := -79;  //@sic R5-101032r2: Changed from -59 to -79 sic@
    var integer v_T2_RS_EPRE_Cell2 := tsc_NonSuitableOffCellRS_EPRE;  //@sic R5-101032r2: Changed from -110 to Off sic@
    var integer v_T0_T1_RS_EPRE_Cell3 := tsc_NonSuitableOffCellRS_EPRE;  //@sic R5-101032r2: Changed from -110 to Off sic@
    var integer v_T2_RS_EPRE_Cell3 := -73;  //@sic R5-101032r2: Changed from -51 to -73 sic@
    
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var template(value) CellPowerList_Type v_CellPowerList;
    
    var PhysCellId v_PhysCellId_Cell2;
    var PhysCellId v_PhysCellId_Cell3;
    var Frequency_IE_Type v_Frequency_IE_Cell2;
    var Frequency_IE_Type v_Frequency_IE_Cell3;
    var ChannelBandwidthDependency_Type v_ChBandDependency_Cell2;
    var ChannelBandwidthDependency_Type v_ChBandDependency_Cell3;
    
    var float v_TimerValue1;
    var float v_TimerValue2;
    
    //Initialize testcase
    f_EUTRA_Init(c3);
    
    v_TimerValue1 := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 10.0);
    v_TimerValue2 := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 5.0);
    
    v_PhysCellId_Cell2 := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell2);
    v_Frequency_IE_Cell2 := f_EUTRA_CellInfo_GetFrequencyIEs(eutra_Cell2);
    v_ChBandDependency_Cell2 := f_EUTRA_BandDependentParam(v_Frequency_IE_Cell2.DL_ChBandwidth, v_Frequency_IE_Cell2.UL_ChBandwidth);
    
    v_PhysCellId_Cell3 := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell3);
    v_Frequency_IE_Cell3 := f_EUTRA_CellInfo_GetFrequencyIEs(eutra_Cell3);
    v_ChBandDependency_Cell3 := f_EUTRA_BandDependentParam(v_Frequency_IE_Cell3.DL_ChBandwidth, v_Frequency_IE_Cell3.UL_ChBandwidth);
    
    //Set EPRE for RF Initial
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell1, v_T0_T1_T2_RS_EPRE_Cell1);
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell2, v_T1_RS_EPRE_Cell2);
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell3, v_T2_RS_EPRE_Cell3);
    
    //Create and configure Cell1, Cell2, Cell3
    f_EUTRA_CellConfig_Def(eutra_Cell1);
    
    f_EUTRA_SetCellConfigCapability(eutra_Cell2, broadcastOnlyCell); //@sic R5-103077 sic@
    f_EUTRA_CellConfig_SRBs_Only(eutra_Cell2); //@sic R5-103077 sic@
    
    f_EUTRA_SetCellConfigCapability(eutra_Cell3, broadcastOnlyCell); //@sic R5-103077 sic@
    f_EUTRA_CellConfig_SRBs_Only(eutra_Cell3); //@sic R5-103077 sic@
    
    //Preamble
    f_EUTRA_Preamble(eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def(eutra_Cell1);
    
    //Set EPRE for T0
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T0_T1_T2_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell2, v_T0_RS_EPRE_Cell2),
      cs_CellPower(eutra_Cell3, v_T0_T1_RS_EPRE_Cell3)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList); //@sic R5s100538 Clause 4.3 Change 3 sic@
    
    f_EUTRA_TestBody_Set(true);
    
    //------------------------------------------------
    //Start TestBody

    //@siclog "Step 1-2" siclog@
    //SS transmits an RRCConnectionReconfiguration message including measConfig to setup intra LTE E-UTRAN measurement and
    //reporting for two event A3(measId 1 and measId 2)(intra and inter frequency measurement) and receives an RCConnectionReconfigurationComplete message.
    //@sic R5s110743 sic@
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                    cs_RRCConnectionReconfiguration_8_3_1_3_Step1(v_RRC_TI,
                                                                                                  v_Frequency_IE_Cell2.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                  v_ChBandDependency_Cell2.AllowedMeasBandwidth,
                                                                                                  v_Frequency_IE_Cell3.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                  v_ChBandDependency_Cell3.AllowedMeasBandwidth));
 
    //@siclog "Step 3" siclog@
    //Check: does the UE transmit a MeasurementReport message within the next 10s?
    f_NoMeasurementReport(eutra_Cell1, v_TimerValue1, cr_MeasurementReport_CheckAny);

    //@siclog "Step 4" siclog@
    //SS re-adjusts the cell-specific reference signal level according to row "T1" in table 8.3.1.3.3.2.-1.
    f_EUTRA_SetCellPower(eutra_Cell2, v_T1_RS_EPRE_Cell2);
    
    //@siclog "Step 5" siclog@
    //Check: does the UE transmit a MeasurementReport message to report event A3(measId 1) with the measured RSRP value for Cell 2?
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1,
                                    cr_MeasurementReport_Eutra_1Entry_rsrp(1, v_PhysCellId_Cell2)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.1.3 Step 5");
    
    //@siclog "Step 6" siclog@
    //SS re-adjusts the cell-specific reference signal level according to row "T2" in table 8.3.1.3.3.2.-1.
    v_CellPowerList := {
      cs_CellPower(eutra_Cell2, v_T2_RS_EPRE_Cell2),  //@sic R5-101032r2: Changed from v_T0_T2_RS_EPRE_Cell2 to v_T2_RS_EPRE_Cell2 sic@
      cs_CellPower(eutra_Cell3, v_T2_RS_EPRE_Cell3)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 7" siclog@
    //Void //@sic "changed to void according to CR R5-105011" sic@
    
    //@siclog "Step 8" siclog@
    //Check: does the UE transmit a MeasurementReport message to report event A3(measId 2) with the measured RSRP value for Cell 3?
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1,
                                    cr_MeasurementReport_Eutra_1Entry_rsrp(2, v_PhysCellId_Cell3)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.1.3 Step 8");
    
    //End TestBody
    //------------------------------------------------
    
    f_EUTRA_TestBody_Set(false);
    
    f_EUTRA_Postamble(eutra_Cell1, E2_CONNECTED); //@sic R5-103875 sic@
    
  } //end of testcase 8.3.1.3

  function f_TC_8_3_1_4_EUTRA() runs on EUTRA_PTC
  { /* Measurement configuration control and reporting / Intra E-UTRAN measurements / Periodic reporting(intra and inter-frequency measurements) */
    var integer v_T0_RS_EPRE_Cell1 := -85;
    var integer v_T0_RS_EPRE_Cell2 := -91; //@sic R5-103498 sic@
    var integer v_T0_RS_EPRE_Cell3 := -85; //@sic R5-103498 sic@
    var integer v_T0_RS_EPRE_Cell4 := tsc_NonSuitableOffCellRS_EPRE;
    var integer v_T0_RS_EPRE_Cell6 := tsc_NonSuitableOffCellRS_EPRE;
    
    var integer v_T1_RS_EPRE_Cell1 := -85;
    var integer v_T1_RS_EPRE_Cell2 := tsc_NonSuitableOffCellRS_EPRE;
    var integer v_T1_RS_EPRE_Cell3 := -85; //@sic R5-103498 sic@
    var integer v_T1_RS_EPRE_Cell4 := -91; //@sic R5-103498 sic@
    var integer v_T1_RS_EPRE_Cell6 := tsc_NonSuitableOffCellRS_EPRE;

    var integer v_T2_RS_EPRE_Cell1 := -85;
    var integer v_T2_RS_EPRE_Cell2 := tsc_NonSuitableOffCellRS_EPRE;
    var integer v_T2_RS_EPRE_Cell3 := tsc_NonSuitableOffCellRS_EPRE;
    var integer v_T2_RS_EPRE_Cell4 := -91; //@sic R5-103498 sic@
    var integer v_T2_RS_EPRE_Cell6 := -85; //@sic R5-103498 sic@
    
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var template(value) CellPowerList_Type v_CellPowerList;
    
    var PhysCellId v_PhysCellId_Cell2;
    var PhysCellId v_PhysCellId_Cell3;
    var PhysCellId v_PhysCellId_Cell4;
    var PhysCellId v_PhysCellId_Cell6;
    
    var Frequency_IE_Type v_Frequency_IE_f1;
    var Frequency_IE_Type v_Frequency_IE_f2;
    var Frequency_IE_Type v_Frequency_IE_f3;
    
    var ChannelBandwidthDependency_Type v_ChBandDependency_f1;
    var ChannelBandwidthDependency_Type v_ChBandDependency_f2;
    var ChannelBandwidthDependency_Type v_ChBandDependency_f3;
    
    var float v_TimerValue_5s;
    var float v_TimerValue_10s;
    var float v_TimerValue_30s;
    
    var default v_DefaultRef;
    
    //Initialize testcase
    f_EUTRA_Init(c3);
    
    v_PhysCellId_Cell2 := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell2);
    v_PhysCellId_Cell3 := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell3);
    v_PhysCellId_Cell4 := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell4);
    v_PhysCellId_Cell6 := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell6);
    
    v_Frequency_IE_f1 := f_EUTRA_CellInfo_GetFrequencyIEs(eutra_Cell1);
    v_Frequency_IE_f2 := f_EUTRA_CellInfo_GetFrequencyIEs(eutra_Cell3);
    v_Frequency_IE_f3 := f_EUTRA_CellInfo_GetFrequencyIEs(eutra_Cell6);
    
    v_ChBandDependency_f1 := f_EUTRA_BandDependentParam(v_Frequency_IE_f1.DL_ChBandwidth, v_Frequency_IE_f1.UL_ChBandwidth);
    v_ChBandDependency_f2 := f_EUTRA_BandDependentParam(v_Frequency_IE_f2.DL_ChBandwidth, v_Frequency_IE_f2.UL_ChBandwidth);
    v_ChBandDependency_f3 := f_EUTRA_BandDependentParam(v_Frequency_IE_f3.DL_ChBandwidth, v_Frequency_IE_f3.UL_ChBandwidth);
    
    v_TimerValue_5s := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 5.0);
    v_TimerValue_10s := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 10.0);
    v_TimerValue_30s := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 30.0);
    
    //Set EPRE for RF Initial
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell1, v_T0_RS_EPRE_Cell1);
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell2, v_T0_RS_EPRE_Cell2);
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell3, v_T0_RS_EPRE_Cell3);
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell4, v_T1_RS_EPRE_Cell4);
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell6, v_T2_RS_EPRE_Cell6);

    //Create and configure Cell1, Cell2, Cell3, Cell4, Cell6
    f_EUTRA_CellConfig_Def(eutra_Cell1);
    
    f_EUTRA_SetCellConfigCapability(eutra_Cell2, broadcastOnlyCell); //@sic R5-103077 sic@
    f_EUTRA_CellConfig_SRBs_Only(eutra_Cell2); //@sic R5-103077 sic@
    
    f_EUTRA_SetCellConfigCapability(eutra_Cell3, broadcastOnlyCell); //@sic R5-103077 sic@
    f_EUTRA_CellConfig_SRBs_Only(eutra_Cell3); //@sic R5-103077 sic@
    
    f_EUTRA_SetCellConfigCapability(eutra_Cell4, broadcastOnlyCell); //@sic R5-103077 sic@
    f_EUTRA_CellConfig_SRBs_Only(eutra_Cell4); //@sic R5-103077 sic@
    
    f_EUTRA_SetCellConfigCapability(eutra_Cell6, broadcastOnlyCell); //@sic R5-103077 sic@
    f_EUTRA_CellConfig_SRBs_Only(eutra_Cell6); //@sic R5-103077 sic@
    
    //Preamble
    f_EUTRA_Preamble(eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def(eutra_Cell1);
    f_EUTRA_TestBody_Set(true);
    
    //Set EPRE for T0
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T0_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell2, v_T0_RS_EPRE_Cell2),
      cs_CellPower(eutra_Cell3, v_T0_RS_EPRE_Cell3),
      cs_CellPower(eutra_Cell4, v_T0_RS_EPRE_Cell4),
      cs_CellPower(eutra_Cell6, v_T0_RS_EPRE_Cell6)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList); //@sic "Implement T0 after preamble" sic@
    
    //------------------------------------------------
    //Start TestBody

    //@siclog "Step 1-2" siclog@
    //SS transmits an RRCConnectionReconfiguration message including measurementConfiguration to setup intra LTE measurements and
    //periodical reporting for intra and inter frequency cells and receives an RCConnectionReconfigurationComplete message.
    //@sic R5s110743 sic@
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                    cs_RRCConnectionReconfiguration_8_3_1_4_Step1(v_RRC_TI,
                                                                                                  v_Frequency_IE_f1.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                  v_ChBandDependency_f1.AllowedMeasBandwidth,
                                                                                                  v_Frequency_IE_f2.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                  v_ChBandDependency_f2.AllowedMeasBandwidth,
                                                                                                  v_Frequency_IE_f3.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                  v_ChBandDependency_f3.AllowedMeasBandwidth)); //@sic R5-103829r2 sic@
   

    //@siclog "Step 2a" siclog@
    //Wait and ignore MeasurementReport messages for 5 s to allow UE to measure the neighbouring cells
    //@siclog R5-120356 sic@
    fl_WaitAndIgnoreMeasurementReport(eutra_Cell1, 5.0, cr_MeasurementReport_CheckAny);
    //EXCEPTION: In parallel to events described in step 3 the steps specified in table 8.3.1.4.3.2-3,  8.3.1.4.3.2-4 and the table 8.3.1.4.3.2-4A shall take place
    
    //@siclog "Step 3" siclog@
    //Wait for 30 s to ensure that the UE performs a periodical intra frequency reporting and a periodical inter frequency reporting.
    //@sic R5s110020 sic@
    f_Check_EUTRA_HighFreq_PeriodicalMeasurmentReport_2Meas_8_3_1_4(eutra_Cell1,
                                                                    v_TimerValue_30s,
                                                                    cr_MeasurementReport_Eutra_1Entry_srvCell(1),
                                                                    cr_MeasurementReport_Eutra_1Entry_both(1, v_PhysCellId_Cell2),
                                                                    cr_MeasurementReport_Eutra_1Entry_srvCell(2),
                                                                    cr_MeasurementReport_Eutra_1Entry_both(2, v_PhysCellId_Cell3),
                                                                    cr_MeasurementReport_Eutra_1Entry_srvCell(3));
    
    v_DefaultRef := activate(a_EUTRA_AddDefault_PeriodicalMeasurmentReport(eutra_Cell1, cr_MeasurementReport_CheckAny));
    
    //@siclog "Step 4" siclog@
    //SS sets the cell-specific reference signal levels and switches Cell 4 and Cell 6 on according to row "T1" in table 8.3.1.4.3.2.-1.
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T1_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell2, v_T1_RS_EPRE_Cell2),
      cs_CellPower(eutra_Cell3, v_T1_RS_EPRE_Cell3),
      cs_CellPower(eutra_Cell4, v_T1_RS_EPRE_Cell4),
      cs_CellPower(eutra_Cell6, v_T1_RS_EPRE_Cell6)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 5" siclog@
    //Wait and ignore MeasurementReport messages for 5 s to allow for the switching of cells.
    f_Delay(v_TimerValue_5s);
    
    deactivate(v_DefaultRef);
    
    //EXCEPTION: In parallel to events described in step 6 the steps specified in table 8.3.1.4.3.2-4, 8.3.1.4.3.2-4A and table 8.3.1.4.3.2-5 shall take place.
    
    //@siclog "Step 6" siclog@
    //Wait for 30 s to ensure that the UE performs a periodical intra frequency reporting and a periodical inter frequency reporting.
    //@sic R5s110020 sic@
    f_Check_EUTRA_HighFreq_PeriodicalMeasurmentReport_2Meas_8_3_1_4(eutra_Cell1,
                                                                    v_TimerValue_30s,
                                                                    cr_MeasurementReport_Eutra_1Entry_srvCell(2),
                                                                    cr_MeasurementReport_Eutra_1Entry_both(2, v_PhysCellId_Cell3),
                                                                    cr_MeasurementReport_Eutra_1Entry_srvCell(1),
                                                                    cr_MeasurementReport_Eutra_1Entry_both(1, v_PhysCellId_Cell4),
                                                                    cr_MeasurementReport_Eutra_1Entry_srvCell(3));
    
    //Activate the default to receive periodical reports.
    v_DefaultRef := activate(a_EUTRA_AddDefault_PeriodicalMeasurmentReport(eutra_Cell1, cr_MeasurementReport_CheckAny));
    
    //@siclog "Step 7" siclog@
    //SS sets the cell-specific reference signal levels and switches Cell 2 and Cell 3 off according to row "T2" in table 8.3.1.4.3.2.-1.
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T2_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell2, v_T2_RS_EPRE_Cell2),
      cs_CellPower(eutra_Cell3, v_T2_RS_EPRE_Cell3),
      cs_CellPower(eutra_Cell4, v_T2_RS_EPRE_Cell4),
      cs_CellPower(eutra_Cell6, v_T2_RS_EPRE_Cell6)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 8" siclog@
    //Wait and ignore MeasurementReport messages for 5 s to allow for the switching of cells.
    f_Delay(v_TimerValue_5s);
    
    deactivate(v_DefaultRef);
    
    //EXCEPTION: In parallel to events described in steps 9 to 11 the steps specified in table 8.3.1.4.3.2-5 8.3.1.4.3.2-6 and the table 8.3.1.4.3.2-6A shall take place
    
    //@siclog "Step 9" siclog@
    //Wait for 30 s to ensure that the UE performs a periodical intra frequency reporting and a periodical inter frequency reporting.
    //@sic R5s110020 sic@
    f_Check_EUTRA_HighFreq_PeriodicalMeasurmentReport_2Meas_8_3_1_4(eutra_Cell1,
                                                                    v_TimerValue_30s,
                                                                    cr_MeasurementReport_Eutra_1Entry_srvCell(1),
                                                                    cr_MeasurementReport_Eutra_1Entry_both(1, v_PhysCellId_Cell4),
                                                                    cr_MeasurementReport_Eutra_1Entry_srvCell(3),
                                                                    cr_MeasurementReport_Eutra_1Entry_both(3, v_PhysCellId_Cell6),
                                                                    cr_MeasurementReport_Eutra_1Entry_srvCell(2)); //@sic R5-103829r2 sic@
    
    //Activate the default to receive periodical reports.
    v_DefaultRef := activate(a_EUTRA_AddDefault_PeriodicalMeasurmentReport(eutra_Cell1, cr_MeasurementReport_CheckAny));

    //@siclog "Step 10-11" siclog@
    //SS transmits an RRCConnectionReconfiguration message including measurementConfiguration to remove measIds for periodical reporting and
    //receives an RCConnectionReconfigurationComplete message.
    //@sic R5s110743 sic@
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                    cs_RRCConnectionReconfiguration_8_3_1_4_Step10(v_RRC_TI));

    deactivate(v_DefaultRef);
    
    //@siclog "Step 12" siclog@
    //Check: does the UE attempt to transmit an uplink message for the next 10s?
    fl_NoUplinkMessage(v_TimerValue_10s);
    
    //End TestBody
    //------------------------------------------------
    
    f_EUTRA_TestBody_Set(false);
    
    f_EUTRA_Postamble(eutra_Cell1, E2_CONNECTED); //@sic R5-103875 sic@
    
  } //end of testcase 8.3.1.4

  function f_TC_8_3_1_5_EUTRA() runs on EUTRA_PTC
  { //M easurement configuration control and reporting / Intra E-UTRAN measurements / Two simultaneous event A3(intra-frequency measurements)
    var integer v_T0_RS_EPRE_Cell1 := -85;
    var integer v_T0_RS_EPRE_Cell2 := -110; //@sic R5s100187 Change 1: 1) "Setting UE power as per prose 36.523-1" sic@
                                            //@sic R5-105041r2 "from -91 to Off" sic@
                                            //@sic R5s100556, R5-105071, "from Off to -110" sic@
    
    var integer v_T1_RS_EPRE_Cell2 := -91; //@sic R5-105041r2, "from -79 to -91" sic@
    
    var integer v_T2_RS_EPRE_Cell2 := -79; //@sic R5s100187 Change 1: 1), "Setting UE power as per prose 36.523-1" sic@
    
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var template(value) CellPowerList_Type v_CellPowerList;
    
    var float v_TimerValue;
    var PhysCellId v_PhysCellId;
    var Frequency_IE_Type v_Frequency_IE;
    var ChannelBandwidthDependency_Type v_ChBandDependency;
    
    //Initialize testcase
    f_EUTRA_Init(c2);
    
    v_TimerValue := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 10.0);
    
    v_PhysCellId := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell2);
    v_Frequency_IE := f_EUTRA_CellInfo_GetFrequencyIEs(eutra_Cell2);
    v_ChBandDependency := f_EUTRA_BandDependentParam(v_Frequency_IE.DL_ChBandwidth, v_Frequency_IE.UL_ChBandwidth);
    
    //Set EPRE for RF Initial
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell1, v_T0_RS_EPRE_Cell1);
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell2, v_T2_RS_EPRE_Cell2); //@sic R5s100187, Change 1: 2; R5s100538, Change 2)   Init the max reference power to maximum power level sic@
    
    //Create and configure Cell1, Cell2
    f_EUTRA_CellConfig_Def(eutra_Cell1);
    
    f_EUTRA_SetCellConfigCapability(eutra_Cell2, broadcastOnlyCell); //@sic R5-103077 sic@
    f_EUTRA_CellConfig_SRBs_Only(eutra_Cell2); //@sic R5-103077 sic@
    
    //Preamble
    f_EUTRA_Preamble(eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def(eutra_Cell1);
    
    //Set EPRE for T0
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T0_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell2, v_T0_RS_EPRE_Cell2)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList); //@sic R5s100538 Clause 4.3 Change 3, implement T0 after preamble sic@
    
    f_EUTRA_TestBody_Set(true);
    
    //------------------------------------------------
    //Start TestBody

    //@siclog "Step 1-2" siclog@
    //SS transmits an RRCConnectionReconfiguration message including measConfig to setup intra LTE E-UTRAN measurement and
    //reporting for two event A3(measId 1 and measId 2) with different parameters and receives an RCConnectionReconfigurationComplete message.
    //@sic R5s110743 sic@
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                    cs_RRCConnectionReconfiguration_8_3_1_5_Step1(v_RRC_TI,
                                                                                                  v_Frequency_IE.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                  v_ChBandDependency.AllowedMeasBandwidth));
    
    //@siclog "Step 3" siclog@
    //Check: does the UE transmit a MeasurementReport message within the next 10s?
    f_NoMeasurementReport(eutra_Cell1, v_TimerValue, cr_MeasurementReport_CheckAny);
    
    //@siclog "Step 4" siclog@
    //SS re-adjusts the cell-specific reference signal level according to row "T1" in table 8.3.1.5.3.2.-1.
    v_CellPowerList := {
      cs_CellPower(eutra_Cell2, v_T1_RS_EPRE_Cell2)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 5" siclog@
    //Check: does the UE transmit a MeasurementReport message to report event A3(measId 1) with the measured RSRP value for Cell 2?
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1,
                                    cr_MeasurementReport_Eutra_1Entry_rsrp(1, v_PhysCellId)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.1.5 Step 5");
    
    //@siclog "Step 6" siclog@
    //SS re-adjusts the cell-specific reference signal level according to row "T2" in table 8.3.1.5.3.2.-1.
    v_CellPowerList := {
      cs_CellPower(eutra_Cell2, v_T2_RS_EPRE_Cell2)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 7" siclog@
    //Check: does the UE transmit a MeasurementReport message to report event A3(measId 2) with the measured RSRP value for Cell 2?
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1,
                                    cr_MeasurementReport_Eutra_1Entry_rsrp(2, v_PhysCellId)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.1.5 Step 7");
    
    //End TestBody
    //------------------------------------------------
    
    //@sic R5s100187, Change 1: 4)  Send and receive UE capability enquiry is removed in test procedure before postamble sic@
    
    f_EUTRA_TestBody_Set(false);

    f_EUTRA_Postamble(eutra_Cell1, E2_CONNECTED); //@sic R5-103875 sic@
    
  } //end of testcase 8.3.1.5

  function f_TC_8_3_1_6_EUTRA() runs on EUTRA_PTC
  { /* Measurement configuration control and reporting / Intra E-UTRAN measurements / Two simultaneous events A2 and A3 (inter-frequency measurements) */

    var integer v_T0_RS_EPRE_Cell1 := -75; //@sic R5-115646, from -85 to -75 sic@
    var integer v_T0_RS_EPRE_Cell3 := -91;
    
    var integer v_T1_RS_EPRE_Cell1 := -93;
    var integer v_T1_RS_EPRE_Cell3 := -105;
    
    var integer v_T2_RS_EPRE_Cell1 := -85;
    var integer v_T2_RS_EPRE_Cell3 := -73;
    
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var template(value) CellPowerList_Type v_CellPowerList;
    var float v_TimerValue;
    
    var PhysCellId v_PhysCellId_Cell3;
    
    var Frequency_IE_Type v_Frequency_IE_f1;
    var Frequency_IE_Type v_Frequency_IE_f2;
    
    var ChannelBandwidthDependency_Type v_ChBandDependency_f1;
    var ChannelBandwidthDependency_Type v_ChBandDependency_f2;
    
    //Initialize testcase
    f_EUTRA_Init(c3);
    
    v_PhysCellId_Cell3 := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell3);
    
    v_Frequency_IE_f1 := f_EUTRA_CellInfo_GetFrequencyIEs(eutra_Cell1);
    v_Frequency_IE_f2 := f_EUTRA_CellInfo_GetFrequencyIEs(eutra_Cell3);
    
    v_ChBandDependency_f1 := f_EUTRA_BandDependentParam(v_Frequency_IE_f1.DL_ChBandwidth, v_Frequency_IE_f1.UL_ChBandwidth);
    v_ChBandDependency_f2 := f_EUTRA_BandDependentParam(v_Frequency_IE_f2.DL_ChBandwidth, v_Frequency_IE_f2.UL_ChBandwidth);
    
    v_TimerValue := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 10.0);
    
    //Set EPRE for RF Initial
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell1, v_T0_RS_EPRE_Cell1);
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell3, v_T2_RS_EPRE_Cell3);
    
    //Create and configure Cell1, Cell3
    f_EUTRA_CellConfig_Def(eutra_Cell1);
    
    f_EUTRA_SetCellConfigCapability(eutra_Cell3, broadcastOnlyCell);
    f_EUTRA_CellConfig_SRBs_Only(eutra_Cell3);
    
    //Preamble
    f_EUTRA_Preamble(eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def(eutra_Cell1);
    
    //Set EPRE for T0
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T0_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell3, v_T0_RS_EPRE_Cell3)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    f_EUTRA_TestBody_Set(true);
    
    //------------------------------------------------
    //Start TestBody

    //@siclog "Step 1-2" siclog@
    //SS transmits an RRCConnectionReconfiguration message including measConfig to setup intra LTE measurement and
    //reporting for event A2 and event A3 (inter frequency measurement) and receives an RCConnectionReconfigurationComplete message.
    //@sic R5s110743 sic@
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                    cs_RRCConnectionReconfiguration_8_3_1_6_Step1(v_RRC_TI,
                                                                                                  v_Frequency_IE_f1.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                  v_ChBandDependency_f1.AllowedMeasBandwidth,
                                                                                                  v_Frequency_IE_f2.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                  v_ChBandDependency_f2.AllowedMeasBandwidth));

    //@siclog "Step 3" siclog@
    //Check: Does the UE transmit a MeasurementReport message within the next 10s?
    f_NoMeasurementReport(eutra_Cell1, v_TimerValue, cr_MeasurementReport_CheckAny);
    
    //@siclog "Step 4" siclog@
    //SS re-adjusts the cell-specific reference signal level according to row "T1" in table 8.3.1.6.3.2.-1.
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T1_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell3, v_T1_RS_EPRE_Cell3)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 5" siclog@
    //Check: Does the UE transmit a MeasurementReport message to report event A2 with the measured RSRP value for Cell 1?
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1,
                                    cr_MeasurementReport(1, ?, ?, omit))); //@sic R5-106622, R5s110354 sic@
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.1.6 Step 5");
    
    //@siclog "Step 6" siclog@
    //SS re-adjusts the cell-specific reference signal level according to row "T2" in table 8.3.1.6.3.2.-1.
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T2_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell3, v_T2_RS_EPRE_Cell3)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 7" siclog@
    //Check: Does the UE transmit a MeasurementReport message to report event A3 with the measured RSRP value for Cell 3?
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1,
                                    cr_MeasurementReport_Eutra_1Entry_rsrp(2, v_PhysCellId_Cell3)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.1.6 Step 7");
    
    //End TestBody
    //------------------------------------------------
    
    f_EUTRA_TestBody_Set(false);
    
    f_EUTRA_Postamble(eutra_Cell1, E2_CONNECTED);
    
  } //end of testcase 8.3.1.6

  function f_TC_8_3_1_7_EUTRA() runs on EUTRA_PTC
  { // Measurement configuration control and reporting / Intra E-UTRAN measurements / Blacklisting
  
    var integer v_T0_RS_EPRE_Cell1 := -85; //@sic R5-115646, from -85 to -75 sic@
    var integer v_T0_RS_EPRE_Cell2 := -97;
    var integer v_T0_RS_EPRE_Cell4 := -97;
    var integer v_T1_RS_EPRE_Cell2 := -79; //@sic R5-101033r1, from -70 to -79 sic@
    var integer v_T2_RS_EPRE_Cell4 := -79; //@sic R5-101033r1, from -71 to -79 sic@
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var template(value) CellPowerList_Type v_CellPowerList;
    
    var boolean v_MeasRep8A_Received := false; //@sic R5s110790r1, R5s120003r1 sic@

    var float v_TimerValue;
    //var EUTRA_FDD_TDD_Mode_Type v_EUTRA_FDD_TDD_Mode;
    var PhysCellId v_PhysicalCellIdentity_Cell2;
    var PhysCellId v_PhysicalCellIdentity_Cell4;
    var Frequency_IE_Type v_Frequency_IE;
    var ChannelBandwidthDependency_Type v_ChBandDependency;
    
    f_EUTRA_Init(c3); // to be checked
    
    v_TimerValue := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 10.0);
    
    v_PhysicalCellIdentity_Cell2 := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell2);
    v_PhysicalCellIdentity_Cell4 := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell4);
    v_Frequency_IE := f_EUTRA_CellInfo_GetFrequencyIEs(eutra_Cell2);
    
    v_ChBandDependency := f_EUTRA_BandDependentParam(v_Frequency_IE.DL_ChBandwidth, v_Frequency_IE.UL_ChBandwidth);
    
    //Set EPRE for RF Initial
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell1, v_T0_RS_EPRE_Cell1);
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell2, v_T1_RS_EPRE_Cell2);
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell4, v_T2_RS_EPRE_Cell4);
    
    //Create and configure Cell1, Cell2, Cell4
    f_EUTRA_CellConfig_Def(eutra_Cell1);
    
    f_EUTRA_SetCellConfigCapability(eutra_Cell2, broadcastOnlyCell); //@sic R5-103077 sic@
    f_EUTRA_CellConfig_SRBs_Only(eutra_Cell2); //@sic R5-103077 sic@
    
    f_EUTRA_SetCellConfigCapability(eutra_Cell4, broadcastOnlyCell); //@sic R5-103077 sic@
    f_EUTRA_CellConfig_SRBs_Only(eutra_Cell4); //@sic R5-103077 sic@
    
    //Preamble
    f_EUTRA_Preamble(eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def(eutra_Cell1);
    f_EUTRA_TestBody_Set(true);
    
    //Set EPRE for T0
    //@sic R5s100678 sic@
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T0_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell2, v_T0_RS_EPRE_Cell2),
      cs_CellPower(eutra_Cell4, v_T0_RS_EPRE_Cell4)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList); //@sic Implement T0 after preamble sic@
    
    //------------------------------------------------
    //Start TestBody

    //@siclog "Step 1-2" siclog@
    //SS transmits an RRCConnectionReconfiguration message including measConfig to setup intra LTE measurement and
    //reporting for event A3 and receives an RCConnectionReconfigurationComplete message.
    //@sic R5s110743 sic@
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                    cs_RRCConnectionReconfiguration_8_3_1_7_Step1(v_RRC_TI,
                                                                                                  v_Frequency_IE.UL_DL_Earfcn.dl_CarrierFreq, //v_Frequency_IE.UL_DL_Earfcn.dl_CarrierFreq
                                                                                                  v_ChBandDependency.AllowedMeasBandwidth,
                                                                                                  v_PhysicalCellIdentity_Cell2));
    //@siclog "Step 3" siclog@
    //SS re-adjusts the cell-specific reference signal levels according to row "T1" in table 8.3.1.7.3.2.-1.
    v_CellPowerList := {
      cs_CellPower(eutra_Cell2, v_T1_RS_EPRE_Cell2)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 4" siclog@
    //Check: does the UE transmit a MeasurementReport messages within the next 10s?
    f_NoMeasurementReport(eutra_Cell1, v_TimerValue, cr_MeasurementReport_CheckAny);
    
    //@siclog "Step 5" siclog@
    //SS re-adjusts the cell-specific reference signal levels according to row "T2" in table 8.3.1.7.3.2.-1.
    v_CellPowerList := {
      cs_CellPower(eutra_Cell4, v_T2_RS_EPRE_Cell4)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 6" siclog@
    //Check: does the UE transmit a MeasurementReport message to report event A3 with the measured RSRP values for Cell 1and Cell 4 without Cell 2 results?
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1,
                                    cr_MeasurementReport_8_3_1_7_Step6(v_PhysicalCellIdentity_Cell4)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.1.7 Step 6");

    //@siclog "Step 7-8" siclog@
    //SS transmits an RRCConnectionReconfiguration message including measurementConfiguration to remove Cell 2 from the blacklisted cell list and
    //receives an RCConnectionReconfigurationComplete message.
    //@sic R5s110743 sic@
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                    cs_RRCConnectionReconfiguration_8_3_1_7_Step7(v_RRC_TI,
                                                                                                  v_Frequency_IE.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                  v_ChBandDependency.AllowedMeasBandwidth));
    //@siclog "Steps 8Aa1 and 8Ab1" siclog@
    //Check: does the UE transmit a MeasurementReport message to report event A3 with the measured RSRP values for Cell 1 and Cell 2 or Cell 1 and Cell 4?
    //@sic R5-115239 sic@
    //@siclog "Step 9" siclog@
    //Check: does the UE transmit a MeasurementReport message to report event A3 with the measured RSRP values for Cell 1, Cell 2 and Cell 4?
    //@sic R5s110005, R5s110329 sic@
    
    //@sic R5s110790r1, R5s120003r1 sic@
    alt {
      [not v_MeasRep8A_Received] SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1,
                                         cr_MeasurementReport_8_3_1_7_Step6(v_PhysicalCellIdentity_Cell2)))
       {
         v_MeasRep8A_Received := true;
         repeat;
       }


      [not v_MeasRep8A_Received] SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1, //Anritsu PTO TTCN CR required
                                         cr_MeasurementReport_8_3_1_7_Step6(v_PhysicalCellIdentity_Cell4)))
       {
         v_MeasRep8A_Received := true;
         repeat;
       }
      []SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1,
                                        cr_MeasurementReport_8_3_1_7_Step9(v_PhysicalCellIdentity_Cell2,
                                                                           v_PhysicalCellIdentity_Cell4))) {}
      []SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1,
                                        cr_MeasurementReport_8_3_1_7_Step9(v_PhysicalCellIdentity_Cell4,
                                                                           v_PhysicalCellIdentity_Cell2))) {}
    }
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.1.7 Step 9");
    //End TestBody
    //------------------------------------------------
    
    f_EUTRA_TestBody_Set(false);
    
    f_EUTRA_Postamble(eutra_Cell1, E2_CONNECTED); //@sic R5-103875 sic@
  } //end of testcase 8.3.1.7

  function f_TC_8_3_1_8_EUTRA() runs on EUTRA_PTC
  { // Measurement configuration control and reporting / Intra E-UTRAN measurements / Handover / IE measurement configuration present
    var integer v_T0_RS_EPRE_Cell1 := -85;
    var integer v_T0_RS_EPRE_Cell2 := -91;
    var integer v_T1_RS_EPRE_Cell1 := -85;
    var integer v_T1_RS_EPRE_Cell2 := -79;
    
    var float v_TimerValue;
    
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var template(value) CellPowerList_Type v_CellPowerList;
    
    var PhysCellId v_PhysCellId_Cell2;
    var Frequency_IE_Type v_Frequency_IE_Cell2;
    var ChannelBandwidthDependency_Type v_ChBandDependency_Cell2;

    //Initialize testcase
    f_EUTRA_Init(c2);
    
    v_PhysCellId_Cell2 := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell2);
    v_Frequency_IE_Cell2 := f_EUTRA_CellInfo_GetFrequencyIEs(eutra_Cell2);
    v_ChBandDependency_Cell2 := f_EUTRA_BandDependentParam(v_Frequency_IE_Cell2.DL_ChBandwidth, v_Frequency_IE_Cell2.UL_ChBandwidth);

    v_TimerValue := f_EUTRA_SetTimerToleranceMax(eutra_Cell2, nonProtocolTimer, 30.0);
    
    //Set EPRE for RF Initial
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell1, v_T0_RS_EPRE_Cell1);
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell2, v_T1_RS_EPRE_Cell2);
    
    //Create and configure Cell1, Cell2
    f_EUTRA_CellConfig_Def(eutra_Cell1);
    f_EUTRA_CellConfig_Def(eutra_Cell2);
    
    //Preamble
    f_EUTRA_Preamble(eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def(eutra_Cell1);
    
    //Set EPRE for T0
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T0_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell2, v_T0_RS_EPRE_Cell2)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList); //@sic R5s100538 Clause 4.3 Change 3 sic@

    f_EUTRA_TestBody_Set(true);
    
    //------------------------------------------------
    //Start TestBody

    //@siclog "Step 1-2" siclog@
    //The SS transmits an RRCConnectionReconfiguration message on Cell 1 to setup intra frequency measurement and
    //receives an RCConnectionReconfigurationComplete message.
    //@sic R5s110743 sic@
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                    cs_RRCConnectionReconfiguration_8_3_1_8_Step1(v_RRC_TI,
                                                                                                  v_Frequency_IE_Cell2.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                  v_ChBandDependency_Cell2.AllowedMeasBandwidth));
    //@siclog "Step 3" siclog@
    //The SS changes Cell 1 and Cell 2 parameters according to the row T1 in table 8.3.1.8.3.2-0.
    
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T1_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell2, v_T1_RS_EPRE_Cell2)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 4" siclog@
    //The UE transmits a MeasurementReport message on Cell 1 to report event A3.
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1,
                                    cr_MeasurementReport_8_3_1_8_Step4(v_PhysCellId_Cell2)));

    //@sic no more periodical mp received since the reportAmount is set to r1 sic@
    ////Activate the default to receive periodical reports for Cell2.
    //v_DefaultRef := activate(a_EUTRA_AddDefault_PeriodicalMeasurmentReport(eutra_Cell1,
    //                                                                         cr_MeasurementReport_8_3_1_8_Step4(v_PhysCellId_Cell2)));
    
    //@siclog "Step 5 - 6" siclog@
    //The SS transmits an RRCConnectionReconfiguration message with a measConfig on Cell 1 for removing event A3 reporting, to order the UE to perform intra frequency handover to Cell 2.
    //Check: Does the UE transmit an RRCConnectionReconfigurationComplete message on Cell 2
    f_EUTRA_508RRC_IntraLTE_HO_InterCell(eutra_Cell1, eutra_Cell2, -, -, cs_MeasConfig_8_3_1_8_Step5); //@sic R5s100491 change 1 sic@; @sic R5s100524 sic@
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.1.8 Step 6");
    
    // f_EUTRA_StartDefULGrantTransmission(eutra_Cell2); //@sic R5s100491 Change 1 sic@; @sic R5s100524 clause 3.5.2.2 sic@
    
    //@sic no more periodical mp received since the reportAmount is set to r1 sic@
    ////Deactivate the default to stop receiving periodical Measurement Report
    //deactivate(v_DefaultRef);
    
    //@siclog "Step 7" siclog@
    //The SS changes Cell 1 and Cell 2 parameters according to the row "T0" in table 8.3.1.8.3.2-1.
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T0_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell2, v_T0_RS_EPRE_Cell2)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 8" siclog@
    //Check: Does the UE transmit a MeasurementReport message on Cell 2 to perform event A3 reporting during the next 30s?
    f_NoMeasurementReport(eutra_Cell2, v_TimerValue, cr_MeasurementReport_CheckAny);
    
    //@siclog "Step 9" siclog@
    //Check: Does the test result of generic test procedure in TS 36.508 subclause 6.4.2.3 indicate that the UE is in E-UTRA RRC_CONNECTED state on Cell 2?
    f_EUTRA_508Check_ConnectedState(eutra_Cell2);
    
    //End TestBody
    //------------------------------------------------
    
    f_EUTRA_TestBody_Set(false);
    
    f_EUTRA_Postamble(eutra_Cell2, E2_CONNECTED); //@sic R5-103875 sic@
    
  } //end of testcase 8.3.1.8

  function f_TC_8_3_1_9_EUTRA() runs on EUTRA_PTC
  { // Measurement configuration control and reporting / Intra E-UTRAN measurements / Intra-frequency handover / IE measurement configuration not present
    var integer v_T0_RS_EPRE_Cell1 := -85;
    var integer v_T0_RS_EPRE_Cell2 := tsc_NonSuitableOffCellRS_EPRE;
    var integer v_T0_RS_EPRE_Cell3 := -97;
    
    var integer v_T1_RS_EPRE_Cell1 := -85;
    var integer v_T1_RS_EPRE_Cell2 := tsc_NonSuitableOffCellRS_EPRE;
    var integer v_T1_RS_EPRE_Cell3 := -73;
    
    var integer v_T2_RS_EPRE_Cell1 := -85;
    var integer v_T2_RS_EPRE_Cell2 := -79;
    var integer v_T2_RS_EPRE_Cell3 := tsc_NonSuitableOffCellRS_EPRE;
    
    var integer v_T3_RS_EPRE_Cell1 := tsc_NonSuitableOffCellRS_EPRE;
    var integer v_T3_RS_EPRE_Cell2 := -85;
    var integer v_T3_RS_EPRE_Cell3 := -73;
    
    var integer v_T4_RS_EPRE_Cell1 := -79;
    var integer v_T4_RS_EPRE_Cell2 := -85;
    var integer v_T4_RS_EPRE_Cell3 := tsc_NonSuitableOffCellRS_EPRE;

    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var template(value) CellPowerList_Type v_CellPowerList;
    
    var PhysCellId v_PhysCellId_Cell1;
    var PhysCellId v_PhysCellId_Cell2;
    var PhysCellId v_PhysCellId_Cell3;

    var Frequency_IE_Type v_Frequency_IE_f1;
    var Frequency_IE_Type v_Frequency_IE_f2;

    var ChannelBandwidthDependency_Type v_ChBandDependency_f1;
    var ChannelBandwidthDependency_Type v_ChBandDependency_f2;

    var float v_TimerValue;
    
    //Initialize testcase
    f_EUTRA_Init(c3);

    v_PhysCellId_Cell1 := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell1);
    v_PhysCellId_Cell2 := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell2);
    v_PhysCellId_Cell3 := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell3);
    
    v_Frequency_IE_f1 := f_EUTRA_CellInfo_GetFrequencyIEs(eutra_Cell1);
    v_Frequency_IE_f2 := f_EUTRA_CellInfo_GetFrequencyIEs(eutra_Cell3);

    v_ChBandDependency_f1 := f_EUTRA_BandDependentParam(v_Frequency_IE_f1.DL_ChBandwidth, v_Frequency_IE_f1.UL_ChBandwidth);
    v_ChBandDependency_f2 := f_EUTRA_BandDependentParam(v_Frequency_IE_f2.DL_ChBandwidth, v_Frequency_IE_f2.UL_ChBandwidth);

    v_TimerValue := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 30.0);

    //Set EPRE for RF Initial
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell1, v_T4_RS_EPRE_Cell1);
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell2, v_T2_RS_EPRE_Cell2);
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell3, v_T1_RS_EPRE_Cell3);

    //Create and configure Cell1, Cell2, Cell3
    f_EUTRA_CellConfig_Def(eutra_Cell1);

    f_EUTRA_CellConfig_Def(eutra_Cell2);

    f_EUTRA_SetCellConfigCapability(eutra_Cell3, broadcastOnlyCell); //@sic R5-106572 sic@
    f_EUTRA_CellConfig_SRBs_Only(eutra_Cell3); //@sic R5-106572 sic@

    //Preamble
    f_EUTRA_Preamble(eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def(eutra_Cell1);
    
    //Set EPRE for T0
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T0_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell2, v_T0_RS_EPRE_Cell2),
      cs_CellPower(eutra_Cell3, v_T0_RS_EPRE_Cell3)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList); //@sic R5s100538 Clause 4.3 Change 3 sic@

    f_EUTRA_TestBody_Set(true);

    //------------------------------------------------
    //Start TestBody

    //@siclog "Step 1-2" siclog@
    //The SS transmits an RRCConnectionReconfiguration message to setup intra and inter frequency measurements on Cell 1 and
    //receives an RCConnectionReconfigurationComplete message.
    //@sic R5s110743 sic@
    if (pc_FeatrGrp_25) {
      f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                      cs_RRCConnectionReconfiguration_8_3_1_9_Step1_pc25(v_RRC_TI,
                                                                                                         v_Frequency_IE_f1.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                         v_ChBandDependency_f1.AllowedMeasBandwidth,
                                                                                                         v_Frequency_IE_f2.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                         v_ChBandDependency_f2.AllowedMeasBandwidth));
    }
    else {
      f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                      cs_RRCConnectionReconfiguration_8_3_1_9_Step1_notpc25(v_RRC_TI,
                                                                                                            v_Frequency_IE_f1.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                            v_ChBandDependency_f1.AllowedMeasBandwidth));
    }
 
    //EXCEPTION: Steps 3a1 to 3a2 describe behaviour that depends on the UE capability; the "lower case letter" identifies a step sequence that take place if a capability is supported.
    if (pc_FeatrGrp_25)
      {
        //@siclog "Step 3a1" siclog@
        //IF pc_FeatrGrp_25 THEN the SS changes Cell 1, Cell 2 and Cell 3 parameters according to the row "T1" in table 8.3.1.9.3.2-1.
        v_CellPowerList := {
          cs_CellPower(eutra_Cell1, v_T1_RS_EPRE_Cell1),
          cs_CellPower(eutra_Cell2, v_T1_RS_EPRE_Cell2),
          cs_CellPower(eutra_Cell3, v_T1_RS_EPRE_Cell3)
        };
        f_EUTRA_SetCellPowerList(v_CellPowerList);
        
        //@siclog "Step 3a2" siclog@
        //The UE transmits a MeasurementReport message on Cell 1 to report event A3 for Cell 3.
        SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1,
                                        cr_MeasurementReport_Eutra_1Entry_both(2, v_PhysCellId_Cell3)));
        
        //@sic no more periodical mp received since the reportAmount is set to r1 sic@
        ////Activate the default to receive periodical reports for Cell3.
        //v_DefaultRef := activate(a_EUTRA_AddDefault_PeriodicalMeasurmentReport(eutra_Cell1,
        //                                                                         cr_MeasurementReport_Eutra_1Entry_both(2, v_PhysCellId_Cell3)));
      }
    
    //@siclog "Step 4" siclog@
    //The SS changes Cell 1, Cell 2 and Cell 3 parameters according to the row "T2" in table 8.3.1.9.3.2-1.
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T2_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell2, v_T2_RS_EPRE_Cell2),
      cs_CellPower(eutra_Cell3, v_T2_RS_EPRE_Cell3)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 5" siclog@
    //The UE transmits a MeasurementReport message on Cell 1 to report event A3 for Cell 2.
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1,
                                    cr_MeasurementReport_Eutra_1Entry_both(1, v_PhysCellId_Cell2)));
    //@sic no more periodical mp received since the reportAmount is set to r1 sic@
    //if (pc_FeatrGrp_25)
    //  {
    //    //Deactivate the default to stop receiving periodical Measurement Report
    //    deactivate(v_DefaultRef);
    //  }
    
    //@sic no more periodical mp received since the reportAmount is set to r1 sic@
    ////Activate the default to receive periodical reports for Cell2.
    //v_DefaultRef := activate(a_EUTRA_AddDefault_PeriodicalMeasurmentReport(eutra_Cell1,
    //                                                                         cr_MeasurementReport_Eutra_1Entry_both(1, v_PhysCellId_Cell2)));
    
    //@siclog "Step 6 - 7" siclog@
    //The SS transmits an RRCConnectionReconfiguration message without a measConfig message on Cell 1, to order the UE to perform intra frequency handover to Cell 2.
    //Check: Does the UE transmit an RRCConnectionReconfigurationComplete message on Cell 2?
    f_EUTRA_508RRC_IntraLTE_HO_InterCell(eutra_Cell1, eutra_Cell2); // @sic R5s100430 change 2 sic@; @sic R5s100524 sic@
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.1.9 Step 7");
    
    // f_EUTRA_StartDefULGrantTransmission(eutra_Cell2); //@sic R5s100524 clause 3.5.2.2 sic@
    
    //@sic no more periodical mp received since the reportAmount is set to r1 sic@
    ////Deactivate the default to stop receiving periodical Measurement Report
    //deactivate(v_DefaultRef);
    
    //EXCEPTION: Steps 8a1 to 8a4 describe behaviour that depends on the UE capability; the "lower case letter" identifies a step sequence that take place if a capability is supported.
    if (pc_FeatrGrp_25)
      {
        //@siclog "Step 8a1-8a2" siclog@
        //IF pc_FeatrGrp_25 THEN the SS transmits an RRCConnectionReconfiguration message to activate the measurement gaps on Cell 2 and
        //receives an RRCConnectionReconfigurationComplete message to confirm the activation of the measurement gaps on Cell 2
        //@sic R5s110743 sic@
        f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell2,
                                                        cs_RRCConnectionReconfiguration_ResumeInterFreqMeas(v_RRC_TI));
        //@siclog "Step 8a3" siclog@
        //The SS changes Cell 1, Cell 2 and Cell 3 parameters according to the row "T3" in table 8.3.1.9.3.2-1.
        v_CellPowerList := {
          cs_CellPower(eutra_Cell1, v_T3_RS_EPRE_Cell1),
          cs_CellPower(eutra_Cell2, v_T3_RS_EPRE_Cell2),
          cs_CellPower(eutra_Cell3, v_T3_RS_EPRE_Cell3)
        };
        f_EUTRA_SetCellPowerList(v_CellPowerList);
        
        //@siclog "Step 8a4" siclog@
        //Check: Does the UE transmit a MeasurementReport message on Cell 2 to report event A3 for Cell 3?
        SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell2,
                                        cr_MeasurementReport_Eutra_1Entry_both(2, v_PhysCellId_Cell3)));
        f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.1.9 Step 8a4");
        
        //@sic no more periodical mp received since the reportAmount is set to r1 sic@
        ////Activate the default to receive periodical reports for Cell3.
        //v_DefaultRef := activate(a_EUTRA_AddDefault_PeriodicalMeasurmentReport(eutra_Cell2,
        //                                                                         cr_MeasurementReport_Eutra_1Entry_both(2, v_PhysCellId_Cell3)));
      }
    
    //@siclog "Step 9" siclog@
    //The SS changes Cell 1, Cell 2 and Cell 3 parameters according to the row "T4" in table 8.3.1.9.3.2-1.
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T4_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell2, v_T4_RS_EPRE_Cell2),
      cs_CellPower(eutra_Cell3, v_T4_RS_EPRE_Cell3)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 10" siclog@
    //Check: Does the UE transmit a MeasurementReport message on Cell 2 to report event A3 for Cell 1?
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell2,
                                    cr_MeasurementReport_Eutra_1Entry_both(1, v_PhysCellId_Cell1)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.1.9 Step 10");
    
    //@sic no more periodical mp received since the reportAmount is set to r1 sic@
    //if (pc_FeatrGrp_25)
    //{
    //  //Deactivate the default to stop receiving periodical Measurement Report
    //  deactivate(v_DefaultRef);
    //}

    //@sic no more periodical mp received since the reportAmount is set to r1 sic@
    ////Activate the default to receive periodical reports for Cell1.
    //v_DefaultRef := activate(a_EUTRA_AddDefault_PeriodicalMeasurmentReport(eutra_Cell2,
    //                                                                         cr_MeasurementReport_Eutra_1Entry_both(1, v_PhysCellId_Cell1)));
    
    //@siclog "Step 11" siclog@
    //Check: Does the test result of CALL generic procedure indicate that the UE is in E-UTRA RRC_CONNECTED state on Cell 2?
    f_EUTRA_508Check_ConnectedState(eutra_Cell2);
    
    //End TestBody
    //------------------------------------------------
    
    f_EUTRA_TestBody_Set(false);

    f_EUTRA_Postamble(eutra_Cell2, E2_CONNECTED); //@sic R5-103875 sic@
    
    //@sic no more periodical mp received since the reportAmount is set to r1 sic@
    ////Deactivate the default to stop receiving periodical Measurement Report
    //deactivate(v_DefaultRef);
    
  } //end of testcase 8.3.1.9

  function f_TC_8_3_1_9a_EUTRA() runs on EUTRA_PTC
  { //@sic R5-120701, R5-120702 sic@
    // Measurement configuration control and reporting / Intra Frequency measurements / Intra-frequency handover / IE measurement configuration not present / Single Frequency operation
    var integer v_T0_RS_EPRE_Cell1 := -85;
    var integer v_T0_RS_EPRE_Cell2 := tsc_NonSuitableOffCellRS_EPRE;
    
    var integer v_T1_RS_EPRE_Cell1 := -85;
    var integer v_T1_RS_EPRE_Cell2 := -79;
    
    var integer v_T2_RS_EPRE_Cell1 := -79;
    var integer v_T2_RS_EPRE_Cell2 := -85;

    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var template(value) CellPowerList_Type v_CellPowerList;
    
    var PhysCellId v_PhysCellId_Cell1;
    var PhysCellId v_PhysCellId_Cell2;

    var Frequency_IE_Type v_Frequency_IE_f1;

    var ChannelBandwidthDependency_Type v_ChBandDependency_f1;

    //Initialize testcase
    f_EUTRA_Init(c2);

    v_PhysCellId_Cell1 := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell1);
    v_PhysCellId_Cell2 := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell2);
    
    v_Frequency_IE_f1 := f_EUTRA_CellInfo_GetFrequencyIEs(eutra_Cell1);

    v_ChBandDependency_f1 := f_EUTRA_BandDependentParam(v_Frequency_IE_f1.DL_ChBandwidth, v_Frequency_IE_f1.UL_ChBandwidth);

    //Set EPRE for RF Initial
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell1, v_T2_RS_EPRE_Cell1);
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell2, v_T1_RS_EPRE_Cell2);

    //Create and configure Cell1, Cell2
    f_EUTRA_CellConfig_Def(eutra_Cell1);

    f_EUTRA_CellConfig_Def(eutra_Cell2);

    //Preamble
    f_EUTRA_Preamble(eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def(eutra_Cell1);
    
    //Set EPRE for T0
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T0_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell2, v_T0_RS_EPRE_Cell2)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);

    f_EUTRA_TestBody_Set(true);

    //------------------------------------------------
    //Start TestBody

    //@siclog "Step 1-2" siclog@
    //The SS transmits an RRCConnectionReconfiguration message to setup intra frequency measurements on Cell 1 and
    //receives an RRCConnectionReconfigurationComplete message to confirm the setup of intra frequency measurements on Cell 1.
    //@sic R5s110743 sic@
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                    cs_RRCConnectionReconfiguration_8_3_1_9_Step1_notpc25(v_RRC_TI,
                                                                                                          v_Frequency_IE_f1.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                          v_ChBandDependency_f1.AllowedMeasBandwidth));
    //@siclog "Step 3" siclog@
    //The SS changes Cell 1 and Cell 2 parameters according to the row "T1" in table 8.3.1.9a.3.2-1.
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T1_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell2, v_T1_RS_EPRE_Cell2)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 4" siclog@
    //The UE transmits a MeasurementReport message on Cell 1 to report event A3 for Cell 2.
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1,
                                    cr_MeasurementReport_Eutra_1Entry_both(1, v_PhysCellId_Cell2)));
    
    //@siclog "Step 5 - 6" siclog@
    //The SS transmits an RRCConnectionReconfiguration message without a measConfig message on Cell 1, to order the UE to perform intra frequency handover to Cell 2.
    //Check: Does the UE transmit an RRCConnectionReconfigurationComplete message on Cell 2?
    f_EUTRA_508RRC_IntraLTE_HO_InterCell(eutra_Cell1, eutra_Cell2);
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.1.9a Step 6");
    
    // f_EUTRA_StartDefULGrantTransmission(eutra_Cell2);
    
    //@siclog "Step 7" siclog@
    //The SS changes Cell 1 and Cell 2 parameters according to the row "T2" in table 8.3.1.9a.3.2-1.
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T2_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell2, v_T2_RS_EPRE_Cell2)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 8" siclog@
    //Check: Does the UE transmit a MeasurementReport message on Cell 2 to report event A3 for Cell 1?
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell2,
                                    cr_MeasurementReport_Eutra_1Entry_both(1, v_PhysCellId_Cell1)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.1.9a Step 8");
    
    //@siclog "Step 9" siclog@
    //Check: Does the test result of generic test procedure in TS 36.508 subclause 6.4.2.3 indicate that the UE is in E-UTRA RRC_CONNECTED state on Cell 2?
    f_EUTRA_508Check_ConnectedState(eutra_Cell2);
    
    //End TestBody
    //------------------------------------------------
    
    f_EUTRA_TestBody_Set(false);

    f_EUTRA_Postamble(eutra_Cell2, E2_CONNECTED); //@sic R5-103875 sic@
    
  } //end of testcase 8.3.1.9a

  function f_TC_8_3_1_10_EUTRA() runs on EUTRA_PTC
  { //Measurement configuration control and reporting / Intra E-UTRAN measurements / Inter-frequency handover / IE measurement configuration not present
    var integer v_T0_RS_EPRE_Cell1 := -85;
    var integer v_T0_RS_EPRE_Cell2 := -91;
    var integer v_T0_RS_EPRE_Cell3 := -97; //@sic R5-103498 sic@
    var integer v_T0_RS_EPRE_Cell12 := tsc_NonSuitableOffCellRS_EPRE;
    
    var integer v_T1_RS_EPRE_Cell2 := -79;

    var integer v_T2_RS_EPRE_Cell2 := tsc_NonSuitableOffCellRS_EPRE;
    var integer v_T2_RS_EPRE_Cell3 := -73;

    var integer v_T3_RS_EPRE_Cell1 := -97;
    var integer v_T3_RS_EPRE_Cell3 := -85;
    var integer v_T3_RS_EPRE_Cell12 := -79;

    var integer v_T4_RS_EPRE_Cell1 := -73;
    var integer v_T4_RS_EPRE_Cell12 := tsc_NonSuitableOffCellRS_EPRE;

    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var template(value) CellPowerList_Type v_CellPowerList;

    var PhysCellId v_PhysCellId_Cell1;
    var PhysCellId v_PhysCellId_Cell2;
    var PhysCellId v_PhysCellId_Cell3;
    var PhysCellId v_PhysCellId_Cell12;
    
    var Frequency_IE_Type v_Frequency_IE_f1;
    var Frequency_IE_Type v_Frequency_IE_f2;

    var ChannelBandwidthDependency_Type v_ChBandDependency_f1;
    var ChannelBandwidthDependency_Type v_ChBandDependency_f2;

    var float v_TimerValue;
    
    //Initialize testcase
    f_EUTRA_Init(c3);
    
    v_PhysCellId_Cell1 := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell1);
    v_PhysCellId_Cell2 := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell2);
    v_PhysCellId_Cell3 := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell3);
    v_PhysCellId_Cell12 := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell12);

    v_Frequency_IE_f1 := f_EUTRA_CellInfo_GetFrequencyIEs(eutra_Cell1);
    v_Frequency_IE_f2 := f_EUTRA_CellInfo_GetFrequencyIEs(eutra_Cell3);

    v_ChBandDependency_f1 := f_EUTRA_BandDependentParam(v_Frequency_IE_f1.DL_ChBandwidth, v_Frequency_IE_f1.UL_ChBandwidth);
    v_ChBandDependency_f2 := f_EUTRA_BandDependentParam(v_Frequency_IE_f2.DL_ChBandwidth, v_Frequency_IE_f2.UL_ChBandwidth);

    v_TimerValue := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 30.0);

    //Set EPRE for RF Initial
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell1, v_T4_RS_EPRE_Cell1);
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell2, v_T1_RS_EPRE_Cell2);
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell3, v_T2_RS_EPRE_Cell3);
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell12, v_T3_RS_EPRE_Cell12);
    
    //Create and configure Cell1, Cell2, Cell3, Cell12
    f_EUTRA_CellConfig_Def(eutra_Cell1);

    f_EUTRA_SetCellConfigCapability(eutra_Cell2, broadcastOnlyCell); //@sic R5-106572 sic@
    f_EUTRA_CellConfig_SRBs_Only(eutra_Cell2); //@sic R5-106572 sic@

    f_EUTRA_CellConfig_Def(eutra_Cell3);

    f_EUTRA_SetCellConfigCapability(eutra_Cell12, broadcastOnlyCell); //@sic R5-106572 sic@
    f_EUTRA_CellConfig_SRBs_Only(eutra_Cell12); //@sic R5-106572 sic@
   
    //Preamble
    f_EUTRA_Preamble(eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def(eutra_Cell1);
    
    //Set EPRE for T0
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T0_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell2, v_T0_RS_EPRE_Cell2),
      cs_CellPower(eutra_Cell3, v_T0_RS_EPRE_Cell3),
      cs_CellPower(eutra_Cell12, v_T0_RS_EPRE_Cell12)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList); //@sicR5s100538 Clause 4.3 Change 3, implement T0 after preamble sic@

    f_EUTRA_TestBody_Set(true);
    
    //------------------------------------------------
    //Start TestBody

    //@siclog "Step 1-2" siclog@
    //The SS transmits an RRCConnectionReconfiguration message to setup intra and inter frequency measurements on Cell 1 and
    //receives an RRCConnectionReconfigurationComplete message to confirm the setup of intra and inter frequency measurements on Cell 1.
    //@sic R5s110743 sic@
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                    cs_RRCConnectionReconfiguration_8_3_1_10_Step1(v_RRC_TI,
                                                                                                   v_Frequency_IE_f1.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                   v_ChBandDependency_f1.AllowedMeasBandwidth,
                                                                                                   v_Frequency_IE_f2.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                   v_ChBandDependency_f2.AllowedMeasBandwidth));
    //@siclog "Step 3" siclog@
    //The SS changes the cell-specific reference signal levels of Cell 2 according to the row "T1" in table 8.3.1.10.3.2-1. //@sic R5-106572, correct description sic@
    v_CellPowerList := {
      cs_CellPower(eutra_Cell2, v_T1_RS_EPRE_Cell2)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 4" siclog@
    //The UE transmits a MeasurementReport message on Cell 1 to perform event A3 intra frequency reporting for Cell 2 during the next 30 s.
    f_Check_Timer_MeasurementReport(eutra_Cell1,
                                    v_TimerValue,
                                    cr_MeasurementReport_Eutra_1Entry_both(1, v_PhysCellId_Cell2));
    
    //@siclog "Step 5" siclog@
    //The SS changesthe cell-specific reference signal levels of Cell 3 and switches "Off" Cell 2 according to row "T2" in table 8.3.1.10.3.2-1. //@sic R5-106572, correct description sic@
    v_CellPowerList := {
      cs_CellPower(eutra_Cell2, v_T2_RS_EPRE_Cell2),
      cs_CellPower(eutra_Cell3, v_T2_RS_EPRE_Cell3) //@sic R5-106572 sic@
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 6" siclog@
    //The UE transmits a MeasurementReport message on Cell 1 to perform event A3 inter frequency reporting for Cell 3 during the next 30 s.
    f_Check_Timer_MeasurementReport(eutra_Cell1,
                                    v_TimerValue,
                                    cr_MeasurementReport_Eutra_1Entry_both(2, v_PhysCellId_Cell3));
    
    //@siclog "Step 7 - 8" siclog@
    //The SS transmits an RRCConnectionReconfiguration message without a measConfig, to order the UE to perform inter frequency handover to Cell 3. //@sic R5-106572, correct description sic@
    //Check: Does the UE transmit an RRCConnectionReconfigurationComplete message to Cell 3?
    f_EUTRA_508RRC_IntraLTE_HO_InterCell(eutra_Cell1, eutra_Cell3, -, tsc_C_RNTI_Def3);  //@sic R5s100430 change 2 sic@; @sic R5s100524 sic@
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.1.10 Step 8");
    
    //@siclog "Step 9-10" siclog@
    //The SS transmits an RRCConnectionReconfiguration message to activate the measurement gaps on Cell 3 and
    //receives an RRCConnectionReconfigurationComplete message to confirm the activation of the measurement gaps on Cell 3.
    //@sic R5s110743 sic@
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell3, //@sic R5s100516 Change 1 sic@
                                                    cs_RRCConnectionReconfiguration_ResumeInterFreqMeas(v_RRC_TI));
    //@siclog "Step 11" siclog@
    //The SS changes the cell-specific reference signal levels of Cell 1 and Cell 3 and switches "On" Cell 12  according to the row "T3" in table 8.3.1.10.3.2-1. //@sic R5-106572, correct description sic@
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T3_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell3, v_T3_RS_EPRE_Cell3),
      cs_CellPower(eutra_Cell12, v_T3_RS_EPRE_Cell12) //@sic R5-106572 sic@
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 12" siclog@
    //Check: Does the UE transmit a MeasurementReport message on Cell 3 to perform event A3 intra frequency reporting for Cell 12 during the next 30 s?
    f_Check_Timer_MeasurementReport(eutra_Cell3,
                                    v_TimerValue,
                                    cr_MeasurementReport_Eutra_1Entry_both(1, v_PhysCellId_Cell12));
    
    //@siclog "Step 13" siclog@
    //The SS changes the cell-specific reference signal levels of Cell 1 and switches Cell 12 off according to row "T4" in table 8.3.1.10.3.2-1. //@sic R5-106572, correct description sic@
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T4_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell12, v_T4_RS_EPRE_Cell12) //@sic R5-106572 sic@
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 14" siclog@
    //Check: Does the UE transmit a MeasurementReport message on Cell 3 to perform event A3 inter frequency reporting for Cell 1 during the next 30 s?
    f_Check_Timer_MeasurementReport(eutra_Cell3,
                                    v_TimerValue,
                                    cr_MeasurementReport_Eutra_1Entry_both(2, v_PhysCellId_Cell1));
    
    //@siclog "Step 15" siclog@
    //Check: Does the test result of generic test procedure in TS 36.508 subclause 6.4.2.3 indicate that the UE is in E-UTRA RRC_CONNECTED state on Cell 3?
    f_EUTRA_508Check_ConnectedState(eutra_Cell3);
    
    //End TestBody
    //------------------------------------------------
    
    f_EUTRA_TestBody_Set(false);
    
    f_EUTRA_Postamble(eutra_Cell3, E2_CONNECTED); //@sic R5-103875 sic@
    
  } //end of testcase 8.3.1.10

  function f_TC_8_3_1_11_EUTRA() runs on EUTRA_PTC
  { /* Measurement configuration control and reporting / intra E-UTRAN measurements: continuation of the measurements after RRC Connection Re-establishment */
    var integer v_T0_RS_EPRE_Cell1 := -85;
    var integer v_T0_RS_EPRE_Cell2 := tsc_NonSuitableOffCellRS_EPRE; //@sic R5-103498 sic@
    var integer v_T0_RS_EPRE_Cell3 := tsc_NonSuitableOffCellRS_EPRE; //@sic R5-103498 sic@
    
    var integer v_T1_RS_EPRE_Cell3 := -73;
    
    var integer v_T2_RS_EPRE_Cell2 := -79;
    var integer v_T2_RS_EPRE_Cell3 := tsc_NonSuitableOffCellRS_EPRE; //@sic R5-103498 sic@
    
    var integer v_T3_RS_EPRE_Cell1 := tsc_NonSuitableOffCellRS_EPRE; //@sic R5-103498 sic@
    
    var integer v_T4_RS_EPRE_Cell1 := -79;
    var integer v_T4_RS_EPRE_Cell2 := -85;
    
    var integer v_T5_RS_EPRE_Cell1 := tsc_NonSuitableOffCellRS_EPRE; //@sic R5-103498 sic@
    var integer v_T5_RS_EPRE_Cell3 := -73;
    
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var template(value) CellPowerList_Type v_CellPowerList;
    
    var PhysCellId v_PhysCellId_Cell1;
    var PhysCellId v_PhysCellId_Cell2;
    var PhysCellId v_PhysCellId_Cell3;
    
    var Frequency_IE_Type v_Frequency_IE_f1;
    var Frequency_IE_Type v_Frequency_IE_f2;
    
    var ChannelBandwidthDependency_Type v_ChBandDependency_f1;
    var ChannelBandwidthDependency_Type v_ChBandDependency_f2;
    
    var template(value) EUTRA_FDD_TDD_CellInfo_Type v_EUTRA_FDD_TDD_CellInfo_Cell2;
    var template (value) PhysicalConfigDedicated_AntennaInfo_Type v_AntennaInfo_Cell2;
    var SR_PUCCH_ResourceIndex_Type v_SR_PUCCH_ResourceIndex_Cell2;
    var SR_ConfigIndex_Type v_SR_ConfigIndex_Cell2; //@sic R5-102177 sic@
    var ShortMAC_I v_ShortMAC_I;
    var EUTRA_SecurityParams_Type v_Auth_Params;
    var float v_T304;
    timer t_T304Max; //@sic R5s120033 sic@

    
    //Initialize testcase
    f_EUTRA_Init(c3);
    
    v_PhysCellId_Cell1 := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell1);
    v_PhysCellId_Cell2 := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell2);
    v_PhysCellId_Cell3 := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell3);
    
    v_Frequency_IE_f1 := f_EUTRA_CellInfo_GetFrequencyIEs(eutra_Cell1);
    v_Frequency_IE_f2 := f_EUTRA_CellInfo_GetFrequencyIEs(eutra_Cell3);
    
    v_ChBandDependency_f1 := f_EUTRA_BandDependentParam(v_Frequency_IE_f1.DL_ChBandwidth, v_Frequency_IE_f1.UL_ChBandwidth);
    v_ChBandDependency_f2 := f_EUTRA_BandDependentParam(v_Frequency_IE_f2.DL_ChBandwidth, v_Frequency_IE_f2.UL_ChBandwidth);
    
    v_EUTRA_FDD_TDD_CellInfo_Cell2 := f_EUTRA_CellInfo_GetFDD_TDD_Info(eutra_Cell2);
    v_AntennaInfo_Cell2 := f_EUTRA_CellInfo_GetAntennaInfoDedicated (eutra_Cell2);
    v_SR_PUCCH_ResourceIndex_Cell2 := f_EUTRA_CellInfo_GetSR_PUCCH_ResourceIndex (eutra_Cell2);
    v_SR_ConfigIndex_Cell2 := f_EUTRA_CellInfo_GetSR_ConfigIndex (eutra_Cell2); //@sic R5-102177 sic@
    
    //v_TimerValue := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 30.0);
    v_T304 := f_EUTRA_SetTimerToleranceMax(eutra_Cell2, rrcTimer, 1.0); //According to 36.508 cl. 4.6.5 Table 4.6.5-1
    
    //Set EPRE for RF Initial
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell1, v_T4_RS_EPRE_Cell1);
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell2, v_T2_RS_EPRE_Cell2);
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell3, v_T1_RS_EPRE_Cell3);

    //@sic R5s120033 sic@
    //Set PreambleTransMax to n50 in all cells
    f_EUTRA_CellInfo_SetPreambleTransMax(eutra_Cell1, n50);
    f_EUTRA_CellInfo_SetPreambleTransMax(eutra_Cell2, n50);
    f_EUTRA_CellInfo_SetPreambleTransMax(eutra_Cell3, n50);

    //Create and configure Cell 1, Cell 2, Cell 3
    f_EUTRA_CellConfig_Def(eutra_Cell1);
    
    f_EUTRA_CellConfig_Def(eutra_Cell2);
    
    f_EUTRA_SetCellConfigCapability(eutra_Cell3, broadcastOnlyCell); //@sic R5-106572 sic@
    f_EUTRA_CellConfig_SRBs_Only(eutra_Cell3); //@sic R5-106572 sic@
    
    //Preamble
    f_EUTRA_Preamble(eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def(eutra_Cell1);
    f_EUTRA_TestBody_Set(true);
    
    //Set EPRE for T0
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T0_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell2, v_T0_RS_EPRE_Cell2),
      cs_CellPower(eutra_Cell3, v_T0_RS_EPRE_Cell3)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList); //@sic R5-106572, implement T0 after preamble sic@
    
    //------------------------------------------------
    //Start TestBody
    
    //@siclog "Step 1-2" siclog@
    //The SS transmits an RRCConnectionReconfiguration message to setup intra and inter frequency measurements on Cell 1 and
    //receives an RRCConnectionReconfigurationComplete message to confirm the setup of intra and inter frequency measurements on Cell 1.
    //@sic R5s110743 sic@
    if (pc_FeatrGrp_25)
      {
        f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                        cs_RRCConnectionReconfiguration_8_3_1_11_Step1_pc25(v_RRC_TI,
                                                                                                            v_Frequency_IE_f1.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                            v_ChBandDependency_f1.AllowedMeasBandwidth,
                                                                                                            v_Frequency_IE_f2.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                            v_ChBandDependency_f2.AllowedMeasBandwidth));
      }
    else
      {
        f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                        cs_RRCConnectionReconfiguration_8_3_1_11_Step1_notpc25(v_RRC_TI,
                                                                                                               v_Frequency_IE_f1.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                               v_ChBandDependency_f1.AllowedMeasBandwidth));
      }

    //EXCEPTION: Steps 3a1 to 3a2 describe behaviour that depends on the UE capability; the "lower case letter" identifies a step sequence that take place if a capability is supported.
    if (pc_FeatrGrp_25)
      {
        //@siclog "Step 3a1" siclog@
        //IF pc_FeatrGrp_25 THEN the SS changes Cell 3 power levels according to the row "T1" in Table 8.3.1.11.3.2-1. //@sic R5-106572, "correct description" sic@
        v_CellPowerList := {
          cs_CellPower(eutra_Cell3, v_T1_RS_EPRE_Cell3)
        } //@sic R5-106572 sic@
        f_EUTRA_SetCellPowerList(v_CellPowerList);
        
        //@siclog "Step 3a2" siclog@
        //The UE transmits a MeasurementReport message on Cell 1 to report event A3 for Cell 3.
        SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1,
                                        cr_MeasurementReport_Eutra_1Entry_both(2, v_PhysCellId_Cell3))); //@sic R5s100879, R5-106572 sic@
      }
    
    //@siclog "Step 4" siclog@
    //The SS changes Cell 2 and Cell 3 power levels according to the row "T2" in Table 8.3.1.11.3.2-1.
    v_CellPowerList := {
      cs_CellPower(eutra_Cell2, v_T2_RS_EPRE_Cell2),
      cs_CellPower(eutra_Cell3, v_T2_RS_EPRE_Cell3)
    }; //@sic R5-106572 sic@
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 5" siclog@
    //The UE transmits a MeasurementReport message on Cell 1 to perform event A3 intra frequency reporting for Cell 2.
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1,
                                    cr_MeasurementReport_Eutra_1Entry_both(1, v_PhysCellId_Cell2))); //@sic R5s100879, R5-106572 sic@
    
    //Configure Cell2 to not send response on RACH preamble reception on Cell 2
    f_EUTRA_SS_ConfigRachProcedure(eutra_Cell2,
                                   omit,
                                   cs_RachProcedureConfig_NoResponse(f_EUTRA_CellInfo_GetDL_ChBandwidth (eutra_Cell2)));
    //@siclog "Step 6" siclog@
    //The SS transmits an RRCConnectionReconfiguration message including a mobilityControlInfo, to order the UE to perform intra frequency handover to Cell 2.
    f_EUTRA_RRC_ConnReconfigHO_IntraLTE_MobilitySecurity(eutra_Cell1,
                                                         eutra_Cell2,
                                                         f_Generate_cs_MobilityControlInfo_HO(eutra_Cell2, omit, omit),
                                                         cs_508SecurityConfigHO_IntraLTE);
    //stop periodic TA on source cell
    //@sic R5s100879 sic@
    
    t_T304Max.start(v_T304); //@sic R5s120033 sic@

    //Reset SRBs and DRBs of source cell (cell 1)
    f_EUTRA_SS_SRBs_DRBs_Reset_StopULGrant_noPUCCHSync ( eutra_Cell1, 100 ); //@sic R5s120033 sic@

    //EXCEPTION: In parallel to the events described in step 7 the steps specified in Table 8.3.1.11.3.2-3 should take place.
    
    //EXCEPTION: The steps 1 and 2 below are repeated for the duration of T304.
    //1. The UE attempts to perform the intra frequency handover using MAC Random Access Preamble on Cell 2.
    //2. The SS does not respond.
    
    //@siclog "Step 7" siclog@
    //The SS changes Cell 1 power levels according to the row "T3" in Table 8.3.1.11.3.2-1. //@sic R5-106572, "correct description" sic@
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T3_RS_EPRE_Cell1)
    }; //@sic R5-106572 sic@
    f_EUTRA_SetCellPowerList(v_CellPowerList);

    //Calculate ShortMAC-I to be received in RRCConnectionReestablishment Request from UE in Step 8
    v_ShortMAC_I := f_Calculate_ShortMAC(eutra_Cell1, eutra_Cell2); //@sic R5s120033 sic@

    //Wait T304 + tolerance to fail "Criterion for successful completion of handover"
    t_T304Max.timeout; //@sic R5s120033 sic@
        
    //Configure Cell2 to normal PRACH operation mode
    f_EUTRA_SS_ConfigRachProcedure_Def(eutra_Cell2, tsc_C_RNTI_Def);     /* @sic acc. to R5s100029 change 3 sic@ */
    
    //@siclog "Step 8" siclog@
    //Check: Does the UE transmit an RRCConnectionReestablishmentRequest message on Cell 2?
    SRB.receive(car_SRB0_RrcPdu_IND(eutra_Cell2,
                                    cr_508_RRCConnectionReestablishmentRequest(tsc_C_RNTI_Def,
                                                                               v_PhysCellId_Cell1, //@sic R5-110211, R5-106572 sic@
                                                                               handoverFailure,
                                                                               v_ShortMAC_I)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.1.11 Step 8");
    
    //Activate RRC security in Cell 2(SRB 1,2 and DRB 1)
    //@sic R5s100879 sic@
    v_Auth_Params := f_EUTRA_SS_AS_ActivateSecurity_HO_Reest(eutra_Cell2, f_EUTRA_Security_Get(), 0);
    f_EUTRA_Security_Set(v_Auth_Params);
    
    //@siclog "Step 9" siclog@
    //The SS transmits an RRCConnectionReestablishment message to resume SRB1 operation and re-activate security on Cell 2.
    f_EUTRA_RRC_RRCConnectionReestablishment_Def(eutra_Cell2); // @sic R5-120497, R5-120721 change 3 sic@
    
    //@siclog "Step 10" siclog@
    //The UE transmits an RRCConnectionReestablishmentComplete message on Cell 2.
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell2, cr_508_RRCConnectionReestablishmentComplete(v_RRC_TI)));
    
    //@siclog "Step 11-12" siclog@
    //The SS transmits an RRCConnectionReconfiguration message to resume existing radio bearer on Cell 2 and
    //receives an RRCConnectionReconfigurationComplete message on Cell 2.
    //@sic R5s100516 Change 1, R5s110743 sic@
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell2,
                                                    cs_RRCConnReconfig_Resume_SRB2_DRBs(v_RRC_TI,
                                                                                        v_EUTRA_FDD_TDD_CellInfo_Cell2.cqi_ReportConfig,
                                                                                        v_EUTRA_FDD_TDD_CellInfo_Cell2.soundingRS_UL_Config,
                                                                                        v_AntennaInfo_Cell2,
                                                                                        v_SR_PUCCH_ResourceIndex_Cell2,
                                                                                        v_SR_ConfigIndex_Cell2));

    //@siclog "Step 13" siclog@
    //The SS changes Cell 1 and Cell 2 power levels according to the row "T4" in Table 8.3.1.11.3.2-1. //@sic R5-106572, "correct description" sic@
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T4_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell2, v_T4_RS_EPRE_Cell2)
    }; //@sic R5-106572 sic@
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 14" siclog@
    //Check: Does the UE transmit a MeasurementReport message on Cell 2 to perform event A3 intra frequency reporting for Cell 1?
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell2,
                                    cr_MeasurementReport_Eutra_1Entry_both(1, v_PhysCellId_Cell1))); //@sic R5s100879, R5-106572 sic@
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.1.11 Step 14");
    
    //EXCEPTION: Steps 15a1 to 15a4 describe behaviour that depends on the UE capability; the "lower case letter" identifies a step sequence that takes place if a capability is supported.
    if (pc_FeatrGrp_25) {
    
      //@siclog "Step 15a1-15a2" siclog@
      //IF pc_FeatrGrp_25 THEN the SS transmits an RRCConnectionReconfiguration message to activate the measurement gaps on Cell 2 and
      //receives an RRCConnectionReconfigurationComplete message to confirm the activation of the measurement gaps on Cell 2
      //@sic R5s110743 sic@
      f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell2,
                                                      cs_RRCConnectionReconfiguration_ResumeInterFreqMeas(v_RRC_TI));
      //@siclog "Step 15a3" siclog@
      //The SS changes Cell 1 and Cell 3 power levels according to the row "T5" in Table 8.3.1.11.3.2-1. //@sic R5-106572, "correct description" sic@
      v_CellPowerList := {
        cs_CellPower(eutra_Cell1, v_T5_RS_EPRE_Cell1),
        cs_CellPower(eutra_Cell3, v_T5_RS_EPRE_Cell3)
      }; //@sic R5-106572 sic@
      f_EUTRA_SetCellPowerList(v_CellPowerList);
      
      //@siclog "Step 15a4" siclog@
      //Check: Does the UE transmit a MeasurementReport message on Cell 2 to report event A3 for Cell 3?
      SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell2,
                                      cr_MeasurementReport_Eutra_1Entry_both(2, v_PhysCellId_Cell3))); //@sic R5s100879, R5-106572 sic@
      f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.1.11 Step 15a4");
    }
    
    //@siclog "Step 16" siclog@
    //Check: Does the test result of CALL generic test procedure in 36.508 subclause 6.2,4.3  indicate that the UE is in E-UTRA RRC_CONNECTED state on Cell 2?
    f_EUTRA_508Check_ConnectedState(eutra_Cell2);
    
    //End TestBody
    //------------------------------------------------
    
    f_EUTRA_TestBody_Set(false);
    
    f_EUTRA_Postamble(eutra_Cell2, E2_CONNECTED); //@sic R5-103875 sic@
    
  } //end of testcase 8.3.1.11

  function f_TC_8_3_1_11a_EUTRA() runs on EUTRA_PTC
  { //@sic R5-120701, R5-120702 sic@
    /* Measurement configuration control and reporting / Intra Frequency measurements / Continuation of the measurements after RRC connection re-establishment / Single Frequency operation */
    var integer v_T0_RS_EPRE_Cell1 := -85;
    var integer v_T0_RS_EPRE_Cell2 := tsc_NonSuitableOffCellRS_EPRE; //@sic R5-103498 sic@
    
    var integer v_T1_RS_EPRE_Cell2 := -79;
   
    var integer v_T2_RS_EPRE_Cell1 := tsc_NonSuitableOffCellRS_EPRE; //@sic R5-103498 sic@
    
    var integer v_T3_RS_EPRE_Cell1 := -79;
    var integer v_T3_RS_EPRE_Cell2 := -85;
    
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var template(value) CellPowerList_Type v_CellPowerList;
    
    var PhysCellId v_PhysCellId_Cell1;
    var PhysCellId v_PhysCellId_Cell2;
    
    var Frequency_IE_Type v_Frequency_IE_f1;
    
    var ChannelBandwidthDependency_Type v_ChBandDependency_f1;

    var template(value) EUTRA_FDD_TDD_CellInfo_Type v_EUTRA_FDD_TDD_CellInfo_Cell2;
    var template (value) PhysicalConfigDedicated_AntennaInfo_Type v_AntennaInfo_Cell2;
    var SR_PUCCH_ResourceIndex_Type v_SR_PUCCH_ResourceIndex_Cell2;
    var SR_ConfigIndex_Type v_SR_ConfigIndex_Cell2; //@sic R5-102177 sic@
    var ShortMAC_I v_ShortMAC_I;
    var EUTRA_SecurityParams_Type v_Auth_Params;

    var float v_T304;
    
    //Initialize testcase
    f_EUTRA_Init(c2);
    
    v_PhysCellId_Cell1 := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell1);
    v_PhysCellId_Cell2 := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell2);
    
    v_Frequency_IE_f1 := f_EUTRA_CellInfo_GetFrequencyIEs(eutra_Cell1);
    
    v_ChBandDependency_f1 := f_EUTRA_BandDependentParam(v_Frequency_IE_f1.DL_ChBandwidth, v_Frequency_IE_f1.UL_ChBandwidth);
    
    v_EUTRA_FDD_TDD_CellInfo_Cell2 := f_EUTRA_CellInfo_GetFDD_TDD_Info(eutra_Cell2);
    v_AntennaInfo_Cell2 := f_EUTRA_CellInfo_GetAntennaInfoDedicated (eutra_Cell2);
    v_SR_PUCCH_ResourceIndex_Cell2 := f_EUTRA_CellInfo_GetSR_PUCCH_ResourceIndex (eutra_Cell2);
    v_SR_ConfigIndex_Cell2 := f_EUTRA_CellInfo_GetSR_ConfigIndex (eutra_Cell2); //@sic R5-102177 sic@
    
    //v_TimerValue := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 30.0);
    v_T304 := f_EUTRA_SetTimerToleranceMax(eutra_Cell2, rrcTimer, 1.0); //According to 36.508 cl. 4.6.5 Table 4.6.5-1
    
    //Set EPRE for RF Initial
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell1, v_T3_RS_EPRE_Cell1);
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell2, v_T1_RS_EPRE_Cell2);

    //Create and configure Cell 1, Cell 2
    f_EUTRA_CellConfig_Def(eutra_Cell1);
    
    f_EUTRA_CellConfig_Def(eutra_Cell2);
    
    //Preamble
    f_EUTRA_Preamble(eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def(eutra_Cell1);
    f_EUTRA_TestBody_Set(true);
    
    //Set EPRE for T0
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T0_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell2, v_T0_RS_EPRE_Cell2)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList); //@sic R5-106572, implement T0 after preamble sic@
    
    //------------------------------------------------
    //Start TestBody

    //@siclog "Step 1-2" siclog@
    //The SS transmits an RRCConnectionReconfiguration message to setup intra frequency measurements on Cell 1 and
    //receives an RRCConnectionReconfigurationComplete message to confirm the setup of intra frequency measurements on Cell 1.
    //@sic R5s110743 sic@
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                    cs_RRCConnectionReconfiguration_8_3_1_11_Step1_notpc25(v_RRC_TI,
                                                                                                           v_Frequency_IE_f1.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                           v_ChBandDependency_f1.AllowedMeasBandwidth));
    //@siclog "Step 3" siclog@
    //The SS changes Cell 2 power levels according to the row "T1" in Table 8.3.1.11a.3.2-1.
    v_CellPowerList := {
      cs_CellPower(eutra_Cell2, v_T1_RS_EPRE_Cell2)
    }; //@sic R5-106572 sic@
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 4" siclog@
    //The UE transmits a MeasurementReport message on Cell 1 to perform event A3 intra frequency reporting for Cell 2.
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1,
                                    cr_MeasurementReport_Eutra_1Entry_both(1, v_PhysCellId_Cell2))); //@sic R5s100879, R5-106572 sic@
    
    //Configure Cell2 to not send response on RACH preamble reception on Cell 2
    f_EUTRA_SS_ConfigRachProcedure(eutra_Cell2,
                                   omit,
                                   cs_RachProcedureConfig_NoResponse(f_EUTRA_CellInfo_GetDL_ChBandwidth (eutra_Cell2)));
    //@siclog "Step 5" siclog@
    //The SS transmits an RRCConnectionReconfiguration message including a mobilityControlInfo, to order the UE to perform intra frequency handover to Cell 2.
    f_EUTRA_RRC_ConnReconfigHO_IntraLTE_MobilitySecurity(eutra_Cell1,
                                                         eutra_Cell2,
                                                         f_Generate_cs_MobilityControlInfo_HO(eutra_Cell2, omit, omit),
                                                         cs_508SecurityConfigHO_IntraLTE);
    //stop periodic TA on source cell
    //@sic R5s100879 sic@
    f_EUTRA_SS_CommonCellConfig(eutra_Cell1, cas_PUCCH_Synch_Config_REQ(eutra_Cell1, cs_TimingInfo_Now, cs_PUCCH_Synch_None));
    
    //EXCEPTION: In parallel to the events described in step 6 the steps specified in Table 8.3.1.11a.3.2-3 should take place.
    
    //EXCEPTION: The steps 1 and 2 below are repeated for the duration of T304.
    //1. The UE attempts to perform the intra frequency handover using MAC Random Access Preamble on Cell 2.
    //2. The SS does not respond.
    f_Delay(v_T304);
    
    //@siclog "Step 6" siclog@
    //The SS changes Cell 1 power levels according to the row "T2" in Table 8.3.1.11a.3.2-1.
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T2_RS_EPRE_Cell1)
    }; //@sic R5-106572 sic@
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //Configure Cell2 to normal PRACH operation mode
    f_EUTRA_SS_ConfigRachProcedure_Def(eutra_Cell2, tsc_C_RNTI_Def);     /* @sic acc. to R5s100029 change 3 sic@ */

    //Calculate ShortMAC-I to be received in RRCConnectionReestablishment Request from UE in Step 7
    v_ShortMAC_I := f_Calculate_ShortMAC(eutra_Cell1, eutra_Cell2);
    
    //@siclog "Step 7" siclog@
    //Check: Does the UE transmit an RRCConnectionReestablishmentRequest message on Cell 2?
    SRB.receive(car_SRB0_RrcPdu_IND(eutra_Cell2,
                                    cr_508_RRCConnectionReestablishmentRequest(tsc_C_RNTI_Def,
                                                                               v_PhysCellId_Cell1, //@sic R5-110211, R5-106572 sic@
                                                                               handoverFailure,
                                                                               v_ShortMAC_I)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.1.11a Step 7");
    
    //Activate RRC security in Cell 2(SRB 1,2 and DRB 1)
    //@sic R5s100879 sic@
    v_Auth_Params := f_EUTRA_SS_AS_ActivateSecurity_HO_Reest(eutra_Cell2, f_EUTRA_Security_Get(), 0);
    f_EUTRA_Security_Set(v_Auth_Params);
    
    //@siclog "Step 8" siclog@
    //The SS transmits an RRCConnectionReestablishment message to resume SRB1 operation and re-activate security on Cell 2.
    f_EUTRA_RRC_RRCConnectionReestablishment_Def(eutra_Cell2); // @sic R5-120497, R5-120721 change 3 sic@

    //@siclog "Step 9" siclog@
    //The UE transmits an RRCConnectionReestablishmentComplete message on Cell 2.
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell2, cr_508_RRCConnectionReestablishmentComplete(v_RRC_TI)));

    //@siclog "Step 10-11" siclog@
    //The SS transmits an RRCConnectionReconfiguration message to resume existing radio bearer on Cell 2 and
    //receives an RRCConnectionReconfigurationComplete message on Cell 2.
    //@sic R5s110743 sic@
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell2,
                                                    cs_RRCConnReconfig_Resume_SRB2_DRBs(v_RRC_TI,
                                                                v_EUTRA_FDD_TDD_CellInfo_Cell2.cqi_ReportConfig,
                                                                v_EUTRA_FDD_TDD_CellInfo_Cell2.soundingRS_UL_Config,
                                                                v_AntennaInfo_Cell2,
                                                                v_SR_PUCCH_ResourceIndex_Cell2,
                                                                                        v_SR_ConfigIndex_Cell2));

    //@siclog "Step 12" siclog@
    //The SS changes Cell 1 and Cell 2 power levels according to the row "T3" in Table 8.3.1.11a.3.2-1.
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T3_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell2, v_T3_RS_EPRE_Cell2)
    }; //@sic R5-106572 sic@
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 13" siclog@
    //Check: Does the UE transmit a MeasurementReport message on Cell 2 to perform event A3 intra frequency reporting for Cell 1?
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell2,
                                    cr_MeasurementReport_Eutra_1Entry_both(1, v_PhysCellId_Cell1))); //@sic R5s100879, R5-106572 sic@
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.1.11a Step 13");
    
    //@siclog "Step 14" siclog@
    //Check: Does the test result of CALL generic test procedure in 36.508 subclause 6.4.2.3  indicate that the UE is in E-UTRA RRC_CONNECTED state on Cell 2?
    f_EUTRA_508Check_ConnectedState(eutra_Cell2);
    
    //End TestBody
    //------------------------------------------------
    
    f_EUTRA_TestBody_Set(false);
    
    f_EUTRA_Postamble(eutra_Cell2, E2_CONNECTED); //@sic R5-103875 sic@
    
  } //end of testcase 8.3.1.11a

  function f_TC_8_3_2_1_EUTRA() runs on EUTRA_PTC
  { // Measurement configuration control and reporting / Inter-RAT measurements / Event B2 / Measurement of GERAN cells
    var integer v_T0_RS_EPRE_Cell1 := -60;
    var integer v_T1_RS_EPRE_Cell1 := -80;
    var integer v_T2_RS_EPRE_Cell1 := -60;

    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    
    //@sic R5112614 sic@
    var Frequency_IE_Type v_Frequency_IE_Cell1;
    var ChannelBandwidthDependency_Type v_ChBandDependency_Cell1 ;
    
    var IRAT_CoOrd_SysInfo_Type v_GERANSysInfo, v_GERANSysInfof12, v_GERANSysInfof13;
    var ARFCN_ValueGERAN v_GERAN_ARFCN_f11; //Cell24
    var ExplicitListOfARFCNs v_ExplicitListOfARFCNs;
    var PhysCellIdGERAN v_GERAN_PhysChId_Cell24;
    var BandIndicatorGERAN v_BandIndicatorGERAN_Cell24;
    
    var float v_TimerValue_5s;
    var float v_TimerValue_10s;
    
    var default v_DefaultRef;

    //Initialize testcase
    f_EUTRA_Init(c5);
    
    v_TimerValue_5s := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 5.0);
    v_TimerValue_10s := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 10.0);
    
    //@sic R5112614 sic@
    v_Frequency_IE_Cell1 := f_EUTRA_CellInfo_GetFrequencyIEs (eutra_Cell1);
    v_ChBandDependency_Cell1 := f_EUTRA_BandDependentParam(v_Frequency_IE_Cell1.DL_ChBandwidth, v_Frequency_IE_Cell1.UL_ChBandwidth);
    
    //Acquire information of GERAN cells
    v_GERANSysInfo := f_IRAT_WaitForCoOrd_SysInfo(GERAN);
    v_GERANSysInfof12 := f_IRAT_WaitForCoOrd_SysInfo (GERAN);
    v_GERANSysInfof13 := f_IRAT_WaitForCoOrd_SysInfo (GERAN);
    
    v_GERAN_ARFCN_f11 := v_GERANSysInfo.Geran[0].Arfcn;
    
    v_ExplicitListOfARFCNs :=  f_ConvertGERANNeighCell (v_GERANSysInfof12.Geran[0].Arfcn, v_GERANSysInfof13.Geran[0]. Arfcn); // @sic R5-120604, R5s120290 sic@
    
    v_GERAN_PhysChId_Cell24 := {
      networkColourCode := v_GERANSysInfo.Geran[0].Ncc,
      baseStationColourCode := v_GERANSysInfo.Geran[0].Bcc
    }
    
    if (v_GERANSysInfo.Geran[0].BandIndicator == '0'B) {
      v_BandIndicatorGERAN_Cell24 := dcs1800;
    }
    else {
      v_BandIndicatorGERAN_Cell24 := pcs1900;
    }
    
    //Set EPRE for RF Initial
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell1, v_T0_RS_EPRE_Cell1);
    
    //Create and configure Cell1
    f_EUTRA_CellConfig_Def(eutra_Cell1);
    
    //Preamble
    f_EUTRA_Preamble(eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def(eutra_Cell1);
    
    //Set cell power: T0
    f_IRAT_SendCoOrd(GERAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower(eutra_Cell1, v_T0_RS_EPRE_Cell1);
    
    f_EUTRA_TestBody_Set(true);
    
    //------------------------------------------------
    //Start TestBody

    //@siclog "Step 1-2" siclog@
    //The SS transmits an RRCConnectionReconfiguration message to setup inter RAT measurement on Cell 1 and
    //receives an RRCConnectionReconfigurationComplete message to confirm the setup of inter RAT measurement on Cell 1.
    //@sic R5s110743 sic@
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                    cs_RRCConnectionReconfiguration_8_3_2_1_Step1(v_RRC_TI,
                                                                                                  v_Frequency_IE_Cell1.UL_DL_Earfcn.dl_CarrierFreq, //@sic R5112614 sic@
                                                                                                  v_ChBandDependency_Cell1.AllowedMeasBandwidth, //@sic R5112614 sic@
                                                                                                  v_GERAN_ARFCN_f11,
                                                                                                  v_BandIndicatorGERAN_Cell24,
                                                                                                  v_ExplicitListOfARFCNs));
    //@siclog "Step 3" siclog@
    //Check: Does the UE transmit a MeasurementReport message to report the event B2 during the next 10s?
    f_NoMeasurementReport(eutra_Cell1, v_TimerValue_10s, cr_MeasurementReport_CheckAny);
    
    //@siclog "Step 4" siclog@
    //The SS changes Cell 1 and Cell 24 parameters according to the row "T1" in table 8.3.2.1.3.2-1.
    f_IRAT_SendCoOrd(GERAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower(eutra_Cell1, v_T1_RS_EPRE_Cell1);
    
    //@siclog "Step 5" siclog@
    //Check: Does the UE transmit a MeasurementReport message to report the event B2 for Cell 24?
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1,
                                    cr_MeasurementReport_Geran_1Entry(1, v_GERAN_PhysChId_Cell24)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.2.1 Step 5");
    
    //Activate the default to receive measurement reports for Cell 24
    v_DefaultRef := activate(a_EUTRA_AddDefault_PeriodicalMeasurmentReport(eutra_Cell1, cr_MeasurementReport_CheckAny));
    
    //@siclog "Step 6" siclog@
    //The SS changes Cell 1 and Cell 24 parameters according to the row "T2" in table 8.3.2.1.3.2-1.
    f_IRAT_SendCoOrd(GERAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower(eutra_Cell1, v_T2_RS_EPRE_Cell1);
    
    //@siclog "Step 7" siclog@
    //Wait and ignore MeasurementReport messages for 5 s to allow change of power levels for Cells 1 and Cell 24.
    f_Delay(v_TimerValue_5s);
    deactivate(v_DefaultRef);
    
    //@siclog "Step 8" siclog@
    //Check: Does the UE transmit a MeasurementReport message to report the event B2 during the next 10s?
    f_NoMeasurementReport(eutra_Cell1, v_TimerValue_10s, cr_MeasurementReport_CheckAny);
    
    //@siclog "Step 9" siclog@
    //Check: Does the test result of CALL generic procedure indicate that the UE is in E-UTRA RRC_CONNECTED state on Cell 1?
    f_EUTRA_508Check_ConnectedState(eutra_Cell1);
    
    //End TestBody
    //------------------------------------------------
    
    f_EUTRA_TestBody_Set(false);
    
    //tell the GERAN component that the test is over
    f_IRAT_SendCoOrd(GERAN, cms_IRAT_Trigger);
    
    f_EUTRA_Postamble(eutra_Cell1, E2_CONNECTED); //@sic R5-103875 sic@
    
  } //end of testcase 8.3.2.1

  function f_TC_8_3_2_2_EUTRA() runs on EUTRA_PTC
  { /* Measurement configuration control and reporting / Inter-RAT measurements / Periodic reporting / Measurement of GERAN cells */
    var integer v_T0_RS_EPRE_Cell1 := -60;
    var integer v_T1_RS_EPRE_Cell1 := -60;
    var integer v_T2_RS_EPRE_Cell1 := -60;
    
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    
    //@sic R5112614 sic@
    var Frequency_IE_Type v_Frequency_IE_Cell1;
    var ChannelBandwidthDependency_Type v_ChBandDependency_Cell1 ;
    
    var IRAT_CoOrd_SysInfo_Type v_GERANSysInfo;
    var ARFCN_ValueGERAN v_GERAN_ARFCN_f11; //Cell24
    var ARFCN_ValueGERAN v_GERAN_ARFCN_f12; //Cell25
    var ARFCN_ValueGERAN v_GERAN_ARFCN_f13; //Cell26
    var PhysCellIdGERAN v_GERAN_PhysChId_Cell25;
    var PhysCellIdGERAN v_GERAN_PhysChId_Cell26;
    var BandIndicatorGERAN v_BandIndicatorGERAN_Cell25;
    var BandIndicatorGERAN v_BandIndicatorGERAN_Cell26;
    
    var float v_TimerValue_5s;
    var float v_TimerValue_10s;
    var float v_TimerValue_30s;
    
    var default v_DefaultRef;
    
    //Initialize testcase
    f_EUTRA_Init(c5);
    
    v_TimerValue_5s :=  f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 5.0);
    v_TimerValue_10s := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 10.0);
    v_TimerValue_30s := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 30.0);
    
    //@sic R5112614 sic@
    v_Frequency_IE_Cell1 := f_EUTRA_CellInfo_GetFrequencyIEs (eutra_Cell1);
    v_ChBandDependency_Cell1 := f_EUTRA_BandDependentParam(v_Frequency_IE_Cell1.DL_ChBandwidth, v_Frequency_IE_Cell1.UL_ChBandwidth);
    
    //Acquire information of GERAN cells (Cell24)
    v_GERANSysInfo := f_IRAT_WaitForCoOrd_SysInfo(GERAN);
    v_GERAN_ARFCN_f11 := v_GERANSysInfo.Geran[0].Arfcn;
    
    //Acquire information of GERAN cells (Cell25)
    v_GERANSysInfo := f_IRAT_WaitForCoOrd_SysInfo(GERAN);
    v_GERAN_ARFCN_f12 := v_GERANSysInfo.Geran[0].Arfcn;
    
    v_GERAN_PhysChId_Cell25 := {
      networkColourCode := v_GERANSysInfo.Geran[0].Ncc,
      baseStationColourCode := v_GERANSysInfo.Geran[0].Bcc
    }
    
    if (v_GERANSysInfo.Geran[0].BandIndicator == '0'B) {
      v_BandIndicatorGERAN_Cell25 := dcs1800;
    }
    else {
      v_BandIndicatorGERAN_Cell25 := pcs1900;
    }
    
    //Acquire information of GERAN cells (Cell26)
    v_GERANSysInfo := f_IRAT_WaitForCoOrd_SysInfo(GERAN);
    v_GERAN_ARFCN_f13 := v_GERANSysInfo.Geran[0].Arfcn;
    
    v_GERAN_PhysChId_Cell26 := {
      networkColourCode := v_GERANSysInfo.Geran[0].Ncc,
      baseStationColourCode := v_GERANSysInfo.Geran[0].Bcc
    }
    
    if (v_GERANSysInfo.Geran[0].BandIndicator == '0'B) {
      v_BandIndicatorGERAN_Cell26 := dcs1800;
    }
    else {
      v_BandIndicatorGERAN_Cell26 := pcs1900;
    }
    
    //Set EPRE for RF Initial
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell1, v_T0_RS_EPRE_Cell1);
    
    //Create and configure Cell1
    f_EUTRA_CellConfig_Def(eutra_Cell1);
    
    //Preamble
    f_EUTRA_Preamble(eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def(eutra_Cell1);
    
    //Set cell power: T0
    f_IRAT_SendCoOrd(GERAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower(eutra_Cell1, v_T0_RS_EPRE_Cell1);
    
    f_EUTRA_TestBody_Set(true);
    
    //------------------------------------------------
    //Start TestBody

    //@siclog "Step 1-2" siclog@
    //The SS transmits an RRCConnectionReconfiguration message to setup inter RAT measurement on Cell 1 and
    //receives an RRCConnectionReconfigurationComplete message to confirm the setup of inter RAT measurement on Cell 1.
    //@sic R5s110743 sic@
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                    cs_RRCConnectionReconfiguration_8_3_2_2_Step1(v_RRC_TI,
                                                                                                  v_Frequency_IE_Cell1.UL_DL_Earfcn.dl_CarrierFreq, //@sic R5112614 sic@
                                                                                                  v_ChBandDependency_Cell1.AllowedMeasBandwidth, //@sic R5112614 sic@
                                                                                                  v_GERAN_ARFCN_f12,
                                                                                                  v_BandIndicatorGERAN_Cell25,
                                                                                                  f_ConvertGERANNeighCell (v_GERAN_ARFCN_f11, v_GERAN_ARFCN_f13))); //@sic R5-120604, R5s120290, Rs120310 sic@
    //@siclog "Step 3" siclog@
    //The SS power "On" Cell 25 according to the row "T1" in table 8.3.2.2.3.2-1.
    f_IRAT_SendCoOrd(GERAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower(eutra_Cell1, v_T1_RS_EPRE_Cell1);

    //@siclog "Step 4" siclog@
    //Wait and ignore MeasurementReport messages for 5s to allow power "On" for Cell 25.
    v_DefaultRef := activate(a_EUTRA_AddDefault_PeriodicalMeasurmentReport(eutra_Cell1,
                                                                           cr_MeasurementReport_CheckAny));
    f_Delay(v_TimerValue_5s);
    
    //EXCEPTION: In parallel to events described in steps 5 to 6 the steps specified in table 8.3.2.2.3.2-3 shall take place
    
    //@siclog "Step 5" siclog@
    //Wait for 30 s to ensure that the UE performs a inter-RAT periodical reporting.
    f_Check_EUTRA_HighFreq_PeriodicalMeasurmentReport(eutra_Cell1,
                                                      v_TimerValue_30s,
                                                      cr_MeasurementReport_Geran_1Entry(1, v_GERAN_PhysChId_Cell25),
                                                      1.024);
    //@siclog "Step 6" siclog@
    //The SS power "Off" Cell 25 and power "On" Cell 26 according to the row "T2" in table 8.3.2.2.3.2-1.
    f_IRAT_SendCoOrd(GERAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower(eutra_Cell1, v_T2_RS_EPRE_Cell1);
    
    //@siclog "Step 7" siclog@
    //Wait and ignore MeasurementReport messages for 5s to allow power "Off" and power "On" for Cell 25 and Cell 26 respectively.
    f_Delay(v_TimerValue_5s);
    
    //EXCEPTION: In parallel to events described in steps 8 to 9 the steps specified in table 8.3.2.2.3.2-4 shall take place
    
    //@siclog "Step 8" siclog@
    //Wait for 30 s to ensure that the UE performs a inter-RAT periodical reporting.
    f_Check_EUTRA_HighFreq_PeriodicalMeasurmentReport(eutra_Cell1,
                                                      v_TimerValue_30s,
                                                      cr_MeasurementReport_Geran_1Entry(1, v_GERAN_PhysChId_Cell26),
                                                      1.024); //@sic R5s120244 sic@
    
    //@siclog "Step 9-10" siclog@
    //The SS transmits an RRCConnectionReconfiguration message to remove inter-RAT measurement and
    //receives an RRCConnectionReconfigurationComplete message to confirm the remove of inter-RAT measurement.1.
    //@sic R5s110743 sic@
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                    cs_RRCConnectionReconfiguration_RemoveMeasId_2Entries(v_RRC_TI, 1, 2));
    deactivate(v_DefaultRef);
    
    //@siclog "Step 11" siclog@
    //Check: Does the UE attempt to transmit an uplink message for the next 10s?
    f_NoMeasurementReport(eutra_Cell1, v_TimerValue_10s, cr_MeasurementReport_CheckAny);
    
    //End TestBody
    //------------------------------------------------
    
    f_EUTRA_TestBody_Set(false);
    
    //tell the GERAN component that the test is over
    f_IRAT_SendCoOrd(GERAN, cms_IRAT_Trigger);
    
    f_EUTRA_Postamble(eutra_Cell1, E2_CONNECTED); //@sic R5-103875 sic@
    
  } //end of testcase 8.3.2.2

  function f_TC_8_3_2_3_EUTRA() runs on EUTRA_PTC
  { // Measurement configuration control and reporting / Inter-RAT measurements / Event B2 / Measurement of UTRAN cells
    var integer v_T0_RS_EPRE_Cell1 := -60;
    var integer v_T1_RS_EPRE_Cell1 := -80;
    var integer v_T2_RS_EPRE_Cell1 := -60;
    
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    
    var IRAT_CoOrd_SysInfo_Type v_UTRANSysInfo;
    var UTRAN_FDD_TDD_Type v_UTRAN_FDD_TDD;
    var integer v_UTRAN_ARFCN_f8; //Cell5, Cell7
    var integer v_UTRAN_PhysChId_Cell7;
    var template(present) UL_DCCH_Message v_MeasRpt;
    
    var float v_TimerValue_5s; //@sic R5s110037 sic@
    var float v_TimerValue_10s; //@sic R5s110037 sic@

    var default v_DefaultRef;
    
    //@sic R5110037 sic@
    var Frequency_IE_Type v_Frequency_IE_Cell1;
    var ChannelBandwidthDependency_Type v_ChBandDependency_Cell1 ;

    //Initialize testcase
    f_EUTRA_Init(c4);

    //@sic R5s110037 sic@
    v_TimerValue_5s := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 5.0);
    v_TimerValue_10s := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 10.0);

    //@sic R5s110037 sic@
    v_Frequency_IE_Cell1 := f_EUTRA_CellInfo_GetFrequencyIEs(eutra_Cell1);
    v_ChBandDependency_Cell1 := f_EUTRA_BandDependentParam(v_Frequency_IE_Cell1.DL_ChBandwidth,
                                                           v_Frequency_IE_Cell1.UL_ChBandwidth);
    //Acquire information of UTRAN cells
    v_UTRANSysInfo := f_IRAT_WaitForCoOrd_SysInfo(UTRAN);
    if (ischosen(v_UTRANSysInfo.Utran[0].FDD)) {
      v_UTRAN_FDD_TDD := UTRAN_FDD;
      v_UTRAN_ARFCN_f8 := v_UTRANSysInfo.Utran[0].FDD.Freq;
      v_UTRAN_PhysChId_Cell7 := v_UTRANSysInfo.Utran[0].FDD.ScramblingCode;
    }
    else {
      v_UTRAN_FDD_TDD := UTRAN_TDD;
      v_UTRAN_ARFCN_f8 := v_UTRANSysInfo.Utran[0].TDD.Freq;
      v_UTRAN_PhysChId_Cell7 := v_UTRANSysInfo.Utran[0].TDD.CellParametersID;
    }
    
    //Set EPRE for RF Initial
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell1, v_T0_RS_EPRE_Cell1);
    
    //Create and configure Cell1
    f_EUTRA_CellConfig_Def(eutra_Cell1);
    
    //Preamble
    f_EUTRA_Preamble(eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def(eutra_Cell1);
    
    //Set cell power: T0
    //@sic R5s100751 sic@
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower(eutra_Cell1, v_T0_RS_EPRE_Cell1);
    
    f_EUTRA_TestBody_Set(true);
    
    //------------------------------------------------
    //Start TestBody

    //@siclog "Step 1-2" siclog@
    //The SS sends RRC Connection Reconfiguration for setting up inter RAT measurement on Cell 1 and
    //receives an RRCConnectionReconfigurationComplete message to confirm the setup of inter RAT measurement on Cell 1.
    //@sic R5s110743 sic@
    if (v_UTRAN_FDD_TDD == UTRAN_FDD) {
      f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                      cs_RRCConnectionReconfiguration_8_3_2_3_Step1_FDD(v_RRC_TI,
                                                                                                        v_Frequency_IE_Cell1.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                        v_ChBandDependency_Cell1.AllowedMeasBandwidth,
                                                                                                        v_UTRAN_ARFCN_f8,
                                                                                                        v_UTRAN_PhysChId_Cell7)); //@sic R5s110037, R5-106182 sic@
    }
    else {
      f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                      cs_RRCConnectionReconfiguration_8_3_2_3_Step1_TDD(v_RRC_TI,
                                                                                                        v_UTRAN_ARFCN_f8,
                                                                                                        v_UTRAN_PhysChId_Cell7)); //@sic R5-106182 sic@
    }
    //@siclog "Step 3" siclog@
    //Check: Does the UEtransmit a Measurement Report message on Cell 1 to report the event B2 during the next 10s?
    f_NoMeasurementReport(eutra_Cell1, v_TimerValue_10s, cr_MeasurementReport_CheckAny);
    
    //@siclog "Step 4" siclog@
    //The SS changes Cell 1 and Cell 7 parameters according to the row "T1" in table 8.3.2.3.3.2-1
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower(eutra_Cell1, v_T1_RS_EPRE_Cell1);
    
    //@siclog "Step 5" siclog@
    //Check: Does the UE transmit a MeasurementReport message to report the event B2 for Cell 7?
    if (v_UTRAN_FDD_TDD == UTRAN_FDD) {
      v_MeasRpt := cr_MeasurementReport_Utran_1Entry_FDD(1, v_UTRAN_PhysChId_Cell7);
    }
    else {
      v_MeasRpt := cr_MeasurementReport_Utran_1Entry_TDD(1, v_UTRAN_PhysChId_Cell7);
    }
    
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1, v_MeasRpt));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.2.3 Step 5");
    
    //Activate the default to receive periodical reports for Cell 7
    v_DefaultRef := activate(a_EUTRA_AddDefault_PeriodicalMeasurmentReport(eutra_Cell1,
                                                                           cr_MeasurementReport_CheckAny));
    //@siclog "Step 6" siclog@
    //The SS changes Cell 1 and Cell 7 parameters according to the row "T2" in table 8.3.2.3.3.2-1
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower(eutra_Cell1, v_T2_RS_EPRE_Cell1);
    
    //@siclog "Step 6A" siclog@ //@sic R5-106182 sic@
    //Wait and ignore MeasurementReport messages for 5 s to allow change of power levels for Cells 1 and Cell 7.
    f_Delay(v_TimerValue_5s); //@sic R5-106182 sic@
    
    //Deactivate the deault to stop receiving periodical Measurement Reports
    deactivate(v_DefaultRef);
    
    //@siclog "Step 7" siclog@
    //Check: Does the UE transmit a Measurement Report message on Cell 1 to report the event B2 during the next 10s?
    f_NoMeasurementReport(eutra_Cell1, v_TimerValue_10s, cr_MeasurementReport_CheckAny);
    
    //@siclog "Step 8" siclog@
    //Check: Does the test result of generic test procedure in TS 36.508 subclause 6.4.2.3 indicate that the UE is in E-UTRA RRC_CONNECTED state on Cell 1?
    f_EUTRA_508Check_ConnectedState(eutra_Cell1);
    
    //End TestBody
    //------------------------------------------------
    
    f_EUTRA_TestBody_Set(false);
    
    //tell the UTRAN component that the test is over
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    
    f_EUTRA_Postamble(eutra_Cell1, E2_CONNECTED); //@sic R5-103875 sic@
    
  } //end of testcase 8.3.2.3

  function f_TC_8_3_2_4_EUTRA() runs on EUTRA_PTC
  { // Measurement configuration control and reporting / Inter-RAT measurements / Periodic reporting / Measurement of UTRAN cells
    var integer v_T0_RS_EPRE_Cell1 := -75;
    var integer v_T2_RS_EPRE_Cell1 := -75;

    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    
    //@sic R5112614 sic@
    var Frequency_IE_Type v_Frequency_IE_Cell1;
    var ChannelBandwidthDependency_Type v_ChBandDependency_Cell1 ;

    var IRAT_CoOrd_SysInfo_Type v_UTRANSysInfo;
    var UTRAN_FDD_TDD_Type v_UTRAN_FDD_TDD;
    var integer v_UTRAN_ARFCN_f8; //Cell5, Cell7
    var integer v_UTRAN_PhysChId_Cell5;
    var integer v_UTRAN_PhysChId_Cell7;
    
    var template (present) UL_DCCH_Message v_MeasRpt;
    var template(present) UL_DCCH_Message v_MeasRpt_opt; //@sic R5s110435 Additional change from R&S Corrections to Meas. Reporting sic@
    
    var float v_TimerValue_5s;
    var float v_TimerValue_10s;
    var float v_TimerValue_30s;
    
    var default v_DefaultRef;
    
    //Initialize testcase
    f_EUTRA_Init(c4);
    
    v_TimerValue_5s := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 5.0);
    v_TimerValue_10s := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 10.0);
    v_TimerValue_30s := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 30.0);
    
    //@sic R5112614 sic@
    v_Frequency_IE_Cell1 := f_EUTRA_CellInfo_GetFrequencyIEs (eutra_Cell1);
    v_ChBandDependency_Cell1 := f_EUTRA_BandDependentParam(v_Frequency_IE_Cell1.DL_ChBandwidth, v_Frequency_IE_Cell1.UL_ChBandwidth);
    
    //Acquire information of UTRAN cells
    v_UTRANSysInfo := f_IRAT_WaitForCoOrd_SysInfo(UTRAN);
    if (ischosen(v_UTRANSysInfo.Utran[0].FDD)) {
      v_UTRAN_FDD_TDD := UTRAN_FDD;
      v_UTRAN_ARFCN_f8 := v_UTRANSysInfo.Utran[0].FDD.Freq;
      v_UTRAN_PhysChId_Cell5 := v_UTRANSysInfo.Utran[0].FDD.ScramblingCode;
    }
    else {
      v_UTRAN_FDD_TDD := UTRAN_TDD;
      v_UTRAN_ARFCN_f8 := v_UTRANSysInfo.Utran[0].TDD.Freq;
      v_UTRAN_PhysChId_Cell5 := v_UTRANSysInfo.Utran[0].TDD.CellParametersID;
    }
    
    // Get Cell Parameters for UTRAN cell7
    v_UTRANSysInfo := f_IRAT_WaitForCoOrd_SysInfo(UTRAN);
    if (ischosen(v_UTRANSysInfo.Utran[0].FDD)) {
      v_UTRAN_PhysChId_Cell7 := v_UTRANSysInfo.Utran[0].FDD.ScramblingCode;
    }
    else {
      v_UTRAN_PhysChId_Cell7 := v_UTRANSysInfo.Utran[0].TDD.CellParametersID;
    }
    
    //Set EPRE for RF Initial
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell1, v_T0_RS_EPRE_Cell1);
    
    //Create and configure Cell1
    f_EUTRA_CellConfig_Def(eutra_Cell1);
    
    //Preamble
    f_EUTRA_Preamble(eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def(eutra_Cell1);

    //Set cell power: T0
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower(eutra_Cell1, v_T0_RS_EPRE_Cell1);
    
    f_EUTRA_TestBody_Set(true);
    
    //------------------------------------------------
    //Start TestBody

    //@siclog "Step 1-2" siclog@
    //The SS transmits an RRCConnectionReconfiguration message including measConfig to setup measurements and periodical reporting for UTRA cells and
    //receives an RRCConnectionReconfigurationComplete message.
    //@sic R5s110743 sic@
    if (v_UTRAN_FDD_TDD == UTRAN_FDD) {
      f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                      cs_RRCConnectionReconfiguration_8_3_2_4_Step1_FDD(v_RRC_TI,
                                                                                                        v_Frequency_IE_Cell1.UL_DL_Earfcn.dl_CarrierFreq, //@sic R5112614 sic@
                                                                                                        v_ChBandDependency_Cell1.AllowedMeasBandwidth, //@sic R5112614 sic@
                                                                                                        v_UTRAN_ARFCN_f8,
                                                                                                        v_UTRAN_PhysChId_Cell5,
                                                                                                        v_UTRAN_PhysChId_Cell7));
    }
    else {
      f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                      cs_RRCConnectionReconfiguration_8_3_2_4_Step1_TDD(v_RRC_TI,
                                                                                                        v_Frequency_IE_Cell1.UL_DL_Earfcn.dl_CarrierFreq, //@sic R5112614 sic@
                                                                                                        v_ChBandDependency_Cell1.AllowedMeasBandwidth, //@sic R5112614 sic@
                                                                                                        v_UTRAN_ARFCN_f8,
                                                                                                        v_UTRAN_PhysChId_Cell5,
                                                                                                        v_UTRAN_PhysChId_Cell7));
    }
    //EXCEPTION: In parallel to events described in steps 3 to 4 the steps specified in table 8.3.2.4.3.2-3 shall take place
    v_DefaultRef := activate(a_EUTRA_AddDefault_PeriodicalMeasurmentReport(eutra_Cell1, cr_MeasurementReport_CheckAny));
    
    //@siclog "Step 3" siclog@
    //Wait for 30 s to ensure that the UE performs a periodical reporting of UTRA cells.
    if (v_UTRAN_FDD_TDD == UTRAN_FDD) {
      v_MeasRpt := cr_MeasurementReport_Utran_1Entry_FDD(1, v_UTRAN_PhysChId_Cell5);
    }
    else {
      v_MeasRpt := cr_MeasurementReport_Utran_1Entry_TDD(1, v_UTRAN_PhysChId_Cell5);
    }
    f_Check_EUTRA_HighFreq_PeriodicalMeasurmentReport(eutra_Cell1,
                                                      v_TimerValue_30s,
                                                      v_MeasRpt,
                                                      1.024);
    
    //@siclog "Step 4" siclog@
    //The SS sets the cell-specific reference signal levels and switches Cell 7 on according to row "T1" in table 8.3.2.4.3.2-1.
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    //@sic R5s110435 Change1 sic@
    
    //@siclog "Step 5" siclog@
    //Wait and ignore MeasurementReport messages for 5 s to allow for the switching of cells.
    f_Delay(v_TimerValue_5s);

    //EXCEPTION: In parallel to events described in steps 6 to 7 the steps specified in table 8.3.2.4.3.2-4 shall take place
    
    //@siclog "Step 6" siclog@
    //Wait for 30 s to ensure that the UE performs a periodical reporting of UTRA cells.
    if (v_UTRAN_FDD_TDD == UTRAN_FDD) {
      v_MeasRpt := cr_MeasurementReport_Utran_2Entries_FDD(1, v_UTRAN_PhysChId_Cell5, v_UTRAN_PhysChId_Cell7);
    }
    else {
      v_MeasRpt := cr_MeasurementReport_Utran_2Entries_TDD(1, v_UTRAN_PhysChId_Cell5, v_UTRAN_PhysChId_Cell7);
    }
    f_Check_EUTRA_HighFreq_PeriodicalMeasurmentReport(eutra_Cell1,
                                                      v_TimerValue_30s,
                                                      v_MeasRpt,
                                                      1.024);
    
    //@siclog "Step 7" siclog@
    //The SS sets the cell-specific reference signal levels and switches Cell 5 "Off" according to row "T2" in table 8.3.2.4.3.2-1.
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower(eutra_Cell1, v_T2_RS_EPRE_Cell1);
    
    //@siclog "Step 8" siclog@
    //Wait and ignore MeasurementReport messages for 5 s to allow for the switching of cells.
    f_Delay(v_TimerValue_5s);
    
    //EXCEPTION: In parallel to events described in steps 9 to 10 the steps specified in table 8.3.2.4.3.2-5 shall take place
    
    //@siclog "Step 9" siclog@
    //Wait for 30 s to ensure that the UE performs a periodical reporting of UTRA cells.
    if (v_UTRAN_FDD_TDD == UTRAN_FDD) {
      v_MeasRpt := cr_MeasurementReport_Utran_1Entry_FDD(1, v_UTRAN_PhysChId_Cell7);
      v_MeasRpt_opt := cr_MeasurementReport_Utran_2Entries_FDD(1, v_UTRAN_PhysChId_Cell5, v_UTRAN_PhysChId_Cell7); //@sic R5s110435 Additional change from R&S Corrections to Meas. Reporting sic@
    }
    else {
      v_MeasRpt := cr_MeasurementReport_Utran_1Entry_TDD(1, v_UTRAN_PhysChId_Cell7);
      v_MeasRpt_opt := cr_MeasurementReport_Utran_2Entries_TDD(1, v_UTRAN_PhysChId_Cell5, v_UTRAN_PhysChId_Cell7); //@sic R5s110435 Additional change from R&S Corrections to Meas. Reporting sic@
    }
    f_Check_EUTRA_HighFreq_PeriodicalMeasurmentReport(eutra_Cell1,
                                                      v_TimerValue_30s,
                                                      (v_MeasRpt, v_MeasRpt_opt), //@sic R5s110435 Additional change from R&S Corrections to Meas. Reporting sic@
                                                      1.024);

    //@siclog "Step 10-11" siclog@
    //The SS transmits an RRCConnectionReconfiguration message including measConfig to remove measId for periodic reporting and
    //receives an RRCConnectionReconfigurationComplete message
    //@sic R5s110743 sic@
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                    cs_RRCConnectionReconfiguration_RemoveMeasId_1Entry(v_RRC_TI, 1));
    //Deactivate the deault to stop receiving periodical Measurement Reports
    deactivate(v_DefaultRef);
    
    //@siclog "Step 12" siclog@
    //Check: Does the UE attempt to transmit an uplink message for the next 10s?
    f_NoMeasurementReport(eutra_Cell1, v_TimerValue_10s, cr_MeasurementReport_CheckAny);
    
    //End TestBody
    //------------------------------------------------
    
    f_EUTRA_TestBody_Set(false);
    
    //tell the UTRAN component that the test is over
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    
    f_EUTRA_Postamble(eutra_Cell1, E2_CONNECTED); //@sic R5-103875 sic@
    
  }; //end of testcase 8.3.2.4

  function f_TC_8_3_2_5_EUTRA() runs on EUTRA_PTC
  { /* Measurement configuration control and reporting / Inter-RAT measurements / Periodic reporting / Measurements of E-UTRAN, UTRAN and GERAN cells */
    var integer v_T0_RS_EPRE_Cell1 := -60;
    
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    
    //@sic R5112614 sic@
    var Frequency_IE_Type v_Frequency_IE_Cell1;
    var ChannelBandwidthDependency_Type v_ChBandDependency_Cell1 ;
    
    var IRAT_CoOrd_SysInfo_Type v_UTRANSysInfo;
    var UTRAN_FDD_TDD_Type v_UTRAN_FDD_TDD;
    var integer v_UTRAN_ARFCN_f8; //Cell5, Cell7
    var integer v_UTRAN_PhysChId_Cell5;
    var template(present) UL_DCCH_Message v_MeasRpt;
    
    var IRAT_CoOrd_SysInfo_Type v_GERANSysInfo;
    var ARFCN_ValueGERAN v_GERAN_ARFCN_f11; //Cell24
    var PhysCellIdGERAN v_GERAN_PhysChId_Cell24;
    var BandIndicatorGERAN v_BandIndicatorGERAN_Cell24;
    
    var float v_TimerValue_15s; //@sic R5-123119 sic@
    var float v_TimerValue_10s;
    var float v_TimerValue_30s;
    
    var default v_DefaultRef;
    
    //Initialize testcase
    f_EUTRA_Init(c10);
    
    v_TimerValue_15s := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 15.0); //@sic R5-123119 sic@
    v_TimerValue_10s := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 10.0);
    v_TimerValue_30s := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 30.0);
    
    //@sic R5112614 sic@
    v_Frequency_IE_Cell1 := f_EUTRA_CellInfo_GetFrequencyIEs (eutra_Cell1);
    v_ChBandDependency_Cell1 := f_EUTRA_BandDependentParam(v_Frequency_IE_Cell1.DL_ChBandwidth, v_Frequency_IE_Cell1.UL_ChBandwidth);
    
    //Acquire information of UTRAN cells
    v_UTRANSysInfo := f_IRAT_WaitForCoOrd_SysInfo(UTRAN);
    if (ischosen(v_UTRANSysInfo.Utran[0].FDD)) {
      v_UTRAN_FDD_TDD := UTRAN_FDD;
      v_UTRAN_ARFCN_f8 := v_UTRANSysInfo.Utran[0].FDD.Freq;
      v_UTRAN_PhysChId_Cell5 := v_UTRANSysInfo.Utran[0].FDD.ScramblingCode;
    }
    else {
      v_UTRAN_FDD_TDD := UTRAN_FDD;
      v_UTRAN_ARFCN_f8 := v_UTRANSysInfo.Utran[0].TDD.Freq;
      v_UTRAN_PhysChId_Cell5 := v_UTRANSysInfo.Utran[0].TDD.CellParametersID;
    }
    
    //Acquire information of GERAN cells
    v_GERANSysInfo := f_IRAT_WaitForCoOrd_SysInfo(GERAN);
    //@sic R5-123119 sic@
    
    v_GERAN_ARFCN_f11 := v_GERANSysInfo.Geran[0].Arfcn;
    
    // @sic R5-120604, R5s120290 sic@
    //@sic R5-123119 sic@
    
    v_GERAN_PhysChId_Cell24 := {
      networkColourCode := v_GERANSysInfo.Geran[0].Ncc,
      baseStationColourCode := v_GERANSysInfo.Geran[0].Bcc
    }
    
    if (v_GERANSysInfo.Geran[0].BandIndicator == '0'B) {
      v_BandIndicatorGERAN_Cell24 := dcs1800;
    }
    else {
      v_BandIndicatorGERAN_Cell24 := pcs1900;
    }
    
    //Set EPRE for RF Initial
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell1, v_T0_RS_EPRE_Cell1);
    
    //Create and configure Cell1
    f_EUTRA_CellConfig_Def(eutra_Cell1);
    
    //Preamble
    f_EUTRA_Preamble(eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def(eutra_Cell1);
    
    //Set cell power: T0
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    f_IRAT_SendCoOrd(GERAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower(eutra_Cell1, v_T0_RS_EPRE_Cell1);
    
    f_EUTRA_TestBody_Set(true);
    
    //------------------------------------------------
    //Start TestBody
    
    //@siclog "Step 1-2" siclog@
    //The SS transmits an RRCConnectionReconfiguration message to setup inter-RAT measurement and
    //receives n RRCConnectionReconfigurationComplete message to confirm the setup of inter-RAT measurement.
    //@sic R5s110743 sic@
    if (v_UTRAN_FDD_TDD == UTRAN_FDD) {
      f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                      cs_RRCConnectionReconfiguration_8_3_2_5_Step1_FDD(v_RRC_TI,
                                                                                                        v_Frequency_IE_Cell1.UL_DL_Earfcn.dl_CarrierFreq, //@sic R5112614 sic@
                                                                                                        v_ChBandDependency_Cell1.AllowedMeasBandwidth, //@sic R5112614 sic@
                                                                                                        v_UTRAN_ARFCN_f8,
                                                                                                        v_UTRAN_PhysChId_Cell5,
                                                                                                        v_GERAN_ARFCN_f11,
                                                                                                        v_BandIndicatorGERAN_Cell24)); //@sic R5-123119 sic@
    }
    else {
      f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                      cs_RRCConnectionReconfiguration_8_3_2_5_Step1_TDD(v_RRC_TI,
                                                                                                        v_Frequency_IE_Cell1.UL_DL_Earfcn.dl_CarrierFreq, //@sic R5112614 sic@
                                                                                                        v_ChBandDependency_Cell1.AllowedMeasBandwidth, //@sic R5112614 sic@
                                                                                                        v_UTRAN_ARFCN_f8,
                                                                                                        v_UTRAN_PhysChId_Cell5,
                                                                                                        v_GERAN_ARFCN_f11,
                                                                                                        v_BandIndicatorGERAN_Cell24)); //@sic R5-123119 sic@
    }
    //@siclog "Step 3" siclog@
    //The SS power "On" Cell 5 according to the row "T1" in table 8.3.2.5.3.2-1.
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    
    //@siclog "Step 4" siclog@
    //Wait and ignore MeasurementReport messages for 15s to allow power "On" for Cell 5 and to allow UE to measure the neighbouring cells.
    fl_WaitAndIgnoreMeasurementReport(eutra_Cell1, v_TimerValue_15s, cr_MeasurementReport_CheckAny); //@sic R5-123119 sic@
    
    //EXCEPTION: In parallel to events described in step 5 the steps specified in table 8.3.2.5.3.2-3 shall take place
    v_DefaultRef := activate(a_EUTRA_AddDefault_PeriodicalMeasurmentReport(eutra_Cell1, cr_MeasurementReport_CheckAny));
    
    //@siclog "Step 5" siclog@
    //Wait for 30 s to ensure that the UE performs a inter-RAT periodical reporting.
    if (v_UTRAN_FDD_TDD == UTRAN_FDD) {
      v_MeasRpt := cr_MeasurementReport_Utran_1Entry_FDD(1, v_UTRAN_PhysChId_Cell5);
    }
    else {
      v_MeasRpt := cr_MeasurementReport_Utran_1Entry_TDD(1, v_UTRAN_PhysChId_Cell5);
    }
    f_Check_EUTRA_HighFreq_PeriodicalMeasurmentReport(eutra_Cell1,
                                                      v_TimerValue_30s,
                                                      v_MeasRpt,
                                                      1.024);
    
    //@siclog "Step 6" siclog@
    //The SS power "Off" Cell 5 and power "On" Cell 24 according to the row "T2" in table 8.3.2.5.3.2-1.
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    f_IRAT_SendCoOrd(GERAN, cms_IRAT_Trigger);
    
    //@siclog "Step 7" siclog@
    //Wait and ignore MeasurementReport messages for 15s to allow power "Off" and power "On" for Cell 5 and Cell 24 respectively and to allow UE to measure the neighbouring cells.
    fl_WaitAndIgnoreMeasurementReport(eutra_Cell1, v_TimerValue_15s, cr_MeasurementReport_CheckAny); //@sic R5-123119 sic@
    
    //EXCEPTION: In parallel to events described in step 8 the steps specified in table 8.3.2.5.3.2-4 shall take place
    
    //@siclog "Step 8" siclog@
    //Wait for 30 s to ensure that the UE performs a inter-RAT periodical reporting.

    f_Check_EUTRA_HighFreq_PeriodicalMeasurmentReport_2Meas_2Opt(eutra_Cell1,
                                                                 v_TimerValue_30s,
                                                                 cr_MeasurementReport_Geran_1Entry(2, v_GERAN_PhysChId_Cell24),
                                                                 v_MeasRpt); //@sic R5s120552 sic@
    
    //@siclog "Step 9" siclog@
    //The SS power "On" for Cell 5 according to the row "T3" in table 8.3.2.5.3.2-1.
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    
    //@siclog "Step 10" siclog@
    //Wait and ignore MeasurementReport messages for 15s to allow power "On" for Cell 5 and to allow UE to measure the neighbouring cells.
    fl_WaitAndIgnoreMeasurementReport(eutra_Cell1, v_TimerValue_15s, cr_MeasurementReport_CheckAny); //@sic R5-123119 sic@

    //EXCEPTION: In parallel to events described in steps 11 to 12 the steps specified in table 8.3.2.5.3.2-3  and 8.3.2.5.3.2-4 shall take place
    
    //@siclog "Step 11" siclog@
    //Wait for 30 s to ensure that the UE performs a inter-RAT periodical reporting.
    f_Check_EUTRA_HighFreq_PeriodicalMeasurmentReport_2Meas(eutra_Cell1,
                                                            v_TimerValue_30s,
                                                            v_MeasRpt,
                                                            cr_MeasurementReport_Geran_1Entry(2, v_GERAN_PhysChId_Cell24));
    
    //@siclog "Step 12-13" siclog@
    //The SS transmits an RRCConnectionReconfiguration message to remove inter-RAT measurement and
    //receives an RRCConnectionReconfigurationComplete message to confirm the remove of inter-RAT measurement.
    //@sic R5s110743 sic@
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                    cs_RRCConnectionReconfiguration_RemoveMeasId_2Entries(v_RRC_TI, 1, 2));
    //Deactivate the deault to stop receiving periodical Measurement Reports
    deactivate(v_DefaultRef);
    
    //@siclog "Step 14" siclog@
    //Check: Does the UE attempt to transmit an uplink message for the next 10s?
    f_NoMeasurementReport(eutra_Cell1, v_TimerValue_10s, cr_MeasurementReport_CheckAny);
    
    //End TestBody
    //------------------------------------------------
    
    f_EUTRA_TestBody_Set(false);
    
    //tell the UTRAN component that the test is over
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    
    //tell the GERAN component that the test is over
    f_IRAT_SendCoOrd(GERAN, cms_IRAT_Trigger);

    f_EUTRA_Postamble(eutra_Cell1, E2_CONNECTED);
    
  } //end of testcase 8.3.2.5

  function f_TC_8_3_2_6_EUTRA() runs on EUTRA_PTC
  { // Measurement configuration control and reporting / Inter-RAT measurements / Simultaneous A2 and two B2 / Measurements of E-UTRAN, UTRAN and GERAN cells
    
    var integer v_T0_RS_EPRE_Cell1 := -85;
    var integer v_T1_RS_EPRE_Cell1 := -105;
    
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var Frequency_IE_Type v_Frequency_IE_f1;
    var ChannelBandwidthDependency_Type v_ChBandDependency_f1;
    
    var IRAT_CoOrd_SysInfo_Type v_UTRANSysInfo;
    var UTRAN_FDD_TDD_Type v_UTRAN_FDD_TDD;
    var integer v_UTRAN_ARFCN_f8; //Cell5, Cell7
    var integer v_UTRAN_PhysChId_Cell5;
    var template(present) UL_DCCH_Message v_MeasRpt;
    
    var IRAT_CoOrd_SysInfo_Type v_GERANSysInfo, v_GERANSysInfof12, v_GERANSysInfof13;
    var ARFCN_ValueGERAN v_GERAN_ARFCN_f11; //Cell24
    var ExplicitListOfARFCNs v_ExplicitListOfARFCNs;
    var PhysCellIdGERAN v_GERAN_PhysChId_Cell24;
    var BandIndicatorGERAN v_BandIndicatorGERAN_Cell24;
    
    var float v_TimerValue_10s;
    
    var boolean v_MeasRep1_Received := false;
    var boolean v_MeasRep2_Received := false;
    var boolean v_MeasRep3_Received := false;
    
    timer t_WaitTimer;
    
    //Initialize testcase
    f_EUTRA_Init(c10);
    
    v_Frequency_IE_f1 := f_EUTRA_CellInfo_GetFrequencyIEs(eutra_Cell1);
    v_ChBandDependency_f1 := f_EUTRA_BandDependentParam(v_Frequency_IE_f1.DL_ChBandwidth, v_Frequency_IE_f1.UL_ChBandwidth);
    
    v_TimerValue_10s := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 10.0);
    
    //Acquire information of UTRAN cells
    v_UTRANSysInfo := f_IRAT_WaitForCoOrd_SysInfo(UTRAN);
    if (ischosen(v_UTRANSysInfo.Utran[0].FDD)) {
      v_UTRAN_FDD_TDD := UTRAN_FDD;
      v_UTRAN_ARFCN_f8 := v_UTRANSysInfo.Utran[0].FDD.Freq;
      v_UTRAN_PhysChId_Cell5 := v_UTRANSysInfo.Utran[0].FDD.ScramblingCode;
    }
    else {
      v_UTRAN_FDD_TDD := UTRAN_FDD;
      v_UTRAN_ARFCN_f8 := v_UTRANSysInfo.Utran[0].TDD.Freq;
      v_UTRAN_PhysChId_Cell5 := v_UTRANSysInfo.Utran[0].TDD.CellParametersID;
    }
    
    //Acquire information of GERAN cells
    v_GERANSysInfo := f_IRAT_WaitForCoOrd_SysInfo(GERAN);
    v_GERANSysInfof12 := f_IRAT_WaitForCoOrd_SysInfo (GERAN);
    v_GERANSysInfof13 := f_IRAT_WaitForCoOrd_SysInfo (GERAN);
    
    v_GERAN_ARFCN_f11 := v_GERANSysInfo.Geran[0].Arfcn;
    v_ExplicitListOfARFCNs :=  f_ConvertGERANNeighCell (v_GERANSysInfof12.Geran[0].Arfcn, v_GERANSysInfof13.Geran[0]. Arfcn); // @sic R5-120604, R5s120290 sic@
    
    v_GERAN_PhysChId_Cell24 := {
      networkColourCode := v_GERANSysInfo.Geran[0].Ncc,
      baseStationColourCode := v_GERANSysInfo.Geran[0].Bcc
    }
    
    if (v_GERANSysInfo.Geran[0].BandIndicator == '0'B) {
      v_BandIndicatorGERAN_Cell24 := dcs1800;
    }
    else {
      v_BandIndicatorGERAN_Cell24 := pcs1900;
    }
    
    //Set EPRE for RF Initial
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell1, v_T0_RS_EPRE_Cell1);
    
    //Create and configure Cell1
    f_EUTRA_CellConfig_Def(eutra_Cell1);
    
    //Preamble
    f_EUTRA_Preamble(eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def(eutra_Cell1);
    
    //Set cell power: T0
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    f_IRAT_SendCoOrd(GERAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower(eutra_Cell1, v_T0_RS_EPRE_Cell1);
    
    f_EUTRA_TestBody_Set(true);
    
    //------------------------------------------------
    //Start TestBody

    //@siclog "Step 1-2" siclog@
    //The SS transmits an RRCConnectionReconfiguration message to setup intra and inter RAT measurements on Cell 1 and
    //receives n RRCConnectionReconfigurationComplete message.
    //@sic R5s110743 sic@
    if (v_UTRAN_FDD_TDD == UTRAN_FDD) {
      f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                      cs_RRCConnectionReconfiguration_8_3_2_6_Step1_FDD(v_RRC_TI,
                                                                                v_Frequency_IE_f1.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                v_ChBandDependency_f1.AllowedMeasBandwidth,
                                                                                v_UTRAN_ARFCN_f8,
                                                                                v_UTRAN_PhysChId_Cell5,
                                                                                v_GERAN_ARFCN_f11,
                                                                                v_BandIndicatorGERAN_Cell24,
                                                                                                        v_ExplicitListOfARFCNs));
    }
    else {
      f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                      cs_RRCConnectionReconfiguration_8_3_2_6_Step1_TDD(v_RRC_TI,
                                                                                                        v_Frequency_IE_f1.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                        v_ChBandDependency_f1.AllowedMeasBandwidth,
                                                                                                        v_UTRAN_ARFCN_f8,
                                                                                                        v_UTRAN_PhysChId_Cell5,
                                                                                                        v_GERAN_ARFCN_f11,
                                                                                                        v_BandIndicatorGERAN_Cell24,
                                                                                                        v_ExplicitListOfARFCNs));
    }
    //@siclog "Step 3" siclog@
    //Check: Does the UE transmit any MeasurementReport messages during the next 10s?
    f_NoMeasurementReport(eutra_Cell1, v_TimerValue_10s, cr_MeasurementReport_CheckAny);
    
    //@siclog "Step 4" siclog@
    //The SS changes Cell 1, Cell 5 and Cell 24 parameters according to row "T1" in table 8.3.2.6.3.2-1.
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    f_IRAT_SendCoOrd(GERAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower(eutra_Cell1, v_T1_RS_EPRE_Cell1);
    
    //EXCEPTION: In parallel to step 5 the steps specified in Table 8.3.2.6.3.2-3 shall take place.
    
    //@siclog "Step 5" siclog@
    //The SS waits for 10s.
    if (v_UTRAN_FDD_TDD == UTRAN_FDD) {
      v_MeasRpt := cr_MeasurementReport_Utran_1Entry_FDD(2, v_UTRAN_PhysChId_Cell5);
    }
    else {
      v_MeasRpt := cr_MeasurementReport_Utran_1Entry_TDD(2, v_UTRAN_PhysChId_Cell5);
    }
    t_WaitTimer.start(v_TimerValue_10s);
    
    //@sic R5s110724 sic@
    alt {
      [] t_WaitTimer.timeout
        {
          if (not v_MeasRep1_Received or not v_MeasRep2_Received or not v_MeasRep3_Received) {
            f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Test Case 8.3.2.6 Step 5");
          }
        }
      //Parallel behaviour Step 1: Check: Does the UE transmit a MeasurementReport message to report event A2 for Cell 1.
      [not v_MeasRep1_Received] SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1, cr_MeasurementReport(1, ?, ?, omit)))
        {
          f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.2.6 Step 5 Parallel behaviour Step 1");
          v_MeasRep1_Received := true;
          repeat;
        }
      //Parallel behaviour Step 2: Check: Does the UE transmit a MeasurementReport message to report event B2 for Cell 5.
      [not v_MeasRep2_Received] SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1, v_MeasRpt))
        {
          f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.2.6 Step 5 Parallel behaviour Step 2");
          v_MeasRep2_Received := true;
          repeat;
        }
      //Parallel behaviour Step 3: Check: Does the UE transmit a MeasurementReport message to report event B2 for Cell 24.
      [not v_MeasRep3_Received] SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1, cr_MeasurementReport_Geran_1Entry(3, v_GERAN_PhysChId_Cell24)))
        {
          f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.2.6 Step 5 Parallel behaviour Step 3");
          v_MeasRep3_Received := true;
          repeat;
        }
    }
    
    //@siclog "Step 6" siclog@
    //Check: Does the test result of generic test procedure in TS 36.508 subclause 6.4.2.3 indicate that the UE is in E-UTRA RRC_CONNECTED state on Cell 1?
    f_EUTRA_508Check_ConnectedState(eutra_Cell1);
    
    //End TestBody
    //------------------------------------------------
    
    f_EUTRA_TestBody_Set(false);
    
    //tell the UTRAN component that the test is over
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    
    //tell the GERAN component that the test is over
    f_IRAT_SendCoOrd(GERAN, cms_IRAT_Trigger);
    
    f_EUTRA_Postamble(eutra_Cell1, E2_CONNECTED); //@sic R5-103875 sic@
    
  }; //end of testcase 8.3.2.6

  function f_TC_8_3_3_1_EUTRA() runs on EUTRA_PTC
  { /* Measurement configuration control and reporting / SON / ANR / CGI reporting of E-UTRAN cell */
    var Frequency_IE_Type v_Frequency_IE;
    var PhysCellId v_PhysCellId;
    var ChannelBandwidthDependency_Type v_ChBandDependency;
    var DefaultPagingCycle_Type v_PagingCycleType:= rf256;
    var integer v_T0_T1_RS_EPRE_Cell1 := -85;  //@sic R5-101130: Changed from -80 to -85 sic@
    var integer v_T0_RS_EPRE_Cell2 := -91;  //@sic R5-101130: Changed from -110 to -91 sic@
    var integer v_T1_RS_EPRE_Cell2 := -79;  //@sic R5-101130: Changed from -59 to -79 sic@
    var float v_TimerValue;
    var EUTRA_CellInfo_Type v_CellInfo;
    var CellIdentity v_CellIdentity; // := int2bit(1, 20) & int2bit(2,8);
    var PLMN_Identity v_PLMN_Identity;
    var TrackingAreaCode v_TrackingAreaCode; //@sic R5-105002 sic@
    var template PLMN_IdentityList2 v_PLMN_IdentityList2; //@sic R5-105002 sic@
    var template (value) CellPowerList_Type v_CellPowerList;

    timer t_Wait := 0.66;  //@sic R5s100850 sic@

    //Initialize testcase
    f_EUTRA_Init(c2);
    
    v_TimerValue := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 1.0);
    
    f_EUTRA_CellInfo_SetSysInfo_DefaultPagingCycle(eutra_Cell1, v_PagingCycleType);
    f_EUTRA_CellInfo_SetPLMN_2Entries(eutra_Cell2, cs_HPLMN_Def, cs_HPLMN_001_02); //@sic R5-105002 sic@
    
    v_PhysCellId := f_EUTRA_CellInfo_GetPhyCellId(eutra_Cell2);
    v_Frequency_IE := f_EUTRA_CellInfo_GetFrequencyIEs(eutra_Cell2);
    v_ChBandDependency := f_EUTRA_BandDependentParam(v_Frequency_IE.DL_ChBandwidth, v_Frequency_IE.UL_ChBandwidth);

    v_CellInfo := f_EUTRA_CellInfo_Get(eutra_Cell2);
    v_CellIdentity := v_CellInfo.CellIds.CellIdentity;
    v_PLMN_Identity := v_CellInfo.NAS_Parameters.Guti_Parameters.PLMN_Identity;
    v_TrackingAreaCode := f_EUTRA_CellInfo_GetTAC(eutra_Cell2); //@sic R5-105002 sic@
    v_PLMN_IdentityList2 := { cs_HPLMN_001_02 }; //@sic R5-105002 sic@
    
    //Set EPRE for RF Initial
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell1, v_T0_T1_RS_EPRE_Cell1);
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell2, v_T1_RS_EPRE_Cell2);
    
    //Create and configure Cell1, Cell2
    f_EUTRA_CellConfig_Def(eutra_Cell1);
    
    f_EUTRA_SetCellConfigCapability(eutra_Cell2, broadcastOnlyCell); //@sic R5-103077 sic@
    f_EUTRA_CellConfig_SRBs_Only(eutra_Cell2); //@sic R5-103077 sic@
    
    //Preamble
    f_EUTRA_Preamble(eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def(eutra_Cell1);
    f_EUTRA_TestBody_Set(true);
    
    //Set EPRE for T0
    v_CellPowerList := {
      cs_CellPower(eutra_Cell1, v_T0_T1_RS_EPRE_Cell1),
      cs_CellPower(eutra_Cell2, v_T0_RS_EPRE_Cell2)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);       //@sic in context with R5-123740 change 2sic@
    
    //------------------------------------------------
    //Start TestBody

    //@siclog "Step 1-2" siclog@
    //The SS sends RRC Connection Reconfiguration for setting up intra LTE measurement for event A3 and
    //receives an RRCConnectionReconfigurationComplete message.
    //@sic R5s110743 sic@
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                    cs_RRCConnectionReconfiguration_8_3_3_1_Step1(tsc_RRC_TI_Def,
                                                                                                  v_Frequency_IE.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                  v_ChBandDependency.AllowedMeasBandwidth));
    //@siclog "Step 3" siclog@
    //Set EPRE for T1
    f_EUTRA_SetCellPower(eutra_Cell2, v_T1_RS_EPRE_Cell2);
    
    //@siclog "Step 4" siclog@
    //Receive Measurement Report
    ////@sic R5s100850 sic@
    t_Wait.start;
    
    interleave {
      [] SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1, cr_MeasurementReport_Eutra_1Entry_rsrp(1, v_PhysCellId))) {}
      [] t_Wait.timeout {}
    }
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.3.1 Step 4");
    
    f_EUTRA_SS_CommonCellConfig(eutra_Cell1, cas_PUCCH_Synch_Config_REQ(eutra_Cell1, cs_TimingInfo_Now, cs_PUCCH_Synch_None));
    f_EUTRA_SS_DrxCtrlConfig(eutra_Cell1, cs_DrxCtrl_Config(cds_DRX_Config_SF1280));

    //@siclog "Step 5-6" siclog@
    //The SS sends RRC Connection Reconfiguration with reportCGI for Cell 2 and
    //receives an RRCConnectionReconfigurationComplete message.
    //@sic R5s110743 sic@
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                    cs_RRCConnectionReconfiguration_8_3_3_1_Step5(tsc_RRC_TI_Def,
                                                                                                  v_Frequency_IE.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                  v_ChBandDependency.AllowedMeasBandwidth,
                                                                                                  v_PhysCellId));
    //@siclog "Step 7" siclog@
    //Check that Measurement Report is received within a certain time
    f_Check_Timer_MeasurementReport(eutra_Cell1,
                                    v_TimerValue,
                                    cr_MeasurementReport_8_3_3_1_Step7(v_PhysCellId,
                                                                       v_PLMN_Identity,
                                                                       v_CellIdentity,
                                                                       v_TrackingAreaCode, //@sic R5-105002 sic@
                                                                       v_PLMN_IdentityList2)); //@sic R5-105002 sic@
    f_EUTRA_508Check_ConnectedState(eutra_Cell1);
    
    //End TestBody
    //------------------------------------------------
    
    f_EUTRA_TestBody_Set(false);
    
    f_EUTRA_Postamble(eutra_Cell1, E2_CONNECTED); //@sic R5-103875 sic@
    
  }; //end of testcase 8.3.3.1

  function f_TC_8_3_3_2_EUTRA() runs on EUTRA_PTC
  { // Measurement configuration control and reporting / SON / ANR: CGI reporting of UTRAN cell
    var integer v_T0_RS_EPRE_Cell1 := -80;
    var integer v_T1_RS_EPRE_Cell1 := -60;
    
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    
    //@sic R5112614 sic@
    var Frequency_IE_Type v_Frequency_IE_Cell1;
    var ChannelBandwidthDependency_Type v_ChBandDependency_Cell1 ;
    
    var DefaultPagingCycle_Type v_PagingCycleType:= rf256;
    
    var IRAT_CoOrd_SysInfo_Type v_UTRANSysInfo;
    var UTRAN_FDD_TDD_Type v_UTRAN_FDD_TDD;
    var integer v_UTRAN_ARFCN_f8; //Cell5, Cell7
    var integer v_UTRAN_PhysChId_Cell5;
    var O3_Type v_UTRAN_PLMN_Cell5;
    var B28_Type v_UTRAN_CellIdentity_Cell5;
    var B16_Type v_UTRAN_LAC_Cell5;
    var B8_Type v_UTRAN_RAC_Cell5;
    
    var PLMN_IdentityList2 v_PLMN_IdentityList2; //@sic R5s110598 sic@
    var PLMN_Identity v_PLMN2; //@sic R5s110598 sic@
    
    var template(present) UL_DCCH_Message v_MeasRpt;
    
    var float v_TimerValue_8s;
    
    //Initialize testcase
    f_EUTRA_Init(c4);
    f_EUTRA_CellInfo_SetSysInfo_DefaultPagingCycle(eutra_Cell1, v_PagingCycleType);
    
    v_TimerValue_8s := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 8.0);
    
    v_PLMN2 := {mcc := {0,0,1}, mnc := {0,2}}; //@sic R5s110598 sic@
    v_PLMN_IdentityList2 := { v_PLMN2 }; //@sic R5s110598 sic@
    
    
    //@sic R5112614 sic@
    v_Frequency_IE_Cell1 := f_EUTRA_CellInfo_GetFrequencyIEs (eutra_Cell1);
    v_ChBandDependency_Cell1 := f_EUTRA_BandDependentParam(v_Frequency_IE_Cell1.DL_ChBandwidth, v_Frequency_IE_Cell1.UL_ChBandwidth);
    
    //Acquire information of UTRAN cells
    v_UTRANSysInfo := f_IRAT_WaitForCoOrd_SysInfo(UTRAN);
    if (ischosen(v_UTRANSysInfo.Utran[0].FDD))
      {
        v_UTRAN_FDD_TDD := UTRAN_FDD;
        v_UTRAN_ARFCN_f8 := v_UTRANSysInfo.Utran[0].FDD.Freq;
        v_UTRAN_PhysChId_Cell5 := v_UTRANSysInfo.Utran[0].FDD.ScramblingCode;
        v_UTRAN_PLMN_Cell5 := v_UTRANSysInfo.Utran[0].FDD.PLMN;
        v_UTRAN_CellIdentity_Cell5 := v_UTRANSysInfo.Utran[0].FDD.CellIdentity;
        v_UTRAN_LAC_Cell5 := v_UTRANSysInfo.Utran[0].FDD.LAC;
        v_UTRAN_RAC_Cell5 := v_UTRANSysInfo.Utran[0].FDD.RAC;
      }
    else
      {
        v_UTRAN_FDD_TDD := UTRAN_TDD;
        v_UTRAN_ARFCN_f8 := v_UTRANSysInfo.Utran[0].TDD.Freq;
        v_UTRAN_PhysChId_Cell5 := v_UTRANSysInfo.Utran[0].TDD.CellParametersID;
        v_UTRAN_PLMN_Cell5 := v_UTRANSysInfo.Utran[0].TDD.PLMN;
        v_UTRAN_CellIdentity_Cell5 := v_UTRANSysInfo.Utran[0].TDD.CellIdentity;
        v_UTRAN_LAC_Cell5 := v_UTRANSysInfo.Utran[0].TDD.LAC;
        v_UTRAN_RAC_Cell5 := v_UTRANSysInfo.Utran[0].TDD.RAC;
      }
    
    //Set EPRE for RF Initial
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell1, v_T1_RS_EPRE_Cell1);
    
    //Create and configure Cell1
    f_EUTRA_CellConfig_Def(eutra_Cell1);
    
    //Preamble
    f_EUTRA_Preamble(eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def(eutra_Cell1);
    
    //Set cell power: T0
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower(eutra_Cell1, v_T0_RS_EPRE_Cell1);
    
    f_EUTRA_TestBody_Set(true);
    
    //------------------------------------------------
    //Start TestBody

    //@siclog "Step 1-2" siclog@
    //The SS transmits an RRCConnectionReconfiguration message including measConfig to setup inter RAT measurement for the purpose of SON and
    //receives n RRCConnectionReconfigurationComplete message.
    //@sic 5-106183, R5s110743 sic@
    if (v_UTRAN_FDD_TDD == UTRAN_FDD) {
      f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                      cs_RRCConnectionReconfiguration_8_3_3_2_Step1_FDD(v_RRC_TI,
                                                                                                        v_Frequency_IE_Cell1.UL_DL_Earfcn.dl_CarrierFreq, //@sic R5112614 sic@
                                                                                                        v_ChBandDependency_Cell1.AllowedMeasBandwidth, //@sic R5112614 sic@
                                                                                                        v_UTRAN_ARFCN_f8,
                                                                                                        v_UTRAN_PhysChId_Cell5));
    }
    else {
      f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                      cs_RRCConnectionReconfiguration_8_3_3_2_Step1_TDD(v_RRC_TI,
                                                                                                        v_Frequency_IE_Cell1.UL_DL_Earfcn.dl_CarrierFreq, //@sic R5112614 sic@
                                                                                                        v_ChBandDependency_Cell1.AllowedMeasBandwidth, //@sic R5112614 sic@
                                                                                                        v_UTRAN_ARFCN_f8,
                                                                                                        v_UTRAN_PhysChId_Cell5));
    }
    //@siclog "Step 3" siclog@
    //The SS changes Cell 5 power level according to the row "T1" in table 8.3.3.2.3.2-1.
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower(eutra_Cell1, v_T1_RS_EPRE_Cell1);
    
    //@siclog "Step 4" siclog@
    //Check: Does the UE transmit a MeasurementReport message to report the measured result for Cell 5?
    if (v_UTRAN_FDD_TDD == UTRAN_FDD)
      {
        v_MeasRpt := cr_MeasurementReport_Utran_1Entry_FDD(1, v_UTRAN_PhysChId_Cell5);
      }
    else
      {
        v_MeasRpt := cr_MeasurementReport_Utran_1Entry_TDD(1, v_UTRAN_PhysChId_Cell5);
      }

    //@sic R5s120006 sic@
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1, v_MeasRpt));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.3.2 Step 4");
    
    //@sic R5s110738 sic@
    f_EUTRA_SS_CommonCellConfig(eutra_Cell1, cas_PUCCH_Synch_Config_REQ(eutra_Cell1, cs_TimingInfo_Now, cs_PUCCH_Synch_None));
    f_EUTRA_SS_DrxCtrlConfig(eutra_Cell1, cs_DrxCtrl_Config(cds_DRX_Config_SF2560));

    //@siclog "Step 5-6" siclog@
    //S transmits an RRCConnectionReconfiguration message including measConfig including reportCGI for Cell 5 and
    //sufficient idle periods for UE to acquire the relevant system information from Cell 5 and
    //receives n RRCConnectionReconfigurationComplete message.
    //@sic 5-106183, R5s110743 sic@
    if (v_UTRAN_FDD_TDD == UTRAN_FDD) {
      f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                      cs_RRCConnectionReconfiguration_8_3_3_2_Step5_FDD(v_RRC_TI,
                                                                                                        v_UTRAN_ARFCN_f8,
                                                                                                        v_UTRAN_PhysChId_Cell5));
    }
    else {
      f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                      cs_RRCConnectionReconfiguration_8_3_3_2_Step5_TDD(v_RRC_TI,
                                                                                                        v_UTRAN_ARFCN_f8,
                                                                                                        v_UTRAN_PhysChId_Cell5));
    }
    //@siclog "Step 7" siclog@
    //Check: Does the UE transmit a MeasurementReport message with globalCellIdentity of Cell 5 within 8 sec?
    if (v_UTRAN_FDD_TDD == UTRAN_FDD)
      {
        v_MeasRpt := cr_MeasurementReport_8_3_3_2_Step7_FDD(v_UTRAN_PhysChId_Cell5,
                                                            fl_Nas2Asn_PlmnId(v_UTRAN_PLMN_Cell5),
                                                            v_UTRAN_CellIdentity_Cell5,
                                                            v_UTRAN_LAC_Cell5,
                                                            v_UTRAN_RAC_Cell5,
                                                            v_PLMN_IdentityList2); //@sic R5s110598 sic@
      }
    else
      {
        v_MeasRpt := cr_MeasurementReport_8_3_3_2_Step7_TDD(v_UTRAN_PhysChId_Cell5,
                                                            fl_Nas2Asn_PlmnId(v_UTRAN_PLMN_Cell5),
                                                            v_UTRAN_CellIdentity_Cell5,
                                                            v_UTRAN_LAC_Cell5,
                                                            v_UTRAN_RAC_Cell5,
                                                            v_PLMN_IdentityList2); //@sic R5s110598 sic@
      }
    f_Check_Timer_MeasurementReport(eutra_Cell1,
                                    v_TimerValue_8s,
                                    v_MeasRpt);
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.3.2 Step 7");
    
    //End TestBody
    //------------------------------------------------
    
    f_EUTRA_TestBody_Set(false);
    
    //tell the UTRAN component that the test is over
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    
    f_EUTRA_Postamble(eutra_Cell1, E2_CONNECTED); //@sic R5-103875 sic@
    
  }; //end of testcase 8.3.3.2

  function f_TC_8_3_3_3_EUTRA() runs on EUTRA_PTC
  { // Measurement configuration control and reporting / SON / ANR / CGI reporting of GERAN cell
    var integer v_T0_RS_EPRE_Cell1 := -60;
    var integer v_T1_RS_EPRE_Cell1 := -80;
    
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    
    //@sic R5112614 sic@
    var Frequency_IE_Type v_Frequency_IE_Cell1;
    var ChannelBandwidthDependency_Type v_ChBandDependency_Cell1;
    
    var DefaultPagingCycle_Type v_PagingCycleType:= rf256;
    
    var IRAT_CoOrd_SysInfo_Type v_GERANSysInfo, v_GERANSysInfof12, v_GERANSysInfof13;
    var ARFCN_ValueGERAN v_GERAN_ARFCN_f11; //Cell24
    var ExplicitListOfARFCNs v_ExplicitListOfARFCNs;
    var PhysCellIdGERAN v_GERAN_PhysChId_Cell24;
    var O2_Type v_GERAN_Cell_Identity_Cell24;
    var BandIndicatorGERAN v_BandIndicatorGERAN_Cell24;
    var O3_Type v_GERAN_PLMN_Cell24;
    var B16_Type v_GERAN_LAC_Cell24;
    var B8_Type v_GERAN_RAC_Cell24;
    
    var float v_TimerValue_8s;
    
    //Initialize testcase
    f_EUTRA_Init(c5);
    f_EUTRA_CellInfo_SetSysInfo_DefaultPagingCycle(eutra_Cell1, v_PagingCycleType);
    
    v_TimerValue_8s := f_EUTRA_SetTimerToleranceMax(eutra_Cell1, nonProtocolTimer, 8.0);
    
    //@sic R5112614 sic@
    v_Frequency_IE_Cell1 := f_EUTRA_CellInfo_GetFrequencyIEs (eutra_Cell1);
    v_ChBandDependency_Cell1 := f_EUTRA_BandDependentParam(v_Frequency_IE_Cell1.DL_ChBandwidth, v_Frequency_IE_Cell1.UL_ChBandwidth);
    
    //Acquire information of GERAN cells
    v_GERANSysInfo := f_IRAT_WaitForCoOrd_SysInfo(GERAN);
    v_GERANSysInfof12 := f_IRAT_WaitForCoOrd_SysInfo (GERAN);
    v_GERANSysInfof13 := f_IRAT_WaitForCoOrd_SysInfo (GERAN);
    
    v_GERAN_ARFCN_f11 := v_GERANSysInfo.Geran[0].Arfcn;
    
    v_ExplicitListOfARFCNs :=  f_ConvertGERANNeighCell (v_GERANSysInfof12.Geran[0].Arfcn, v_GERANSysInfof13.Geran[0]. Arfcn); // @sic R5-120604, R5s120290 sic@
    
    v_GERAN_PhysChId_Cell24 := {
      networkColourCode := v_GERANSysInfo.Geran[0].Ncc,
      baseStationColourCode := v_GERANSysInfo.Geran[0].Bcc
    }
    
    v_GERAN_Cell_Identity_Cell24 := v_GERANSysInfo.Geran[0].Cell_Identity;
    
    if (v_GERANSysInfo.Geran[0].BandIndicator == '0'B) {
      v_BandIndicatorGERAN_Cell24 := dcs1800;
    }
    else {
      v_BandIndicatorGERAN_Cell24 := pcs1900;
    }
    
    v_GERAN_PLMN_Cell24 := v_GERANSysInfo.Geran[0].PLMN;
    
    v_GERAN_LAC_Cell24 := v_GERANSysInfo.Geran[0].LAC;
    v_GERAN_RAC_Cell24 := v_GERANSysInfo.Geran[0].RAC;
    
    //Set EPRE for RF Initial
    f_EUTRA_CellInfo_InitMaxReferencePower(eutra_Cell1, v_T0_RS_EPRE_Cell1);
    
    //Create and configure Cell1
    f_EUTRA_CellConfig_Def(eutra_Cell1);

    //Preamble
    f_EUTRA_Preamble(eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def(eutra_Cell1);
    
    //Set cell power: T0
    f_IRAT_SendCoOrd(GERAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower(eutra_Cell1, v_T0_RS_EPRE_Cell1);
    
    //------------------------------------------------
    //Start TestBody
    
    f_EUTRA_TestBody_Set(true);

    //@siclog "Step 1-2" siclog@
    //The SS transmits an RRCConnectionReconfiguration message including measConfig to setup inter-RAT measurements and reporting for event B2 and
    //receives an RRCConnectionReconfigurationComplete message.
    //@sic R5s110743 sic@
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                    cs_RRCConnectionReconfiguration_8_3_3_3_Step1(v_RRC_TI,
                                                                                                  v_Frequency_IE_Cell1.UL_DL_Earfcn.dl_CarrierFreq, //@sic R5112614 sic@
                                                                                                  v_ChBandDependency_Cell1.AllowedMeasBandwidth, //@sic R5112614 sic@
                                                                                                  v_GERAN_ARFCN_f11,
                                                                                                  v_BandIndicatorGERAN_Cell24,
                                                                                                  v_ExplicitListOfARFCNs));
    //@siclog "Step 3" siclog@
    //The SS re-adjusts the cell-specific reference signal level according to row "T1" in table 8.3.3.3.3.2-1.
    f_IRAT_SendCoOrd(GERAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower(eutra_Cell1, v_T1_RS_EPRE_Cell1);
    
    //@siclog "Step 4" siclog@
    //Check: Does the UE transmit a MeasurementReport message to report event B2 for Cell 24?
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1,
                                    cr_MeasurementReport_8_3_3_3_Step4(v_GERAN_ARFCN_f11,
                                                                       v_BandIndicatorGERAN_Cell24,
                                                                       v_GERAN_PhysChId_Cell24)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 8.3.3.3 Step 4");

    //@sic R5s110699 sic@
    f_EUTRA_SS_CommonCellConfig(eutra_Cell1, cas_PUCCH_Synch_Config_REQ(eutra_Cell1, cs_TimingInfo_Now, cs_PUCCH_Synch_None));
    f_EUTRA_SS_DrxCtrlConfig(eutra_Cell1, cs_DrxCtrl_Config( cds_DRX_Config_SF2560));
    //Note 1

    //@siclog "Step 5-6" siclog@
    //he SS transmits an RRCConnectionReconfiguration message including measConfig including reportCGI for Cell 24 and
    //sufficient idle periods for UE to acquire the relevant system information from Cell 24 and
    //receives an RRCConnectionReconfigurationComplete message.
    //@sic R5s110743 sic@
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1,
                                                    cs_RRCConnectionReconfiguration_8_3_3_3_Step5(v_RRC_TI,
                                                                                                  v_GERAN_ARFCN_f11,
                                                                                                  v_BandIndicatorGERAN_Cell24,
                                                                                                  v_ExplicitListOfARFCNs,
                                                                                                  v_GERAN_PhysChId_Cell24)); //@sic R5s110699 sic@
    //@siclog "Step 7" siclog@
    //Check: Does the UE transmit a MeasurementReport message with cellGlobalId of Cell 24 within 8 sec?
    f_Check_Timer_MeasurementReport(eutra_Cell1,
                                    v_TimerValue_8s,
                                    cr_MeasurementReport_8_3_3_3_Step7(v_GERAN_ARFCN_f11,
                                                                       v_BandIndicatorGERAN_Cell24,
                                                                       v_GERAN_PhysChId_Cell24,
                                                                       fl_Nas2Asn_PlmnId(v_GERAN_PLMN_Cell24),
                                                                       v_GERAN_LAC_Cell24,
                                                                       oct2bit(v_GERAN_Cell_Identity_Cell24),
                                                                       v_GERAN_RAC_Cell24));
    
    //End TestBody
    //------------------------------------------------
    
    f_EUTRA_TestBody_Set(false);
    
    //tell the GERAN component that the test is over
    f_IRAT_SendCoOrd(GERAN, cms_IRAT_Trigger);
    
    f_EUTRA_Postamble(eutra_Cell1, E2_CONNECTED); //@sic R5-103875 sic@
    
  }; //end of testcase 8.3.3.3

}
