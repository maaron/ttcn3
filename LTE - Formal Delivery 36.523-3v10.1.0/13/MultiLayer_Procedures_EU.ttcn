/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2012, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3v10.1.0
// $Date: 2012-09-04 16:46:27 +0200 (Tue, 04 Sep 2012) $
// $Rev: 7316 $
/******************************************************************************/

module MultiLayer_Procedures_EU {

  import from EUTRA_RRC_ASN1_Definitions language "ASN.1:1997" all;
  import from CommonDefs all;
  import from CommonIP all;
  import from CommonIratDefs all;
  import from EPS_NAS_Constants all;
  import from EPS_NAS_MsgContainers all;
  import from EPS_NAS_Templates all;
  import from EPS_NAS_TypeDefs all;
  import from EUTRA_ASP_DrbDefs all;
  import from EUTRA_AspCommon_Templates all;
  import from EUTRA_AuxiliaryFunctions all;
  import from EUTRA_BandDependentParam all;
  import from EUTRA_CellCfg_Templates all;
  import from EUTRA_CellInfo all;
  import from EUTRA_CommonDefs all;
  import from EUTRA_CommonProcedures all;
  import from EUTRA_Component all;
  import from EUTRA_ConfigurationSteps all;
  import from EUTRA_DRB_Templates all;
  import from EUTRA_IRATFunctions all;
  import from EUTRA_IdleMode all;
  import from EUTRA_LoopBack all;
  import from EUTRA_Measurement_Templates all;
  import from EUTRA_NASCommonFunctions all;
  import from EUTRA_NASSteps all;
  import from EUTRA_Paging all;
  import from EUTRA_RRCSteps all;
  import from EUTRA_RRC_Templates all;
  import from EUTRA_SRB_Templates all;
  import from EUTRA_SecurityFunctions all;
  import from EUTRA_SecuritySteps all;
  import from Parameters all;
  import from UTRAN_CapabilityFunctions all;
  import from UpperTesterFunctions all;

  template (value) CellsToAddModUTRA_TDD cs_CellsToAddModUTRA_TDD(template (value) CellsToAddModUTRA_TDD.cellIndex p_CellIndex,
                                                                  template (value) PhysCellIdUTRA_TDD p_PhysCellId ) :=
  { /* @status    APPROVED */
    cellIndex := p_CellIndex,
    physCellId := p_PhysCellId
  };

  template (value) CellsToAddModListUTRA_TDD cs_CellsToAddModListUTRA_TDD_1Entry(template (value) CellsToAddModUTRA_TDD.cellIndex p_CellIndex,
                                                                                 template (value) PhysCellIdUTRA_TDD p_PhysCellId ) :=
  { /* @status    APPROVED */
    cs_CellsToAddModUTRA_TDD(p_CellIndex, p_PhysCellId)
  };

 template (value) DL_DCCH_Message cs_508_RRCConnectionReconfiguration_MeasConfig_UTRAN_13_4_2_1(ARFCN_ValueEUTRA p_EUTRA_DL_CarrierFreq1,
                                                                                                 AllowedMeasBandwidth p_MeasurementBandwidth1,
                                                                                                 ARFCN_ValueUTRA p_CarrierFreq,
                                                                                                 template (value) ReportConfigToAddMod.reportConfig p_ReportConfig ,
                                                                                                 template (value) MeasObjectUTRA.cellsToAddModList p_CellsToAddModList,
                                                                                                 RRC_TransactionIdentifier p_RRC_TI := tsc_RRC_TI_Def) :=
    /* @status    APPROVED */
    cs_508_RRCConnectionReconfiguration_ConditionMEAS(p_RRC_TI,
                                                      cs_MeasConfig(omit,
                                                                    cs_MeasObjectToAddModList_2Entries(tsc_IdMeasObject_f1,
                                                                                                       cs_MeasObject_measObjectEUTRA_Common(p_EUTRA_DL_CarrierFreq1,
                                                                                                                                            p_MeasurementBandwidth1,
                                                                                                                                            omit,
                                                                                                                                            omit,
                                                                                                                                            omit),
                                                                                                       tsc_IdMeasObject_f8,
                                                                                                       cs_MeasObject_measObjectUTRA(p_CarrierFreq,
                                                                                                                                    0,
                                                                                                                                    omit,
                                                                                                                                    p_CellsToAddModList,
                                                                                                                                    omit)),
                                                                    omit,
                                                                    cs_ReportConfigToAddModList_1Entry(1, p_ReportConfig),
                                                                    omit,
                                                                    cs_MeasIdToAddModList_1Entry(1, tsc_IdMeasObject_f8, 1),
                                                                    cs_QuantityConfig( cs_QuantityConfigEUTRA (omit,omit), cs_QuantityConfigUTRA( cpich_RSCP, pccpch_RSCP, omit ), omit, omit ), //@sic R5s120317 sic@
                                                                    cs_508_MeasGapConfig_GP1,
                                                                    omit,
                                                                    omit,
                                                                    omit));

  template UL_DCCH_Message cr_MeasurementReport_UTRAN( template MeasResults.measResultNeighCells p_MeasResultNeighCells ) :=
    /* @status    APPROVED */
    cr_MeasurementReport( 1, ?, ?, p_MeasResultNeighCells );

  function f_TC_13_1_2_EUTRA() runs on EUTRA_PTC
  {
    var NAS_MSG_Indication_Type v_NAS_Ind;
    var GutiParameters_Type v_GutiParams;
    var IRAT_CoOrd_SysInfo_Type v_UTRANSysInfo;
    var template (value) RedirectedCarrierInfo v_RedirectedCarrierInfo;
    var template (value) EUTRA_FDD_TDD_CellInfo_Type v_EUTRA_FDD_TDD_Info;
    var template (value) PhysicalConfigDedicated_AntennaInfo_Type v_AntennaInfo;
    var ReleaseCause v_ReleaseCause := other;
    
    f_EUTRA_Init(c4);      //SIB2, SIB3 & SIB6 are transmitted
    
    //Get cell information
    v_GutiParams := f_EUTRA_CellInfo_GetGuti(eutra_Cell1);
    v_EUTRA_FDD_TDD_Info := f_EUTRA_CellInfo_GetFDD_TDD_Info (eutra_Cell1);
    v_AntennaInfo :=  f_EUTRA_CellInfo_GetAntennaInfoDedicated (eutra_Cell1);
    
    //Coordinate with UTRAN component to receive UTRAN frequency of utran_Cell5
    v_UTRANSysInfo := f_IRAT_WaitForCoOrd_SysInfo (UTRAN);
    
    //Set the Redirect Information in the RRCConnectionRelease message according to Table 13.1.2.3.3-3
    if ( f_IRAT_GetUTRAN_FDD_TDD_Mode () == UTRAN_FDD ) {// @sic R5-115770 sic@
      v_RedirectedCarrierInfo := cs_RedirectionInfo_UtraFdd ( v_UTRANSysInfo.Utran[0].FDD.Freq );
      f_EUTRA_SetSIB6_InterFreqCarrierFreqList_F8(eutra_Cell1,
                                                  cs_CarrierFreqUTRA_FDD_CRPrio (v_UTRANSysInfo.Utran[0].FDD.Freq,3),
                                                  omit); // @sic R5s110753 sic@
    }
    else {
      v_RedirectedCarrierInfo := cs_RedirectionInfo_UtraTdd ( v_UTRANSysInfo.Utran[0].TDD.Freq );
      f_EUTRA_SetSIB6_InterFreqCarrierFreqList_F8(eutra_Cell1,
                                                  omit,
                                                  cs_CarrierFreqUTRA_TDD_CRPrio (v_UTRANSysInfo.Utran[0].TDD.Freq,3)); // @sic R5s110753 sic@
    }
    
    f_EUTRA_CellInfo_InitMaxReferencePower (eutra_Cell1, -75);
    
    //Create and configure cells
    f_EUTRA_CellConfig_Def (eutra_Cell1);
    
    //Bring UE to initial state
    f_UT_ConfigureCombinedAttach(UT);
    f_EUTRA_Preamble (eutra_Cell1, STATE2_IDLEUPDATE, Combined); // @sic R5s110176 sic@
    
    //Set cell power level according to T0
    f_IRAT_SendCoOrd (UTRAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower ( eutra_Cell1, -75);
    
    f_EUTRA_TestBody_Set (true);
    
    //@siclog "Step 1" siclog@
    //Initiate a CS call
    f_UT_RequestCSCall (UT);
    
    //@siclog "Step 2-4" siclog@
    //Receive RRCConnectionRequest, Transmit RRCConnectionSetup & Receive EXTENDED SERVICE REQUEST
    v_NAS_Ind := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_Cell1,
                                                tsc_RRC_TI_Def,
                                                cr_EstablishmentCause_Any,
                                                cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                  cr_EXT_SERVICE_REQUEST_MO(f_EUTRA_SecurityKSIasme_Get(),
                                                                                            bit2oct(v_GutiParams.M_TMSI))));
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Step 4");
    
    //@siclog "Step 5-7 Void" siclog@
    //@sic R5s120266 sic@
    
    //@siclog "Step 8" siclog@
    //Transmit RRCConnectionRelease to redirect UE to utran cell 5
    f_EUTRA_RRC_ConnectionRelease_Common (eutra_Cell1,
                                          cs_RRCConnectionRelease (tsc_RRC_TI_Def,
                                                                   v_ReleaseCause,
                                                                   v_RedirectedCarrierInfo,
                                                                   omit));
    
    //Tell the UTRAN PTC to take over the test case. When doing this also update the authentication parameters
    f_EUTRA_SendAuthParameters(eutra_Cell1, UTRAN);
    
    f_EUTRA_TestBody_Set (false);
    
    //Wait till end of test case
    f_IRAT_WaitForCoOrd_Trigger (UTRAN);
    
    //Remove E-UTRA cell
    f_EUTRA_ReleaseAllCells();
  }

  function f_TC_13_1_3_EUTRA() runs on EUTRA_PTC
  {
    var IRAT_CoOrd_SysInfo_Type v_UTRANSysInfo;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var integer v_RSEPRE_Cell1_T0 := -75;
    var octetstring v_IP_PDU_delay := 'FF'O;// IP_PDU_delay = 255 sec
    var GutiParameters_Type v_GutiParams;
    var ReleaseCause v_ReleaseCause := other;
    var template (value) RedirectedCarrierInfo v_RedirectedCarrierInfo;
    var PDCP_SDUList_Type v_PDCP_SDUList_DRB1 := { f_IPv4IPv6_IcmpEchoReply(f_LoopbackModeB_IP_Address_UE()) };      /* @sic R5s120470 sic@ */
    
    f_EUTRA_Init (c4);
    
    v_GutiParams := f_EUTRA_CellInfo_GetGuti (eutra_Cell1);
    
    //Coordinate with UTRAN component to receive UTRAN frequency of utran_Cell5
    v_UTRANSysInfo := f_IRAT_WaitForCoOrd_SysInfo (UTRAN);
    
    //Set the Redirect Information in the RRCConnectionRelease message
    if ( f_IRAT_GetUTRAN_FDD_TDD_Mode () == UTRAN_FDD ) {
      v_RedirectedCarrierInfo := cs_RedirectionInfo_UtraFdd ( v_UTRANSysInfo.Utran[0].FDD.Freq );
      f_EUTRA_SetSIB6_InterFreqCarrierFreqList_F8(eutra_Cell1,
                                                  cs_CarrierFreqUTRA_FDD_CRPrio (v_UTRANSysInfo.Utran[0].FDD.Freq, 3),
                                                  omit);
    }
    else {
      v_RedirectedCarrierInfo := cs_RedirectionInfo_UtraTdd ( v_UTRANSysInfo.Utran[0].TDD.Freq );
      f_EUTRA_SetSIB6_InterFreqCarrierFreqList_F8(eutra_Cell1,
                                                  omit,
                                                  cs_CarrierFreqUTRA_TDD_CRPrio (v_UTRANSysInfo.Utran[0].TDD.Freq, 3));
    }
    
    f_EUTRA_CellInfo_InitMaxReferencePower (eutra_Cell1, -75);
    
    //Create and configure cells
    f_EUTRA_CellConfig_Def (eutra_Cell1);
    
    //Bring UE to initial state
    f_EUTRA_Preamble ( eutra_Cell1, STATE2A_TESTLOOP_ModeB, Combined);
    f_EUTRA_RbEst_Def (eutra_Cell1);
    f_EUTRA_CloseUE_TestLoopModeB (eutra_Cell1, v_IP_PDU_delay);

    //Set cell power level according to T0
    f_IRAT_SendCoOrd ( UTRAN, cms_IRAT_Trigger );
    f_EUTRA_SetCellPower ( eutra_Cell1, v_RSEPRE_Cell1_T0 );
    
    f_EUTRA_TestBody_Set ( true, layer2 );
    
    //@siclog "Step 1" siclog@
    //The SS transmits one IP packet to the UE on the DRB associated with the default EPS bearer context on Cell 1
    DRB.send(cas_DRB_COMMON_REQ_PDCP_SDU(eutra_Cell1, tsc_RbId_DRB1, cs_TimingInfo_Now, v_PDCP_SDUList_DRB1));     /* @sic R5s120470 sic@ */
    
    //@siclog "Step 2" siclog@
    //SS transmits a DLInformationTransfer message on Cell 1 containing a CS SERVICE NOTIFICATION message
    SRB.send ( cas_SRB1_NasPdu_REQ( eutra_Cell1,
                                    cs_TimingInfo_Now,
                                    cs_NAS_Request( tsc_SHT_IntegrityProtected_Ciphered,
                                                    cs_508_Service_Notification ) ) );
    
    //@siclog "Step 3a1" siclog@
    //If needed, the incomming call is accepted through user interface
    if (not pc_ImmConnect) {
      f_UT_AnswerCSCall (UT);
    }
    
    //@siclog "Step 4" siclog@
    //Verify that the UE sends Extended Service Request
    SRB.receive ( car_SRB2_NasPdu_IND(eutra_Cell1,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                        cr_508_EXT_SERVICE_REQUEST(f_EUTRA_SecurityKSIasme_Get(),
                                                                                   bit2oct(v_GutiParams.M_TMSI)))));
    //@verdict UE sends a Extended Service Request message
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 13.1.3 Step 4");
    
    //@siclog "Step 5" siclog@
    //SS transmits an RRCConnectionRelease message on Cell 1 with IE redirectionInformation including UTRA-CarrierFreq of Cell 5
    f_EUTRA_RRC_ConnectionRelease_Common ( eutra_Cell1,
                                           cs_RRCConnectionRelease ( v_RRC_TI,
                                                                     v_ReleaseCause,
                                                                     v_RedirectedCarrierInfo,
                                                                     omit ) );
    
    //Tell the UTRAN PTC to take over the test case. When doing this also update the authentication parameters
    f_EUTRA_SendAuthParameters(eutra_Cell1, UTRAN);
    
    //Wait for end of test case
    f_IRAT_WaitForCoOrd_Trigger ( UTRAN );
    
    f_EUTRA_TestBody_Set ( false );
    
    //Remove E-UTRA cell
    f_EUTRA_ReleaseAllCells();
  }

  function f_TC_13_1_4_EUTRA() runs on EUTRA_PTC
  {
    var IRAT_CoOrd_SysInfo_Type v_UTRANSysInfo;
    
    f_EUTRA_Init (c4);
    
    f_EUTRA_CellInfo_InitMaxReferencePower (eutra_Cell1, -75);
    
    //Synchronise with UTRAN PTC and get Cell Parameters for UTRAN cell
    v_UTRANSysInfo := f_IRAT_WaitForCoOrd_SysInfo (UTRAN);
    
    //Set SIB6 for Cell 1 according to Table 13.1.4.3.3-2
    if (f_IRAT_GetUTRAN_FDD_TDD_Mode() == UTRAN_FDD) {
      f_EUTRA_SetSIB6_InterFreqCarrierFreqList_F8(eutra_Cell1,
                                                  cs_CarrierFreqUTRA_FDD_CRPrio (v_UTRANSysInfo.Utran[0].FDD.Freq,3),
                                                  omit);
    }
    else {
      f_EUTRA_SetSIB6_InterFreqCarrierFreqList_F8(eutra_Cell1,
                                                  omit,
                                                  cs_CarrierFreqUTRA_TDD_CRPrio (v_UTRANSysInfo.Utran[0].TDD.Freq,3));
    }
    
    //Create and configure cells
    f_EUTRA_CellConfig_Def (eutra_Cell1);
    
    f_IRAT_WaitForCoOrd_Trigger(UTRAN); // Sent in pre-preamble wait for UTRAN side to do pre-preamble @sic R5s110754 subject to approval of prose CR sic@
    //Bring UE to initial state
    f_EUTRA_Preamble (eutra_Cell1, STATE2_IDLEUPDATE); //@sic R5s120070 sic@
    
    //Tell UTRA PTC to set appropiate cell levels
    f_IRAT_SendCoOrd (UTRAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower ( eutra_Cell1, -75);
    
    f_EUTRA_TestBody_Set (true);
    
    // These steps are also used by other test cases
    f_CallSetupCSFallbackToUtranWithHO_Steps1To6 (v_UTRANSysInfo);
    f_EUTRA_TestBody_Set (false);
    
    //Wait till test case ends
    f_IRAT_WaitForCoOrd_Trigger (UTRAN);
    
    //Release non serving cell(s)
    f_EUTRA_ReleaseAllCells ();
  }

  function f_TC_13_1_5_EUTRA() runs on EUTRA_PTC
  {
    var GutiParameters_Type v_GutiParams;
    var IRAT_CoOrd_SysInfo_Type v_CoordInfo;
    var CoOrd_UTRANSysInfoFDD_Type v_UTRANSysInfoFDD;
    var CoOrd_UTRANSysInfoTDD_Type v_UTRANSysInfoTDD;
    var NasCount_Type v_NasCountDL;
    var octetstring v_HandoverToUtranCommand;
    var octetstring v_Nas_SecurityParamFromEUTRA;
    var PDCP_SDUList_Type v_PDCP_SDUList_DRB1 := { f_IPv4IPv6_IcmpEchoReply(f_LoopbackModeB_IP_Address_UE()) };      /* @sic R5s120470 sic@ */
    
    f_EUTRA_Init (c4);
    
    v_GutiParams := f_EUTRA_CellInfo_GetGuti(eutra_Cell1);
    
    //Synchronise with UTRAN PTC and get Cell Parameters for UTRAN cell
    v_CoordInfo := f_IRAT_WaitForCoOrd_SysInfo (UTRAN);
    
    //Build the HO-to-UTRAN command
    if (ischosen (v_CoordInfo.Utran[0].FDD)) {
      v_UTRANSysInfoFDD := v_CoordInfo.Utran[0].FDD;
      v_HandoverToUtranCommand := f_U_EncodeHandoverToUtran_64kPS_DCH4_FDD(v_UTRANSysInfoFDD.UplinkScrambingCode,
                                                                           v_UTRANSysInfoFDD.ScramblingCode,
                                                                           v_UTRANSysInfoFDD.Freq);
    }
    else {
      v_UTRANSysInfoTDD := v_CoordInfo.Utran[0].TDD;
      v_HandoverToUtranCommand := f_U_EncodeHandoverToUtran_64kPS_DCH4_TDD(v_UTRANSysInfoTDD.CellParametersID,
                                                                           v_UTRANSysInfoTDD.Freq);
    }
    //Create and configure cell
    f_EUTRA_CellConfig_Def (eutra_Cell1);
    
    f_IRAT_WaitForCoOrd_Trigger(UTRAN); // wait for UTRAN side to do pre-preamble @sic R5s110776 sic@
    //Bring UE to initial state
    f_EUTRA_Preamble ( eutra_Cell1, STATE2A_TESTLOOP_ModeB);
    f_EUTRA_RbEst_Def ( eutra_Cell1 );
    f_EUTRA_CloseUE_TestLoopModeB ( eutra_Cell1, '00'O );
    
    //Tell UTRA PTC to set appropiate cell levels
    f_IRAT_SendCoOrd (UTRAN, cms_IRAT_Trigger);
    
    f_EUTRA_TestBody_Set ( true, layer2 );
    
    //@siclog "Step 1" siclog@
    //The SS transmits one IP packet to the UE on the DRB associated with the default EPS bearer context
    DRB.send(cas_DRB_COMMON_REQ_PDCP_SDU(eutra_Cell1, tsc_RbId_DRB1, cs_TimingInfo_Now, v_PDCP_SDUList_DRB1));     /* @sic R5s120470 sic@ */
    
    //@siclog "Step 2" siclog@
    //Check: Does the UE loop back the IP packet on the DRB associated with the default EPS bearer context?
    DRB.receive (car_DRB_COMMON_IND_PDCP_SDUList(eutra_Cell1, tsc_RbId_DRB1, ?, v_PDCP_SDUList_DRB1));             /* @sic R5s120470 sic@ */
    
    //@siclog "Step 3" siclog@
    //Make the UE initiate an outgoing call
    f_UT_RequestCSCall(UT);
    
    //@siclog "Step 4" siclog@
    //The UE transmits an ULInformationTransfer message including Extanded Service Request
    SRB.receive(car_SRB2_NasPdu_IND(eutra_Cell1,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_EXT_SERVICE_REQUEST_MO(f_EUTRA_SecurityKSIasme_Get(),
                                                                                bit2oct(v_GutiParams.M_TMSI)))));
    
    
    //@siclog "Step 4A - 4B" siclog@
    f_EUTRA_UTRA_Capability (eutra_Cell1); //@sic R5-120776 sic@
    
    //Get NAS DL Count
    v_NasCountDL := f_EUTRA_SS_NAS_CountGetDLNext(); // @sic R5s110382 sic@
    //nas-securityParamFromEUTRA is the 4 least significant bits of the NAS downlink COUNT value 36.508, Table 4.6.1-6
    v_Nas_SecurityParamFromEUTRA := substr( v_NasCountDL, 3, 1);
    
    
    //Wait till SS local configuration is complete
    f_IRAT_WaitForCoOrd_Trigger (UTRAN);


    //@siclog "Step 5" siclog@
    //Stop periodic TA on source cell...
    //@sic R5s120342 sic@
    f_EUTRA_SS_CommonCellConfig(eutra_Cell1, cas_PUCCH_Synch_Config_REQ(eutra_Cell1, cs_TimingInfo_Now, cs_PUCCH_Synch_None));
    //The SS transmits a MobilityFromEUTRACommand message on Cell 1
    SRB.send ( cas_SRB1_RrcPdu_REQ ( eutra_Cell1,
                                     cs_TimingInfo_Now,
                                     cs_MobilityFromEutraCommand_Handover_UTRAN_CSFB ( v_HandoverToUtranCommand,
                                                                   v_Nas_SecurityParamFromEUTRA ) ) );
    
    //Wait till test case ends
    f_IRAT_WaitForCoOrd_Trigger (UTRAN);
    
    f_EUTRA_TestBody_Set(false);
    
    //Release non serving cell(s)
    f_EUTRA_ReleaseAllCells ();
  }

  function f_TC_13_1_15_EUTRA() runs on EUTRA_PTC
  {
    var GutiParameters_Type v_GutiParams;
    var IRAT_CoOrd_SysInfo_Type v_CoordInfo;
    var template (value) RedirectedCarrierInfo v_RedirectedCarrierInfo;
    
    f_EUTRA_Init (c4);

    //Receive UTRAN cell info
    v_CoordInfo := f_IRAT_WaitForCoOrd_SysInfo (UTRAN);

    //Set the Redirect Information in the RRCConnectionRelease message according to Table 13.1.15.3.3-4
    if (f_IRAT_GetUTRAN_FDD_TDD_Mode () == UTRAN_FDD ) {// @sic R5-115770 sic@
      v_RedirectedCarrierInfo := cs_RedirectionInfo_UtraFdd (v_CoordInfo.Utran[0].FDD.Freq);
    }
    else {
      v_RedirectedCarrierInfo := cs_RedirectionInfo_UtraTdd (v_CoordInfo.Utran[0].TDD.Freq);
    }
    f_EUTRA_CellInfo_InitMaxReferencePower (eutra_Cell1, -75);  //@sic R5s120086 sic@
    f_EUTRA_CellConfig_Def(eutra_Cell1);
    
    f_UT_ConfigureCombinedAttach (UT);
    
    f_EUTRA_Preamble(eutra_Cell1, STATE2_IDLEUPDATE, Combined);
    
    //Set power level according to "T0"
    f_IRAT_SendCoOrd (UTRAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower (eutra_Cell1, -75);
    
    f_EUTRA_TestBody_Set(true);
    
    //@siclog "Step 1" siclog@
    //Transmit a Paging message on Cell 1
    v_GutiParams := f_EUTRA_CellInfo_GetGuti(eutra_Cell1);
    f_EUTRA_UE_Page (eutra_Cell1,
                     cs_DomainNasPaging_OneRecord(cs_PagingUE_Identity_S_TMSI(v_GutiParams.MME_Code,
                                                                              v_GutiParams.M_TMSI),
                                                  cs));
    //@siclog "Step 2" siclog@
    //Receieve RRCConnectionRequest
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_Cell1);    // @sic R5-120721 change 3 sic@

    //@siclog "Step 3" siclog@
    //Send RRCConnectionSetup
    f_EUTRA_RRC_ConnectionSetup_Def (eutra_Cell1);
    
    //@siclog "Step 4" siclog@
    //receive RRCConnectionSetupComplete containing an EXTENDED SERVICE REQUEST with Service Type IE set to "mobile terminating CS fallback or 1xCS fallback"
    f_EUTRA_RRCConnectionSetupComplete_Def(eutra_Cell1,                                       // @sic R5s120121 MCC160 implementation sic@
                                           cr_508_RRCConnectionSetupComplete(tsc_RRC_TI_Def, ?, omit),
                                           cr_NAS_Indication(tsc_SHT_IntegrityProtected, //@sic R5s120086 sic@
                                                             cr_508_EXT_SERVICE_REQUEST(f_EUTRA_SecurityKSIasme_Get(),
                                                                                        bit2oct(v_GutiParams.M_TMSI))));
    //@siclog "Step 5-8" siclog@
    //Void
    
    //@siclog "Step 9" siclog@
    //Transmit RRCConnectionRelease to redirect UE to utran cell 5
    f_EUTRA_RRC_ConnectionRelease_Common (eutra_Cell1,
                                          cs_RRCConnectionRelease (tsc_RRC_TI_Def,
                                                                   other,
                                                                   v_RedirectedCarrierInfo,
                                                                   omit));
    //Ask UTRAN PTC to take over by sending auth parameters
    f_EUTRA_SendAuthParameters (eutra_Cell1, UTRAN);
    
    //Wait for end of test case
    f_IRAT_WaitForCoOrd_Trigger (UTRAN);
    f_EUTRA_TestBody_Set(false);
    
    //And remove the cell(s)
    f_EUTRA_ReleaseAllCells();
  }

  function f_TC_13_1_16_EUTRA() runs on EUTRA_PTC
  {
    var IRAT_CoOrd_SysInfo_Type v_CoordInfo;
    var CoOrd_UTRANSysInfoFDD_Type v_UTRANSysInfoFDD;
    var CoOrd_UTRANSysInfoTDD_Type v_UTRANSysInfoTDD;
    var NAS_MSG_Indication_Type v_NAS_Ind;
    var GutiParameters_Type v_GutiParams;
    var EUTRA_SecurityParams_Type v_AuthParams;
    var template (value) EUTRA_FDD_TDD_CellInfo_Type v_EUTRA_FDD_TDD_Info;
    var template (value) PhysicalConfigDedicated_AntennaInfo_Type v_AntennaInfo;
    var NasCount_Type v_NasCountDL;
    var octetstring v_HandoverToUtranCommand;
    var octetstring v_Nas_SecurityParamFromEUTRA;
    
    f_EUTRA_Init (c4);
    
    v_GutiParams := f_EUTRA_CellInfo_GetGuti(eutra_Cell1);
    v_EUTRA_FDD_TDD_Info := f_EUTRA_CellInfo_GetFDD_TDD_Info (eutra_Cell1);
    v_AntennaInfo :=  f_EUTRA_CellInfo_GetAntennaInfoDedicated (eutra_Cell1);
    
    //Create and configure cell
    f_EUTRA_CellConfig_Def (eutra_Cell1);
    
    //Synchronise with UTRAN PTC and get Cell Parameters for UTRAN cell
    v_CoordInfo := f_IRAT_WaitForCoOrd_SysInfo (UTRAN);
    
    //Build the HO-to-UTRAN command
    if (ischosen (v_CoordInfo.Utran[0].FDD)) {
      v_UTRANSysInfoFDD := v_CoordInfo.Utran[0].FDD;
      v_HandoverToUtranCommand := f_U_EncodeHandoverToUtran_64kPS_DCH4_FDD(v_UTRANSysInfoFDD.UplinkScrambingCode,
                                                                           v_UTRANSysInfoFDD.ScramblingCode,
                                                                           v_UTRANSysInfoFDD.Freq);
    }
    else {
      v_UTRANSysInfoTDD := v_CoordInfo.Utran[0].TDD;
      v_HandoverToUtranCommand := f_U_EncodeHandoverToUtran_64kPS_DCH4_TDD(v_UTRANSysInfoTDD.CellParametersID,
                                                                           v_UTRANSysInfoTDD.Freq);
    }
    
    f_IRAT_WaitForCoOrd_Trigger(UTRAN); // wait for UTRAN side to do pre-preamble @sic R5s110776 sic@
    f_EUTRA_Preamble (eutra_Cell1, STATE2_IDLEUPDATE); //@sic R5s1120111 sic@
    //Tell UTRA PTC to set appropiate cell levels
    f_IRAT_SendCoOrd (UTRAN, cms_IRAT_Trigger);
    
    f_EUTRA_TestBody_Set (true);
    
    //@siclog "Step 1" siclog@
    //Make the UE initiate an emergency call
    f_UT_RequestCSCall(UT, px_EmergencyCallNumber);
    
    //@siclog "Step 2-4" siclog@
    //Receive RRCConnectionRequest, Transmit RRCConnectionSetup & Receive EXTENDED SERVICE REQUEST
    v_NAS_Ind := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_Cell1,
                                                tsc_RRC_TI_Def,
                                                cr_EstablishmentCause_emergency_Access,
                                                cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                  cr_EXT_SERVICE_REQUEST_Common(f_EUTRA_SecurityKSIasme_Get(),
                                                                                                tsc_EST_CsFallback_EC,
                                                                                                bit2oct(v_GutiParams.M_TMSI),
                                                                                                omit)));
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Step 2 & 4");
    
    //@siclog "Step 5-6" siclog@
    //Transmit SecurityModeCommand & Receieve SecurityModeComplete to activate RRC security
    v_AuthParams := f_EUTRA_Security_Get();
    v_AuthParams := f_EUTRA_RRC_ActivateSecurity(eutra_Cell1, v_AuthParams, v_NAS_Ind.SecurityProtection.NasCount);
    f_EUTRA_Security_Set (v_AuthParams);
    
    //@siclog "Step 7" siclog@
    //Transmit RRCConnectionReconfiguration message  (with condition SRB2-DRB(1,0).
    SRB.send (cas_SRB1_RrcPdu_REQ (eutra_Cell1,
                                   cs_TimingInfo_Now,
                                   cs_RRCConnectionReconfiguration_SRB2_1AM_DRB_Est (tsc_RRC_TI_Def,
                                                                                     v_EUTRA_FDD_TDD_Info.cqi_ReportConfig,
                                                                                     v_EUTRA_FDD_TDD_Info.soundingRS_UL_Config,
                                                                                     v_AntennaInfo)));
    //@siclog "Step 8" siclog@
    //Receive RRCConnectionReconfigurationComplete
    SRB.receive (car_SRB1_RrcPdu_IND (eutra_Cell1, cr_508_RRCConnectionReconfigurationComplete (tsc_RRC_TI_Def)));
    
    //@siclog "Step 8A - 8B" siclog@
    f_EUTRA_UTRA_Capability (eutra_Cell1); //@sic R5-120776 sic@
    
    //Get NAS DL Count
    v_NasCountDL := f_EUTRA_SS_NAS_CountGetDLNext(); // @sic R5s110382 sic@
    //nas-securityParamFromEUTRA is the 4 least significant bits of the NAS downlink COUNT value
    v_Nas_SecurityParamFromEUTRA := substr(v_NasCountDL, 3, 1);
    
    //Wait For UTRA PTC to complete Ciphering configuration
    f_IRAT_WaitForCoOrd_Trigger (UTRAN);
    //@siclog "Step 9" siclog@
    //Stop periodic TA on source cell...
    f_EUTRA_SS_CommonCellConfig(eutra_Cell1, cas_PUCCH_Synch_Config_REQ(eutra_Cell1, cs_TimingInfo_Now, cs_PUCCH_Synch_None));
    //Send MobilityFromEUTRACommand with IE handover
    SRB.send (cas_SRB1_RrcPdu_REQ (eutra_Cell1,
                                   cs_TimingInfo_Now,
                                   cs_MobilityFromEutraCommand_Handover_UTRAN_CSFB(v_HandoverToUtranCommand,
                                                                                   v_Nas_SecurityParamFromEUTRA)));
    //Wait till test case ends
    f_IRAT_WaitForCoOrd_Trigger (UTRAN);
    f_EUTRA_TestBody_Set (false);
    
    //Release non serving cell(s)
    f_EUTRA_ReleaseAllCells ();
  }

  function f_TC_13_3_2_1_EUTRA ( ) runs on EUTRA_PTC
  { /* Inter-system connection re-establishment / E-UTRAN to UTRAN / Further data are to be transferred */
    
    const octetstring tsc_IP_PDU_delay := 'FF'O;// IP_PDU_delay = 255 sec
    var PDCP_SDUList_Type v_PDCP_SDUList_DRB1 := { f_IPv4IPv6_IcmpEchoReply(f_LoopbackModeB_IP_Address_UE()) };      /* @sic R5s120470 sic@ */
    
    //Initialise all cells, security and mobile parameters
    f_EUTRA_Init(c4);
    f_EUTRA_CellConfig_Def (eutra_Cell1);
    
    f_EUTRA_Preamble(eutra_Cell1, STATE2A_TESTLOOP_ModeB);
    f_EUTRA_RbEst_Def ( eutra_Cell1 );
    f_EUTRA_CloseUE_TestLoopModeB (eutra_Cell1, tsc_IP_PDU_delay);
    
    //Start of test body
    f_EUTRA_TestBody_Set ( true, layer2 );
    
    //@siclog "Step 1" siclog@
    //The SS transmits one IP packet to the UE on the DRB associated with the default EPS bearer context on Cell 1
    DRB.send(cas_DRB_COMMON_REQ_PDCP_SDU(eutra_Cell1, tsc_RbId_DRB1, cs_TimingInfo_Now, v_PDCP_SDUList_DRB1));     /* @sic R5s120470 sic@ */

    //@siclog "Step 2" siclog@
    f_Delay(1.0); // 1 second delay to allow loop back PDU to be received by UE
    //Tell the UTRAN PTC to take over the test case. When doing this also update the authentication parameters
    f_EUTRA_SendAuthParameters(eutra_Cell1, UTRAN);
    f_EUTRA_SetCellPower (eutra_Cell1, tsc_NonSuitableOffCellRS_EPRE);
    
    //Test case ends
    f_IRAT_WaitForCoOrd_Trigger (UTRAN);
    f_EUTRA_TestBody_Set ( false );
    
    //Remove the cell(s)
    f_EUTRA_ReleaseAllCells();
    
  } // end of f_TC_13_3_2_1_EUTRA

  function f_TC_13_4_2_4_EUTRA ( ) runs on EUTRA_PTC
  { /* Inter-system mobility / Service based redirection from UTRA to E-UTRA */
    
    const octetstring tsc_IP_PDU_delay := '00'O;// IP_PDU_delay = 0 sec
    
    var IRAT_CoOrd_SysInfo_Type v_CoordInfo;
    var boolean v_CSInOtherRAT := false;
    /* @sic R5s120092 Additional Changes sic@ */
    var NAS_MSG_Indication_Type v_NasInd;
    var EPS_UpdateTypeValue v_UpdateType, v_UpdateResult ;
    var EUTRA_SecurityParams_Type v_SecurityParams ;
    var template AdditionalUpdateType v_AdditionalUpdateType ;
    var template (present) EPS_BearerContextStatus v_EPS_ContextStatus_Rx;
    var GutiParameters_Type v_GutiParams;
    var template (omit) EPS_BearerContextStatus v_EPS_ContextStatus_Tx;
    var PDCP_SDUList_Type v_PDCP_SDUList_DRB1 := { f_IPv4IPv6_IcmpEchoReply(f_LoopbackModeB_IP_Address_UE()) };      /* @sic R5s120470 sic@ */
    
    timer t_IdleMode_GenericTimer := tsc_IdleMode_GenericTimer;
    timer t_WatchDogTimer := 1.0; //1 sec Watch Dog timer
    
    //Initialise all cells, security and mobile parameters
    f_EUTRA_Init(c4);
    //Set maximum cell powel level for Cell 1
    f_EUTRA_CellInfo_InitMaxReferencePower ( eutra_Cell1, -75 );
    
    //Coordinate with UTRAN component to receive UTRAN frequencies
    v_CoordInfo := f_IRAT_WaitForCoOrd_SysInfo (UTRAN);
    //Send the cell info to the UTRAN component
    f_IRAT_Send_EUTRA_SysInfoToOtherPort(UTRAN,
                                         f_EUTRA_CellInfo_GetEARFCN_DL(eutra_Cell1),
                                         f_ConvertDL_BandwidthToInteger (f_EUTRA_CellInfo_GetDL_ChBandwidth (eutra_Cell1)));
    f_EUTRA_CellConfig_Def (eutra_Cell1);
    // Go to State 2A
    f_EUTRA_Preamble(eutra_Cell1, STATE2A_TESTLOOP_ModeB);
    /* f_EUTRA_RbEst_Def ( eutra_Cell1 );
       f_EUTRA_RRC_ConnectionRelease(eutra_Cell1); */
    // Send authentication parameters to UTRAN cell and handover control
    f_EUTRA_SendAuthParameters(eutra_Cell1, UTRAN);
    //Switch off the EUTRA cell
    f_EUTRA_SetCellPower (eutra_Cell1, tsc_NonSuitableOffCellRS_EPRE);
    
    //Set cell paramters according to T0
    v_CSInOtherRAT := f_EUTRA_InterRAT_InitialiseAuthParams(UTRAN);
    /* @sic R5s120092 R5s120481 Additional Changes sic@ */
    v_UpdateType := f_GetEPSTAUType(NORMAL);
     v_UpdateResult:= v_UpdateType;
    if (v_UpdateType == tsc_EpsUpdate_Combined_TaLaUpdate)
     {
     v_UpdateType := tsc_EpsUpdate_Combined_IMSIAttach;
     }

     v_SecurityParams := f_EUTRA_Security_Get();
     v_AdditionalUpdateType := f_GetAdditionalUpdateType ();
     v_EPS_ContextStatus_Rx := cr_508_EPS_BearerContextStatusTAUReq;
     v_GutiParams:= f_EUTRA_CellInfo_GetGuti ( eutra_Cell1);
     f_EUTRA_SetCellPower (eutra_Cell1, -75);
    //Check that the UE camps on EUTRA cell 1 with the help of generic test procedure in TS 36.508 subclause 6.4.2.7A.
    //@siclog "Step 9-15" siclog@
    /* @sic R5s120092 Additional Changes sic@ */
    t_IdleMode_GenericTimer.start;
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_Cell1,
                                               tsc_RRC_TI_Def,
                                               ?,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_TAU_RequestIdleMobilityDiffRAT(v_UpdateType,
                                                                                                   f_EUTRA_SecurityKSIasme_Get(),
                                                                                                   v_EPS_ContextStatus_Rx,
                                                                                                   v_AdditionalUpdateType,
                                                                                                   tsc_NasKsi_NativeSecurityContext )));
    v_SecurityParams.NonceUE := oct2bit(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.nonce.nonceValue);
    v_EPS_ContextStatus_Tx := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus; // Send this back in the Accept
    v_SecurityParams.NAS_SecurityCap := f_EUTRA_FillNAS_SecurityCapability_TAU(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST);
      f_EUTRA_Security_Set(v_SecurityParams);
      
      
   f_EUTRA_TrackingAreaUpdate_Accept_Complete ( eutra_Cell1,
                                                v_GutiParams,
                                                v_UpdateType,
                                                v_EPS_ContextStatus_Tx,
                                                v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType,
                                                NORMAL);
                                                              
    
    //@siclog "Step 10A" siclog@
    //+   SS establishes DRB associated with the default EPS bearer context
    
    //f_EUTRA_TrackingAreaUpdateFromAnotherRAT ( eutra_Cell1, tsc_RRC_TI_Def, v_CSInOtherRAT, true, true, false, NORMAL); // RRC Connection is not released
    t_IdleMode_GenericTimer.stop;
    // This step is not clear from prose but possibly performed based on 24.008 clause 4.7.13.5 case b.3
    t_WatchDogTimer.start; //@sic R5s120092 sic@
    alt {
      []  SRB.receive(car_SRB1_NasPdu_IND(eutra_Cell1,
                                          cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_SERVICE_REQUEST(f_EUTRA_SecurityKSIasme_Get()))))
        {
          t_WatchDogTimer.stop;
        }
      [] t_WatchDogTimer.timeout
        { // Do nothing
        }
    }
    
    // UE has an established DRB with loopback activated
    f_EUTRA_Activate_SRB2_DRB_SendRrcMsg ( eutra_Cell1,  // @sic R5s110318 ch. 2.7 sic@
                                           tsc_RRC_TI_Def,
                                           v_NasInd.SecurityProtection.NasCount);
    SRB.receive ( car_SRB1_RrcPdu_IND ( eutra_Cell1,cr_508_RRCConnectionReconfigurationComplete ( tsc_RRC_TI_Def ) ) );
    //f_EUTRA_RRCConnectionReconfiguration_SRB2_1AM_DRB_Est( eutra_Cell1 );
    
    //@siclog "Step 16" siclog@
    f_EUTRA_CloseUE_TestLoopModeB (eutra_Cell1, tsc_IP_PDU_delay);
    
    //@siclog "Step 17" siclog@
    //The SS transmits one IP packet to the UE on the DRB associated with the default EPS bearer context on Cell 1
    DRB.send(cas_DRB_COMMON_REQ_PDCP_SDU(eutra_Cell1, tsc_RbId_DRB1, cs_TimingInfo_Now, v_PDCP_SDUList_DRB1));     /* @sic R5s120470 sic@ */

    //@siclog "Step 18" siclog@
    /* Check: Does the UE loop back the IP packet on the DRB associated with the default EPS bearer context? */
    DRB.receive(car_DRB_COMMON_IND_PDCP_SDUList(eutra_Cell1, tsc_RbId_DRB1, ?, v_PDCP_SDUList_DRB1));              /* @sic R5s120470 sic@ */

    // End of test case
    f_IRAT_SendCoOrd (UTRAN, cms_IRAT_Trigger);
    f_EUTRA_TestBody_Set ( false );
    f_EUTRA_Postamble ( eutra_Cell1, E3_TESTMODE );
  } // end of f_TC_13_4_2_4_EUTRA

  function f_TC_13_4_2_1_EUTRA() runs on EUTRA_PTC
  {
    var IRAT_CoOrd_SysInfo_Type v_CoordInfo;
    var CoOrd_UTRANSysInfoFDD_Type v_UTRANSysInfoFDD;
    var CoOrd_UTRANSysInfoTDD_Type v_UTRANSysInfoTDD;
    var ARFCN_ValueUTRA v_UTRAN_ARFCN_Cell5;
    var template MeasResults.measResultNeighCells v_MeasurementResult_Step6;
    var EUTRA_SecurityParams_Type v_Auth_Params;
    var octetstring v_HandoverToUtranCommand;
    var octetstring v_Nas_SecurityParamFromEUTRA;
    var UTRA_RSCP_dBm_Type v_UTRA_RSCP_dBm_Type := -78;
    var template (value) ReportConfigToAddMod.reportConfig v_ReportConfig;
    var NasCount_Type v_NasCountDL;
    var Frequency_IE_Type v_Frequency_IE_Cell1;
    var ChannelBandwidthDependency_Type v_ChBandDependency_Cell1 ;
    var integer v_UTRAN_PhysChId_CellID;
    var template  (value) MeasObjectUTRA.cellsToAddModList v_CellsToAddModList;
    var PDCP_SDUList_Type v_PDCP_SDUList_DRB1 := { f_IPv4IPv6_IcmpEchoReply(f_LoopbackModeB_IP_Address_UE()) };      /* @sic R5s120470 sic@ */
    
    //Init cell array and security
    f_EUTRA_Init (c4);
    
    //Create and configure cell with SRBs and one AM DRB.
    //The AM DRB will be associated with the default EPS bearer context
    f_EUTRA_CellConfig_Def (eutra_Cell1);
    v_Frequency_IE_Cell1 := f_EUTRA_CellInfo_GetFrequencyIEs (eutra_Cell1);
    v_ChBandDependency_Cell1 := f_EUTRA_BandDependentParam(v_Frequency_IE_Cell1.DL_ChBandwidth, v_Frequency_IE_Cell1.UL_ChBandwidth);
    
    

    //Synchronise with UTRAN PTC and get Cell Parameters for UTRAN cell
    v_CoordInfo := f_IRAT_WaitForCoOrd_SysInfo (UTRAN);
    
    //Build the HO-to-UTRAN command and the Measurement report to be received in step 6
    if (ischosen (v_CoordInfo.Utran[0].FDD)) {
      v_UTRANSysInfoFDD := v_CoordInfo.Utran[0].FDD;
      v_UTRAN_ARFCN_Cell5 := v_UTRANSysInfoFDD.Freq;
      v_UTRAN_PhysChId_CellID := v_UTRANSysInfoFDD.ScramblingCode;
      v_HandoverToUtranCommand := f_U_EncodeHandoverToUtran_64kPS_FDD(v_UTRANSysInfoFDD.UplinkScrambingCode,
                                                                      v_UTRAN_PhysChId_CellID,
                                                                      v_UTRAN_ARFCN_Cell5);
      v_MeasurementResult_Step6 := cr_MeasResultNeighCells_measResultListUTRA_1Entry_FDD(v_UTRAN_PhysChId_CellID, omit,?,omit);
      v_CellsToAddModList := cs_MeasObjectUTRA_cellsToAddModList_FDD( cs_CellsToAddModListUTRA_FDD_1Entry( 1, v_UTRAN_PhysChId_CellID ) );
    }
    else {
      v_UTRANSysInfoTDD := v_CoordInfo.Utran[0].TDD;
      v_UTRAN_ARFCN_Cell5 := v_UTRANSysInfoTDD.Freq;
      v_UTRAN_PhysChId_CellID :=v_UTRANSysInfoTDD.CellParametersID;
      v_HandoverToUtranCommand := f_U_EncodeHandoverToUtran_64kPS_TDD(v_UTRAN_PhysChId_CellID,
                                                                      v_UTRAN_ARFCN_Cell5);
      v_MeasurementResult_Step6 := cr_MeasResultNeighCells_measResultListUTRA_1Entry_TDD(v_UTRAN_PhysChId_CellID, omit,?,omit);
      v_CellsToAddModList := cs_MeasObjectUTRA_cellsToAddModList_TDD( cs_CellsToAddModListUTRA_TDD_1Entry( 1, v_UTRAN_PhysChId_CellID ) );
    }
    //@sic R5s120312 sic@
    //Wait for Completion of Pre-preamble.
    f_IRAT_WaitForCoOrd_Trigger (UTRAN);
    //Bring UE to Initial state
    //UE is in state Generic RB Established, UE test mode activated (state 3A) according to [18] using the UE TEST LOOP MODE B
    f_EUTRA_Preamble (eutra_Cell1, STATE2A_TESTLOOP_ModeB);
    f_EUTRA_RbEst_Def (eutra_Cell1);
    f_EUTRA_CloseUE_TestLoopModeB (eutra_Cell1, '00'O);
    
    //Set cell power levels according to T0
    f_IRAT_SendCoOrd (UTRAN, cms_IRAT_Trigger);
    
    //Get security parameters
    v_Auth_Params := f_EUTRA_Security_Get ();

    //Start the test case
    f_EUTRA_TestBody_Set (true, layer2);
    
    

    //@siclog "Step 1" siclog@
    //Step 1: Transmits one IP packet to the UE on the DRB associated with the default EPS bearer context
    DRB.send(cas_DRB_COMMON_REQ_PDCP_SDU(eutra_Cell1, tsc_RbId_DRB1, cs_TimingInfo_Now, v_PDCP_SDUList_DRB1));     /* @sic R5s120470 sic@ */
    
    //@siclog "Step 2" siclog@
    //Check if UE loops back the IP packet
    DRB.receive(car_DRB_COMMON_IND_PDCP_SDUList(eutra_Cell1, tsc_RbId_DRB1, ?, v_PDCP_SDUList_DRB1));  /* @sic R5s120470 sic@ */
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Test Case 13.4.2.1 Step 2");
    
    //@siclog "Step 3-4" siclog@
    //@sic R5s110743 R5120645 sic@
    
    // Note the name TDD is misleading here and as per prose it is same for FDD and TDD.
    v_ReportConfig := cs_508_ReportConfigInterRAT_B2_UTRA_ConditionTDD(-90,v_UTRA_RSCP_dBm_Type) ;
    
    f_EUTRA_RRCConnectionReconfiguration_MeasConfig(eutra_Cell1, cs_508_RRCConnectionReconfiguration_MeasConfig_UTRAN_13_4_2_1 (v_Frequency_IE_Cell1.UL_DL_Earfcn.dl_CarrierFreq,
                                                                                                                                v_ChBandDependency_Cell1.AllowedMeasBandwidth,
                                                                                                                                v_UTRAN_ARFCN_Cell5, v_ReportConfig, v_CellsToAddModList));
    //@siclog "Step 5" siclog@
    //Set Cell parameters according to T1
    f_IRAT_SendCoOrd (UTRAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower (eutra_Cell1, -100);
    
    //@siclog "Step 6" siclog@
    //Receive a MeasurementReport message on Cell 1
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_Cell1,
                                    cr_MeasurementReport_UTRAN(v_MeasurementResult_Step6)));
    //@siclog "Step 6A - 6B" siclog@
    f_EUTRA_UTRA_Capability (eutra_Cell1); //@sic R5-120776 sic@
    
    //Get NAS DL Count
    v_NasCountDL := f_EUTRA_SS_NAS_CountGetDLNext(); // @sic R5s110382 sic@
    //nas-securityParamFromEUTRA is the 4 least significant bits of the NAS downlink COUNT value 36.508, Table 4.6.1-6
    v_Nas_SecurityParamFromEUTRA := substr(v_NasCountDL,3, 1);
    
    //Wait for Security configuration completion on UTRAN.
    f_IRAT_WaitForCoOrd_Trigger (UTRAN);
    
    //@siclog "Step 7" siclog@
    //Transmit RRCConnectionReconfiguration message
    SRB.send (cas_SRB1_RrcPdu_REQ (eutra_Cell1,
                                   cs_TimingInfo_Now,
                                   cs_MobilityFromEutraCommand (tsc_RRC_TI_Def,
                                                                v_HandoverToUtranCommand,
                                                                v_Nas_SecurityParamFromEUTRA)));
    //Stop UL grant transmission on cell 1
    f_EUTRA_StopULGrantTransmission (eutra_Cell1, cs_TimingInfo_Now);
    
    //Test case ends
    f_IRAT_WaitForCoOrd_Trigger (UTRAN);
    f_EUTRA_TestBody_Set ( false );
    
    //Remove the cell(s)
    f_EUTRA_ReleaseAllCells();
  }

}
