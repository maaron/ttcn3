// ***************************************************************************
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2012, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3v10.1.0
// * $Date: 2012-09-04 15:06:15 +0200 (Tue, 04 Sep 2012) $
// * $Rev: 7298 $
// ***************************************************************************

module NAS_ServiceRequest_EOnly {

  import from EUTRA_RRC_ASN1_Definitions language "ASN.1:1997" all;
  import from CommonDefs all;
  import from CommonIP all;
  import from EPS_NAS_Constants all;
  import from EPS_NAS_MsgContainers all;
  import from EPS_NAS_Templates all;
  import from EPS_NAS_TypeDefs all;
  import from EUTRA_ASP_DrbDefs all;
  import from EUTRA_ASP_SrbDefs all;
  import from EUTRA_AspCommon_Templates all;
  import from EUTRA_AuxiliaryFunctions all;
  import from EUTRA_CSG_Functions all;
  import from EUTRA_CellInfo all;
  import from EUTRA_CommonDefs all;
  import from EUTRA_CommonProcedures all;
  import from EUTRA_Component all;
  import from EUTRA_ConfigurationSteps all;
  import from EUTRA_DRB_Templates all;
  import from EUTRA_LoopBack all;
  import from EUTRA_NASCommonFunctions all;
  import from EUTRA_NASSteps all;
  import from EUTRA_Paging all;
  import from EUTRA_RRCSteps all;
  import from EUTRA_RRC_Templates all;
  import from EUTRA_SRB_Templates all;
  import from EUTRA_SecurityFunctions all;
  import from EUTRA_Timing all;
  import from NAS_AuxiliaryDefsAndFunctions all;
  import from NAS_CommonTemplates all;
  import from NAS_CommonTypeDefs all;
  import from Parameters all;
  import from UpperTesterFunctions all;

group LocalTemplates {

template NAS_UL_Message_Type cdr_ATTACH_REQUEST_WithNativeSecCtxGutiTAI(template (present) NAS_AttDetValue_Type p_AttachTypeValue,
                                                                        template AdditionalUpdateType p_AdditionalUpdateType,
                                                                        template (present) NAS_KsiValue   p_KsiValue,
                                                                        template (present) MobileIdentity p_MobileId,
                                                                        NAS_PlmnId                        p_PlmnId,
                                                                        NAS_Tac                           p_Tac)  // @sic R5s110395 sic@
  modifies cr_508_ATTACH_REQUEST :=
{ /* @status    APPROVED */
  aTTACH_REQUEST := {
    nasKeySetId              := cr_NAS_KeySetIdentifier(p_KsiValue, tsc_NasKsi_NativeSecurityContext),
    epsMobileIdentity        := p_MobileId,  // @sic R5s110176 Baseline Moving sic@
    lastVisitedRegisteredTai := cr_TAI (p_PlmnId, p_Tac) // @sic R5s110395 sic@
  }
};

} // end of group LocalTemplates

group TestcaseImplementations {

function f_TC_9_3_1_1_EUTRA() runs on EUTRA_PTC
{
  /* @desc Service Request initiated by UE for user data */
  
  f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1); // @sic R5s106627 sic@
  
  // create cell and send out system information
  f_EUTRA_CellConfig_Def (eutra_CellA);
  
  // Preamble: The UE is in state Loopback Activated (State 4) according to TS 36.508
  // using the specific message content of CLOSE UE TEST LOOP message in table
  // 9.3.1.1.3.3-1.
  // ==========================================================================
  f_EUTRA_Preamble(eutra_CellA, STATE2A_TESTLOOP_ModeB);
  f_EUTRA_RbEst_Def(eutra_CellA);
  f_EUTRA_CloseUE_TestLoopModeB(eutra_CellA, '05'O);
  
  f_EUTRA_TestBody_Set(true);
  
  fl_TC_9_3_1_1_Body();
  
  // Postamble
  f_EUTRA_TestBody_Set(false);
  f_EUTRA_Postamble(eutra_CellA, E2_CONNECTED);//@sic R5-103875 sic@
}; // function f_TC_9_3_1_1_EUTRA

function fl_TC_9_3_1_1_Body() runs on EUTRA_PTC
{
  var NAS_MSG_Indication_Type v_NAS_Ind;
  var PDCP_SDUList_Type v_PDCP_SDUList_DRB1 := { f_IPv4IPv6_IcmpEchoReply(f_LoopbackModeB_IP_Address_UE()) };      /* @sic R5s120470 sic@ */

  // The SS transmits one IP Packet to the UE (over default DRB 0)
  //@siclog "Step 1" siclog@
  DRB.send (cas_DRB_COMMON_REQ_PDCP_SDU(eutra_CellA, tsc_RbId_DRB1, cs_TimingInfo_Now, v_PDCP_SDUList_DRB1)); // @sic R5s100135, R5s100189 sic@
  
  // The SS waits 1 second after the IP packet has been transmitted in step 1
  //+ and then transmits an RRCConnectionRelease message
  //@siclog "Step 2" siclog@
  f_Delay (1.0);
  f_EUTRA_RRC_ConnectionRelease(eutra_CellA);  /* @sic R5-110803 change 13 sic@ */
  
  //+   Check: Check: Does the UE transmit an RRCConnectionRequest message with establishmentCause set
  //             to mo-Data followed by a SERVICE REQUEST message? [1,P]
  //+ Note: Triggered when timer T_delay_modeB (IP PDU delay time) expires and
  //+ pending uplink data exist in buffered PDCP SDUs according to [25] clause
  //+ 5.4.4.3.
  //@siclog "Step 3" siclog@
  v_NAS_Ind := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                             tsc_RRC_TI_Def,
                                             cr_EstablishmentCause_MoData,
                                             cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                               cr_508_SERVICE_REQUEST(f_EUTRA_SecurityKSIasme_Get())));
  
  f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 3");
  
  // + Step 4-7: @sic R5-102180 sic@ @sic R5s100300 sic@
  // Steps 6 to 9 of the generic radio bearer establishment procedure (TS 36.508 5.4.3.3-1) are executed
  // to successfully complete the service request procedure
  //  f_EUTRA_ServiceReqPostamble_508Steps6_9 (eutra_CellA, v_NasInd);
  //@siclog "Step 4 - 7" siclog@
  f_EUTRA_Activate_SRB2_DRB_SendRrcMsg ( eutra_CellA,
                                         tsc_RRC_TI_Def,
                                         v_NAS_Ind.SecurityProtection.NasCount);
  interleave {
    [] SRB.receive(car_SRB1_RrcPdu_IND(eutra_CellA, cr_508_RRCConnectionReconfigurationComplete(tsc_RRC_TI_Def))) {}
    [] DRB.receive(car_DRB_COMMON_IND_PDCP_SDUList(eutra_CellA, tsc_RbId_DRB1, ?, v_PDCP_SDUList_DRB1)) {}
  }
  
} // function fl_TC_9_3_1_1_Body

function f_TC_9_3_1_7_EUTRA() runs on EUTRA_PTC
{
  /// @desc Service Request / Rejected / UE identity cannot be derived by the network
    
  f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);  // @sic R5s106627 sic@
  
  // create cell and send out system information
  f_EUTRA_CellConfig_Def (eutra_CellA);
  
  f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE);
  f_EUTRA_TestBody_Set(true);
  
  fl_TC_9_3_1_7_Body();
  
  // Postamble
  f_EUTRA_TestBody_Set(false);
  f_EUTRA_Postamble(eutra_CellA, E2_CONNECTED);//@sic R5-103875 sic@
  
}// function f_TC_9_3_1_7_EUTRA

function fl_TC_9_3_1_7_Body() runs on EUTRA_PTC
{
  var GutiParameters_Type v_Guti_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
  var SRB_COMMON_IND v_ReceivedAsp;
  var NAS_MSG_Indication_Type v_NasInd;
  var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (); //used to follow TTCN3 v411 standard
  var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(NORMAL); // @sic R5s110176 sic@
  timer t_Wait := f_EUTRA_SetTimerToleranceMax( eutra_CellB, nasTTCNTimer, 30.0);//@sic  R5-110775 sic@
  timer t_WaitforAttach := f_EUTRA_SetTimerToleranceMax( eutra_CellB, nonProtocolTimer, 1.0); //@sic  R5-110775 sic@

  //+   The SS pages the UE using S-TMSI with CN domain indicator set to "PS".
  //@siclog "Step 1" siclog@
  f_EUTRA_UE_Page(eutra_CellA,
                  cs_NasPaging_OneRecord(cs_PagingUE_Identity_S_TMSI(v_Guti_Params.MME_Code,
                                                                     v_Guti_Params.M_TMSI)));
  
  
  //+   The UE transmits a SERVICE REQUEST message.
  //@siclog "Step 2" siclog@
  v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                             tsc_RRC_TI_Def,
                                             cr_EstablishmentCause_mt_Access,
                                             cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                               cr_508_SERVICE_REQUEST(f_EUTRA_SecurityKSIasme_Get())));

  //+   The SS transmits a SERVICE REJECT message with the EMM cause set to #9
  //+   (UE identity cannot be derived by the network).
  //@siclog "Step 3" siclog@
  SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                               cs_TimingInfo_Now,
                               cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                              cs_508_SERVICE_REJECT(tsc_EmmCause_UEIdentityNotDerived))));

  //+   Check: Does the UE transmit an ATTACH REQUEST message? (1,P)
  //@siclog "Step 4" siclog@
  //@sic  R5-110775 sic@
  t_WaitforAttach.start; // @sic R5-106114 sic@
  alt {
    []  SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                        cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                          cdr_ATTACH_REQUEST_WithIMSIAndnoTAI(v_AttachType,
                                                                                                              v_AdditionalUpdateType,
                                                                                                              f_Imsi2MobileIdentity(px_IMSI_Def)
                                                                                                              ),  // @sic R5-112109 sic@
                                                                          cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                          f_GetPdnType()))))
      -> value v_ReceivedAsp
      {
        v_NasInd := v_ReceivedAsp.Signalling.Nas[0];
        t_WaitforAttach.stop;
        f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 4");
      }
    [] t_WaitforAttach.timeout
      {
        //@siclog "Step 3a1" siclog@
        //+   The SS releases the RRC connection.
        f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
        //@siclog "Step 3a2" siclog@
        //+   IF not pc_Automatic_EPS_Re_Attach, Attach is triggered by AT command.
        if (not pc_Automatic_EPS_Re_Attach) { // @sic R5-110777 sic@ @sic R5-121541 sic@
          f_UT_TriggerAttach (UT);
        }
        
        //Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds?
        //@siclog "Step 4" siclog@
        t_Wait.start;
        v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                                   tsc_RRC_TI_Def,
                                                   cr_EstablishmentCause_Any,
                                                   cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                     cdr_ATTACH_REQUEST_WithIMSIAndnoTAI(v_AttachType,
                                                                                                                         v_AdditionalUpdateType,
                                                                                                                         f_Imsi2MobileIdentity(px_IMSI_Def)),  // @sic R5-112109 sic@
                                                                                     cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                     f_GetPdnType())));  /* @sic R5-120721 change 3 sic@ */
        t_Wait.stop;
        f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "step 4");
      }
  }
  //@siclog "Step 5 - 16" siclog@
  f_EUTRA_IdleUpdated_Step5_17(eutra_CellA, STATE2_IDLEUPDATE, NORMAL, v_NasInd, false); // @sic R5-105005 sic@
  
}

function f_TC_9_3_1_7a_EUTRA() runs on EUTRA_PTC
{
  /// @desc Service Request / Rejected / UE implicitly detached
    
  f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);  // @sic R5s106627 sic@
  
  // create cell and send out system information
  f_EUTRA_CellConfig_Def (eutra_CellA);
  
  f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE);
  f_EUTRA_TestBody_Set(true);
  
  fl_TC_9_3_1_7a_Body();
  
  // Postamble
  f_EUTRA_TestBody_Set(false);
  f_EUTRA_Postamble(eutra_CellA, E2_CONNECTED);//@sic R5-103875, R5-105005 sic@
  
}// function f_TC_9_3_1_7a_EUTRA

function fl_TC_9_3_1_7a_Body() runs on EUTRA_PTC
{
  // get all data which are required for a GUTI
  var GutiParameters_Type v_Guti_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
  var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get();
  var NAS_MSG_Indication_Type v_NasInd;
  var SRB_COMMON_IND v_ReceivedAsp;
  var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (); //used to follow TTCN3 v411 standard
  var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(NORMAL); // @sic R5s110176 sic@
  timer t_Wait := f_EUTRA_SetTimerToleranceMax( eutra_CellB, nasTTCNTimer, 30.0);//@sic  R5-110774 sic@
  timer t_WaitforAttach := f_EUTRA_SetTimerToleranceMax( eutra_CellB, nonProtocolTimer, 1.0); //@sic  R5-110774 sic@
  
  //+   The SS pages the UE using S-TMSI with CN domain indicator set to "PS".
  //@siclog "Step 1" siclog@
  f_EUTRA_UE_Page(eutra_CellA,
                  cs_NasPaging_OneRecord(cs_PagingUE_Identity_S_TMSI(v_Guti_Params.MME_Code,
                                                                     v_Guti_Params.M_TMSI)));
  
  //+   The UE transmits a SERVICE REQUEST message.
  //@siclog "Step 2" siclog@
  v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                             tsc_RRC_TI_Def,
                                             cr_EstablishmentCause_mt_Access,
                                             cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                               cr_508_SERVICE_REQUEST(f_EUTRA_SecurityKSIasme_Get())));
  
  //+   The SS transmits a SERVICE REJECT message with the EMM cause set to
  //+   'Implicitly detached'.
  //@siclog "Step 3" siclog@
  SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                               cs_TimingInfo_Now,
                               cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                              cs_508_SERVICE_REJECT(tsc_EmmCause_ImplicitlyDetached))));
  
  
  
  ///+   Check: Does the UE transmit an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message
  //          and integrity protected using the native security context resulting from authentication during the test preamble?  1   P
  //@siclog "Step 4" siclog@
  //@sic  R5-110774 sic@
  t_WaitforAttach.start; // @sic R5-106114 sic@
  alt {
    []  SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                        cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                          cdr_ATTACH_REQUEST_WithNativeSecCtxGutiTAI(v_AttachType,
                                                                                                                     v_AdditionalUpdateType,
                                                                                                                     v_SecurityParams.KSIasme,
                                                                                                                     f_GutiParameters2MobileIdentity(omit, v_Guti_Params),
                                                                                                                     f_Asn2Nas_PlmnId(v_Guti_Params.PLMN_Identity),
                                                                                                                     bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellA))),  // @sic R5s110395 sic@
                                                                          cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                    f_GetPdnType()))))
      -> value v_ReceivedAsp
      {
        v_NasInd := v_ReceivedAsp.Signalling.Nas[0];
        t_WaitforAttach.stop;
        f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 4");
      }
    [] t_WaitforAttach.timeout
      {
        //@siclog "Step 3a1" siclog@
        //+   The SS releases the RRC connection.
        f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
        //@siclog "Step 3a2" siclog@
        //+   IF not pc_Automatic_EPS_Re_Attach, Attach is triggered by AT command.
        if (not pc_Automatic_EPS_Re_Attach) { // @sic R5-110777 sic@ @sic R5-121541 sic@
          f_UT_TriggerAttach (UT);
        }
        
        //Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds?
        //@siclog "Step 4" siclog@
        t_Wait.start;
        v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                                   tsc_RRC_TI_Def,
                                                   cr_EstablishmentCause_Any,
                                                   cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                     cdr_ATTACH_REQUEST_WithNativeSecCtxGutiTAI(v_AttachType,
                                                                                                                                v_AdditionalUpdateType,
                                                                                                                                v_SecurityParams.KSIasme,
                                                                                                                                f_GutiParameters2MobileIdentity(omit, v_Guti_Params),
                                                                                                                                f_Asn2Nas_PlmnId(v_Guti_Params.PLMN_Identity),
                                                                                                                                bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellA))), // @sic R5s110395 sic@
                                                                                     cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, f_GetPdnType())));  /* @sic R5-120721 change 3 sic@ */
      }
    }
  //@siclog "Step 5 - 16" siclog@
  f_EUTRA_IdleUpdated_Step5_17(eutra_CellA, STATE2_IDLEUPDATE, NORMAL, v_NasInd, false); // @sic R5-105005 sic@

 }// function fl_TC_9_3_1_7a_Body

function f_TC_9_3_1_3_EUTRA() runs on EUTRA_PTC
{ /* Service Request / Mobile originating CS fallback */
  
  f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);
  
  // create cell and send out system information
  f_EUTRA_CellConfig_Def (eutra_CellA);
  
  // Preamble:
  //   - UE is in state Generic RB established (state 3) on Cell A
  // ==========================================================================
  f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE);
  f_EUTRA_RbEst_Def(eutra_CellA);
  f_EUTRA_TestBody_Set(true);
  
  fl_TC_9_3_1_3_Body();
  
  // Postamble
  f_EUTRA_TestBody_Set(false);
  f_EUTRA_Postamble(eutra_CellA, E1_IDLE); // @sic R5s110632 sic@

} // function f_TC_9_3_1_3_EUTRA

function fl_TC_9_3_1_3_Body() runs on EUTRA_PTC
{
  var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get();
  var GutiParameters_Type v_GutiParams := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
  var NAS_MSG_Indication_Type v_NasInd;           // temporary variable which is used when receiving NAS ASPs

  //+   Force the UE to initiate CS Voice call.
  //+ Note 1: This could be done by e.g. MMI or by AT command.
  //@siclog "Step 1" siclog@
  f_UT_RequestCSCall(UT);
  
  //+   Check: Does the UE transmit EXTENDED SERVICE REQUEST message?  -->
  //+   EXTENDED SERVICE REQUEST [1,P]
  //@siclog "Step 2" siclog@
  SRB.receive(car_SRB2_NasPdu_IND(eutra_CellA,
                                  cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                    cr_EXT_SERVICE_REQUEST_MO(v_SecurityParams.KSIasme,
                                                                              bit2oct(v_GutiParams.M_TMSI)))));
  f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 2");
  
  //+   The SS sends SERVICE REJECT message with T3442 = 60 seconds in order that the UE enters
  //+   EMM-REGISTERED.NORMAL-SERVICE.
  //@siclog "Step 3" siclog@
  //@sic R5-110752 sic@
  SRB.send(cas_SRB2_NasPdu_REQ(eutra_CellA,
                               cs_TimingInfo_Now,
                               cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                              cs_508_SERVICE_REJECT(tsc_Cause_CSDomainNotTemporarilyAvailable,  //#39 'CS domain temporarily not available'
                                                                    cs_GprsTimer_tv('5B'O, '001'B, '00001'B) )))); // See TS 24.008 clause 10.5.7.4 @sic R5-113811 sic@
  //+   The SS releases the RRC connection
  //@siclog "Step 4" siclog@
  f_EUTRA_RRC_ConnectionRelease(eutra_CellA);

  // SS waits for 60 seconds (T3442)
  // EXCEPTION: The behaviour in table 9.3.1.3.3.2-2 may occur in parallel with step 4A.
  //@siclog "Step 4A" siclog@
  f_EUTRA_TAU_Check ( eutra_CellA );  // @sic R5-113811, R5s110632 sic@

  //+   Force the UE to initiate CS Voice call.
  //+ Note 1: This could be done by e.g. MMI or by AT command.
  //@siclog "Step 5" siclog@
  f_UT_RequestCSCall(UT);
  
  //+   Check: Does the UE transmit an RRCConnectionRequest message with establishmentCause
  //           set to mo-Data followed by EXTENDED SERVICE REQUEST message?  -->
  //+   EXTENDED SERVICE REQUEST [2,P]
  //@siclog "Step 6" siclog@
  v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                             tsc_RRC_TI_Def,
                                             cr_EstablishmentCause_MoData,
                                             cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                               cr_EXT_SERVICE_REQUEST_MO(v_SecurityParams.KSIasme,
                                                                                          bit2oct(v_GutiParams.M_TMSI))));
  f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 6");
  //+   The SS sends SERVICE REJECT message  with T3442 = 60 seconds in order that the UE enters
  //+   EMM-REGISTERED.NORMAL-SERVICE.
  //@siclog "Step 7" siclog@
  SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA, // @sic R5s110632 sic@
                               cs_TimingInfo_Now,
                               cs_NAS_Request(tsc_SHT_NoSecurityProtection, //@sic R5s110109 sic@
                                              cs_508_SERVICE_REJECT(tsc_Cause_CSDomainNotTemporarilyAvailable,  //#39 'CS domain temporarily not available'
                                                                    cs_GprsTimer_tv('5B'O, '001'B, '00001'B) )))); // See TS 24.008 clause 10.5.7.4 @sic R5-113811 sic@
  //+   The SS releases the RRC connection
  //@siclog "Step 8" siclog@
  f_EUTRA_RRC_ConnectionRelease(eutra_CellA);

  // SS waits for 60 seconds (T3442)
  // EXCEPTION: The behaviour in table 9.3.1.3.3.2-2 may occur in parallel with step 4A.
  //@siclog "Step 8A" siclog@
  f_EUTRA_TAU_Check ( eutra_CellA );  // @sic R5-113811, R5s110632 sic@
  
} // function fl_TC_9_3_1_3_Body

function f_TC_9_3_1_12a_EUTRA() runs on EUTRA_PTC
{ /* service request / Rejected / CS domain temporarily not available */
  /* @sic R5s110637 sic@ */

  f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);

  // create cell and send out system information
  f_EUTRA_CellConfig_Def(eutra_CellA);

  f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE);
  f_EUTRA_TestBody_Set(true);

  fl_TC_9_3_1_12a_Body();

  // Postamble
  f_EUTRA_TestBody_Set(false);
  f_EUTRA_ReleaseAllCells();
  //Note 2: The UE is powered off or switched off because the UE may retry a transmission of
  //        an EXTENDED SERVICE REQUEST message depending on the UE implementation after timer
  //        T3442 expires. Additionally, it is not clear which postamble procedure is performed,
  //        since the UE may search the UTRAN/GERAN cell after step 3.

} // function f_TC_9_3_1_12a_EUTRA

function fl_TC_9_3_1_12a_Body() runs on EUTRA_PTC
{
  var GutiParameters_Type v_GutiParams := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
  var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get();
  var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;

  //+   The SS pages the UE using S-TMSI with CN domain indicator set to "CS".
  //@siclog "Step 1" siclog@
  f_EUTRA_UE_Page ( eutra_CellA,
                    cs_DomainNasPaging_OneRecord(cs_PagingUE_Identity_S_TMSI(v_GutiParams.MME_Code,
                                                                       v_GutiParams.M_TMSI),
                                                 cs));
  

  //+   The UE transmits an EXTENDED SERVICE REQUEST message.
  //@siclog "Step 2" siclog@
  f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                 v_RRC_TI,
                                 cr_EstablishmentCause_mt_Access,
                                 cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                   cr_508_EXT_SERVICE_REQUEST(v_SecurityParams.KSIasme,
                                                                              bit2oct(v_GutiParams.M_TMSI))));
  
  //+ The SS transmits a SERVICE REJECT message with the EMM cause set to 'CS domain temporarily not available'and T3442 = 60 seconds.
  //@siclog "Step 3" siclog@
  SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request ( tsc_SHT_NoSecurityProtection,
                                                    cs_508_SERVICE_REJECT (tsc_Cause_CSDomainNotTemporarilyAvailable,  //#39 'CS domain temporarily not available'
                                                                           cs_GprsTimer_tv('5B'O, '001'B, '00001'B) )))); // See TS 24.008 clause 10.5.7.4 @sic R5-113811 sic@
  
  //+ The SS releases the RRC connection.
  //@siclog "Step 4" siclog@
  f_EUTRA_RRC_ConnectionRelease ( eutra_CellA );
  
  // SS waits for 60 seconds (T3442)
  // EXCEPTION: The behaviour in table 9.3.1.12a.3.2-2 may occur in parallel with step 4A.
  //@siclog "Step 4A" siclog@
  f_EUTRA_TAU_Check ( eutra_CellA );  // @sic R5-113811, R5s110637 sic@
  
  //+  Cause the UE to originate CS call. (Note 1)
  //@siclog "Step 5" siclog@
  f_UT_RequestCSCall(UT);
  
  //+  Check: Does the UE transmit an EXTENDED SERVICE REQUEST message?
  //@siclog "Step 6" siclog@
  f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA, // @sic R5s110637 sic@
                                 v_RRC_TI,
                                 cr_EstablishmentCause_MoData,
                                 cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                   cr_EXT_SERVICE_REQUEST_MO(v_SecurityParams.KSIasme,
                                                                             bit2oct(v_GutiParams.M_TMSI))));
  f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 6");
  //+  The SS sends SERVICE REJECT message in order that the UE enters EMM-REGISTERED.NORMAL-SERVICE.
  //@siclog "Step 6A" siclog@
  SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellA,  // @sic R5s110637 sic@
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request ( tsc_SHT_NoSecurityProtection,
                                                    cs_508_SERVICE_REJECT (tsc_Cause_CSDomainNotTemporarilyAvailable,  //#39 'CS domain temporarily not available'
                                                                           cs_GprsTimer_tv('5B'O, '001'B, '00001'B) ))));
  
  //+ The SS releases the RRC connection.
  //@siclog "Step 6B" siclog@
  f_EUTRA_RRC_ConnectionRelease ( eutra_CellA );

  // SS waits for 60 seconds (T3442)
  // EXCEPTION: The behaviour in table 9.3.1.12a.3.2-2 may occur in parallel with step 6C.
  //@siclog "Step 6C" siclog@
  f_EUTRA_TAU_Check ( eutra_CellA );  // @sic R5-113811, R5s110637 sic@
  
  //+ If possible (see ICS) switch off is performed. Otherwise the power is removed. (Note 2)
  //@siclog "Step 7" siclog@
  f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE );
  
} // function fl_TC_9_3_1_12a_Body

function f_TC_9_3_1_16_EUTRA() runs on EUTRA_PTC
{ // Service request / Abnormal case / Switch off
  
  f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);  // @sic R5s106627 sic@
  
  // create cell and send out system information
  f_EUTRA_CellConfig_Def (eutra_CellA);
  
  // ==========================================================================
  f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE);

  f_EUTRA_TestBody_Set(true);
  
  fl_TC_9_3_1_16_Body();
  
  // Postamble
  f_EUTRA_TestBody_Set(false);
  f_EUTRA_Postamble(eutra_CellA, E4_DEREGISTERED);

} // function f_TC_9_3_1_16_EUTRA

function fl_TC_9_3_1_16_Body() runs on EUTRA_PTC
{
  var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get();
  var GutiParameters_Type v_GutiParams := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
  var NAS_AttDetValue_Type v_EDetachType := f_GetEDetachType(NORMAL); // @sic R5s110176, R5s110139 sic@
  var float v_NoReactionTime := f_EUTRA_SetTimerToleranceMax( eutra_CellA, rrcTimer, 3.0 );
  var NAS_MSG_Indication_Type v_NasInd;
  
  //+ The SS pages the UE using S-TMSI with CN domain indicator set to "PS".
  //@siclog "Step 1" siclog@
  f_EUTRA_UE_Page(eutra_CellA,
                  cs_NasPaging_OneRecord(cs_PagingUE_Identity_S_TMSI(v_GutiParams.MME_Code,
                                                                     v_GutiParams.M_TMSI)));
  
  //+  The UE transmits a SERVICE REQUEST message.
  //@siclog "Step 2" siclog@
  v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                             tsc_RRC_TI_Def,
                                             cr_EstablishmentCause_mt_Access,
                                             cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                               cr_508_SERVICE_REQUEST(v_SecurityParams.KSIasme)));
  
  //+ The SS does not respond to the SERVICE REQUEST message.
  //        NOTE: The SS does not transmit both SecurityModeCommand message and RRCConnectionReconfiguration message.
  //@siclog "Step 3" siclog@
  
  //+ The UE is switched off.
  //@siclog "Step 4" siclog@
  f_UT_SwitchOffUE (UT, false);
  
  //+ Check: Does the UE transmit a DETACH REQUEST message? [1,P]
  //@siclog "Step 5" siclog@
  if ( pc_SwitchOnOff  or  pc_USIM_Removal  ) { //@sic R5s110307 sic@
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                  cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                    cr_508_DETACH_REQUEST_MO(cr_NAS_KeySetIdentifier (?, ?), // @sic R5-110472 sic@
                                                                             f_GutiParameters2MobileIdentity(omit, v_GutiParams),
                                                                             cr_DetachType( '1'B, v_EDetachType)))));//@sic R5s110139 sic@
    }
  //+  Check: Does the test result of generic test procedure in TS 36.508 subclause 6.4.2.5 indicates that the
  //         UE does not respond to paging when paged with GUTI-1 and with CN domain indicator set to "PS"?
  //@siclog "Step 6" siclog@
  f_EUTRA_508Check_NASNoResponse ( eutra_CellA,
                                   cs_NasPaging_OneRecord(cs_PagingUE_Identity_S_TMSI(v_GutiParams.MME_Code, v_GutiParams.M_TMSI)),
                                   v_NoReactionTime );
} // function fl_TC_9_3_1_16_Body

function f_TC_9_3_2_2_EUTRA() runs on EUTRA_PTC
{
  f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);
  
  // create cell and send out system information
  f_EUTRA_CellConfig_Def (eutra_CellA);
  
  f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE);
  f_EUTRA_TestBody_Set(true);
  
  fl_TC_9_3_2_2_Body();
  
  // Postamble
  f_EUTRA_TestBody_Set(false);
  f_EUTRA_Postamble(eutra_CellA, E1_IDLE);  // @sic R5s110631,R5s110632 sic@
}// function f_TC_9_3_2_2_EUTRA

function fl_TC_9_3_2_2_Body() runs on EUTRA_PTC
{
  var GutiParameters_Type v_GutiParams := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
  var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get();
  var NAS_MSG_Indication_Type v_NasInd;

  // The SS sends a paging message which CN domain indicates 'CS' domain to the UE.
  //@siclog "Step 1" siclog@
  f_EUTRA_UE_Page(eutra_CellA,
                  cs_DomainNasPaging_OneRecord(cs_PagingUE_Identity_S_TMSI(v_GutiParams.MME_Code,
                                                                           v_GutiParams.M_TMSI),
                                               cs));

  // Verify that the UE sends EXTENDED SERVICE REQUEST
  //@siclog "Step 2 - 3" siclog@
  v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                             tsc_RRC_TI_Def,
                                             cr_EstablishmentCause_mt_Access,
                                             cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                               cr_508_EXT_SERVICE_REQUEST(v_SecurityParams.KSIasme,
                                                                                          bit2oct(v_GutiParams.M_TMSI))));
  
  // The SS sends SERVICE REJECT message with T3442 = 60 seconds in order that the UE enters EMM-REGISTERED.NORMAL-SERVICE.
  //@siclog "Step 4" siclog@
  SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                               cs_TimingInfo_Now,
                               cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                              cs_508_SERVICE_REJECT(tsc_Cause_CSDomainNotTemporarilyAvailable,
                                                                    cs_GprsTimer_tv('5B'O, '001'B, '00001'B) )))); // See TS 24.008 clause 10.5.7.4 @sic R5-113811 sic@
                                              // @sic R5s110038 R5-110742 sic@
  // The SS releases the RRC connection.
  //@siclog "Step 5" siclog@ @sic R5-113811 sic@
  f_EUTRA_RRC_ConnectionRelease ( eutra_CellA );

  // SS waits for 60 seconds (T3442)
  // EXCEPTION: The behaviour in table 9.3.2.2.3.2-2 may occur in parallel with step 6.
  //@siclog "Step 6" siclog@
  f_EUTRA_TAU_Check ( eutra_CellA );  // @sic R5-113811, R5s110632 sic@

}// function fl_tc_9_3_2_2_Body

function f_TC_9_3_1_17_EUTRA() runs on EUTRA_PTC
{ // Service request / Abnormal case / Procedure collision
  
  f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);  // @sic R5s106627 sic@
  
  // create cell and send out system information
  f_EUTRA_CellConfig_Def(eutra_CellA);
  
  f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE);
  f_EUTRA_TestBody_Set(true);
  
  fl_TC_9_3_1_17_Body();
  
  // Postamble
  f_EUTRA_TestBody_Set(false);
  f_EUTRA_Postamble ( eutra_CellA, E4_DEREGISTERED );
  
} // function f_TC_9_3_1_17_EUTRA

function fl_TC_9_3_1_17_Body() runs on EUTRA_PTC
{
  var GutiParameters_Type v_GutiParams := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
  var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get();
  var NAS_MSG_Indication_Type v_NasInd;
  var SRB_COMMON_IND v_ReceivedAsp;
  var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (NORMAL); // @sic R5s110176 sic@
  var NAS_AttDetValue_Type v_AttachType :=f_GetEAttachType(NORMAL); // @sic R5s110176 sic@
  timer t_WaitforAttach := f_EUTRA_SetTimerToleranceMax( eutra_CellA, nonProtocolTimer, 1.0); //@sic  R5-113364 sic@
  
  //+   The SS pages the UE using S-TMSI with CN domain indicator set to "PS".
  //@siclog "Step 1" siclog@
  f_EUTRA_UE_Page ( eutra_CellA,
                    cs_NasPaging_OneRecord(cs_PagingUE_Identity_S_TMSI(v_GutiParams.MME_Code,
                                                                       v_GutiParams.M_TMSI)));
  
  //+   The UE transmits a SERVICE REQUEST message. --> SERVICE REQUEST
  //@siclog "Step 2" siclog@
  v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                             tsc_RRC_TI_Def,
                                             cr_EstablishmentCause_mt_Access,
                                             cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                               cr_508_SERVICE_REQUEST(v_SecurityParams.KSIasme)));
  
  //+  The SS transmits a DETACH REQUEST message with the Type of detach set to 're-attach required'.
  //@siclog "Step 3" siclog@
  SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                               cs_TimingInfo_Now,
                               cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                              cs_508_DETACH_REQUEST_MT(cs_DetachType(tsc_DetachMT_ReAttach),
                                                                       omit))));
  
  //+   Check: Does the UE transmit a DETACH ACCEPT message? [1,P]
  //@siclog "Step 4" siclog@
  SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                  cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                    cr_508_DETACH_ACCEPT)));
  f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 4");
  
  // EXCEPTION: Steps 5a1-5a2 describe behaviour that depends on UE behaviour (Note 1)
  t_WaitforAttach.start; //@sic R5-113364 sic@
  alt {
    [] SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                       cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                         cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                         cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, f_GetPdnType()))))  -> value v_ReceivedAsp
      {
        v_NasInd := v_ReceivedAsp.Signalling.Nas[0];
        t_WaitforAttach.stop;
        //@siclog "Step 6" siclog@
        //+    Check: Does the UE transmit an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message?
        //+   The SS transmits an AUTHENTICATION REQUEST message to initiate the EPS authentication and AKA procedure.
        v_NasInd := v_ReceivedAsp.Signalling.Nas[0];
        f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "step 6");
      }
    [] t_WaitforAttach.timeout
      {
        //@siclog "Step 5a1" siclog@
        //+   The SS releases the RRC connection.
        f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
        // EXCEPTION: Step 5a2 describes behaviour that depends on the UE capability
        //@siclog "Step 5a2" siclog@
        //+   IF not pc_Automatic_Re_Attach, Attach is triggered by AT command.
        if (not pc_Automatic_Re_Attach) { // @sic R5-113364 sic@
          f_UT_TriggerAttach (UT);
        }
        //@siclog "Step 6" siclog@
        //+    Check: Does the UE transmit an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message?
        //+   The SS transmits an AUTHENTICATION REQUEST message to initiate the EPS authentication and AKA procedure.
        v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                                   tsc_RRC_TI_Def,
                                                   cr_EstablishmentCause_Any,
                                                   cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                     cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                     cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, f_GetPdnType())));
        f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "step 6");
      }
          
    }
  //+  The UE transmits an AUTHENTICATION RESPONSE message and establishes mutual authentication.
  //+    The SS transmits a NAS SECURITY MODE COMMAND message to activate NAS security.
  //+   The UE transmits a NAS SECURITY MODE COMPLETE message and establishes the initial security configuration.
  //   -    EXCEPTION: Steps 11a1 to 11a2 describe behaviour that depends on UE configuration; the "lower case letter" identifies a step sequence that take place if the UE has ESM information which needs to be transferred after NAS SECURITY MODE COMPLETE message.
  //+  IF the UE sets the ESM information transfer flag in the last PDN CONNECTIVITY REQUEST message THEN the SS transmits an ESM INFORMATION REQUEST message to initiate exchange of protocol configuration options and/or APN.
  //+ The UE transmits an ESM INFORMATION RESPONSE message to transfer protocol configuration options and/or APN.
  //+   The SS responds with an ATTACH ACCEPT message. The ACTIVATE DEFAULT EPS BEARER CONTEXT REQUEST message is piggybacked in ATTACH ACCEPT message.
  //   -    EXCEPTION: In parallel to the event described in step 13 below the generic procedure for IP address allocation in the U-plane specified in TS 36.508 subclause 4.5A.1 takes place performing IP address allocation in the U-plane if requested by the UE.
  //+    The UE transmits an ATTACH COMPLETE message including an ACTIVATE DEFAULT EPS BEARER CONTEXT ACCEPT message.
  //+   The SS releases the RRC connection.
  //@siclog "Step 7 - 14" siclog@
  f_EUTRA_IdleUpdated_Step5_17 (eutra_CellA, STATE2_IDLEUPDATE, NORMAL, v_NasInd);

  //   -    EXCEPTION:  Steps 15a1 to 15b2 describe behaviour that depends on the UE capability; the "lower case letter" identifies a step sequence that take place if a capability is supported
  //+  IF pc_CSfallback is true THEN the SS pages the UE using S-TMSI with CN domain indicator set to "CS".
  //@siclog "Step 15a1" siclog@
  if (px_AttachTypeTested == COMBINED_ATTACH and pc_CS_Fallback){ // @sic R5s110593 ch. 6 sic@
    f_EUTRA_UE_Page(eutra_CellA,
                    cs_DomainNasPaging_OneRecord(cs_PagingUE_Identity_S_TMSI(v_GutiParams.MME_Code, v_GutiParams.M_TMSI),
                                                 cs));
    
    //+  The UE transmits an EXTENDED SERVICE REQUEST message.
    //@siclog "Step 15a2" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,  // @sic R5s110476 sic@
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_mt_Access,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_EXT_SERVICE_REQUEST(f_EUTRA_SecurityKSIasme_Get(), // @sic R5s110701 sic@
                                                                                            bit2oct(v_GutiParams.M_TMSI))));
  }
  //+  ELSE the SS pages the UE using S-TMSI with CN domain indicator set to "PS".
  //@siclog "Step 15b1" siclog@
  else {
    f_EUTRA_UE_Page ( eutra_CellA,
                      cs_NasPaging_OneRecord(cs_PagingUE_Identity_S_TMSI(v_GutiParams.MME_Code,
                                                                         v_GutiParams.M_TMSI)));
    
    //+  The UE transmits a SERVICE REQUEST message.
    //@siclog "Step 15b2" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_mt_Access,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_SERVICE_REQUEST(f_EUTRA_SecurityKSIasme_Get())));
  }
  //+  The SS transmits a DETACH REQUEST message with the Type of detach set to the value other than 're-attach required'.
  //@siclog "Step 16" siclog@
  SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                               cs_TimingInfo_Now,
                               cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                              cs_508_DETACH_REQUEST_MT(cs_DetachType(tsc_DetachMT_NoReAttach),
                                                                       cs_EMM_Cause_tv(tsc_EmmCause_IllegalUe)))));
  
  //+   Check: Does the UE transmit a DETACH ACCEPT message?
  //@siclog "Step 17" siclog@
  SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                  cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                    cr_508_DETACH_ACCEPT)));
  f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 17");
  
  //+   The SS releases the RRC connection.
  //@siclog "Step 18" siclog@
  f_EUTRA_RRC_ConnectionRelease ( eutra_CellA );

} // function fl_TC_9_3_1_17_Body

function f_TC_9_3_1_18_EUTRA() runs on EUTRA_PTC
{
  var CSG_Identity v_CSG_Identity_CellA := '000000000000000000000000001'B;
  
  f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c3);
  
  // create cells
  f_EUTRA_CellConfig_Def(eutra_CellA);
  f_EUTRA_CellConfig_Def(eutra_CellB);
  
  // delete the UE's CSG whitelist, supported per test case selection expression
  f_EUTRA_EmptyCSG_AllowedList (eutra_CellA);
  
  // modify system information for the CSG cell
  //Set system information combination 7 in cell A
  f_EUTRA_ChangeSysinfoCombination (eutra_CellA, c7);   // @sic R5-121746 sic@
  //Set system information 1 cell A
  f_EUTRA_CellInfo_SetSysInfo_Csg_Ind ( eutra_CellA, true );
  f_EUTRA_CellInfo_SetSysInfo_Csg_Id ( eutra_CellA, v_CSG_Identity_CellA );
  //Set system information 4 cell A
  f_EUTRA_SetSIB4_CSG_Def (eutra_CellA);  // @sic R5-121746 sic@
  // make the modified system information become active
  f_EUTRA_SS_ConfigureSysinfo (eutra_CellA);  // @sic R5s120329 sic@
  
  f_EUTRA_Manual_CSG_Selection(eutra_CellA, v_CSG_Identity_CellA); // UE registers on cell A using manual CSG selection

  // A is serving cell, B is non-suitable cell
  f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE);
  
  f_EUTRA_TestBody_Set(true);

  fl_TC_9_3_1_18_Body();
  // Postamble
  f_EUTRA_TestBody_Set(false);
  
  f_EUTRA_Postamble(eutra_CellA, E4_DEREGISTERED); // @sic R5s120298 sic@
} // function f_TC_9_3_1_18_EUTRA

function fl_TC_9_3_1_18_Body() runs on EUTRA_PTC
{
  var GutiParameters_Type v_GutiParams_A := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
  var GutiParameters_Type v_GutiParams_B := f_EUTRA_CellInfo_GetGuti(eutra_CellB);
  var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get();
  var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (v_GutiParams_A.PLMN_Identity);
  var template (omit) EPS_BearerContextStatus v_EPS_ContextStatus;
  var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType ();
  var template (omit) AdditionalUpdateResult v_AdditionalUpdateResult;
  var B3_Type v_EpsUpdate_TypeValue := f_GetEPSTAUType(NORMAL); // @sic R5s110176 sic@
  var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
  var NAS_MSG_Indication_Type v_NasInd;
  var float v_TimerValue := f_EUTRA_SetTimerToleranceMin( eutra_CellA, nonProtocolTimer, 30.0 );
  timer t_WaitTimer := v_TimerValue;

  //+   The SS pages the UE using S-TMSI with CN domain indicator set to "PS".
  //@siclog "Step 1" siclog@
  f_EUTRA_UE_Page ( eutra_CellA,
                    cs_NasPaging_OneRecord(cs_PagingUE_Identity_S_TMSI(v_GutiParams_A.MME_Code,
                                                                       v_GutiParams_A.M_TMSI)));


  //+   The UE transmits a SERVICE REQUEST message. --> SERVICE REQUEST
  //@siclog "Step 2" siclog@
  f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                 v_RRC_TI,
                                 cr_EstablishmentCause_mt_Access,
                                 cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                   cr_508_SERVICE_REQUEST(v_SecurityParams.KSIasme)));

  //+ The SS transmits a SERVICE REJECT message with the EMM cause = " Not authorized for this CSG " as specified.
  //@siclog "Step 3" siclog@
  SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request ( tsc_SHT_IntegrityProtected,
                                                    cs_508_SERVICE_REJECT ( tsc_Cause_NotAuthorizedCSG ))));

  //+ The SS releases the RRC connection.
  //@siclog "Step 4" siclog@
  f_EUTRA_RRC_ConnectionRelease ( eutra_CellA );

  //+ The SS configures:
  //  - Cell A as a " Serving cell".
  //  - Cell B as a " Suitable Neighbour intra-frequency cell ".
  //@siclog "Step 5" siclog@
  f_EUTRA_SetCellPower ( eutra_CellB, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE );

  t_WaitTimer.start;
  //+   Check: does the UE transmit a TRACKING AREA UPDATE REQUEST message on cell B ?
  //@siclog "Step 6" siclog@
  //@sic R5-112625 sic@
  v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                             tsc_RRC_TI_Def,
                                             cr_EstablishmentCause_Any,
                                             cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                               cr_508_TAU_Request(v_EpsUpdate_TypeValue,
                                                                                  f_EUTRA_SecurityKSIasme_Get(),
                                                                                  cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                  v_AdditionalUpdateType)));
  t_WaitTimer.stop;
  //+    The SS transmits a TRACKING AREA UPDATE ACCEPT message.
  //@siclog "Step 7" siclog@
  v_EPS_ContextStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus; // Send this back in the Accept
  v_AdditionalUpdateResult := f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType);
  SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellB,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request ( tsc_SHT_IntegrityProtected_Ciphered,
                                                    cs_508_TAU_Accept ( v_EpsUpdate_TypeValue,  // @sic R5s120380 sic@
                                                                        f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_GutiParams_B),
                                                                        cds_TAIListNonConsecutive_tlv( v_PLMN, {'0002'O} ), //TAC-2
                                                                        v_EPS_ContextStatus,
                                                                        f_EUTRA_GetCellLAI(eutra_CellB, NORMAL), // @sic R5s110176 sic@
                                                                        f_GetMSId (NORMAL), // @sic R5s110176 sic@
                                                                        v_AdditionalUpdateResult
                                                                        ) ) ) );

  //+  The UE transmits a TRACKING AREA UPDATE COMPLETE message.
  //@siclog "Step 8" siclog@
  SRB.receive ( car_SRB1_NasPdu_IND ( eutra_CellB,
                                      cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                          cr_508_TAU_Complete ) ) );

  //@siclog "Step 8A" siclog@
  //+   The SS releases the RRC connection.
  f_EUTRA_RRC_ConnectionRelease(eutra_CellB);

  //+   The SS configures:
  //    - Cell A as a " Serving cell".
  //    - Cell B as a " Not Suitable cell".
  //@siclog "Step 9" siclog@
  f_EUTRA_SetCellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE );

  //+  Check: does the UE transmits a TRACKING AREA UPDATE REQUEST message on cell A in the next 30 seconds?
  //@siclog "Step 10" siclog@
  if (f_EUTRA_RRC_RRCConnectionRequest_Check(eutra_CellA, v_TimerValue)) {
    f_EUTRA_SetVerdictFailOrInconc (__FILE__, __LINE__, "Step 10");
  }

} // function fl_TC_9_3_1_18_Body

} // end of group TestcaseImplementations

}
