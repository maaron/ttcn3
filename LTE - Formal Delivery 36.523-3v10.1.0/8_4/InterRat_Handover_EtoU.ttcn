/******************************************************************************/
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2012, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3v10.1.0
// $Date: 2012-09-02 22:44:17 +0200 (Sun, 02 Sep 2012) $
// $Rev: 7242 $
/******************************************************************************/

module InterRat_Handover_EtoU {

  import from EUTRA_RRC_ASN1_Definitions language "ASN.1:1997" all;
  import from CommonIratDefs all;
  import from EPS_NAS_TypeDefs all;
  import from EUTRA_AspCommon_Templates all;
  import from EUTRA_CellCfg_Templates all;
  import from EUTRA_CellInfo all;
  import from EUTRA_CommonDefs all;
  import from EUTRA_CommonProcedures all;
  import from EUTRA_Component all;
  import from EUTRA_ConfigurationSteps all;
  import from EUTRA_IRATFunctions all;
  import from EUTRA_RRC_Templates all;
  import from EUTRA_SRB_Templates all;
  import from EUTRA_SecuritySteps all;
  import from UTRAN_CapabilityFunctions all;

  function f_TC_8_4_1_2_EUTRA() runs on EUTRA_PTC
  { // Test case 8.4.1.2 Inter-RAT Handover / from E-UTRA to UTRA(PS) / Data

    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var IRAT_CoOrd_SysInfo_Type v_CoordInfo;
    var CoOrd_UTRANSysInfoFDD_Type v_UTRANSysInfoFDD;
    var CoOrd_UTRANSysInfoTDD_Type v_UTRANSysInfoTDD;
    var NasCount_Type v_NasCountDL;
    var octetstring v_HandoverToUtranCommand;
    var octetstring v_Nas_SecurityParamFromEUTRA;

    f_EUTRA_Init (c4);

    // Create and configure cell
    f_EUTRA_CellConfig_Def ( eutra_Cell1 );

    // Bring UE to RB Established (state 3)
    // Do normal preamble
    f_IRAT_WaitForCoOrd_Trigger(UTRAN); // wait for UTRAN side to do pre-preamble @sic R5-120764 sic@
    f_EUTRA_Preamble (eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def (eutra_Cell1);

    f_EUTRA_TestBody_Set(true);

    // Wait for configuration of UTRAN cell and get Cell Parameters for UTRAN cell
    v_CoordInfo := f_IRAT_WaitForCoOrd_SysInfo (UTRAN);

    if (ischosen (v_CoordInfo.Utran[0].FDD)) {
      v_UTRANSysInfoFDD := v_CoordInfo.Utran[0].FDD;
      v_HandoverToUtranCommand := f_U_EncodeHandoverToUtran_64kPS_FDD(v_UTRANSysInfoFDD.UplinkScrambingCode,
                                                                      v_UTRANSysInfoFDD.ScramblingCode,
                                                                      v_UTRANSysInfoFDD.Freq);
    }
    else {
      v_UTRANSysInfoTDD := v_CoordInfo.Utran[0].TDD;
      v_HandoverToUtranCommand := f_U_EncodeHandoverToUtran_64kPS_TDD(v_UTRANSysInfoTDD.CellParametersID,
                                                                      v_UTRANSysInfoTDD.Freq);
    }
    
    
    /* nas-securityParamFromEUTRA. The 4 least significant bits of the NAS downlink COUNT value
       36.508, Table 4.6.1-6 */
    v_NasCountDL := f_EUTRA_SS_NAS_CountGetDLNext(); // @sic R5s110382 sic@
    v_Nas_SecurityParamFromEUTRA := substr( v_NasCountDL, 3, 1);
    
    //@siclog "Step 1A - 1B" siclog@
    f_EUTRA_UTRA_Capability (eutra_Cell1); //@sic R5-120764 sic@

    // Wait and tell SS to transmit MobilityFromEUTRACommand message // @sic R5s120138 sic@
    f_IRAT_WaitForCoOrd_Trigger(UTRAN);
    
    //Stop periodic TA on source cell @sic R5s110563 sic@
    f_EUTRA_SS_CommonCellConfig(eutra_Cell1, cas_PUCCH_Synch_Config_REQ(eutra_Cell1, cs_TimingInfo_Now, cs_PUCCH_Synch_None));

    //@siclog "Step 2" siclog@
    //The SS transmits a MobilityFromEUTRACommand message
    SRB.send (cas_SRB1_RrcPdu_REQ (eutra_Cell1,
                                   cs_TimingInfo_Now,
                                   cs_MobilityFromEutraCommand (v_RRC_TI,
                                                                v_HandoverToUtranCommand,
                                                                v_Nas_SecurityParamFromEUTRA)));
    
    // Release DRX configuration
    f_EUTRA_SS_DrxCtrlConfig(eutra_Cell1, cs_DrxCtrl_None);
    
    // Release SRBs and DRBs
    f_EUTRA_SS_SRBs_DRBs_Release(eutra_Cell1, cs_TimingInfo_Now);
    
    f_IRAT_WaitForCoOrd_Trigger(UTRAN);  // wait for UTRAN side to finish
    f_EUTRA_TestBody_Set(false);
    
    // Release non camping cell
    f_EUTRA_ReleaseAllCells();
  }

  function f_TC_8_4_1_4_EUTRA() runs on EUTRA_PTC
  { /* Inter-RAT Handover / from E-UTRA to UTRA (HSDPA) / Data */
    
    var IRAT_CoOrd_SysInfo_Type v_CoordInfo;
    var CoOrd_UTRANSysInfoFDD_Type v_UTRANSysInfoFDD;
    var CoOrd_UTRANSysInfoTDD_Type v_UTRANSysInfoTDD;
    var NasCount_Type v_NasCountDL;
    var octetstring v_HandoverToUtranCommand;
    var octetstring v_Nas_SecurityParamFromEUTRA;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    
    f_EUTRA_Init ( c4 );

    // Create and configure cell
    f_EUTRA_CellConfig_Def ( eutra_Cell1 );
    
    // Bring UE to RB Established (state 3)
    // Do normal preamble
    f_IRAT_WaitForCoOrd_Trigger(UTRAN); // wait for UTRAN side to do pre-preamble @sic R5s110754 sic@
    f_EUTRA_Preamble (eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def (eutra_Cell1);
    
    f_EUTRA_TestBody_Set(true);
    
    // Wait for configuration of UTRAN cell and get Cell Parameters for UTRAN cell
    v_CoordInfo := f_IRAT_WaitForCoOrd_SysInfo (UTRAN);
    
    if (ischosen (v_CoordInfo.Utran[0].FDD)) {
      v_UTRANSysInfoFDD := v_CoordInfo.Utran[0].FDD;
      v_HandoverToUtranCommand := f_U_EncodeHandoverToUtran_HSDPA_FDD(v_UTRANSysInfoFDD.UplinkScrambingCode,
                                                                      v_UTRANSysInfoFDD.ScramblingCode,
                                                                      v_UTRANSysInfoFDD.Freq);
    }
    else {
      v_UTRANSysInfoTDD := v_CoordInfo.Utran[0].TDD;
      v_HandoverToUtranCommand := f_U_EncodeHandoverToUtran_HSDPA_TDD(v_UTRANSysInfoTDD.CellParametersID,
                                                                      v_UTRANSysInfoTDD.Freq);
    }
    
    /* nas-securityParamFromEUTRA. The 4 least significant bits of the NAS downlink COUNT value
       36.508, Table 4.6.1-6 */
    v_NasCountDL := f_EUTRA_SS_NAS_CountGetDLNext(); // @sic R5s110382 sic@
    v_Nas_SecurityParamFromEUTRA := substr( v_NasCountDL, 3, 1); // @sic R5s110788 sic@
    
    //@siclog "Step 1A - 1B" siclog@
    f_EUTRA_UTRA_Capability (eutra_Cell1); //@sic R5-120764 sic@

    // Wait and tell SS to transmit MobilityFromEUTRACommand message @sic R5s120138 sic@
    f_IRAT_WaitForCoOrd_Trigger (UTRAN); // @sic R5s110788 sic@
    
    //Stop periodic TA on source cell
    f_EUTRA_SS_CommonCellConfig(eutra_Cell1, cas_PUCCH_Synch_Config_REQ(eutra_Cell1, cs_TimingInfo_Now, cs_PUCCH_Synch_None));
    
    //@siclog "Step 2" siclog@
    //The SS transmits a MobilityFromEUTRACommand message
    SRB.send(cas_SRB1_RrcPdu_REQ(eutra_Cell1,
                                 cs_TimingInfo_Now,
                                 cs_MobilityFromEutraCommand(v_RRC_TI,
                                                             v_HandoverToUtranCommand,
                                                             v_Nas_SecurityParamFromEUTRA)));
    
    // Release DRX configuration
    f_EUTRA_SS_DrxCtrlConfig(eutra_Cell1, cs_DrxCtrl_None);

    // Release SRBs and DRBs
    f_EUTRA_SS_SRBs_DRBs_Release(eutra_Cell1, cs_TimingInfo_Now);
    
    f_IRAT_WaitForCoOrd_Trigger(UTRAN);  // wait for UTRAN side to finish
    f_EUTRA_TestBody_Set(false);
    
    // Release non camping cell
    f_EUTRA_ReleaseAllCells();
  }

  function f_TC_8_4_1_5_EUTRA() runs on EUTRA_PTC
  {
    var IRAT_CoOrd_SysInfo_Type v_CoordInfo;
    var CoOrd_UTRANSysInfoFDD_Type v_UTRANSysInfoFDD;
    var CoOrd_UTRANSysInfoTDD_Type v_UTRANSysInfoTDD;
    var NasCount_Type v_NasCountDL;
    var octetstring v_HandoverToUtranCommand;
    var octetstring v_Nas_SecurityParamFromEUTRA;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;

    f_EUTRA_Init (c4);
    
    // Create and configure cell
    f_EUTRA_CellConfig_Def (eutra_Cell1);
    
    // Bring UE to RB Established (state 3)
    // Do normal preamble
    f_IRAT_WaitForCoOrd_Trigger(UTRAN); // wait for UTRAN side to do pre-preamble @sic R5-120776 sic@
    f_EUTRA_Preamble (eutra_Cell1, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def (eutra_Cell1);
    
    f_EUTRA_TestBody_Set(true);
    
    /* nas-securityParamFromEUTRA. The 4 least significant bits of the NAS downlink COUNT value
       36.508, Table 4.6.1-6 */
    v_NasCountDL := f_EUTRA_SS_NAS_CountGetDLNext();
    v_Nas_SecurityParamFromEUTRA := substr(v_NasCountDL, 3, 1);
    
    //Wait till UTRAN is fully configured, get sys infor for cell 5
    //and tell SS to transmit MobilityFromEUTRACommand message
    v_CoordInfo := f_IRAT_WaitForCoOrd_SysInfo (UTRAN);
    
    if (ischosen (v_CoordInfo.Utran[0].FDD)) {
      v_UTRANSysInfoFDD := v_CoordInfo.Utran[0].FDD;
      v_HandoverToUtranCommand := f_U_EncodeHandoverToUtran_HSPA_FDD(v_UTRANSysInfoFDD.UplinkScrambingCode,
                                                                     v_UTRANSysInfoFDD.ScramblingCode,
                                                                     v_UTRANSysInfoFDD.Freq);
    }
    else {
      v_UTRANSysInfoTDD := v_CoordInfo.Utran[0].TDD;
      v_HandoverToUtranCommand := f_U_EncodeHandoverToUtran_HSPA_TDD(v_UTRANSysInfoTDD.CellParametersID,
                                                                     v_UTRANSysInfoTDD.Freq);
    }
    
    //@siclog "Step 1A - 1B" siclog@
    f_EUTRA_UTRA_Capability (eutra_Cell1); //@sic R5-120764 sic@

    // Wait and tell SS to transmit MobilityFromEUTRACommand message
    f_IRAT_WaitForCoOrd_Trigger (UTRAN); // @sic R5s110788 sic@
    
    //Stop periodic TA on source cell
    f_EUTRA_SS_CommonCellConfig(eutra_Cell1, cas_PUCCH_Synch_Config_REQ(eutra_Cell1, cs_TimingInfo_Now, cs_PUCCH_Synch_None));
    
    //@siclog "Step 2" siclog@
    SRB.send (cas_SRB1_RrcPdu_REQ(eutra_Cell1,
                                  cs_TimingInfo_Now,
                                  cs_MobilityFromEutraCommand(v_RRC_TI,
                                                              v_HandoverToUtranCommand,
                                                              v_Nas_SecurityParamFromEUTRA)));
    
    //Release DRX configuration
    f_EUTRA_SS_DrxCtrlConfig(eutra_Cell1, cs_DrxCtrl_None);
    
    //Release SRBs and DRBs
    f_EUTRA_SS_SRBs_DRBs_Release(eutra_Cell1, cs_TimingInfo_Now);
    
    f_IRAT_WaitForCoOrd_Trigger(UTRAN);  //wait for UTRAN side to finish
    
    f_EUTRA_TestBody_Set(false);
    
    // Release non camping cell
    f_EUTRA_ReleaseAllCells();
  }

}
