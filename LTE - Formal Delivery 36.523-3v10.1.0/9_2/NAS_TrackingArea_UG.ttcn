// ***************************************************************************
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2012, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3v10.1.0
// * $Date: 2012-09-04 17:06:16 +0200 (Tue, 04 Sep 2012) $
// * $Rev: 7320 $
// ***************************************************************************

module NAS_TrackingArea_UG {

  import from EUTRA_RRC_ASN1_Definitions language "ASN.1:1997" all;
  import from CommonDefs all;
  import from CommonIratDefs all;
  import from EPS_NAS_Constants all;
  import from EPS_NAS_MsgContainers all;
  import from EPS_NAS_Templates all;
  import from EPS_NAS_TypeDefs all;
  import from EUTRA_ASP_SrbDefs all;
  import from EUTRA_AspCommon_Templates all;
  import from EUTRA_AuxiliaryFunctions all;
  import from EUTRA_CellCfg_Templates all;
  import from EUTRA_CellInfo all;
  import from EUTRA_CommonDefs all;
  import from EUTRA_CommonProcedures all;
  import from EUTRA_Component all;
  import from EUTRA_ConfigurationSteps all;
  import from EUTRA_IRATFunctions all;
  import from EUTRA_NASCommonFunctions all;
  import from EUTRA_NASCommonTemplates all;
  import from EUTRA_NASSteps all;
  import from EUTRA_Paging all;
  import from EUTRA_RRCSteps all;
  import from EUTRA_RRC_Templates all;
  import from EUTRA_SRB_Templates all;
  import from EUTRA_SecurityDefinitionsAndExternalFunctions all;
  import from EUTRA_SecurityFunctions all;
  import from EUTRA_SecuritySteps all;
  import from EUTRA_Timing all;
  import from NAS_AuthenticationCommon all;
  import from NAS_AuxiliaryDefsAndFunctions all;
  import from NAS_CommonTemplates all;
  import from NAS_CommonTypeDefs all;
  import from Parameters all;
  import from UTRAN_CapabilityFunctions all;
  import from UpperTesterFunctions all;

  group LocalTemplates {

  template NAS_UL_Message_Type cdr_TAU_RequestOldGutiAdditionalGutiOldPtmsiSigLaiTmsiStatus(template (present) EPS_UpdateTypeValue p_EpsUpdate_TypeValue,
                                                                                            NAS_KsiValue p_KsiValue,
                                                                                            template DRXparameter p_DRXparameter, // @sic R5s120210 sic@
                                                                                            template AdditionalUpdateType p_AdditionalUpdateType,
                                                                                            template (present) MobileIdentity p_OldGuti,
                                                                                            template (present) MobileIdentity p_AdditionalGuti,
                                                                                            template LocAreaId p_LAI,
                                                                                            template TrackingAreaId p_TAI,
                                                                                            template TMSI_Status p_TmsiStatus)
    modifies cr_508_TAU_Request :=
  { /* @status    APPROVED */
    tRACKING_AREA_UPDATE_REQUEST := {
      epsUpdateType := cr_EPS_UpdateType('0'B, p_EpsUpdate_TypeValue),
      oldGuti       := p_OldGuti,
      oldPtmsiSignature          := cr_PTMSI_SignatureAny, // @sic R5-115634 sic@
      additionalGuti             := p_AdditionalGuti,
      nonce                      := cr_NonceUE_Any,
      lastVisitedRegisteredTai   := p_TAI,
      oldLai                     := p_LAI,
      tmsiStatus                 := p_TmsiStatus
    }
  };

  template NAS_UL_Message_Type cdr_TAU_Request_OldandAdditionalGuti(template (present) EPS_UpdateTypeValue p_EpsUpdate_TypeValue,
                                                                    NAS_KsiValue p_KsiValue,
                                                                    template DRXparameter p_DRXparameter := omit, // @sic R5s120210 sic@
                                                                    template AdditionalUpdateType p_AdditionalUpdateType,
                                                                    template (present) MobileIdentity p_OldGuti,
                                                                    template CiphKeySeqNum p_CiphKeySeqNum,
                                                                    template MobileIdentity p_AdditionalGuti,
                                                                    template UERadioCapInfoUpdateNeeded  p_UeRadioCap)
    modifies cr_508_TAU_Request :=
  { /* @status    APPROVED */
    tRACKING_AREA_UPDATE_REQUEST := {
      asmeNasKeySetId            := cr_NAS_KeySetIdentifier(p_KsiValue, tsc_NasKsi_NativeSecurityContext),
      epsUpdateType              := cr_EPS_UpdateType(tsc_EpsUpdate_NotActive, p_EpsUpdate_TypeValue),
      oldGuti                    := p_OldGuti,
      gprsCipheringKeySeqNum     := p_CiphKeySeqNum,
      oldPtmsiSignature          := cr_PTMSI_SignatureAny,
      additionalGuti             := p_AdditionalGuti,
      nonce                      := cr_NonceUE_Any,
      drxParameter               := p_DRXparameter,
      ueRadioCapNeeded           := p_UeRadioCap
    }
  };

  template (value) NAS_DL_Message_Type cds_TAU_Accept_T3412_T3423(NAS_AttDetValue_Type p_UpdateValue,
                                                                  template (omit) MobileIdentity p_Guti,
                                                                  template (omit) TrackingAreaIdList p_TaiList,
                                                                  template (omit) EPS_BearerContextStatus p_EPSCtxtStatus,
                                                                  template (omit) LocAreaId p_LAI,
                                                                  template (omit) MobileIdentity p_MS_Id,
                                                                  template (omit) AdditionalUpdateResult p_AdditionalUpdateResult,
                                                                  template (omit) GPRS_Timer p_T3412,
                                                                  template (omit) GPRS_Timer p_T3423)
    
    modifies cs_508_TAU_Accept :=
  { /* @status    APPROVED */
    tRACKING_AREA_UPDATE_ACCEPT := {
      t3412                  := p_T3412,
      t3423                  := p_T3423
    }
  };

  template NAS_UL_Message_Type cdr_ATTACH_REQUEST_WithImsiAndLAI(template (present) NAS_AttDetValue_Type p_AttachTypeValue,
                                                                 template AdditionalUpdateType p_AdditionalUpdateType,
                                                                 template LocAreaId p_LAI)
    modifies cr_508_ATTACH_REQUEST :=
    
  { /* @status    APPROVED */
    aTTACH_REQUEST := {
      nasKeySetId              := cr_NAS_KeySetIdentifier(tsc_NasKsi_NoKey, ?),
      epsMobileIdentity        := f_Imsi2MobileIdentity(px_IMSI_Def),  // @sic R5s110176 Baseline Moving sic@
      oldPtmsiSignature        := omit,
      lastVisitedRegisteredTai := omit,
      oldLai                   := p_LAI,
      addUpdateType            := p_AdditionalUpdateType     /* @sic R5-103681 sic@ */
      
    }
  };

  template InitialUE_Identity cr_InitialUE_Identity_NotSTMSI := { randomValue := ? };    /* @status    APPROVED */

  template NAS_UL_Message_Type cdr_TAU_Request_CheckAllAuthParams(template (present) EPS_UpdateTypeValue p_EpsUpdate_TypeValue,
                                                                  NAS_KsiValue p_KsiValue,
                                                                  template DRXparameter p_DRXparameter := omit, // @sic R5s120210 sic@
                                                                  template AdditionalUpdateType p_AdditionalUpdateType,
                                                                  template (present) MobileIdentity p_OldGuti,
                                                                  template (present) CiphKeySeqNum p_CiphKeySeqNum,
                                                                  template PTMSI_Signature p_Sig,
                                                                  template MobileIdentity p_Guti,
                                                                  template TrackingAreaId p_LastTai,
                                                                  template LocAreaId p_LAI,
                                                                  template UERadioCapInfoUpdateNeeded p_UeRadioCap := cr_UeRadioCap) // @sic R5s110801 sic@
    modifies cr_508_TAU_Request :=
  { /* @status    APPROVED */
    tRACKING_AREA_UPDATE_REQUEST := {
      oldGuti                    := p_OldGuti,
      gprsCipheringKeySeqNum     := p_CiphKeySeqNum,
      oldPtmsiSignature          := p_Sig,
      additionalGuti             := p_Guti,
      nonce                      := cr_NonceUE_Any,
      ueNetworkCapability        := cr_UENetworkCap_Any('58'O),
      lastVisitedRegisteredTai   := p_LastTai,
      drxParameter               := p_DRXparameter,
      ueRadioCapNeeded           := p_UeRadioCap,
      epsBearerContextStatus     := cr_508_EPS_BearerContextStatusTAUReq ifpresent,
      msNetworkCapability        := cr_MS_NetworkCap_Any,
      oldLai                     := p_LAI,
      tmsiStatus                 := omit
    }
  };

  } // end of group LocalTemplates

  group LocalFunctions {

  function fl_DeactivateEPSBearer(EUTRA_CellId_Type p_CellId) runs on EUTRA_PTC
  {
    const ProcedureTransactionIdentifier tsc_Eps_Ti := '00'O;
    var template (value) ESM_Cause v_EsmCause43 := cs_ESM_Cause_v('00100100'B); // #36 regular deactivation
    
    // The SS sends DEACTIVATE DEDICATED EPS BEARER CONTEXT REQUEST
    // [email discussion wit Lena@Qualcomm] Message does not exist use DEACTIVATE EPS BEARER CONTEXT REQUEST
    SRB.send(cas_SRB1_RrcNasPdu_REQ(p_CellId,
                                    cs_TimingInfo_Now,
                                    cs_RRCConnectionReconfiguration_DRB_Release(tsc_RRC_TI_Def, tsc_DRB2),
                                    cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                   cs_508_DeactivateEPSBearerCxtReq(tsc_EpsDedicatedBearerId,
                                                                                    tsc_Eps_Ti,
                                                                                    v_EsmCause43))));
    // receive RRCConnectionReconfigurationComplete
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_CellA,
                                    cr_508_RRCConnectionReconfigurationComplete(tsc_RRC_TI_Def)));
    
    // Check: Does the UE transmit a DEACTIVATE EPS BEARER CONTEXT ACCEPT?
    SRB.receive(car_SRB2_NasPdu_IND(p_CellId,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_DeactivateEPSBearerCxtAccept(tsc_EpsDedicatedBearerId))));
    
  } // fl_DeactivateEPSBearer

  } // end of group LocalFunctions

  group TestcaseImplementations {

  function f_TC_9_2_3_1_6_EUTRA() runs on EUTRA_PTC
  { /* @desc Normal tracking area update / UE with ISR active moves to E-UTRAN */

    var template (value) CellPowerList_Type v_CellPowerList;
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c10a);   // @sic R5-113805 sic@
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    
    f_EUTRA_PreambleOtherRAT(eutra_CellA);
    f_EUTRA_UE_Detach_SwitchOffUe(eutra_CellA, RRC_IDLE);
    
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE)
    }
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    f_EUTRA_TestBody_Set(true);
    
    f_EUTRA_SendTriggerToOtherRAT(); // Tell other RAT Test about to start
    fl_TC_9_2_3_1_6_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_ReleaseAllCells(); // @sic R5-115769 sic@
    
  } // end f_TC_9_2_3_1_6_EUTRA

  function fl_TC_9_2_3_1_6_Body() runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;  // @sic R5s100755 sic@
    var NAS_MSG_Indication_Type v_NasInd;
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var GutiParameters_Type v_Guti2_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellB);
    var NAS_Lac v_LAC_B := f_EUTRA_CellInfo_GetLocationAreaCode(eutra_CellB);
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity);
    var NAS_PlmnId v_PLMN_B := f_Asn2Nas_PlmnId(v_Guti2_Params.PLMN_Identity);
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType();
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(NORMAL); // @sic R5s110176 sic@
    var B3_Type v_EpsUpdate_Result;
    var IRAT_Coordination_MSG v_RxdMsg;
    var boolean v_CSinOtherRAT := false;
    var O10_Type v_GutiStringFromRAT;
    var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get(); // @sic R5s110791 sic@
    var float v_NoReactionTime;
    
    // Behaviour that depends on the UE capability
    //@siclog "Steps 1 - 8" siclog@
    if (f_EUTRA_GetOtherRAT() == "UTRAN") {
      v_CSinOtherRAT := f_EUTRA_InterRAT_InitialiseAuthParams(UTRAN); // Other RAT does Authentication during IdleUpdated
      UTRAN.receive(cmr_IRAT_AuthInfo) -> value v_RxdMsg; // then get GUTI after PDP Context
    } else {
      v_CSinOtherRAT := f_EUTRA_InterRAT_InitialiseAuthParams(GERAN); // Other RAT does Authentication during IdleUpdated
      GERAN.receive(cmr_IRAT_AuthInfo) -> value v_RxdMsg; // then get GUTI after PDP Context
    }
    
    // Set power level for Cell A to "Serving cell"
    //@siclog "Step 9" siclog@
    f_EUTRA_SetCellPower(eutra_CellA, tsc_ServingCellRS_EPRE);
    
    if (v_UpdateType != tsc_EpsUpdate_TaUpdate) { // TA Only;
      v_EpsUpdate_Result := tsc_EpsUpdate_Combined_TaLaUpdate_ISRActivated; // @sic R5s110791 sic@
    } else {
      v_EpsUpdate_Result := tsc_EpsUpdate_TaLaUpdate_ISRActivated; // @sic R5s110791 sic@
    }
    
    v_SecurityParams.AuthParams := v_RxdMsg.Authentication.AuthPS;
    f_EUTRA_Security_Set(v_SecurityParams);
    v_CSinOtherRAT := v_RxdMsg.Authentication.CSinOtherRAT;
    v_GutiStringFromRAT := v_PLMN & bit2oct(v_RxdMsg.Authentication.GutiParams.MME_GroupId) & bit2oct(v_RxdMsg.Authentication.GutiParams.MME_Code) & bit2oct(v_RxdMsg.Authentication.GutiParams.M_TMSI);
    
    //@siclog "Step 10" siclog@
    //  The UE sends TRACKING AREA UPDATE REQUEST message
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               mo_Signalling,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldAddGutiTAI(v_UpdateType,
                                                                                               f_EUTRA_SecurityKSIasme_Get(),
                                                                                               cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                               v_AdditionalUpdateType,
                                                                                               cs_MobileIdentityGuti(omit, v_GutiStringFromRAT),
                                                                                               cr_TAI_Any ifpresent,
                                                                                               f_GutiParameters2MobileIdentity('50'O, v_Guti1_Params),
                                                                                               cr_PTMSI_SignatureAny, // @sic R5-120623 sic@
                                                                                               cr_NonceUE_Any))); // @sic R5-120623 sic@
    v_SecurityParams.NonceUE := oct2bit(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.nonce.nonceValue);
    
    //@siclog "Steps 11-12" siclog@
    //  The SS sends TRACKING AREA UPDATE ACCEPT including GUTI-1 (TIN set to RAT-related TMSI) and TAI-1
    //  The UE sends TRACKING AREA UPDATE COMPLETE message
    v_SecurityParams.NAS_SecurityCap := f_EUTRA_FillNAS_SecurityCapability_TAU(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST);
    f_EUTRA_Security_Set(v_SecurityParams);
    
    f_EUTRA_TrackingAreaUpdate_Accept_Complete(eutra_CellA,
                                               v_Guti1_Params,
                                               v_EpsUpdate_Result,
                                               v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus,
                                               v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType,
                                               NORMAL);
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA, v_RRC_TI);
    
    //@siclog "Step 13" siclog@
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE)
    }   // change power level of Cell A, send trigger to other RAT then wait for trigger to be returned
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    f_EUTRA_SendTriggerToOtherRAT(true);
    
    // Set power level for Cell A to "Serving cell"
    //@siclog "Step 16" siclog@
    f_EUTRA_SetCellPower(eutra_CellA, tsc_ServingCellRS_EPRE);
    
    // Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST?
    //@siclog "Step 17" siclog@
    v_NoReactionTime := f_EUTRA_SetTimerToleranceMax(eutra_CellA, nasTTCNTimer, 90.0);  // @sic R5s110791 sic@
    if (f_EUTRA_RRC_RRCConnectionRequest_Check(eutra_CellA, v_NoReactionTime)) {
      f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 17");
    }
    
    //@siclog "Step 18" siclog@
    // Check: Does the generic test procedure (TS 36.508 subclause 6.4.2.4) indicate that the UE
    // is EMM-REGISTERED on CellA with PagingUE-Identity = S-TMSI1 and with CN domain indicator set to PS?
    f_EPS_508Check_NAS_Paging(eutra_CellA, ps);
    
    // Step 18A
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE)
    }   // change power level of Cell A, send trigger to other RAT then wait for trigger to be returned
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    f_EUTRA_SendTriggerToOtherRAT(true);
    
    //  Set power level for Cell B to "Serving cell"
    //@siclog "Step 19" siclog@
    f_EUTRA_SetCellPower(eutra_CellB, tsc_ServingCellRS_EPRE);
    
    //@siclog "Step 20" siclog@
    // Check: does the UE send a TRACKING AREA UPDATE REQUEST with the correct parameters?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(v_UpdateType,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                         cr_TAI(v_PLMN, tsc_TAC1))));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 20");
    
    v_Guti2_Params := f_CreateGutiParamsWithUpdatedSTmsi(v_Guti2_Params);
    f_EUTRA_CellInfo_SetGuti(eutra_CellB, v_Guti2_Params);
    
    //@siclog "Step 21" siclog@
    // The SS sends TRACKING AREA UPDATE ACCEPT
    // Note: the default message contents cause the allocation of a new GUTI.
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                     cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(v_EpsUpdate_Result,
                                                                          f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti2_Params),
                                                                  cds_TAIListNonConsecutive_tlv(v_PLMN, {tsc_TAC2 }),
                                                                          v_EpsBearerCtxtStatus,
                                                                          f_GetLAI(v_PLMN_B,v_LAC_B, NORMAL), // @sic R5s110176 sic@
                                                                  f_GetMSId(NORMAL), // @sic R5s110176 sic@
                                                                          f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)))));
    //@siclog "Step 22" siclog@
    //The UE sends TRACKING AREA UPDATE COMPLETE
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellB,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    //@siclog "Step 22A" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
    
    //@siclog "Step 23" siclog@
    // Check: Does the generic test procedure (TS 36.508 subclause 6.4.2.4) indicate that the UE
    // is EMM-REGISTERED on CellB with PagingUE-Identity = S-TMSI2 and with CN domain indicator set to PS?
    f_EPS_508Check_NAS_Paging(eutra_CellB, ps);
    
    //@siclog "Step 24" siclog@
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_NonSuitableOffCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE)
    }   // change power level of Cell B, send trigger to other RAT then wait for trigger to be returned
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    f_EUTRA_SendTriggerToOtherRAT(true);
    
  }// end function fl_TC_9_2_3_1_6_Body

  function f_TC_9_2_3_1_10_EUTRA() runs on EUTRA_PTC
  { /* Normal tracking area update / rejected / IMSI invalid */
    
    var template (value) CellPowerList_Type v_CellPowerList;
    
    f_EUTRA_NAS_InitIRATorEUTRAonly(LTE_CellsOnDifferentPLMN); // @sic R5-113696 sic@
    
    f_UT_ConfigureEPSAttach(UT); // @sic R5-103811 sic@
    f_EUTRA_SendTriggerToOtherRAT(); // @sic R5-113696 sic@
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    if (px_SinglePLMN_Tested == MultiPLMN) { // @sic R5-113696 sic@
      f_EUTRA_CellConfig_Def(eutra_CellG);
    }
    
    f_EUTRA_PreambleOtherRAT(eutra_CellA, EPS_Only, true);    // @sic R5-113696 sic@

    if (px_SinglePLMN_Tested == MultiPLMN) { // @sic R5-113696 sic@
        v_CellPowerList := { // @sic R5s110351 sic@
        cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE),
        cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE),
        cs_CellPower(eutra_CellG, tsc_NonSuitableCellRS_EPRE)
        };
    } else {
        v_CellPowerList := { // @sic R5s110351 sic@
        cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE),
        cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE)
        };
    }
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_1_10_11_AND_12_Body(tsc_EmmCause_IllegalUe);
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    
    f_EUTRA_Postamble(eutra_CellA, E2_CONNECTED, EPS_Only); // @sic R5s110176 sic@
  } // function f_TC_9_2_3_1_10_EUTRA

  function f_TC_9_2_3_1_11_EUTRA() runs on EUTRA_PTC
  { /* Normal tracking area update / rejected / illegal ME */
    
    var template (value) CellPowerList_Type v_CellPowerList;
    
    f_EUTRA_NAS_InitIRATorEUTRAonly(LTE_CellsOnDifferentPLMN);  // @sic R5-113696 sic@
    
    f_UT_ConfigureEPSAttach(UT); // @sic R5-103811 sic@
    f_EUTRA_SendTriggerToOtherRAT(); // @sic R5-113696 sic@
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    if (px_SinglePLMN_Tested == MultiPLMN) { // @sic R5-113696 sic@
      f_EUTRA_CellConfig_Def(eutra_CellG);
    }
    
    f_EUTRA_PreambleOtherRAT(eutra_CellA, EPS_Only, true);    // @sic R5-113696 sic@
    
    if (px_SinglePLMN_Tested == MultiPLMN) { // @sic R5-113696 sic@
        v_CellPowerList := { // @sic R5s110351 sic@
        cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE),
        cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE),
        cs_CellPower(eutra_CellG, tsc_NonSuitableCellRS_EPRE)
        };
    } else {
        v_CellPowerList := { // @sic R5s110351 sic@
        cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE),
        cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE)
        };
    }
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_1_10_11_AND_12_Body(tsc_EmmCause_IllegalMe);
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    
    f_EUTRA_Postamble(eutra_CellA, E2_CONNECTED, EPS_Only); // @sic R5s110176 sic@
    
  } // function f_TC_9_2_3_1_11_EUTRA

  function f_TC_9_2_3_1_12_EUTRA() runs on EUTRA_PTC
  { /* Normal tracking area update / rejected / EPS service not allowed */
    
    var template (value) CellPowerList_Type v_CellPowerList;
    f_EUTRA_NAS_InitIRATorEUTRAonly(LTE_CellsOnDifferentPLMN); // @sic R5-113696 sic@
    
    f_UT_ConfigureEPSAttach(UT); // @sic R5-103811 sic@
    f_EUTRA_SendTriggerToOtherRAT(); // @sic R5-113696 sic@
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    if (px_SinglePLMN_Tested == MultiPLMN) { // @sic R5-113696 sic@
      f_EUTRA_CellConfig_Def(eutra_CellG);
    }
    
    f_EUTRA_PreambleOtherRAT(eutra_CellA, EPS_Only, true);    // @sic R5-113696 sic@
    
    if (px_SinglePLMN_Tested == MultiPLMN) { // @sic R5-113696 sic@
        v_CellPowerList := { // @sic R5s110351 sic@
        cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE),
        cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE),
        cs_CellPower(eutra_CellG, tsc_NonSuitableCellRS_EPRE)
        };
    } else {
        v_CellPowerList := { // @sic R5s110351 sic@
        cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE),
        cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE)
        };
    }
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_1_10_11_AND_12_Body(tsc_Cause_EPSServNotAllowed);
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    
    f_EUTRA_Postamble(eutra_CellA, E2_CONNECTED, EPS_Only); // @sic R5s110176 sic@
    
  } // function f_TC_9_2_3_1_12_EUTRA

  function fl_TC_9_2_3_1_10_11_AND_12_Body(B8_Type p_EmmCause) runs on EUTRA_PTC
  {
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var template (value) CellPowerList_Type v_CellPowerList;
    var NAS_MSG_Indication_Type v_NasInd;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType(EPS_Only); // @sic R5s110176 sic@
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only); // @sic R5s110176 sic@
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(EPS_Only); // @sic R5s110176 sic@
    
    //@siclog "Step 1" siclog@
    //+   Set the cell type of cell A to the "Non-Suitable cell". Set the cell type of cell B to the "Serving cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 2" siclog@
    //+   The UE transmits a TRACKING AREA UPDATE REQUEST on Cell B.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(v_UpdateType,
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType)));
    //@siclog "Step 3" siclog@
    //+  The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause = "Illegal UE" as specified.
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection, // @sic R5s120585 sic@
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(p_EmmCause))));
    
    //@siclog "Step 4" siclog@
    //+   The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
    
    //@siclog "Step 5" siclog@
    //+  Set the cell type of cell A to the "Serving cell". Set the cell type of cell B to the "Non-Suitable cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 6" siclog@
    //+  Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds on cell A? [1,F]
    //   Note: Cell A belongs to the same PLMN where the UE was rejected but a different TAC
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellA, 90.0);
    
    //@siclog "Step 7" siclog@
    //+   The user initiates an attach by MMI or by AT command.
    f_UT_TriggerAttach(UT);
    
    //@siclog "Step 8" siclog@
    //+Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds on cell A? [1,F]
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellA, 90.0);
    
    if (px_SinglePLMN_Tested == MultiPLMN) { // @sic R5-113696 sic@
        //@siclog "Step 9a" siclog@
        //+  Set the cell type of cell A to the " Non-Suitable cell". Set the cell type of cell G to the "Serving cell".
        v_CellPowerList := {
        cs_CellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE),
        cs_CellPower(eutra_CellG, tsc_ServingCellRS_EPRE)
        };
      f_EUTRA_SetCellPowerList(v_CellPowerList);
      
        //@siclog "Step 10a" siclog@
        //+  Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds on cell G? [1,F]
        //   Note: Cell G belongs to a PLMN which is not the same like the one on which the UE was rejected.
        f_EUTRA_CheckNoAttachOn1Cell(eutra_CellG, 90.0, "Step 10a");
      
        //+  The user initiates an attach by MMI or by AT command.
        //@siclog "Step 11a" siclog@
        f_UT_TriggerAttach(UT);

        //@siclog "Step 12a" siclog@
        //+  Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds on cell G? [1,F]
        f_EUTRA_CheckNoAttachOn1Cell(eutra_CellG, 90.0, "Step 12a");
      
        //@siclog "Step 13" siclog@
        //+  Set the cell type of cell G to the "Non-Suitable off cell". Set the cell type of cell 5 or 24 to the "Serving cell".
        v_CellPowerList := {
        cs_CellPower(eutra_CellG, tsc_NonSuitableOffCellRS_EPRE)
        };
      f_EUTRA_SetCellPowerList(v_CellPowerList);
    }
    /* @sic R5-113805, R5-113696, R5-113734: sic@ */
    if (f_EUTRA_GetOtherRAT() == "NONE") {        // UE supports neither UTRAN nor GERAN
      //@siclog "Step 15" siclog@
      //+   The UE is switched off.
      f_UT_SwitchOffUE(UT, false, CNF_REQUIRED);
    } else {
      f_EUTRA_SendTriggerToOtherRAT(true);       // trigger other RAT to trigger UE to send ATTACH REQUEST and wait until other RAT has finished
    }
    
    //@siclog "Step 16" siclog@
    // Set the cell type of cell A to the "Serving cell".
    // Set the cell type of cell G to the "Non-Suitable cell".
    if (px_SinglePLMN_Tested == MultiPLMN) { // @sic R5-113696 sic@
        v_CellPowerList := {
        cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE),
        cs_CellPower(eutra_CellG, tsc_NonSuitableCellRS_EPRE)
        };
    } else {
        v_CellPowerList := {
        cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE)
        };
    }
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 17" siclog@
    //+   The UE is powered up or switched on.
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@
    
    //@siclog "Step 18" siclog@
    //+ Check: Does the UE transmit an ATTACH REQUEST message on cell A? [2,P]
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA, // @sic R5s110168 change 2.10 sic@
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                 cdr_ATTACH_REQUEST_WithIMSI(v_AttachType,   // @sic R5s110242 sic@
                                                                                                                     v_AdditionalUpdateType,
                                                                                                                     f_Imsi2MobileIdentity(px_IMSI_Def)),
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                 f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 18");
    
    //@siclog "Step 19 - 30" siclog@
    f_EUTRA_IdleUpdated_Step5_17(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only, v_NasInd, false); // @sic R5s110395 sic@
    
    // now tell the other RAT it can release the cell
    f_EUTRA_SendTriggerToOtherRAT(); // @sic R5-112638 sic@
  } // function fl_TC_9_2_3_1_10_11_AND_12_Body

  function f_TC_9_2_3_1_15_EUTRA() runs on EUTRA_PTC
  { /* Normal tracking area update / Rejected / PLMN not allowed */

    var template (value) CellPowerList_Type v_CellPowerList;
    
    f_EUTRA_NAS_InitIRATorEUTRAonly(LTE_CellsOnDifferentPLMN, -, -, LTE_NAS_Replacef3_f1); // @sic R5-113805, R5s120340 sic@ @sic R5-121081 sic@
    
    f_UT_ConfigureEPSAttach(UT); // @sic R5-103811 sic@
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellG);
    f_EUTRA_CellConfig_Def(eutra_CellH);
    f_EUTRA_CellConfig_Def(eutra_CellI);
    
    // @sic R5-112618 sic@
    f_EUTRA_PreambleOtherRAT(eutra_CellG, EPS_Only);          // @sic R5-113805 sic@
    
    v_CellPowerList := {
      cs_CellPower(eutra_CellG, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellH, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellI, tsc_NonSuitableOffCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_1_15_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    
    f_EUTRA_Postamble(eutra_CellG, E2_CONNECTED, EPS_Only); // @sic R5s110176 sic@
  } // end f_TC_9_2_3_1_15_EUTRA

  function fl_TC_9_2_3_1_15_Body() runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NasInd;
    var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get();
    var boolean v_EIT_Flag := false;
    var ProcedureTransactionIdentifier v_EPS_TI := '00'O;
    var template (omit) AccessPointName v_APN := omit;
    var template (omit) ProtocolConfigOptions v_Pco := omit;
    var GutiParameters_Type v_Guti_Params_G := f_EUTRA_CellInfo_GetGuti(eutra_CellG);
    var GutiParameters_Type v_Guti_Params_I := f_EUTRA_CellInfo_GetGuti(eutra_CellI);
    var NAS_PlmnId v_PLMN_G:= f_Asn2Nas_PlmnId(v_Guti_Params_G.PLMN_Identity);
    var NAS_Tac v_Tac_CellG := bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellG));
    var NAS_PlmnId v_PLMN_I := f_Asn2Nas_PlmnId(v_Guti_Params_I.PLMN_Identity);
    var TrackingAreaCode v_Tac_CellI := f_EUTRA_CellInfo_GetTAC(eutra_CellI);
    var template (value) TrackingAreaIdList v_TaiList_CellI := cs_TAIListNonConsecutive_lv(v_PLMN_I, { bit2oct(v_Tac_CellI) });
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType(EPS_Only); // @sic R5s110176 sic@
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(EPS_Only); // @sic R5s110176 sic@
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only); // @sic R5s110176 sic@
    
    //@siclog "Step 1" siclog@
    v_CellPowerList := {
      cs_CellPower(eutra_CellG, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellH, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    // The UE transmits a TRACKING AREA UPDATE REQUEST on CellH
    //@siclog "Step 2" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellH,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(v_UpdateType,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_Guti_Params_G), //GUTI-7
                                                                                         cr_TAI(v_PLMN_G, v_Tac_CellG))));
    //@siclog "Step 3" siclog@
    // The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause = "PLMN not allowed"
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellH,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_Cause_PLMN_NotAllowed))));
    
    // The SS releases the RRC connection
    //@siclog "Step 4" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellH);
    
    //  Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds on cell H?
    //@siclog "Step 5" siclog@
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellH, 30.0);
    
    // The UE is switched off.
    //@siclog "Step 6" siclog@
    f_UT_SwitchOffUE(UT, false, CNF_REQUIRED); // @sic R5s1100395 sic@
    
    //@siclog "Step 7" siclog@
    // The SS configures: Cell H as the "non-suitable cell". Cell G as a "serving cell"
    // Note: Cell G and H are in the same PLMN
    v_CellPowerList := {
      cs_CellPower(eutra_CellH, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellG, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //  The UE is switched on.
    //@siclog "Step 8" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellI); // @sic R5s120065 sic@
    
    //  Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds on cell G?
    //@siclog "Step 9" siclog@
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellG, 90.0); // @sic R5-115560 sic@
    
    //  The user initiates an attach by MMI or by AT command
    //@siclog "Step 10" siclog@
    f_UT_TriggerAttach(UT);
    
    // Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds on cell G?
    //@siclog "Step 11" siclog@
    
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellG, 30.0);
    
    //  Change power level of Cell G, send trigger to other RAT then wait for trigger to be returned
    //@siclog "Step 12" siclog@
    f_EUTRA_SetCellPower(eutra_CellG, tsc_NonSuitableCellRS_EPRE);
    f_EUTRA_SendTriggerToOtherRAT(true); // @sic R5-112638 sic@
    
    // Set power level for Cell I to "serving cell"
    // Set power level for Cell H to "non-suitable off cell"
    //@siclog "Step 15" siclog@
    v_CellPowerList := {
      cs_CellPower(eutra_CellH, tsc_NonSuitableOffCellRS_EPRE),
      cs_CellPower(eutra_CellI, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //  Does the UE transmit ATTACH REQUEST message with a PDN CONNECTIVITY REQUEST message
    // to request PDN connectivity to the default PDN?
    //@siclog "Step 16" siclog@
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellI,
                                              v_RRC_TI,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                cdr_ATTACH_REQUEST_WithIMSIAndnoTAI(v_AttachType,
                                                                                                                    v_AdditionalUpdateType,
                                                                                                                    f_Imsi2MobileIdentity(px_IMSI_Def),
                                                                                                                    cr_TMSI_Status ifpresent),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 16");
    
    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier;
    v_EIT_Flag := f_CheckEsmInfoTransferFlag(v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST);
    
    v_Pco := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    
    //@siclog "Step 17 - 20a2" siclog@
    // The SS starts an authentication procedure
    // The UE responds properly to the authentication procedure
    // The SS starts a NAS security mode command procedure to perform NAS integrity protection.
    // The UE responds properly to the NAS security mode command procedure
    //     -    EXCEPTION: Steps 20a1 to 20a2 describe behaviour that depends on UE configuration.
    //   IF the UE sets the ESM information transfer flag in the last PDN CONNECTIVITY REQUEST message THEN the SS transmits an ESM INFORMATION REQUEST message to initiate exchange of protocol configuration options and/or APN.
    //  The UE transmits an ESM INFORMATION RESPONSE message to transfer protocol configuration options and/or APN.
    v_APN := f_EUTRA_Authentication_NAS_AS_Security(eutra_CellI,  v_EIT_Flag, v_EPS_TI, false);
    
    //  SS responds with ATTACH ACCEPT message with the ACTIVATE DEFAULT EPS BEARER CONTEXT REQUEST message
    //@siclog "Step 21" siclog@
    f_EUTRA_RRCConnectionReconfigurationWithAttachAcceptAllParams(eutra_CellI,
                                                                  tsc_EpsDefaultBearerId,
                                                                  v_RRC_TI,
                                                                  v_EPS_TI,
                                                                  tsc_EAttachType_EpsOnly,
                                                                  f_EUTRA_GetPDNAddress(f_CheckPCOforIPallocationViaNas(v_Pco)),
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti_Params_I),
                                                                  v_TaiList_CellI,
                                                                  omit,
                                                                  omit,
                                                                  omit,
                                                                  v_APN,
                                                                  f_GetDefPCOforPCSCFAddress(v_Pco), // @sic R5-104703 sic@
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType,
                                                                                              EPS_Only)); // @sic R5s110176 sic@
    
    // The UE transmit an ATTACH COMPLETE message including an ACTIVATE DEFAULT EPS BEARER CONTEXT ACCEPT message.
    //@siclog "Step 22" siclog@
    f_EUTRA_NAS_AttachComplete(eutra_CellI, tsc_EpsDefaultBearerId);
    
    //  The SS releases the RRC connection
    //@siclog "Step 23" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellI);
       
    //@siclog "Step 24 - 25" siclog@
    //  The UE is switched off.   @sic R5s110308 sic@
    // The UE transmit a DETACH REQUEST.
    f_EUTRA_UE_Detach_SwitchOffUe(eutra_CellI, RRC_IDLE, -, EPS_Only); // @sic R5s110176 sic@
    
    //@siclog "Step 27" siclog@
    v_CellPowerList := {
      cs_CellPower(eutra_CellG, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellI, tsc_NonSuitableCellRS_EPRE)     // @sic R5s110168 change 2.5 sic@
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //  The UE is switched on or powered up.
    //@siclog "Step 28" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellG, CNF_REQUIRED); // @sic R5s120065, R5s120361 sic@
    
    // The UE is switched to manual PLMN selection mode and is made to select the forbidden PLMN
    //@siclog "Step 29" siclog@
    f_UT_ManualPLMN_Select(UT, f_Asn2Nas_PlmnId(v_Guti_Params_G.PLMN_Identity)); // @sic R5-106675 sic@
    
    v_SecurityParams := f_EUTRA_Security_Get();
    
    // Does the UE transmit ATTACH REQUEST message with a PDN CONNECTIVITY REQUEST message
    //@siclog "Step 30" siclog@
    // to request PDN connectivity to the default PDN?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellG,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                 cdr_ATTACH_REQUEST_WithGuti(v_AttachType,
                                                                                                             v_AdditionalUpdateType,
                                                                                                             v_SecurityParams.KSIasme,
                                                                                                             f_GutiParameters2MobileIdentity(omit, v_Guti_Params_I),
                                                                                                             cr_TAI(v_PLMN_I, bit2oct(v_Tac_CellI))),
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                 f_GetPdnType())));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 30");
    
    //@siclog "Step 31 - 42" siclog@
    f_EUTRA_IdleUpdated_Step5_17(eutra_CellG, STATE2_IDLEUPDATE, EPS_Only, v_NasInd, false); // @sic R5s110395 sic@
    
    f_EUTRA_SendTriggerToOtherRAT(); // @sic R5-112638 sic@
    
  }// end function fl_TC_9_2_3_1_15_Body

  function f_TC_9_2_3_1_15a_EUTRA() runs on EUTRA_PTC
  { /* Normal tracking area update / Rejected / PLMN not allowed / Single Frequency operation */

    var template (value) CellPowerList_Type v_CellPowerList;
    
    f_EUTRA_NAS_InitIRATorEUTRAonly(LTE_CellsOnDifferentPLMN);
    
    f_UT_ConfigureEPSAttach(UT);
 
    // Set TACs and PLMNs
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellA, cs_HPLMN_001_02);
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellB, cs_HPLMN_001_02);
    f_EUTRA_CellInfo_SetTAC(eutra_CellC, oct2bit(tsc_TAC1));
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellC, cs_HPLMN_002_101);

    f_EUTRA_CellInfo_SetTAC(eutra_CellA, oct2bit('0007'O));
    f_EUTRA_CellInfo_SetTAC(eutra_CellB, oct2bit('0008'O));
    f_EUTRA_CellInfo_SetTAC(eutra_CellC, oct2bit('0009'O));

    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    f_EUTRA_CellConfig_Def(eutra_CellC);
    
    // @sic R5-112618 sic@
    f_EUTRA_PreambleOtherRAT(eutra_CellA, EPS_Only);
    
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellC, tsc_NonSuitableOffCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_1_15a_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    
    f_EUTRA_Postamble(eutra_CellA, E2_CONNECTED, EPS_Only);
  }

  function fl_TC_9_2_3_1_15a_Body() runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NasInd;
    var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get();
    var boolean v_EIT_Flag := false;
    var ProcedureTransactionIdentifier v_EPS_TI := '00'O;
    var template (omit) AccessPointName v_APN := omit;
    var template (omit) ProtocolConfigOptions v_Pco := omit;
    var GutiParameters_Type v_Guti_Params_A := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var GutiParameters_Type v_Guti_Params_C := f_EUTRA_CellInfo_GetGuti(eutra_CellC);
    var NAS_PlmnId v_PLMN_A:= f_Asn2Nas_PlmnId(v_Guti_Params_A.PLMN_Identity);
    var NAS_Tac v_Tac_CellA := bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellA));
    var NAS_PlmnId v_PLMN_C := f_Asn2Nas_PlmnId(v_Guti_Params_C.PLMN_Identity);
    var TrackingAreaCode v_Tac_CellC := f_EUTRA_CellInfo_GetTAC(eutra_CellC);
    var template (value) TrackingAreaIdList v_TaiList_CellC := cs_TAIListNonConsecutive_lv(v_PLMN_C, { bit2oct(v_Tac_CellC) });
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType(EPS_Only);
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(EPS_Only);
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only);
    
    //@siclog "Step 1" siclog@
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    // The UE transmits a TRACKING AREA UPDATE REQUEST on CellB
    //@siclog "Step 2" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(v_UpdateType,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_Guti_Params_A),//GUTI-7
                                                                                         cr_TAI(v_PLMN_A, v_Tac_CellA))));
    //@siclog "Step 3" siclog@
    // The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause = "PLMN not allowed"
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_Cause_PLMN_NotAllowed))));
    
    //@siclog "Step 4" siclog@
    // The SS releases the RRC connection
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
       
    //@siclog "Step 5" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds on cell B?
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellB, 90.0);
    
    //@siclog "Step 6" siclog@
    // The UE is switched off.
    f_UT_SwitchOffUE(UT, false, CNF_REQUIRED);
    
    //@siclog "Step 7" siclog@
    // The SS configures: Cell B as the "non-suitable cell". Cell A as a "serving cell"
    // Note: Cell A and B are in the same PLMN
    v_CellPowerList := {
      cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 8" siclog@
    //  The UE is switched on.
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellC);
    
    //@siclog "Step 9" siclog@
    //  Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds on cell A?
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellA, 90.0);
 
    //@siclog "Step 10" siclog@
    //  The user initiates an attach by MMI or by AT command
    f_UT_TriggerAttach(UT);
    
    //@siclog "Step 11" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds on cell A?
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellA, 90.0);
    
    //@siclog "Step 12" siclog@
    //  Change power level of Cell A, send trigger to other RAT then wait for trigger to be returned
    f_EUTRA_SetCellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE);
    f_EUTRA_SendTriggerToOtherRAT(true);
    
    //@siclog "Step 15" siclog@
    // Set power level for Cell C to "serving cell"
    // Set power level for Cell B to "non-suitable off cell"
    v_CellPowerList := {
      cs_CellPower(eutra_CellB, tsc_NonSuitableOffCellRS_EPRE),
      cs_CellPower(eutra_CellC, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 16" siclog@
    //  Does the UE transmit ATTACH REQUEST message with a PDN CONNECTIVITY REQUEST message
    // to request PDN connectivity to the default PDN?
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellC,
                                              v_RRC_TI,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                cdr_ATTACH_REQUEST_WithIMSIAndnoTAI(v_AttachType,
                                                                                                                    v_AdditionalUpdateType,
                                                                                                                    f_Imsi2MobileIdentity(px_IMSI_Def),
                                                                                                                    cr_TMSI_Status ifpresent),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 16");
    
    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier;
    v_EIT_Flag := f_CheckEsmInfoTransferFlag(v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST);
    
    v_Pco := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    
    //@siclog "Step 17 - 20a2" siclog@
    // The SS starts an authentication procedure
    // The UE responds properly to the authentication procedure
    // The SS starts a NAS security mode command procedure to perform NAS integrity protection.
    // The UE responds properly to the NAS security mode command procedure
    //     -    EXCEPTION: Steps 20a1 to 20a2 describe behaviour that depends on UE configuration.
    //   IF the UE sets the ESM information transfer flag in the last PDN CONNECTIVITY REQUEST message THEN the SS transmits an ESM INFORMATION REQUEST message to initiate exchange of protocol configuration options and/or APN.
    //  The UE transmits an ESM INFORMATION RESPONSE message to transfer protocol configuration options and/or APN.
    v_APN := f_EUTRA_Authentication_NAS_AS_Security(eutra_CellC,  v_EIT_Flag, v_EPS_TI, false);
    
    //@siclog "Step 21" siclog@
    //  SS responds with ATTACH ACCEPT message with the ACTIVATE DEFAULT EPS BEARER CONTEXT REQUEST message
    f_EUTRA_RRCConnectionReconfigurationWithAttachAcceptAllParams(eutra_CellC,
                                                                  tsc_EpsDefaultBearerId,
                                                                  v_RRC_TI,
                                                                  v_EPS_TI,
                                                                  tsc_EAttachType_EpsOnly,
                                                                  f_EUTRA_GetPDNAddress(f_CheckPCOforIPallocationViaNas(v_Pco)),
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti_Params_C),
                                                                  v_TaiList_CellC,
                                                                  omit,
                                                                  omit,
                                                                  omit,
                                                                  v_APN,
                                                                  f_GetDefPCOforPCSCFAddress(v_Pco),
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType,
                                                                                              EPS_Only));
    
    //@siclog "Step 22" siclog@
    // The UE transmit an ATTACH COMPLETE message including an ACTIVATE DEFAULT EPS BEARER CONTEXT ACCEPT message.
    f_EUTRA_NAS_AttachComplete(eutra_CellC, tsc_EpsDefaultBearerId);

    //@siclog "Step 23" siclog@
    //  The SS releases the RRC connection
    f_EUTRA_RRC_ConnectionRelease(eutra_CellC);
       
    //@siclog "Step 24 - 25" siclog@
    //  The UE is switched off.
    // The UE transmit a DETACH REQUEST.
    f_EUTRA_UE_Detach_SwitchOffUe(eutra_CellC, RRC_IDLE, -, EPS_Only);
    
    //@siclog "Step 27" siclog@
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellC, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 28" siclog@
    //  The UE is switched on or powered up.
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA, CNF_REQUIRED);
    
    //@siclog "Step 29" siclog@
    // The UE is switched to manual PLMN selection mode and is made to select the forbidden PLMN
    f_UT_ManualPLMN_Select(UT, f_Asn2Nas_PlmnId(v_Guti_Params_A.PLMN_Identity)); // @sic R5-106675 sic@
    
    v_SecurityParams := f_EUTRA_Security_Get();
    
    //@siclog "Step 30" siclog@
    // Does the UE transmit ATTACH REQUEST message with a PDN CONNECTIVITY REQUEST message
    // to request PDN connectivity to the default PDN?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                 cdr_ATTACH_REQUEST_WithGuti(v_AttachType,
                                                                                                             v_AdditionalUpdateType,
                                                                                                             v_SecurityParams.KSIasme,
                                                                                                             f_GutiParameters2MobileIdentity(omit, v_Guti_Params_C),
                                                                                                             cr_TAI(v_PLMN_C, bit2oct(v_Tac_CellC))),
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                 f_GetPdnType())));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 30");
    
    //@siclog "Step 31 - 42" siclog@
    f_EUTRA_IdleUpdated_Step5_17(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only, v_NasInd, false);
    
    f_EUTRA_SendTriggerToOtherRAT();
  }

  function f_TC_9_2_3_1_17_EUTRA() runs on EUTRA_PTC
  { /* Normal tracking area update / Rejected / Roaming not allowed in this tracking area */
    
    var template (value) CellPowerList_Type v_CellPowerList;
    
    f_EUTRA_NAS_InitIRATorEUTRAonly(LTE_CellsOnDifferentPLMN, -, -, LTE_NAS_Usef1_f2); // @sic R5-113696, R5s110641 sic@
    
    f_UT_ConfigureEPSAttach(UT); // @sic R5-103811 sic@
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellK); // @sic R5-113696 sic@
    f_EUTRA_CellConfig_Def(eutra_CellL); // @sic R5-113696 sic@
    if (px_SinglePLMN_Tested == MultiPLMN) { // @sic R5-113696 sic@
      f_EUTRA_CellConfig_Def(eutra_CellJ);
    }
    f_EUTRA_PreambleOtherRAT(eutra_CellK, EPS_Only);          // @sic R5-113696 sic@
    
    v_CellPowerList := {
      cs_CellPower(eutra_CellK, tsc_ServingCellRS_EPRE), // @sic R5-113696 sic@
      cs_CellPower(eutra_CellL, tsc_NonSuitableCellRS_EPRE) // @sic R5-113696 sic@
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_1_17_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    
    if (px_SinglePLMN_Tested == MultiPLMN) { // @sic R5-113696 sic@
      f_EUTRA_Postamble(eutra_CellJ, E2_T3440, EPS_Only); // @sic R5s110176, R5s110007 sic@
    } else {
      f_EUTRA_Postamble(eutra_CellK, E4_DEREGISTERED, EPS_Only); // @sic R5s110176, R5s110007 sic@
    }
  } // end f_TC_9_2_3_1_17_EUTRA

  function fl_TC_9_2_3_1_17_Body() runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NasInd;
    var template (omit) EPS_BearerContextStatus v_EPS_ContextStatus;
    var GutiParameters_Type v_Guti_Params_K := f_EUTRA_CellInfo_GetGuti(eutra_CellK); // @sic R5s110618 sic@
    var GutiParameters_Type v_Guti_Params_J := f_EUTRA_CellInfo_GetGuti(eutra_CellJ); // @sic R5s110618 sic@
    var NAS_PlmnId v_PLMN_J := f_Asn2Nas_PlmnId(v_Guti_Params_J.PLMN_Identity);
    var TrackingAreaCode v_Tac_CellJ := f_EUTRA_CellInfo_GetTAC(eutra_CellJ);
    var NAS_Lac v_LAC := f_EUTRA_CellInfo_GetLocationAreaCode(eutra_CellJ);
    var template (omit) LocAreaId v_LAI := f_GetLAI(v_PLMN_J, v_LAC, EPS_Only); // @sic R5s110176 sic@
    var template (omit) MobileIdentity v_MSId := f_GetMSId(EPS_Only); // @sic R5s110176 sic@
    var template (value) TrackingAreaIdList v_TaiList := cds_TAIListNonConsecutive_tlv(v_PLMN_J, { bit2oct(v_Tac_CellJ) });
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType(EPS_Only); // @sic R5s110176 sic@
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(EPS_Only); // @sic R5s110176 sic@
        
    //@siclog "Step 1" siclog@
    v_CellPowerList := {
      cs_CellPower(eutra_CellK, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE), // @sic R5-113696, R5-122119 sic@
      cs_CellPower(eutra_CellL, tsc_ServingCellRS_EPRE) // @sic R5-113696 sic@
    }
    f_Delay (5.0); // @sic R5s120274 sic@
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //The UE transmits a TRACKING AREA UPDATE REQUEST on CellL
    //@siclog "Step 2" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellL,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGutiPTMSISig(v_UpdateType,                   // @sic R5s110518 sic@
                                                                                                   f_EUTRA_SecurityKSIasme_Get(),
                                                                                                   cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                   v_AdditionalUpdateType,
                                                                                                   f_GutiParameters2MobileIdentity(omit, v_Guti_Params_K), // @sic R5s110618 sic@
                                                                                                   omit)));
    //@siclog "Step 3" siclog@
    // The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause = "Roaming not allowed in this TA"
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellL,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_Cause_Roaming_NotAllowed))));
    
    // The SS releases the RRC connection
    //@siclog "Step 4" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellL);
    
    //@siclog "Step 5-6 Void" siclog@
    
    //@siclog "Step 7" siclog@
    // Check: does the UE transmit a TRACKING AREA UPDATE REQUEST message? (2, P)
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellK,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected, // @sic R5s110618 sic@
                                                                  cdr_TAU_Request_OldGutiPTMSISig(v_UpdateType,                   // @sic R5s110518 sic@
                                                                                                   f_EUTRA_SecurityKSIasme_Get(),
                                                                                                   cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                   v_AdditionalUpdateType,
                                                                                                   f_GutiParameters2MobileIdentity(omit, v_Guti_Params_K), // @sic R5s110618 sic@
                                                                                                   omit)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 7");
    
    //@siclog "Step 8" siclog@
    // The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause = "Roaming not allowed in this TA"
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellK,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_Cause_Roaming_NotAllowed))));
    
    
    //  The SS releases the RRC connection
    //@siclog "Step 9" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellK);
    
    //  Change power level of Cell K, send trigger to other RAT then wait for trigger to be returned
    //@siclog "Step 10" siclog@
    f_EUTRA_SetCellPower(eutra_CellK, tsc_NonSuitableCellRS_EPRE);
    f_EUTRA_SendTriggerToOtherRAT(true); // @sic R5-112638 sic@
    
    if (px_SinglePLMN_Tested == MultiPLMN) { // @sic R5-113696 sic@
        //  Set power level for Cell J to "Serving cell" and L to off
        //@siclog "Step 12a1" siclog@
        v_CellPowerList := {
        cs_CellPower(eutra_CellL, tsc_NonSuitableOffCellRS_EPRE),
        cs_CellPower(eutra_CellJ, tsc_ServingCellRS_EPRE)
        };
      f_EUTRA_SetCellPowerList(v_CellPowerList);
        
        //@siclog "Step 12a2" siclog@
        // Check: does the UE transmit a TRACKING AREA UPDATE REQUEST message  on cellJ? (P)
        //@sic R5-112625 sic@
        v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellJ,
                                                   v_RRC_TI,
                                                   cr_EstablishmentCause_Any,
                                                 cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                      cdr_TAU_Request_OldGutiPTMSISig(v_UpdateType,                   // @sic R5s110518 sic@
                                                                                                       f_EUTRA_SecurityKSIasme_Get(),
                                                                                                       cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                       v_AdditionalUpdateType,
                                                                                                       f_GutiParameters2MobileIdentity(omit, v_Guti_Params_K),
                                                                                                       omit)));
        f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 12a2");
        
        //  The SS transmits a TRACKING AREA UPDATE ACCEPT message.
        //@siclog "Step 12a3" siclog@
        v_EPS_ContextStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
        
      SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellJ,
                                         cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_508_TAU_Accept(v_UpdateType,
                                                                    f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti_Params_J), // @sic R5s110618 sic@
                                                                              v_TaiList,
                                                                              v_EPS_ContextStatus,
                                                                              v_LAI,
                                                                              v_MSId,
                                                                              f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType,
                                                                                                          EPS_Only))))); // @sic R5s110176 sic@
        
        
        // The UE transmits a TRACKING AREA UPDATE COMPLETE message.
        //@siclog "Step 12a4" siclog@
      SRB.receive(car_SRB1_NasPdu_IND(eutra_CellJ,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                        cr_508_TAU_Complete)));
    }
    // Test case body finished, so let the other PTCs know
    f_EUTRA_SendTriggerToOtherRAT(); // @sic R5-112638 sic@
  }// end function fl_TC_9_2_3_1_17_Body

  function f_TC_9_2_3_1_18_EUTRA() runs on EUTRA_PTC
  { /* Normal tracking area update / Rejected / EPS services not allowed in this PLMN */
    
    var template (value) CellPowerList_Type v_CellPowerList;
    
    f_EUTRA_NAS_InitIRATorEUTRAonly(LTE_CellsOnDifferentPLMN, -, -, LTE_NAS_Replacef3_f1); // @sic R5-113805 sic@ @sic R5-121081 sic@
    
    f_UT_ConfigureEPSAttach(UT); // @sic R5-103811 sic@
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellG);
    f_EUTRA_CellConfig_Def(eutra_CellH);
    f_EUTRA_CellConfig_Def(eutra_CellI);
    
    f_EUTRA_PreambleOtherRAT(eutra_CellG, EPS_Only);         // @sic R5-113805 sic@
    
    v_CellPowerList := {                                      // @sic R5-113685 sic@
      cs_CellPower(eutra_CellG, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellH, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_1_18_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    
    // Remove cells
    f_EUTRA_Postamble(eutra_CellG, E2_CONNECTED, EPS_Only); // @sic R5s110176 sic@
    
  } // end f_TC_9_2_3_1_18_EUTRA

  function fl_TC_9_2_3_1_18_Body() runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NasInd;
    var EUTRA_SecurityParams_Type v_SecurityParams;
    var boolean v_EIT_Flag := false;
    var ProcedureTransactionIdentifier v_EPS_TI := '00'O;
    var template (omit) AccessPointName v_APN := omit;
    var template (omit) ProtocolConfigOptions v_Pco := omit;
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only);
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(EPS_Only);
    var GutiParameters_Type v_Guti_Params_I := f_EUTRA_CellInfo_GetGuti(eutra_CellI);
    var NAS_PlmnId v_PLMN_I := f_Asn2Nas_PlmnId(v_Guti_Params_I.PLMN_Identity);
    var TrackingAreaCode v_Tac_CellI := f_EUTRA_CellInfo_GetTAC(eutra_CellI);
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType(EPS_Only);
    var template (value) TrackingAreaIdList v_TaiList := cs_TAIListNonConsecutive_lv(v_PLMN_I, { bit2oct(v_Tac_CellI) });
    
    //@siclog "Step 1" siclog@
    // Set the cell type of cell G to the "Non-Suitable cell"
    // Set the cell type of cell H to the "Serving cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellG, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellH, tsc_ServingCellRS_EPRE)
    }
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //  The UE transmits a TRACKING AREA UPDATE REQUEST on CellH
    //@siclog "Step 2" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellH,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(v_UpdateType,
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType)));
    
    //@siclog "Step 3" siclog@
    //The SS transmits a TRACKING AREA UPDATE REJECT message, EMM cause = "EPS services not allowed in this PLMN"
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellH,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_Cause_EPSServNotAllowedInThisPLMN))));
    
    // The SS releases the RRC connection
    //@siclog "Step 4" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellH);
    
    //  Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds on cell H?
    //@siclog "Step 5" siclog@
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellH, 30.0);
    
    //@siclog "Step 6" siclog@
    // The SS configures: Cell H as the "Non-Suitable cell". Cell G as a "Serving cell"
    // Note: Cell G and H are in the same PLMN
    v_CellPowerList := {
      cs_CellPower(eutra_CellH, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellG, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //  The user initiates an attach by MMI or by AT command
    //@siclog "Step 7" siclog@
    f_UT_TriggerAttach(UT);
    
    //  Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds on cell G?
    //@siclog "Step 8" siclog@
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellG, 30.0);
    
    //  Change power level of Cell G, send trigger to other RAT then wait for trigger to be returned
    //@siclog "Step 9" siclog@
    v_CellPowerList := {
      cs_CellPower(eutra_CellH, tsc_NonSuitableOffCellRS_EPRE),
      cs_CellPower(eutra_CellG, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    f_EUTRA_SendTriggerToOtherRAT(true); // @sic R5-112638 sic@
    
    //  Set power level for Cell I to "Serving cell"
    //@siclog "Step 11" siclog@
    f_EUTRA_SetCellPower(eutra_CellI, tsc_ServingCellRS_EPRE);
    
    
    //  Does the UE transmit ATTACH REQUEST message with a PDN CONNECTIVITY REQUEST message
    // to request PDN connectivity to the default PDN?
    //@siclog "Step 12" siclog@
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellI,
                                              v_RRC_TI,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                cdr_ATTACH_REQUEST_WithIMSIAndnoTAI(v_AttachType,
                                                                                                                    v_AdditionalUpdateType,
                                                                                                                    f_Imsi2MobileIdentity(px_IMSI_Def)), //@sic R5s110242 sic@
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 12");
    
    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier;
    v_EIT_Flag := f_CheckEsmInfoTransferFlag(v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST);
    v_Pco := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    
    //@siclog "Step 13 - 17a2" siclog@
    // The SS starts an authentication procedure
    // The UE responds properly to the authentication procedure
    // The SS starts a NAS security mode command procedure to perform NAS integrity protection.
    // The UE responds properly to the NAS security mode command procedure
    //     -    EXCEPTION: Steps 17a1 to 17a2 describe behaviour that depends on UE configuration.
    //   IF the UE sets the ESM information transfer flag in the last PDN CONNECTIVITY REQUEST
    //             message THEN the SS transmits an ESM INFORMATION REQUEST message to initiate exchange
    //             of protocol configuration options and/or APN.
    //   The UE transmits an ESM INFORMATION RESPONSE message to transfer protocol configuration
    //             options and/or APN.
    v_APN := f_EUTRA_Authentication_NAS_AS_Security(eutra_CellI,  v_EIT_Flag, v_EPS_TI, false);
    
    //  The SS sends ATTACH ACCEPT message with the ACTIVATE DEFAULT EPS BEARER CONTEXT REQUEST message.
    //@siclog "Step 18" siclog@
    f_EUTRA_RRCConnectionReconfigurationWithAttachAcceptAllParams(eutra_CellI,
                                                                  tsc_EpsDefaultBearerId,
                                                                  v_RRC_TI,
                                                                  v_EPS_TI,
                                                                  tsc_EAttachType_EpsOnly,
                                                                  f_EUTRA_GetPDNAddress(f_CheckPCOforIPallocationViaNas(v_Pco)),
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti_Params_I),
                                                                  v_TaiList,
                                                                  omit,
                                                                  omit,
                                                                  omit,
                                                                  v_APN,
                                                                  f_GetDefPCOforPCSCFAddress(v_Pco), // @sic R5-104703 sic@
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType, EPS_Only));
    
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //  EXCEPTION: In parallel to the event described in step 19 below the generic procedure for IP address  //
    //  allocation in the U-plane specified in TS 36.508 subclause 4.5A.1 takes place performing IP address  //
    //  allocation in the U-plane if requested by the UE.                                                    //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    //  The UE transmit an ATTACH COMPLETE message
    //@siclog "Step 19" siclog@
    f_EUTRA_NAS_AttachComplete(eutra_CellI, tsc_EpsDefaultBearerId);
    
    // The SS releases the RRC connection
    //@siclog "Step 20" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellI);
    
    //@siclog "Step 21 - 22" siclog@
    //  The UE is switched off. @sic R5s110308 sic@
    // The UE transmit a DETACH REQUEST.
    f_EUTRA_UE_Detach_SwitchOffUe(eutra_CellI, RRC_IDLE, -, EPS_Only); // @sic R5s110176 sic@
    
    //@siclog "Step 23" siclog@
    // Set the cell type of cell G to the "Serving cell"
    // Set the cell type of cell I to the "Non-Suitable cell"
    // Note: Cell G belongs to the forbidden PLMNs for GPRS service
    v_CellPowerList := {
      cs_CellPower(eutra_CellG, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellI, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@
    
    //  The UE is powered up or switched on
    //@siclog "Step 24" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellG); // @sic R5s120065 sic@
    
    v_SecurityParams := f_EUTRA_Security_Get();
    //  Does the UE send ATTACH REQUEST message with a PDN CONNECTIVITY REQUEST message
    // to request PDN connectivity to the default PDN?
    //@siclog "Step 25" siclog@
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellG,
                                              v_RRC_TI,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                cdr_ATTACH_REQUEST_WithGuti(v_AttachType,
                                                                                                            v_AdditionalUpdateType,
                                                                                                            v_SecurityParams.KSIasme,
                                                                                                            f_GutiParameters2MobileIdentity(omit, v_Guti_Params_I),
                                                                                                            cr_TAI(v_PLMN_I, tsc_TAC1)),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 25");
    
    //@siclog "Step 26 - 37" siclog@
    f_EUTRA_IdleUpdated_Step5_17(eutra_CellG, STATE2_IDLEUPDATE, EPS_Only, v_NasInd, false);
    
    // Test case body finished, so let the other PTCs know
    f_EUTRA_SendTriggerToOtherRAT();
    
  }// end function fl_TC_9_2_3_1_18_Body

  function f_TC_9_2_3_1_18a_EUTRA() runs on EUTRA_PTC
  { /* Normal tracking area update / Rejected / EPS services not allowed in this PLMN / Single Frequency operation */
  
    var template (value) CellPowerList_Type v_CellPowerList;
    
    f_EUTRA_NAS_InitIRATorEUTRAonly(LTE_CellsOnDifferentPLMN);
    
    f_UT_ConfigureEPSAttach(UT);
 
    // Set TACs and PLMNs
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellA, cs_HPLMN_001_02);
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellB, cs_HPLMN_001_02);
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellC, cs_HPLMN_002_101);

    f_EUTRA_CellInfo_SetTAC(eutra_CellA, oct2bit('0007'O));
    f_EUTRA_CellInfo_SetTAC(eutra_CellB, oct2bit('0008'O));
    f_EUTRA_CellInfo_SetTAC(eutra_CellC, oct2bit('0009'O));

    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    f_EUTRA_CellConfig_Def(eutra_CellC);
    
    f_EUTRA_PreambleOtherRAT(eutra_CellA, EPS_Only);
    
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_1_18a_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    
    // Remove cells
    f_EUTRA_Postamble(eutra_CellA, E2_CONNECTED, EPS_Only);
    
  } // end f_TC_9_2_3_1_18a_EUTRA

  function fl_TC_9_2_3_1_18a_Body() runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NasInd;
    var EUTRA_SecurityParams_Type v_SecurityParams;
    var boolean v_EIT_Flag := false;
    var ProcedureTransactionIdentifier v_EPS_TI := '00'O;
    var template (omit) AccessPointName v_APN := omit;
    var template (omit) ProtocolConfigOptions v_Pco := omit;
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only);
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(EPS_Only);
    var GutiParameters_Type v_Guti_Params_C := f_EUTRA_CellInfo_GetGuti(eutra_CellC);
    var NAS_PlmnId v_PLMN_C := f_Asn2Nas_PlmnId(v_Guti_Params_C.PLMN_Identity);
    var TrackingAreaCode v_Tac_CellC := f_EUTRA_CellInfo_GetTAC(eutra_CellC);
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType(EPS_Only);
    var template (value) TrackingAreaIdList v_TaiList := cs_TAIListNonConsecutive_lv(v_PLMN_C, { bit2oct(v_Tac_CellC) });
    
    //@siclog "Step 1" siclog@
    // Set the cell type of cell A to the "Non-Suitable cell"
    // Set the cell type of cell B to the "Serving cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_ServingCellRS_EPRE)
    }
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 2" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST on CellB
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(v_UpdateType,
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType)));
    
    //@siclog "Step 3" siclog@
    //The SS transmits a TRACKING AREA UPDATE REJECT message, EMM cause = "EPS services not allowed in this PLMN"
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_Cause_EPSServNotAllowedInThisPLMN))));
    
    //@siclog "Step 4" siclog@
    // The SS releases the RRC connection
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
    
    //@siclog "Step 5" siclog@
    //  Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds on cell B?
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellB, 90.0);
    
    //@siclog "Step 6" siclog@
    // The SS configures: Cell B as the "Non-Suitable cell". Cell A as a "Serving cell"
    // Note: Cell G and H are in the same PLMN
    v_CellPowerList := {
      cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 7" siclog@
    //  The user initiates an attach by MMI or by AT command
    f_UT_TriggerAttach(UT);
    
    //@siclog "Step 8" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds on cell A?
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellA, 90.0);
    
    //@siclog "Step 9" siclog@
    // Set the cell type of cell A to the "Non-Suitable cell", Set the cell type of cell B to the "Non-Suitable "off" cell".
    // send trigger to other RAT then wait for trigger to be returned
    v_CellPowerList := {
      cs_CellPower(eutra_CellB, tsc_NonSuitableOffCellRS_EPRE),
      cs_CellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    f_EUTRA_SendTriggerToOtherRAT(true);
    
    //@siclog "Step 11" siclog@
    // Set power level for Cell C to "Serving cell"
    f_EUTRA_SetCellPower(eutra_CellC, tsc_ServingCellRS_EPRE);
       
    //@siclog "Step 12" siclog@
    // Does the UE transmit ATTACH REQUEST message with a PDN CONNECTIVITY REQUEST message
    // to request PDN connectivity to the default PDN?
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellC,
                                              v_RRC_TI,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                cdr_ATTACH_REQUEST_WithIMSIAndnoTAI(v_AttachType,
                                                                                                                    v_AdditionalUpdateType,
                                                                                                                    f_Imsi2MobileIdentity(px_IMSI_Def)),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 12");
    
    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier;
    v_EIT_Flag := f_CheckEsmInfoTransferFlag(v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST);
    v_Pco := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    
    //@siclog "Step 13 - 17a2" siclog@
    // The SS starts an authentication procedure
    // The UE responds properly to the authentication procedure
    // The SS starts a NAS security mode command procedure to perform NAS integrity protection.
    // The UE responds properly to the NAS security mode command procedure
    //     -    EXCEPTION: Steps 17a1 to 17a2 describe behaviour that depends on UE configuration.
    //   IF the UE sets the ESM information transfer flag in the last PDN CONNECTIVITY REQUEST
    //             message THEN the SS transmits an ESM INFORMATION REQUEST message to initiate exchange
    //             of protocol configuration options and/or APN.
    //   The UE transmits an ESM INFORMATION RESPONSE message to transfer protocol configuration
    //             options and/or APN.
    v_APN := f_EUTRA_Authentication_NAS_AS_Security(eutra_CellC,  v_EIT_Flag, v_EPS_TI, false);
    
    //@siclog "Step 18" siclog@
    //  The SS sends ATTACH ACCEPT message with the ACTIVATE DEFAULT EPS BEARER CONTEXT REQUEST message.
    f_EUTRA_RRCConnectionReconfigurationWithAttachAcceptAllParams(eutra_CellC,
                                                                  tsc_EpsDefaultBearerId,
                                                                  v_RRC_TI,
                                                                  v_EPS_TI,
                                                                  tsc_EAttachType_EpsOnly,
                                                                  f_EUTRA_GetPDNAddress(f_CheckPCOforIPallocationViaNas(v_Pco)),
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti_Params_C),
                                                                  v_TaiList,
                                                                  omit,
                                                                  omit,
                                                                  omit,
                                                                  v_APN,
                                                                  f_GetDefPCOforPCSCFAddress(v_Pco),
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType, EPS_Only));
    
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //  EXCEPTION: In parallel to the event described in step 19 below the generic procedure for IP address  //
    //  allocation in the U-plane specified in TS 36.508 subclause 4.5A.1 takes place performing IP address  //
    //  allocation in the U-plane if requested by the UE.                                                    //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    //@siclog "Step 19" siclog@
    //  The UE transmit an ATTACH COMPLETE message
    f_EUTRA_NAS_AttachComplete(eutra_CellC, tsc_EpsDefaultBearerId);
    
    //@siclog "Step 20" siclog@
    // The SS releases the RRC connection
    f_EUTRA_RRC_ConnectionRelease(eutra_CellC);
    
    //@siclog "Step 21 - 22" siclog@
    //  The UE is switched off.
    // The UE transmit a DETACH REQUEST.
    f_EUTRA_UE_Detach_SwitchOffUe(eutra_CellC, RRC_IDLE, -, EPS_Only);
    
    //@siclog "Step 23" siclog@
    // Set the cell type of cell A to the "Serving cell"
    // Set the cell type of cell C to the "Non-Suitable cell"
    // Note: Cell A belongs to the forbidden PLMNs for GPRS service
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellC, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 24" siclog@
    // The UE is powered up or switched on
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA);
    
    v_SecurityParams := f_EUTRA_Security_Get();

    //@siclog "Step 25" siclog@
    //  Does the UE send ATTACH REQUEST message with a PDN CONNECTIVITY REQUEST message
    // to request PDN connectivity to the default PDN?
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                              v_RRC_TI,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                cdr_ATTACH_REQUEST_WithGuti(v_AttachType,
                                                                                                            v_AdditionalUpdateType,
                                                                                                            v_SecurityParams.KSIasme,
                                                                                                            f_GutiParameters2MobileIdentity(omit, v_Guti_Params_C),
                                                                                                            cr_TAI(v_PLMN_C, bit2oct(v_Tac_CellC))),  // @sic R5s120417 sic@
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 25");
    
    //@siclog "Step 26 - 37" siclog@
    f_EUTRA_IdleUpdated_Step5_17(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only, v_NasInd, false);
    
    // Test case body finished, so let the other PTCs know
    f_EUTRA_SendTriggerToOtherRAT();
    
  }// end function fl_TC_9_2_3_1_18a_Body

  function f_TC_9_2_3_2_1a_EUTRA() runs on EUTRA_PTC
  { // @desc Combined tracking area update / Successful / Check of last visited TAI and handling of TAI list, LAI and TMSI

    var template (value) CellPowerList_Type v_CellPowerList;
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c9);
    
    f_UT_ConfigureCombinedAttach(UT);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    
    f_EUTRA_Preamble_InterRAT(eutra_CellA, STATE2_IDLEUPDATE, UTRAN, Combined);
    
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger); // send trigger to other RAT to change its power level too
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_2_1a_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    
    // Remove cells LTE side
    f_EUTRA_ReleaseAllCells();
  } // end f_TC_9_2_3_2_1a_EUTRA

  function fl_TC_9_2_3_2_1a_Body() runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList;
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var GutiParameters_Type v_Guti2_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellB);
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity);
    var NAS_PlmnId v_PLMN_B := f_Asn2Nas_PlmnId(v_Guti2_Params.PLMN_Identity);
    var NAS_Lac v_Lac1 := f_EUTRA_CellInfo_GetLocationAreaCode(eutra_CellA);
    var NAS_Lac v_Lac2 := '0002'O;
    var NAS_Tac v_TAC1  := '0001'O;
    var NAS_Tac v_TAC2  := '0002'O;
    var template (value) LocAreaId v_LAI_1 := cs_LAI('13'O, v_PLMN, v_Lac1);
    var template (value) LocAreaId v_LAI_2 := cs_LAI('13'O, v_PLMN, v_Lac2);
    var template (omit) MobileIdentity v_MsId := f_GetMSId(Combined); // This will use px_TMSI_Def
    var template (value) TrackingAreaIdList v_TaiList2 := cds_TAIListNonConsecutive_tlv(v_PLMN_B, { v_TAC2 });
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;
    var template (omit) AdditionalUpdateResult v_AdditionalUpdateResult;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType(Combined); // @sic R5s110176 sic@
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(Combined);
    var NAS_MSG_Indication_Type v_NasInd;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get();
    var CoOrd_GUTIParam_Type v_GUTIFromUTRAN;
    var IRAT_Coordination_MSG v_RxdMsg;
    var octetstring v_OldGUTI;
    var template (omit) MobileIdentity v_MsId_IMSI := f_Imsi2MobileIdentity(px_IMSI_Def);
    v_MsId_IMSI.iei := '23'O;
    
    //@siclog "Step 1" siclog@
    // Set cell type of Cell A to the "non-Suitable cell"
    // Set cell type of Cell B to the "Serving cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 2" siclog@
    // Check: Does the UE transmit a combined TRACKING AREA UPDATE REQUEST message with Last visited
    //         registered TAI set to TAI-1?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_RequestOldGutiLaiTmsiStatus(v_UpdateType,
                                                                                                     f_EUTRA_SecurityKSIasme_Get(),
                                                                                                     cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                     v_AdditionalUpdateType,
                                                                                                     f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                                     v_LAI_1, // @sic R5s110594 sic@
                                                                                                     cr_TAI(v_PLMN, v_TAC1),
                                                                                                     omit)));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 2");
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    v_AdditionalUpdateResult := f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType, Combined); // @sic R5s110176 sic@
    
    //@siclog "Step 3" siclog@
    //The SS sends TRACKING AREA UPDATE ACCEPT message including with LAI set to LAI-2, including
    //         a new TMSI(TMSI-2) as MS identity
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(v_UpdateType,
                                                                  omit,
                                                                  v_TaiList2,
                                                                  v_EpsBearerCtxtStatus,
                                                                  v_LAI_2,
                                                                  v_MsId,
                                                                  v_AdditionalUpdateResult))));
    
    //@siclog "Step 4" siclog@
    // Check: Does the UE send TRACKING AREA UPDATE COMPLETE message.
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellB,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 4");
    
    //@siclog "Step 5" siclog@
    // The SS releases the RRC connection
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
    
    // The following messages are sent and shall be received on Cell X
    //@siclog "Step 6" siclog@
    // Set cell type of Cell B to the "non-Suitable cell". Set cell type of Cell X to the "Serving cell".
    f_EUTRA_SetCellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE);
    
    //UE has new mapped security after TAU procedure on Cell B.
    f_EUTRA_SendAuthParameters(eutra_CellB, UTRAN);
    
    // @sic R5s110685 sic@
    UTRAN.receive(cmr_IRAT_AuthInfo) -> value v_RxdMsg; // wait for trigger from UTRAN side //Note 1
    
    v_SecurityParams.AuthParams := v_RxdMsg.Authentication.AuthPS;
    f_EUTRA_Security_Set(v_SecurityParams);
    v_GUTIFromUTRAN := v_RxdMsg.Authentication.GutiParams;
    v_OldGUTI := v_PLMN & bit2oct(v_GUTIFromUTRAN.MME_GroupId) & bit2oct(substr(oct2bit(px_PTMSI_SigDef), 16, 8)) & bit2oct(v_GUTIFromUTRAN.M_TMSI); //Note 1

    // The following messages are sent and shall be received on Cell A
    //@siclog "Step 15" siclog@
    // Set cell type of Cell A to the "Serving cell"
    f_EUTRA_SetCellPower(eutra_CellA, tsc_ServingCellRS_EPRE);
    
    //@siclog "Step 16 and 17" siclog@
    // The UE performs Cell Reselection from Cell X(UTRAN cell) to Cell A(E-UTRAN cell)
    // Check: Does the UE transmit a combined TRACKING AREA UPDATE REQUEST message with
    //          Last visited registered TAI set to TAI-2?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_RequestOldGutiAdditionalGutiOldPtmsiSigLaiTmsiStatus(tsc_EpsUpdate_Combined_IMSIAttach, // @sic R5s110594 sic@
                                                                                                                              f_EUTRA_SecurityKSIasme_Get(),
                                                                                                                              cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                                              v_AdditionalUpdateType,
                                                                                                                              cs_MobileIdentityGuti(omit, v_OldGUTI), // @sic R5s110777 sic@
                                                                                                                              f_GutiParameters2MobileIdentity('50'O, v_Guti1_Params), // @sic R5s110777 sic@
                                                                                                                              v_LAI_2,
                                                                                                                              cr_TAI(v_PLMN_B, v_TAC2),
                                                                                                                              omit)));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 17");
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    v_AdditionalUpdateResult := f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType, Combined); // @sic R5s110176 sic@
    
    //@siclog "Step 18" siclog@
    // The SS sends TRACKING AREA UPDATE ACCEPT message with LAI set to LAI-1, not including MS identity.
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(v_UpdateType,
                                                                  omit,
                                                                  cds_TAIListNonConsecutive_tlv(v_PLMN, { v_TAC1 }),
                                                                  v_EpsBearerCtxtStatus,
                                                                  v_LAI_1,
                                                                  omit,
                                                                  v_AdditionalUpdateResult))));
    
    //@siclog "Step 19" siclog@
    // The SS releases the RRC connection
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    // The following messages are sent and shall be received on Cell 5
    //@siclog "Step 20" siclog@
    // Set cell type of Cell A to the "non-Suitable cell". Set cell type of Cell 5 to the "Serving cell".
    f_EUTRA_SetCellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE);

    // @sic R5s110685 sic@
    f_EUTRA_SendAuthParameters(eutra_CellA, UTRAN);
    UTRAN.receive(cmr_IRAT_AuthInfo) -> value v_RxdMsg; // wait for trigger from UTRAN side
    v_SecurityParams.AuthParams := v_RxdMsg.Authentication.AuthPS;
    f_EUTRA_Security_Set(v_SecurityParams);
    v_GUTIFromUTRAN := v_RxdMsg.Authentication.GutiParams;
    v_OldGUTI := v_PLMN & bit2oct(v_GUTIFromUTRAN.MME_GroupId) & bit2oct(substr(oct2bit(px_PTMSI_SigDef), 16, 8)) & bit2oct(v_GUTIFromUTRAN.M_TMSI);
    
    // The following messages are sent and shall be received on Cell B
    //@siclog "Step 27" siclog@
    // Set cell type of Cell B to the "Serving cell"
    f_EUTRA_SetCellPower(eutra_CellB, tsc_ServingCellRS_EPRE);
    
    //@siclog "Step 28 and 29" siclog@
    // The UE performs Cell Reselection from Cell 5(UTRAN cell) to Cell B(E-UTRAN cell)
    // Check: Does the UE transmit a combined TRACKING AREA UPDATE REQUEST message with
    //          Last visited registered TAI set to TAI-1?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_RequestOldGutiAdditionalGutiOldPtmsiSigLaiTmsiStatus(tsc_EpsUpdate_Combined_IMSIAttach, // @sic R5s110594 sic@
                                                                                                                              f_EUTRA_SecurityKSIasme_Get(),
                                                                                                                              cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                                              v_AdditionalUpdateType,
                                                                                                                              cs_MobileIdentityGuti(omit, v_OldGUTI), // @sic R5s110777 sic@
                                                                                                                              f_GutiParameters2MobileIdentity('50'O, v_Guti1_Params), // @sic R5s110777 sic@
                                                                                                                              v_LAI_1,
                                                                                                                              cr_TAI(v_PLMN, v_TAC1),
                                                                                                                              omit)));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 29");
    v_AdditionalUpdateResult := f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType, Combined); // @sic R5s110176 sic@
    
    //@siclog "Step 30" siclog@
    //  The SS sends TRACKING AREA UPDATE ACCEPT message with LAI set to LAI-2, including
    //         the IMSI as MS identity.
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(v_UpdateType,
                                                                  omit,
                                                                  cds_TAIListNonConsecutive_tlv(v_PLMN_B, { v_TAC2 }),
                                                                  v_EpsBearerCtxtStatus,
                                                                  v_LAI_2,
                                                                  v_MsId_IMSI,
                                                                  v_AdditionalUpdateResult))));
    //@siclog "Step 30a" siclog@
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellB,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    
    //@siclog "Step 31" siclog@
    // The SS releases the RRC connection
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
    
    // The following messages are sent and shall be received on Cell X
    //@siclog "Step 32" siclog@
    // Set cell type of Cell B to the "non-Suitable cell". Set cell type of Cell A to off
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_NonSuitableOffCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@
    f_EUTRA_SendAuthParameters(eutra_CellB, UTRAN); // @sic R5s110685 sic@
    
    // wait for trigger from UTRAN side to finish TC
    f_IRAT_WaitForCoOrd_Trigger(UTRAN);
  }// end function fl_TC_9_2_3_2_1a_Body

  function f_TC_9_2_3_2_1c_EUTRA() runs on EUTRA_PTC
  { /* Combined tracking area update / Success / CS Fallback not preferred */

    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c9);
    
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    
    f_UT_ConfigureCombinedAttach(UT, DATA_CENTRIC);
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    f_IRAT_WaitForCoOrd_Trigger(UTRAN); // @sic R5s120228 sic@
    f_EUTRA_Preamble_InterRAT(eutra_CellA, STATE2_IDLEUPDATE, UTRAN, Combined); // @sic R5s110176 sic@
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_2_1c_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_ReleaseAllCells();
  } // function f_TC_9_2_3_2_1c_EUTRA

  function fl_TC_9_2_3_2_1c_Body() runs on EUTRA_PTC
  {
    var NAS_Lac v_Lac := f_EUTRA_CellInfo_GetLocationAreaCode(eutra_CellB);
    var template (omit) MobileIdentity v_MSId := f_GetMSId(Combined); // @sic R5s110176 sic@
    var NasCount_Type v_NasCountDL;
    var GutiParameters_Type v_Guti_Params_B := f_EUTRA_CellInfo_GetGuti(eutra_CellB);
    var template (value) CellPowerList_Type v_CellPowerList;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType(Combined); // @sic R5s110176 sic@
    var NAS_MSG_Indication_Type v_NasInd;
    var boolean v_CSInOtherRAT := false;
    var NAS_KsiValue v_KsiValue := f_EUTRA_SecurityKSIasme_Get();
    var octetstring v_HandoverToUtranCommand, v_Nas_SecurityParamFromEUTRA;
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId(v_Guti_Params_B.PLMN_Identity);
    var template (value) LocAreaId v_LAI := cs_LAI('13'O, v_PLMN, v_Lac);
    var TrackingAreaCode v_Tac := f_EUTRA_CellInfo_GetTAC(eutra_CellB);
    var template (value) TrackingAreaIdList v_TaiList := cds_TAIListNonConsecutive_tlv(v_PLMN, { bit2oct(v_Tac) });
    var template (omit) EPS_BearerContextStatus v_EPS_ContextStatus;
    var IRAT_CoOrd_SysInfo_Type v_CoordInfo;
    var CoOrd_UTRANSysInfoFDD_Type v_UTRANSysInfoFDD;
    var CoOrd_UTRANSysInfoTDD_Type v_UTRANSysInfoTDD;
    var EUTRA_SecurityParams_Type v_AuthParams;
    var template (value) EUTRA_FDD_TDD_CellInfo_Type v_EUTRA_FDD_TDD_Info;
    var template (value) PhysicalConfigDedicated_AntennaInfo_Type v_AntennaInfo;
    var ReleaseCause v_ReleaseCause := other;
    var template (value) RedirectedCarrierInfo v_RedirectedCarrierInfo;
    
    v_EUTRA_FDD_TDD_Info := f_EUTRA_CellInfo_GetFDD_TDD_Info(eutra_CellB);
    v_AntennaInfo :=  f_EUTRA_CellInfo_GetAntennaInfoDedicated(eutra_CellB);
    
    //Synchronise with UTRAN PTC and get Cell Parameters for UTRAN cell
    v_CoordInfo := f_IRAT_WaitForCoOrd_SysInfo(UTRAN);
    
    //Build the HO-to-UTRAN command
    if (ischosen(v_CoordInfo.Utran[0].FDD)) {
      v_UTRANSysInfoFDD := v_CoordInfo.Utran[0].FDD;
      v_HandoverToUtranCommand := f_U_EncodeHandoverToUtran_64kPS_DCH4_FDD(v_UTRANSysInfoFDD.UplinkScrambingCode,
                                                                      v_UTRANSysInfoFDD.ScramblingCode,
                                                                      v_UTRANSysInfoFDD.Freq);
      v_RedirectedCarrierInfo := cs_RedirectionInfo_UtraFdd(v_CoordInfo.Utran[0].FDD.Freq);
    }
    else {
      v_UTRANSysInfoTDD := v_CoordInfo.Utran[0].TDD;
      v_HandoverToUtranCommand := f_U_EncodeHandoverToUtran_64kPS_TDD(v_UTRANSysInfoTDD.CellParametersID,
                                                                      v_UTRANSysInfoTDD.Freq);
      v_RedirectedCarrierInfo := cs_RedirectionInfo_UtraTdd(v_CoordInfo.Utran[0].TDD.Freq);
    }
    
    //@siclog "Step 1" siclog@
    //SS adjust the cell power levels according to row T1 in table 9.2.3.2.1c.3.2-1..
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE), // = -91
      cs_CellPower(eutra_CellB, tsc_ServingCellRS_EPRE)   // = 85
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    
    //Steps 2-7 of the tracking area updating procedure on cell B as described in TS 36.508 table 4.5A.2.1-1 are performed.
    //@siclog "Step 2 - 4" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                                 tsc_RRC_TI_Def,
                                                 cr_EstablishmentCause_Any,
                                                 cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(tsc_EpsUpdate_Combined_TaLaUpdate,
                                                                                       v_KsiValue,
                                                                                       cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                       v_AdditionalUpdateType)));
    v_EPS_ContextStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus; // Send this back in the Accept
    
    //@siclog "Step 5" siclog@
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                     cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_TAU_Accept_Common(tsc_EpsUpdate_Combined_TaLaUpdate,
                                                                     f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti_Params_B),
                                                                             v_TaiList,
                                                                             v_EPS_ContextStatus,
                                                                             v_LAI,
                                                                             v_MSId,
                                                                             cs_AdditionalUpdateResult_CSFallbackNotPreferred,
                                                                             -,
                                                                             -,
                                                                             -,
                                                                             cs_EPS_NwkFtSup_IMSVoiceNotSupport))));
    
    //@siclog "Step 6" siclog@
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellB,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    //@siclog "Step 7" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
    
    //@siclog "Step 8" siclog@
    //  Check: Does the UE try to access te UTRAN cell (cell 5) in the next 90s?
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    
    //  Steps 1-4 of the procedure in table 13.1.4.3.2-2 are performed. The UE accepts CS fallback
    f_IRAT_WaitForCoOrd_Trigger(UTRAN);
   
    //@siclog "Step 10" siclog@
    //Transmit a Paging message to the UE on Cell 1 using S-TMSI with CN domain indicator set to "CS"
    f_EUTRA_UE_Page(eutra_CellB,
                     cs_DomainNasPaging_OneRecord(cs_PagingUE_Identity_S_TMSI(v_Guti_Params_B.MME_Code,
                                                                              v_Guti_Params_B.M_TMSI),
                                                  cs));
    //@siclog "Step 11" siclog@
    //IF the UE needs to request upper layer input before accepting the CS fallback, the incoming CS call is accepted at the UE through MMI or AT command.
    if (not pc_ImmConnect) {
      f_UT_AnswerCSCall(UT);
    }
    
    //@siclog "Step 12" siclog@
    //Receieve RRCConnectionRequest
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_CellB);    // @sic R5-120721 change 3 sic@
    
    //@siclog "Step 13" siclog@
    //Send RRCConnectionSetup
    f_EUTRA_RRC_ConnectionSetup_Def(eutra_CellB);
    
    //@siclog "Step 14" siclog@
    // Check: Does the UE transmit an RRCConnectionSetupComplete message containing an EXTENDED SERVICE REQUEST with message content set the same as in step 5 table 13.1.4.3.2-2 ?
    v_NasInd := f_EUTRA_RRCConnectionSetupComplete_Def(eutra_CellB,                                       // @sic R5s120121 MCC160 implementation sic@
                                                       cr_508_RRCConnectionSetupComplete(tsc_RRC_TI_Def, ?, omit),
                                                       cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                         cr_508_EXT_SERVICE_REQUEST(f_EUTRA_SecurityKSIasme_Get(),
                                                                                                    bit2oct(v_Guti_Params_B.M_TMSI))));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 14");
    
    //  Steps 5A-19 of the procedure described in table 13.1.4.3.2-2 are performed.
    v_AuthParams := f_EUTRA_Security_Get();
    v_AuthParams := f_EUTRA_RRC_ActivateSecurity(eutra_CellB, v_AuthParams, v_NasInd.SecurityProtection.NasCount);
    f_EUTRA_Security_Set(v_AuthParams);
    
    //Transmit RRCConnectionReconfiguration message  (with condition SRB2-DRB(1,0).
    SRB.send(cas_SRB1_RrcPdu_REQ(eutra_CellB,
                                   cs_TimingInfo_Now,
                                 cs_RRCConnectionReconfiguration_SRB2_1AM_DRB_Est(tsc_RRC_TI_Def,
                                                                                     v_EUTRA_FDD_TDD_Info.cqi_ReportConfig,
                                                                                     v_EUTRA_FDD_TDD_Info.soundingRS_UL_Config,
                                                                                     v_AntennaInfo)));
    //Receive RRCConnectionReconfigurationComplete
    SRB.receive(car_SRB1_RrcPdu_IND(eutra_CellB, cr_508_RRCConnectionReconfigurationComplete(tsc_RRC_TI_Def)));
    
    f_EUTRA_UTRA_Capability(eutra_CellB);
    
    //Get NAS DL Count
    v_NasCountDL := f_EUTRA_SS_NAS_CountGetDLNext(); // @sic R5s110382 sic@
    //nas-securityParamFromEUTRA is the 4 least significant bits of the NAS downlink COUNT value
    v_Nas_SecurityParamFromEUTRA := substr(v_NasCountDL, 3, 1);
    
    //Wait For UTRA PTC to complete Ciphering configuration
    f_IRAT_WaitForCoOrd_Trigger(UTRAN);
    //@siclog "Step 9" siclog@
    //Stop periodic TA on source cell...
    f_EUTRA_SS_CommonCellConfig(eutra_CellB, cas_PUCCH_Synch_Config_REQ(eutra_CellB, cs_TimingInfo_Now, cs_PUCCH_Synch_None));
    
    //@siclog "Step 15" siclog@
    //Send MobilityFromEUTRACommand with IE handover
    SRB.send(cas_SRB1_RrcPdu_REQ(eutra_CellB,
                                   cs_TimingInfo_Now,
                                   cs_MobilityFromEutraCommand_Handover_UTRAN_CSFB(v_HandoverToUtranCommand,
                                                                                   v_Nas_SecurityParamFromEUTRA)));
    
    f_EUTRA_SS_NAS_CountSet(f_NasSecurity_IncrementCOUNT(v_NasCountDL));
    // Release and re-configure the DRBs ready for when the UE returns to LTE
    f_EUTRA_RRC_ConnectionRelease_Local(eutra_CellB, f_EUTRA_GetNextSendOccasion(eutra_CellB)); // @sic R5s120486 sic@

    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
       
    v_CSInOtherRAT := f_EUTRA_InterRAT_InitialiseAuthParams(UTRAN); // Auth params have been updated in RAU so these need to be transferred over;  @sic R5-110746 sic@
    
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE), // = -91
      cs_CellPower(eutra_CellB, tsc_ServingCellRS_EPRE)   // = 85
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 26B -26G" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                                 tsc_RRC_TI_Def,
                                                 cr_EstablishmentCause_Any,
                                                 cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                   cdr_TAU_Request_OldandAdditionalGuti(tsc_EpsUpdate_Combined_IMSIAttach,
                                                                                                        f_EUTRA_SecurityKSIasme_Get(),
                                                                                                        cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                        f_GetAdditionalUpdateType(Combined),
                                                                                                        cr_MobileIdAny(omit),
                                                                                                        *,
                                                                                                        cr_MobileIdAny('50'O), // @sic R5-121766 sic@
                                                                                                        cr_UeRadioCap ifpresent)));
    
    v_EPS_ContextStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus; // Send this back in the Accept
      
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_TAU_Accept_Common(tsc_EpsUpdate_Combined_TaLaUpdate,
                                                                     f_GutiParameters2MobileIdentity(tsc_IEI_Guti, f_EUTRA_CellInfo_GetGuti(eutra_CellB)),
                                                                     v_TaiList,
                                                                     v_EPS_ContextStatus,
                                                                     v_LAI,
                                                                     v_MSId,
                                                                     cs_AdditionalUpdateResult_CSFallbackNotPreferred,
                                                                     -,
                                                                     -,
                                                                     omit,
                                                                     cs_EPS_NwkFtSup_IMSVoiceNotSupport)))); // @sic R5-121766 sic@
    
    /* Receive TRACKING AREA UPDATE COMPLETE */
    /* According to 24.301 cl: 5.5.3.2.4:
       If the TRACKING AREA UPDATE ACCEPT message contained a GUTI,
       the UE shall return a TRACKING AREA UPDATE COMPLETE message to
       the MME to acknowledge the received GUTI */
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellB,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
      
    
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB); //  @sic R5s120228 sic@
    
    //@siclog "Step 27" siclog@
    //Steps 1-3 of the procedure in table 13.1.2.3.2-1. (A CS call is initiated) are performed
    //Initiate a CS call
    f_UT_RequestCSCall(UT);
    
    //@siclog "Step 28" siclog@
    //  Check: Does the UE transmit EXTENDED SERVICE REQUEST message with the content set as in step 4 of table 13.1.2.3.2-1?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_EXT_SERVICE_REQUEST_MO(f_EUTRA_SecurityKSIasme_Get(),
                                                                                           bit2oct(v_Guti_Params_B.M_TMSI))));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 28");
    
    // @sic R5s120228 sic@
    f_EUTRA_RRC_ConnectionRelease_Common(eutra_CellB,
                                         cs_RRCConnectionRelease(tsc_RRC_TI_Def,
                                                                   v_ReleaseCause,
                                                                   v_RedirectedCarrierInfo,
                                                                   omit));
    f_EUTRA_SendAuthParameters(eutra_CellA, UTRAN);
    f_IRAT_WaitForCoOrd_Trigger(UTRAN);               // wait for trigger from UTRAN side
    
  } // function fl_TC_9_2_3_2_1c_Body

  function f_TC_9_2_3_2_3_EUTRA() runs on EUTRA_PTC
  { /* Combined tracking area update / Successful for EPS services only / MSC temporarily not reachable */
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c10a);   // @sic R5-113805 sic@
    
    f_UT_ConfigureCombinedAttach(UT); // @sic R5-103341 sic@
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    
    // If pc_GERAN or pc_UTRAN supported by UE, wait for other RAT to update TMSI-1, P-TMSI-1and RAI-1, and GPRS update status is "GU1:UPDATED"
    f_EUTRA_PreambleOtherRAT(eutra_CellA, Combined);                     // @sic R5-113805 sic@
    f_EUTRA_UE_Detach_SwitchOffUe(eutra_CellA, RRC_IDLE, -, Combined); // @sic R5s110176 sic@
    // @sic R5s110168 change 2.3 sic@
  
    f_EUTRA_TestBody_Set(true);
    
    f_EUTRA_SendTriggerToOtherRAT(); // @sic R5-112638 sic@
    fl_TC_9_2_3_2_3_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_SendTriggerToOtherRAT(); // @sic R5-112638 sic@
    f_EUTRA_ReleaseAllCells();
    
  } // function f_TC_9_2_3_2_3_EUTRA

  function fl_TC_9_2_3_2_3_Body() runs on EUTRA_PTC
  {
    fl_TC_9_2_3_2_3_Body_Loop(cs_EMM_Cause_tv(tsc_EmmCause_MSCnotReachable));
    fl_TC_9_2_3_2_3_Body_Loop(cs_EMM_Cause_tv(tsc_EmmCause_NetworkFailure));
    fl_TC_9_2_3_2_3_Body_Loop(cs_EMM_Cause_tv(tsc_Cause_Congestion));
  }

  function fl_TC_9_2_3_2_3_Body_Loop(template (omit) EMM_Cause p_EMMCause) runs on EUTRA_PTC
  {
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var GutiParameters_Type v_Guti2_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellB);
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;
    var NAS_MSG_Indication_Type v_NasInd;
    var integer i;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var template (value) CellPowerList_Type v_CellPowerList;
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity);
    var NAS_PlmnId v_PLMN_B := f_Asn2Nas_PlmnId(v_Guti2_Params.PLMN_Identity);
    var NAS_Lac v_Lac_B := f_EUTRA_CellInfo_GetLocationAreaCode(eutra_CellB);
    var TrackingAreaCode v_Tac_B := f_EUTRA_CellInfo_GetTAC(eutra_CellB);
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(Combined); // @sic R5s110176 sic@
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType(Combined); // @sic R5s110176 sic@
    var template (value) NAS_DL_Message_Type v_TAU_Accept;
    var float v_Timer3411 := f_EUTRA_SetTimerToleranceMin(eutra_CellB, nasTimer, 10.0);
    var float v_Timer3402 := f_EUTRA_SetTimerToleranceMin(eutra_CellB, nasTimer, 30.0); // Subject to prose CR approval; @sic R5s110145 sic@
    var NAS_AttDetValue_Type v_EDetachType :=f_GetEDetachType(Combined);
    timer t_Wait2 := 2.0; // Wait for Attach Complete/Detach
    
    //@siclog "Step 0" siclog@
    // Set Cell A to the "Serving cell". Set Cell B to the "non-Suitable cell".
    // Cell 5 or Cell 24 set to the "non-Suitable cell" already (either by trigger in preamble function or at end of previous loop)
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //+  The UE is powered on or switched on.
    //@siclog "Step 0A" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@
    
    //+ Step 0B Generic test procedure in TS 36.508 subclause 4.5.2.3 is performed.
    //          NOTE: The UE performs an ATTACH procedure and the RRC connection is released.
    f_EUTRA_AttachProcedure(eutra_CellA, "No Verdict", Combined); // @sic R5s110176 sic@

    //+ Set the cell type of Cell A to the "non-Suitable cell". Set the cell type of Cell B to the "Serving cell".
    //@siclog "Step 1" siclog@
    v_CellPowerList := {
      cs_CellPower(eutra_CellB, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@
    
    //+  Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message?
    //@siclog "Step 2" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(tsc_EpsUpdate_Combined_TaLaUpdate,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                         cr_TAI_Any)));
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 2");
    
    //@siclog "Step 3 - 4 void" siclog@
    
    //+  The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    //@siclog "Step 5" siclog@
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                    cs_TAU_Accept_EMM_Cause(tsc_EpsUpdate_TaUpdate,
                                                                                f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti2_Params),
                                                                            cds_TAIListNonConsecutive_tlv(v_PLMN_B, {bit2oct(v_Tac_B)}),
                                                                                v_EpsBearerCtxtStatus,
                                                                                omit,
                                                                                omit,
                                                                                f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType,
                                                                                Combined), // @sic R5s110176 sic@
                                                                                p_EMMCause))));
    
    f_EUTRA_CellInfo_SetGuti(eutra_CellB, v_Guti2_Params);
    
    //+ The UE transmits a TRACKING AREA UPDATE COMPLETE message.
    //@siclog "Step 6" siclog@
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellB,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    
    //+ The SS releases the RRC connection.
    //@siclog "Step 7" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
    
    // EXCEPTION: The step 8 to 13 shall be repeated 4 times.
    //@siclog "Step 8 - 13" siclog@
    for (i := 0; i < 4; i := i + 1) {
      
      //@siclog "Step 8" siclog@
      //+ Step 8 Wait for 10s (T3411).
      f_Delay(v_Timer3411);
      
      //+ Step 9 Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message at the time which T3411 expired?
      //@siclog "Step 9" siclog@
      v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                                 tsc_RRC_TI_Def,
                                                 cr_EstablishmentCause_Any,
                                                 cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                   cr_508_TAU_Request(tsc_EpsUpdate_Combined_IMSIAttach,
                                                                                      f_EUTRA_SecurityKSIasme_Get(),
                                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                    v_AdditionalUpdateType)));
      v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
      f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 9");
      
      //@siclog "Step 10 - 11" siclog@
      
      //+ Step 12 The SS transmits a TRACKING AREA UPDATE ACCEPT message.
      v_TAU_Accept := cs_TAU_Accept_Common(tsc_EpsUpdate_TaUpdate,
                                             omit,
                                           cds_TAIListNonConsecutive_tlv(v_PLMN_B, {bit2oct(v_Tac_B)}),
                                             v_EpsBearerCtxtStatus,
                                             omit,
                                             omit,
                                             f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType,
                                                                         Combined), // @sic R5s110176 sic@
                                             p_EMMCause,
                                             cs_GprsTimer_tv('17'O, '000'B, '01111'B), // @sic R5s110145 sic@
                                             -,
                                             cs_EPS_NwkFtSup_IMSVoiceNotSupport); // @sic R5-112619 sic@
      //@siclog "Step 12" siclog@
      SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                       cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                        v_TAU_Accept)));
      
      if (i != 3) { // @sic R5s110577, R5-115768 sic@
        //@siclog "Step 13A3" siclog@
        f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
      }
      
      if (i == 2) { // @sic R5-123586 sic@
        f_EUTRA_SendTriggerToOtherRAT();
      }
    }
    
    //@siclog "Step 14 - 19 Void" siclog@
    
    //+ IF the UE is configured to operate in CS/PS mode 2 THEN the SS waits for T3402.
    if (pc_CS_PS_data_centric and px_UE_CS_PS_UsageSetting_Tested == DATA_CENTRIC) {// @sic R5-115715 sic@ @sic R5s120079r1 sic@ @sic R5s120274 sic@
      
      //@siclog "Step 20a1" siclog@
      f_EUTRA_RRC_ConnectionRelease(eutra_CellB); // @sic R5-115768 sic@
      
      //@siclog "Step 20a2" siclog@
      f_Delay(v_Timer3402);
      
      //+  Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message?
      //@siclog "Step 20a3" siclog@
      v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                                 tsc_RRC_TI_Def,
                                                 cr_EstablishmentCause_Any,
                                                 cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                   cr_508_TAU_Request(tsc_EpsUpdate_Combined_IMSIAttach,
                                                                                      f_EUTRA_SecurityKSIasme_Get(),
                                                                                      cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                      v_AdditionalUpdateType)));
      v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
      f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 20a3");
      
      //+ The SS transmits a TRACKING AREA UPDATE ACCEPT message.
      //@siclog "Step 20a4" siclog@
      SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_508_TAU_Accept(v_UpdateType,
                                                                    omit, // Guti
                                                                    cds_TAIListNonConsecutive_tlv(v_PLMN_B, {bit2oct(v_Tac_B)}),
                                                                    v_EpsBearerCtxtStatus,
                                                                    cs_LAI('13'O, v_PLMN, v_Lac_B),
                                                                    f_GetMSId(Combined), // @sic R5s110176 sic@
                                                                    f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType,
                                                                    Combined))))); // @sic R5s110176 sic@
      
      //+  The UE transmits a TRACKING AREA UPDATE COMPLETE message.
      //@siclog "Step 20a5" siclog@
      SRB.receive(car_SRB1_NasPdu_IND(eutra_CellB,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                        cr_508_TAU_Complete)));
      
      //+ The SS releases the RRC connection.
      //@siclog "Step 20a6" siclog@
      f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
      
      //@siclog "Step 20a7 - 20a8" siclog@
      f_EUTRA_UE_Detach_SwitchOffUe(eutra_CellB, RRC_IDLE, -, Combined); // @sic R5s110176, R5-112619 sic@
    }
    //+  ELSE
    //@siclog "Step 20b1 - 20b16 Void" siclog@
    else{ // @sic R5-123568 sic@
        t_Wait2.start;
        f_EUTRA_SendTriggerToOtherRAT ();
        alt {
        [] SRB.receive(car_SRB2_NasPdu_IND(eutra_CellA,
                                        cr_NAS_Indication (tsc_SHT_IntegrityProtected_Ciphered,
                                                                  cr_508_DETACH_REQUEST_MO(cr_NAS_KeySetIdentifier (?, ?), // @sic R5s110031 sic@
                                                                                           f_GutiParameters2MobileIdentity(omit, v_Guti2_Params),
                                                                                           cr_DetachType(?, v_EDetachType)))))
           {
             t_Wait2.stop;
             f_EUTRA_SendTriggerToOtherRAT (); // Let other RAT know Detach has been sent
             SRB.send (cas_SRB2_NasPdu_REQ ( eutra_CellA,
                                              cs_TimingInfo_Now,
                                              cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                             cs_508_DETACH_ACCEPT)));
             f_EUTRA_RRC_ConnectionRelease (eutra_CellA, v_RRC_TI);
           }
        [] t_Wait2.timeout
           {
             f_EUTRA_RRC_ConnectionRelease (eutra_CellA, v_RRC_TI);
           }
        }
        // now wait until finished on other cell
        select (f_EUTRA_GetOtherRAT()) {
          case ("UTRAN") {
           f_IRAT_WaitForCoOrd_Trigger(UTRAN);
          }
          case ("GERAN") {
           f_IRAT_WaitForCoOrd_Trigger(GERAN);
          }
        }
    }
    
  } // function fl_TC_9_2_3_2_3_Body

  function f_TC_9_2_3_2_5_EUTRA() runs on EUTRA_PTC
  { /* Combined tracking area update / Rejected / IMSI invalid */
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c10a);   // @sic R5-113805 sic@
    
    f_UT_ConfigureCombinedAttach(UT);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    f_EUTRA_CellConfig_Def(eutra_CellC);
    
    f_EUTRA_PreambleOtherRAT(eutra_CellA, Combined);   // @sic R5-113805 sic@
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_2_5_6and7_Body(tsc_EmmCause_IllegalUe);
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E2_CONNECTED, Combined); // @sic R5s110176, R5-112121 sic@
  } // function f_TC_9_2_3_2_5_EUTRA

  function f_TC_9_2_3_2_6_EUTRA() runs on EUTRA_PTC
  { /* @desc tracking area update / Rejected / Illegal ME */

    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c10a);   // @sic R5-113805 sic@

    f_UT_ConfigureCombinedAttach(UT); // @sic R5-103341 sic@
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    f_EUTRA_CellConfig_SRBs_Only(eutra_CellC);
    
    f_EUTRA_PreambleOtherRAT(eutra_CellA, Combined);   // @sic R5-113805 sic@
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_2_5_6and7_Body(tsc_EmmCause_IllegalMe);
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E2_CONNECTED, Combined); // @sic R5s110176, R5-112121 sic@
  } // function f_TC_9_2_3_2_6_EUTRA

  function f_TC_9_2_3_2_7_EUTRA() runs on EUTRA_PTC
  { /* Combined tracking area update / Rejected / EPS services and non-EPS services not allowed */
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c10a);   // @sic R5-113805 sic@
    
    f_UT_ConfigureCombinedAttach(UT); // @sic R5-103815 sic@
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    f_EUTRA_CellConfig_SRBs_Only(eutra_CellC);
    
    f_EUTRA_PreambleOtherRAT(eutra_CellA, Combined);   // @sic R5-113805 sic@

    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_2_5_6and7_Body(tsc_Cause_EPSandNonEPSServNotAllowed);
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E2_CONNECTED, Combined); // @sic R5s110176, R5-112121 sic@
  } // function f_TC_9_2_3_2_7_EUTRA

  function fl_TC_9_2_3_2_5_6and7_Body(B8_Type p_EmmCause) runs on EUTRA_PTC
  {
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType(Combined); // @sic R5s110176 sic@
    var NAS_MSG_Indication_Type v_NasInd;
    var template (value) CellPowerList_Type v_CellPowerList;

    //@siclog "Step 1" siclog@
    //+  Set the cell type of Cell A to the "non-Suitable cell". Set the cell type of Cell B to the "Serving cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellB, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellA, tsc_NonSuitableOffCellRS_EPRE)          // @sic R5s110363 sic@
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@

    //The following messages are to be observed on Cell B unless explicitly stated otherwise.
    //@siclog "Step 2" siclog@
    //+ The UE transmits a TRACKING AREA UPDATE REQUEST message.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(tsc_EpsUpdate_Combined_TaLaUpdate,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                         cr_TAI_Any)));
    //@siclog "Step 3" siclog@
    //+  The SS transmits a TRACKING AREA UPDATE REJECT message with the EMM cause set to:
    //TC 9.2.3.2.5 -> 'Illegal UE'
    //TC 9.2.3.2.6 -> 'Illegal ME'
    //TC 9.2.3.2.7 -> 'EPS services and non-EPS services not allowed'
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(p_EmmCause))));
    
    //@siclog "Step 4" siclog@
    //+ The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
    
    //@siclog "Step 5" siclog@
    //+  Set the cell type of Cell B to the "non-Suitable cell". Set the cell type of Cell C to the "Serving cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellC, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_NonSuitableOffCellRS_EPRE)    // @sic R5s110363 sic@
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@
    
    // The following messages are to be observed on Cell C unless explicitly stated otherwise.
    //@siclog "Step 6" siclog@
    //+  Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds? [1,F]
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellC, 30.0);
    
    // EXCEPTION:   Steps 7a1 to 7a2 describe behaviour that depends on the UE capability;
    //              the "lower case letter" identifies a step sequence that take place if a capability is supported
    //@siclog "Steps 7a1 - 7a2" siclog@
    f_EUTRA_SetCellPower(eutra_CellC, tsc_NonSuitableOffCellRS_EPRE); // @sic R5s110363 sic@
    f_EUTRA_SendTriggerToOtherRAT(true); // @sic R5-112638 sic@
    
    //@siclog "Step 8" siclog@
    //+  Set the cell type of the cell other than Cell A to the "non-Suitable cell".
    //   Set the cell type of Cell A to the "Serving cell".
    f_EUTRA_SetCellPower(eutra_CellA, tsc_ServingCellRS_EPRE);
    
    //The following messages are to be observed on Cell A unless explicitly stated otherwise.
    //@siclog "Step 9" siclog@
    //+ Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds? [1,F]
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellA, 30.0);
    
    // @sic R5-112121 sic@
    //@siclog "Step 10" siclog@
    f_UT_SwitchOffUE(UT, false, CNF_REQUIRED); // @sic R5s1100395 sic@
    
    //@siclog "Step 11" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@
    
    //@siclog "Step 12" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                 cdr_ATTACH_REQUEST_WithIMSI(f_GetEAttachType(Combined), // @sic R5-112121 sic@
                                                                                                               v_AdditionalUpdateType,
                                                                                                               f_Imsi2MobileIdentity(px_IMSI_Def)),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 12");
    
    //@siclog "Steps 13 - 24" siclog@
    // Steps 5 to 13 of the generic test procedure in TS 36.508 subclause 4.5.2.3 are performed.
    f_EUTRA_IdleUpdated_Step5_17(eutra_CellA, STATE2_IDLEUPDATE, Combined, v_NasInd, false); // @sic R5s110318 sic@
    
    f_EUTRA_SendTriggerToOtherRAT(); // @sic R5-112638 sic@
    
  } // function fl_TC_9_2_3_2_5_6and7_Body

  function f_TC_9_2_3_2_8_EUTRA() runs on EUTRA_PTC
  { /* @desc Combined tracking area update / Rejected / EPS services not allowed */
    var template (value) CellPowerList_Type v_CellPowerList;

    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c10);   // @sic R5-113805 sic@
    
    f_UT_ConfigureCombinedAttach(UT); // @sic R5-113805 sic@

    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    f_EUTRA_CellConfig_SRBs_Only(eutra_CellG);
    
    f_EUTRA_PreambleOtherRAT(eutra_CellA, Combined);              // @sic R5-113805 sic@

    v_CellPowerList := {
      cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellG, tsc_NonSuitableOffCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_2_8_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_ReleaseAllCells();
  } // function f_TC_9_2_3_2_8_EUTRA

  function fl_TC_9_2_3_2_8_Body() runs on EUTRA_PTC
  {
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType(Combined);   // @sic R5-113805 sic@
    var NAS_MSG_Indication_Type v_NasInd;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var template (value) CellPowerList_Type v_CellPowerList;
    
    //@siclog "Step 1" siclog@
    //+  Set the cell type of Cell A to the "non-Suitable cell".
    //   Set the cell type of Cell B to the "Serving cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellB, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@
    
    //@siclog "Step 2" siclog@
    //+ The UE transmits a TRACKING AREA UPDATE REQUEST message.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(tsc_EpsUpdate_Combined_TaLaUpdate,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                         cr_TAI_Any)));
    //@siclog "Step 3" siclog@
    //+  SS transmits a TRACKING AREA UPDATE REJECT message with the EMM cause set to 'EPS services not allowed'
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_Cause_EPSServNotAllowed))));
    
    //@siclog "Step 4" siclog@
    //+ The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
    
    //@siclog "Step 5" siclog@
    //+  Set the cell type of Cell B to the "non-Suitable cell".
    //   Set the cell type of Cell A to the "Serving cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@

    //@siclog "Step 6" siclog@
    //+  Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds on cellA? [1,F]
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellA, 30.0, "Step 6");
    
    //@siclog "Step 7" siclog@
    //+ The user initiates an attach by MMI or by AT command
    f_UT_TriggerAttach(UT);
    
    //@siclog "Step 8" siclog@
    //+  Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds on cellA? [1,F]
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellA, 30.0, "Step 8");
    
    //@siclog "Step 9" siclog@
    //+  Set the cell type of Cell A to the "non-Suitable cell".
    //   Set B as off
    //   Set the cell type of Cell G to the "Serving cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_NonSuitableOffCellRS_EPRE),
      cs_CellPower(eutra_CellG, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@
  
    //@siclog "Step 10" siclog@
    //+  Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds on cellG? [1,F]
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellG, 30.0, "Step 10");

    //@siclog "Step 11" siclog@
    //+ The user initiates an attach by MMI or by AT command
    f_UT_TriggerAttach(UT);

    //@siclog "Step 12" siclog@
    //+  Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds on cellG? [1,F]
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellG, 30.0, "Step 12");
    
    //@siclog "Step 13" siclog@
    //+  Set the cell type of Cell 5 or 24 as the "Suitable cell".
    //   Set the cell type of Cell G as the "Serving cell".
    f_EUTRA_SetCellPower(eutra_CellG, tsc_ServingCellRS_EPRE);

    // EXCEPTION:   Steps 14a1 to 14a5 describe behaviour that depends on the UE capability;
    //              the "lower case letter" identifies a step sequence that take place if a capability is supported
    //@siclog "Steps 14a1 to 14a2" siclog@
    f_EUTRA_SendTriggerToOtherRAT(true); // @sic R5-112638 sic@
   
    //@siclog "Step 15" siclog@
    //   Set the cell type of Cell G to the "Serving cell".
    f_EUTRA_SetCellPower(eutra_CellG, tsc_ServingCellRS_EPRE);
    
    //@siclog "Step 16" siclog@
    //+ The user initiates an attach by MMI or by AT command
    f_UT_TriggerAttach(UT);
    
    //@siclog "Step 17" siclog@
    //+  Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds on cellG? [1,F]
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellG, 30.0, "Step 17");
    
    f_EUTRA_SendTriggerToOtherRAT(); // @sic R5-112638 sic@
    
  } // function fl_TC_9_2_3_2_8_Body

  function f_TC_9_2_3_2_9_EUTRA() runs on EUTRA_PTC
  { /* Combined tracking area update / Rejected / UE identity cannot be derived by the network */

    var template (value) CellPowerList_Type v_CellPowerList;
    
    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c10a);   // @sic R5-113805 sic@
    
    f_UT_ConfigureCombinedAttach(UT); // @sic R5-103341 sic@
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    
    f_EUTRA_PreambleOtherRAT(eutra_CellA, Combined); // @sic R5s110176, R5-112638 sic@
    
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_2_9_Body();
    
    f_EUTRA_TestBody_Set(false);
    
    f_EUTRA_ReleaseAllCells(); // @sic R5s110202, R5-112620 sic@
  } // end f_TC_9_2_3_2_9_EUTRA

  function fl_TC_9_2_3_2_9_Body() runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var SRB_COMMON_IND v_ReceivedAsp;
    var NAS_MSG_Indication_Type v_NasInd;
    var GutiParameters_Type v_Guti_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var NAS_Lac v_LAC := f_EUTRA_CellInfo_GetLocationAreaCode(eutra_CellA);
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId(v_Guti_Params.PLMN_Identity);
    var template (omit) LocAreaId v_LAI := f_GetLAI(v_PLMN, v_LAC, Combined); // @sic R5s110176 sic@
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType(Combined); // @sic R5s110176 sic@
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(Combined); // @sic R5s110176 sic@
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(Combined); // @sic R5s110176 sic@
    timer t_WaitforAttach := f_EUTRA_SetTimerToleranceMax(eutra_CellA, nonProtocolTimer, 1.0);
    timer t_WaitTimer := f_EUTRA_SetTimerToleranceMax(eutra_CellB, nasTTCNTimer, 30.0);
    
    //@siclog "Step 1" siclog@
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //  The UE transmits a TRACKING AREA UPDATE REQUEST
    //@siclog "Step 2" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_RequestOldGutiLaiTmsiStatus(v_UpdateType,
                                                                   f_EUTRA_SecurityKSIasme_Get(),
                                                                   cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                   v_AdditionalUpdateType,
                                                                   f_GutiParameters2MobileIdentity(omit, v_Guti_Params), //GUTI-1
                                                                   v_LAI,
                                                                   cr_TAI_Any ifpresent,
                                                                   omit)));
    
    //@siclog "Step 3" siclog@
    // The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause = "UE identity can not be derived
    // by the network"
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_EmmCause_UEIdentityNotDerived))));
    
    //@siclog "Step 3a1" siclog@
    // Step 3a1: SS waits for 1 second to receive the Attach Request on the existing RRC Connection
    t_WaitforAttach.start;
    alt {
      //@siclog "Step 4" siclog@
      []  SRB.receive(car_SRB1_NasPdu_IND(eutra_CellB,
                                          cr_NAS_IndicationWithPiggybacking((tsc_SHT_NoSecurityProtection, tsc_SHT_IntegrityProtected),
                                                                            cdr_ATTACH_REQUEST_WithImsiAndLAI(v_AttachType,
                                                                                                              v_AdditionalUpdateType,
                                                                                                              v_LAI ifpresent), // @sic R5-123644 sic@
                                                                            cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, f_GetPdnType()))))
        -> value v_ReceivedAsp
        {
          v_NasInd := v_ReceivedAsp.Signalling.Nas[0];
          t_WaitforAttach.stop;
          // if Attach received within 1 second, obviously less than 30 seconds
          f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 4");
        }
      [] t_WaitforAttach.timeout
        {
          // Step 3a1 : The SS releases the RRC connection.
          f_EUTRA_RRC_ConnectionRelease(eutra_CellB);   /* @sic R5-110803 change 13 sic@ */
          
          //@siclog "Step 3a2" siclog@
          if (not pc_Automatic_EPS_Re_Attach) {  // @sic R5-121541 sic@
            f_UT_TriggerAttach(UT);
          }
          //@siclog "Step 4" siclog@
          t_WaitTimer.start;
          v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                                     tsc_RRC_TI_Def,
                                                     cr_EstablishmentCause_Any,
                                                     cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                       cdr_ATTACH_REQUEST_WithImsiAndLAI(v_AttachType,
                                                                                                                         v_AdditionalUpdateType,
                                                                                                                         v_LAI ifpresent), // @sic R5-123644 sic@
                                                                                       cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, f_GetPdnType())));  /* @sic R5-120721 change 3 sic@ */
          t_WaitTimer.stop;
          f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 4");
        }
    }
    
    //  depends on the UE capability
    //@siclog "Step 5a1" siclog@
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE)
    }
    //@siclog "Step 5a2 Void" siclog@
    //@siclog "Step 5a3 - 5a7" siclog@
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    f_EUTRA_SendTriggerToOtherRAT(true); // @sic R5-112638 sic@
  }// end function fl_TC_9_2_3_2_9_Body

  function f_TC_9_2_3_2_11_EUTRA() runs on EUTRA_PTC
  { /* Combined tracking area update / Rejected / PLMN not allowed */
    
    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c10, LTE_NAS_Replacef3_f1);   // @sic R5-113805 sic@ @sic R5-121081 sic@
    
    f_UT_ConfigureCombinedAttach(UT);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellG);
    f_EUTRA_CellConfig_Def(eutra_CellH);
    f_EUTRA_CellConfig_Def(eutra_CellI);
    
    // Preamble: UE is in state Registered, Idle Mode (state 2)
    f_EUTRA_PreambleOtherRAT(eutra_CellG, Combined);   // @sic R5-113805 sic@
    
    f_EUTRA_SetCellPower(eutra_CellH, tsc_NonSuitableCellRS_EPRE);
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_2_11_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellG, E1_IDLE, Combined); // @sic R5s110176 sic@
  } // function f_TC_9_2_3_2_11_EUTRA

  function fl_TC_9_2_3_2_11_Body() runs on EUTRA_PTC
  {
    var NAS_MSG_Indication_Type v_NasInd;
    var GutiParameters_Type v_Guti7_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellG);
    var GutiParameters_Type v_Guti9_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellI);
    
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType(Combined); // @sic R5s110176 sic@
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(Combined); // @sic R5s110176 sic@
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(Combined); // @sic R5s110176 sic@
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var template (value) CellPowerList_Type v_CellPowerList;
    var template (omit) LocAreaId v_LAI_1 := f_EUTRA_GetCellLAI(eutra_CellG, Combined); // @sic R5s110176 sic@
    var template (omit) LocAreaId v_LAI_9 := f_EUTRA_GetCellLAI(eutra_CellI, Combined); // @sic R5s110176 sic@
    var NAS_PlmnId v_PLMN_I := f_Asn2Nas_PlmnId(v_Guti9_Params.PLMN_Identity);
    var TrackingAreaCode v_Tac_CellI := f_EUTRA_CellInfo_GetTAC(eutra_CellI);
    var ProcedureTransactionIdentifier v_EPS_TI := '00'O;
    var template (omit) ProtocolConfigOptions v_Pco := omit;
    var template (present) NAS_UL_Message_Type v_AttachReq := cdr_ATTACH_REQUEST_WithIMSIAndnoTAI(v_AttachType,
                                                                                                   v_AdditionalUpdateType,
                                                                                                   f_Imsi2MobileIdentity(px_IMSI_Def),
                                                                                                   cr_TMSI_Status('0'B));
    v_AttachReq.aTTACH_REQUEST.oldPtmsiSignature := omit;
    v_AttachReq.aTTACH_REQUEST.additionalGuti := omit;
    
    //@siclog "Step 1" siclog@
    //+  Set the cell type of Cell G to the "Non-Suitable cell"
    //   Set the cell type of Cell H to the "Serving cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellG, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellH, tsc_ServingCellRS_EPRE)
    }
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 2" siclog@
    //+ The UE transmits a TRACKING AREA UPDATE REQUEST message.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellH,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti_LAI(v_UpdateType,  // @sic R5s110269 sic@
                                                                                              f_EUTRA_SecurityKSIasme_Get(),
                                                                                              cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                              v_AdditionalUpdateType,
                                                                                              f_GutiParameters2MobileIdentity(omit, v_Guti7_Params), //GUTI-7
                                                                                              v_LAI_1)));
    //@siclog "Step 3" siclog@
    //+  SS transmits a TRACKING AREA UPDATE REJECT message with the EMM cause set to 'PLMN not allowed'
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellH,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_Cause_PLMN_NotAllowed))));
    
    //@siclog "Step 4" siclog@
    //+ The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellH);

    //@siclog "Step 5" siclog@
    //+  Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds on cellH? [1,F]
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellH, 30.0);
    
    // @siclog "Step 6" siclog@
    // If possible (see ICS) switch off is performed or the USIM is removed. Otherwise the power is removed.
    f_UT_SwitchOffUE(UT, false, CNF_REQUIRED); // @sic R5s1100395 sic@
    
    // @siclog "Step 7" siclog@
    //  Set the cell type of Cell G to the "Serving cell"
    //  Set the cell type of Cell H to the "Non-Suitable cell"
    v_CellPowerList := {
      cs_CellPower(eutra_CellH, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellG, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    // The following messages are to be observed on Cell G unless explicitly stated otherwise.
    
    // @siclog "Step 8" siclog@
    // The UE is brought back to operation or the USIM is inserted.
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellI); // @sic R5s120065 sic@
    
    // @siclog "Step 9" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds?  [1,F]
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellG, 90.0); // @sic R5-115560 sic@
    
    // EXCEPTION: Steps 10a1 to 10a2 describe behaviour that depends on the UE capability;
    //            the "lower case letter" identifies a step sequence that takes place if a capability is supported
    
    // IF pc_UTRAN or pc_GERAN THEN sets the cell type of Cell G to the "non-Suitable cell" and sets the cell type
    // of Cell 5 or Cell 24 to the "Serving cell".
    //@siclog "Steps 10a1 - 10a2" siclog@
    v_CellPowerList := {
      cs_CellPower(eutra_CellG, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellI, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellH, tsc_NonSuitableOffCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    f_EUTRA_SendTriggerToOtherRAT(true); // @sic R5-112638 sic@
    
    //@siclog "Step 11" siclog@
    //Set the cell type of Cell I to the "Serving cell"
    //Set the cell type of Cell 5 or Cell 24 to the "non-Suitable cell"
    f_EUTRA_SetCellPower(eutra_CellI, tsc_ServingCellRS_EPRE);
    
    // The following messages are to be observed on Cell I unless explicitly stated otherwise.
    
    //@siclog "Step 12" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellI,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                  v_AttachReq,
                                                                                   cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                 f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 12");
    
    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier;
    v_Pco := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    
    //@siclog "Steps 13 - 24" siclog@
    // Steps 5 to 13 of the generic test procedure in TS 36.508 subclause 4.5.2.3 are performed.
    f_EUTRA_IdleUpdated_Step5_17(eutra_CellI, STATE2_IDLEUPDATE, Combined, v_NasInd);
    
    // @siclog "Step 25" siclog@
    // If possible (see ICS) switch off is performed or the USIM is removed. Otherwise the power is removed.
    f_UT_SwitchOffUE(UT, false);
    
    // @siclog "Step 26" siclog@
    if (pc_SwitchOnOff  or  pc_USIM_Removal) { // @sic R5s110307 sic@
      v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellI,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_MoSignalling,
                                                 cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                   cr_508_DETACH_REQUEST_MO(cr_NAS_KeySetIdentifier(?, ?),
                                                                                            f_GutiParameters2MobileIdentity(omit, v_Guti9_Params),
                                                                                            cr_DetachType('1'B, tsc_DetachMO_Combined))));
      //@siclog "Step 26A siclog@
      //+ The SS releases the RRC connection.
      f_EUTRA_RRC_ConnectionRelease(eutra_CellI); // @sic R5s110269 sic@
    }
    
    //@siclog "Step 27" siclog@
    //Set the cell type of Cell I to the "non-Suitable cell"
    //Set the cell type of Cell G to the "Serving cell"
    v_CellPowerList := {
      cs_CellPower(eutra_CellG, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellI, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);

    //The following messages are to be observed on Cell G unless explicitly stated otherwise
    
    // @siclog "Step 28" siclog@
    // The UE is brought back to operation or the USIM is inserted.
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellG, CNF_REQUIRED); // @sic R5s120065, R5s120361 sic@
    
    // @siclog "Step 29" siclog@
    // The UE is switched to manual PLMN selection mode and is made to select the forbidden PLMN cell
    f_UT_ManualPLMN_Select(UT, f_Asn2Nas_PlmnId(v_Guti7_Params.PLMN_Identity));
    
    // @siclog "Step 30" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message?
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellG,
                                              v_RRC_TI,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                cdr_ATTACH_REQUEST_AttachType(v_AttachType,
                                                                                                              v_AdditionalUpdateType,
                                                                                                              f_GutiParameters2MobileIdentity(omit, v_Guti9_Params),
                                                                                                              cr_TAI(v_PLMN_I, bit2oct(v_Tac_CellI)),
                                                                                                              v_LAI_9,
                                                                                                              omit),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 30");
    
    //@siclog "Step 31 - 43" siclog@
    // Steps 5 to 17 of the generic test procedure in TS 36.508 subclause 4.5.2.3 are performed.
    f_EUTRA_IdleUpdated_Step5_17(eutra_CellG, STATE2_IDLEUPDATE, Combined, v_NasInd); // @sic R5s110395 sic@
    
    f_EUTRA_SendTriggerToOtherRAT(); // @sic R5-112638 sic@
    
  } // function fl_TC_9_2_3_2_11_Body

  function f_TC_9_2_3_2_13_EUTRA() runs on EUTRA_PTC
  { /* Combined tracking area update / Rejected / Roaming not allowed in this tracking area */
    
    var template (value) CellPowerList_Type v_CellPowerList;
    
    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c10, LTE_NAS_Replacef3_f1);   // @sic R5-113805 sic@ @sic R5-121081 sic@
    
    f_UT_ConfigureCombinedAttach(UT);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellG);
    f_EUTRA_CellConfig_Def(eutra_CellH);
    f_EUTRA_CellConfig_Def(eutra_CellI);
    
    f_EUTRA_PreambleOtherRAT(eutra_CellG, Combined);
    f_EUTRA_TestBody_Set(true);
    
    v_CellPowerList := {
      cs_CellPower(eutra_CellG, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellH, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellI, tsc_NonSuitableOffCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_2_13_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellI, E2_T3440, Combined); // @sic R5s110176, R5s110007 sic@
  } // end f_TC_9_2_3_2_13_EUTRA

  function fl_TC_9_2_3_2_13_Body() runs on EUTRA_PTC
  {
    var NAS_MSG_Indication_Type v_NasInd;
    var template (value) CellPowerList_Type v_CellPowerList;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var GutiParameters_Type v_Guti7_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellG);
    var GutiParameters_Type v_Guti9_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellI);
    var template (omit) EPS_BearerContextStatus v_EPS_ContextStatus;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType(Combined); // @sic R5s110176 sic@
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(Combined); // @sic R5s110176 sic@
    var template (omit) AdditionalUpdateResult v_AdditionalUpdateResult;
    var NAS_PlmnId v_PLMN_I := f_Asn2Nas_PlmnId(v_Guti9_Params.PLMN_Identity);
    var template (omit) LocAreaId v_LAI_9 := f_EUTRA_GetCellLAI(eutra_CellI, Combined); // @sic R5s110176 sic@
    var TrackingAreaCode v_Tac_CellI := f_EUTRA_CellInfo_GetTAC(eutra_CellI);
    var template (omit) MobileIdentity v_MSId := f_GetMSId(Combined); // @sic R5s110176 sic@
    var template (value) TrackingAreaIdList v_TaiList := cds_TAIListNonConsecutive_tlv(v_PLMN_I, { bit2oct(v_Tac_CellI) });
    
    //@siclog "Step 1" siclog@
    // The SS configures:
    //     Cell G as the "Suitable_NeighbourIntraFreq_Cell".
    //     Cell H as the "Serving cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellG, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE), // @sic R5-122115 sic@
      cs_CellPower(eutra_CellH, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 2" siclog@
    //+   The UE transmits a TRACKING AREA UPDATE REQUEST on Cell H.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellH,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGutiPTMSISig(v_UpdateType,
                                                                                                 f_EUTRA_SecurityKSIasme_Get(),
                                                                                                 cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                 v_AdditionalUpdateType,
                                                                                                 f_GutiParameters2MobileIdentity(omit, v_Guti7_Params),
                                                                                                 omit)));
    //@siclog "Step 3" siclog@
    //+  The SS transmits a TRACKING AREA UPDATE REJECT message with the EMM cause set to as
    //   "roaming not allowed in this tracking area ".
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellH,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_Cause_Roaming_NotAllowed))));
    //@siclog "Step 4" siclog@
    //+   The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellH);
    
    //@siclog "Step 5-6 Void" siclog@
    
    //@siclog "Step 7" siclog@
     // Check: does the UE transmit a TRACKING AREA UPDATE REQUEST message on cellG? (P)
    //@sic R5-112625 sic@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellG,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(tsc_EpsUpdate_Combined_IMSIAttach,
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType)));  /* @sic R5-120721 change 3 sic@ */
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 7");
    
    //@siclog "Step 8" siclog@
    //+  The SS transmits a TRACKING AREA UPDATE REJECT message with the EMM cause
    //   "Roaming not allowed in this tracking area" as specified.
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellG,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_Cause_Roaming_NotAllowed))));
    //@siclog "Step 9" siclog@
    //+   The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellG);
    
    //@siclog "Step 10" siclog@
    // The SS configures:
    //     Cell G and I as the "non-Suitable cell"
    //     Cell H as the "non-Suitable off cell".
    //     Cell 5 or 24 as the "Serving cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellH, tsc_NonSuitableOffCellRS_EPRE),
      cs_CellPower(eutra_CellI, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellG, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    f_EUTRA_SendTriggerToOtherRAT(true); // @sic R5-112638 sic@
    
    //@siclog "Step 12" siclog@
    // The SS configures:
    //     Cell I as the "Serving Cell"
    //     Cell 5 or 24 comes as "non-Suitable cell"
    f_EUTRA_SetCellPower(eutra_CellI, tsc_ServingCellRS_EPRE);
    
    //@siclog "Step 13" siclog@
    // Check: does the UE transmit a TRACKING AREA UPDATE REQUEST message on cellI? (P)
    //@sic R5-112625 sic@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellI,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(tsc_EpsUpdate_Combined_IMSIAttach,
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType)));  /* @sic R5-120721 change 3 sic@ */
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 13");
    
    //  The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    //@siclog "Step 14" siclog@
    v_EPS_ContextStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    v_AdditionalUpdateResult := f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType,
                                                            Combined); // @sic R5s110176 sic@
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellI,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(v_UpdateType,
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti9_Params),
                                                                  v_TaiList,
                                                                  v_EPS_ContextStatus,
                                                                  v_LAI_9,
                                                                  v_MSId,
                                                                  v_AdditionalUpdateResult))));
    // The UE transmits a TRACKING AREA UPDATE COMPLETE message.
    //@siclog "Step 15" siclog@
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellI,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    f_EUTRA_SendTriggerToOtherRAT(); // @sic R5-112638 sic@
    
  }// end function fl_TC_9_2_3_2_13_Body

  function f_TC_9_2_3_2_14_EUTRA() runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList;
    
    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c10, LTE_NAS_Replacef3_f1);   // @sic R5-113805, R5-121081 R5-123645 sic@
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellG);  // @sic R5-123645 sic@
    f_EUTRA_CellConfig_Def(eutra_CellH);  // @sic R5-123645 sic@
    f_EUTRA_CellConfig_Def(eutra_CellI);  // @sic R5-123645 sic@
    f_UT_ConfigureCombinedAttach(UT);     // @sic R5s120125 sic@

    f_EUTRA_PreambleOtherRAT(eutra_CellG, Combined); // @sic R5-123645 sic@
    f_EUTRA_TestBody_Set(true);

    v_CellPowerList := {
      cs_CellPower(eutra_CellG, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellH, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellI, tsc_NonSuitableOffCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);

    // send trigger to other RAT to change its power level too
    f_EUTRA_SendTriggerToOtherRAT();
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_2_14_Body();

    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellI, E2_CONNECTED);
  } // end f_TC_9_2_3_2_14_EUTRA

  function fl_TC_9_2_3_2_14_Body() runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(Combined);
    var GutiParameters_Type v_Guti_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellG); // Prose says this should be GUTI 7, but UE was previously attached to Cell E (TAI-12)
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType(Combined); // @sic R5s120125 sic@
    var NAS_MSG_Indication_Type v_NasInd;
    
    //@siclog "Step 1" siclog@
    // The SS configures:
    //     Cell E as the "non-Suitable cell".
    //     Cell I as the "Serving cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellG, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellH, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 2" siclog@
    //+   The UE transmits a TRACKING AREA UPDATE REQUEST on Cell H.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellH,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(tsc_EpsUpdate_Combined_TaLaUpdate,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_Guti_Params),
                                                                                         cr_TAI_Any)));
    //@siclog "Step 3" siclog@
    //+  The SS transmits a TRACKING AREA UPDATE REJECT message with the EMM cause set to as
    //   "EPS services not allowed in this PLMN" as specified.
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellH,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_Cause_EPSServNotAllowedInThisPLMN))));
    //@siclog "Step 4" siclog@
    //+   The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellH);
    
    //@siclog "Step 5" siclog@
    // The SS configures:
    //     Cell H as the "non-Suitable cell".
    //     Cell G as the "Serving cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellH, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellG, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    
    //@siclog "Step 6" siclog@
    //+  Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds on cell E?
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellG, 30.0, "Step 6");
    
    //@siclog "Step 7" siclog@
    // The SS configures:
    //     Cell G and Cell I as the "non-Suitable cell"
    //     Cell H as the "non-Suitable off cell".
    //     Cell 9 or 24 as the "Serving cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellG, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellH, tsc_NonSuitableOffCellRS_EPRE),
      cs_CellPower(eutra_CellI, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    f_EUTRA_SendTriggerToOtherRAT(true);
    
    // EXCEPTION: Steps 8a1 to 8a4 describe behaviour that depends on the UE capability;
    // the "lower case letter" identifies a step sequence that take place if a capability is supported.
    
    //@siclog "Step 9" siclog@
    // The SS configures:
    //     Cell I as the "Serving cell".
    //     Cell 9 or 24 as the "non-Suitable off cell".
    f_EUTRA_SetCellPower(eutra_CellI, tsc_ServingCellRS_EPRE);
    
    //@siclog "Step 10" siclog@
    //  Check: Does the UE transmit ATTACH REQUEST message with a PDN CONNECTIVITY REQUEST message
    //         to request PDN connectivity to the default PDN on cell J?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellI,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                 cdr_ATTACH_REQUEST_WithIMSIAndnoTAI(v_AttachType,
                                                                                                                       v_AdditionalUpdateType,
                                                                                                                       f_Imsi2MobileIdentity(px_IMSI_Def)),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 10");
    
    //@siclog "Step 11 - 22" siclog@
    // Steps 5 to 16 of generic test procedure in TS 36.508 subclause 4.5.2.3 are performed.
    f_EUTRA_IdleUpdated_Step5_17(eutra_CellI, STATE2_IDLEUPDATE, Combined, v_NasInd, false); // @sic R5s110395 sic@
    
    // tell other RAT test is finished
    f_EUTRA_SendTriggerToOtherRAT();
   }// end function fl_TC_9_2_3_2_14_Body

  function f_TC_9_2_3_3_1_EUTRA() runs on EUTRA_PTC
  { // @desc First Iu mode to S1 mode intersystem change after attach; go to E-UTRAN RRC idle; RAU to UTRAN
    
    var template (value) CellPowerList_Type v_CellPowerList;
    v_CellPowerList := {
      cs_CellPower(eutra_CellB, tsc_NonSuitableOffCellRS_EPRE),
      cs_CellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE)
    };
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c4);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    
    // Preamble: The UE is in state Switched OFF (state 1)
    // ==========================================================================
    f_EUTRA_Preamble_InterRAT(eutra_CellB, STATE2_IDLEUPDATE, UTRAN);
    f_EUTRA_UE_Detach_SwitchOffUe(eutra_CellB, RRC_IDLE);
    
    f_EUTRA_SetCellPowerList(v_CellPowerList);
    f_EUTRA_TestBody_Set(true);
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    
    fl_TC_9_2_3_3_1_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_ReleaseAllCells();
  } // function f_TC_9_2_3_3_1_EUTRA

  function fl_TC_9_2_3_3_1_Body() runs on EUTRA_PTC
  {
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;
    var NAS_MSG_Indication_Type v_NasInd;
    
    // ==========================================================================
    // initialize component specific data structures
    // ==========================================================================
    // get all data which are required for a GUTI
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellB);
    var GutiParameters_Type v_Guti2_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity);
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_Lac v_LAC := f_EUTRA_CellInfo_GetLocationAreaCode(eutra_CellA);
    var template (omit) LocAreaId v_LAI := f_GetLAI(v_PLMN, v_LAC, NORMAL); // @sic R5s110176 sic@
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType();
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(NORMAL); // @sic R5s110176 sic@
    var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get();
    var CoOrd_GUTIParam_Type v_GUTIFromUTRAN;
    var IRAT_Coordination_MSG v_RxdMsg;
    var octetstring v_OldGUTI;
    
    // Get and store the Authentication parameters when they're sent by UTRAN
    UTRAN.receive(cmr_IRAT_AuthInfo) -> value v_RxdMsg;
    v_GUTIFromUTRAN := v_RxdMsg.Authentication.GutiParams;
    
    //@siclog "Step 14" siclog@
    //+   Cell A is configured as the Serving Cell, Cell 5 is configured as a Suitable Neighbour Cell.
    f_IRAT_WaitForCoOrd_Trigger(UTRAN);
    f_EUTRA_SetCellPower(eutra_CellA, tsc_ServingCellRS_EPRE);
    
    //@siclog "Step 15" siclog@
    //+   Check: does the UE send an RRCConnectionRequest with the InitialUE-Identity set to "randomValue" and the establishmentcause
    //     set to MO-signalling on Cell A?
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_CellA, cr_EstablishmentCause_MoSignalling, cr_InitialUE_Identity_NotSTMSI);   /* @sic R5-120721 change 3 sic@ */
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 15");
    
    //@siclog "Step 16" siclog@
    //+   The SS responds with RRCConnectionSetup
    f_EUTRA_RRC_ConnectionSetup_Def(eutra_CellA);
    
    v_OldGUTI := f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity) & bit2oct(v_GUTIFromUTRAN.MME_GroupId) & bit2oct(v_GUTIFromUTRAN.MME_Code) & bit2oct(v_GUTIFromUTRAN.M_TMSI);                  // 4 octets
    
    //@siclog "Step 17" siclog@
    //+   Check: does the UE send an RRCConnectionSetupComplete with the selectedPLMN-identity set to the value of the registered MME
    //(i.e. to the value in the GUTI stored on the USIM in EFEPSLOCI), and, the mmegi and mmec are set to the values derived from the GUTI stored on the USIM in EFEPSLOCI; [1,P]
    //  Check: are the contents of the TRACKING AREA UPDATE REQUEST with the correct parameters? [2,3,P]
    v_NasInd := f_EUTRA_RRCConnectionSetupComplete_Def(eutra_CellA,                                       // @sic R5s120121 MCC160 implementation sic@
                                                       cr_508_RRCConnectionSetupComplete(v_RRC_TI,
                                                                                         ?,
                                                                                         cr_RegisteredMME(omit,
                                                                                                          v_GUTIFromUTRAN.MME_GroupId,
                                                                                                          v_GUTIFromUTRAN.MME_Code)),
                                                       cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                         cdr_TAU_Request_CheckAllAuthParams(v_UpdateType,
                                                                                                            f_EUTRA_SecurityKSIasme_Get(),
                                                                                                            cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                            v_AdditionalUpdateType,
                                                                                                            cs_MobileIdentityGuti(omit, v_OldGUTI), // from UTRAN,
                                                                                                            cr_CiphKeySeqNum('8'H, v_RxdMsg.Authentication.AuthPS.KeySeq), // @sic R5s110726 sic@
                                                                                                            cr_PTMSI_Signature(px_PTMSI_SigDef),
                                                                                                            f_GutiParameters2MobileIdentity('50'O, v_Guti1_Params), // New Value
                                                                                                            cr_TAI_Any,
                                                                                                            v_LAI)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 17");
    
    //@siclog "Step 18" siclog@
    //+   The SS sends TRACKING AREA UPDATE ACCEPT
    //  Note: the default message contents cause the allocation of a new GUTI and new TAI list
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(v_UpdateType,
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti2_Params),
                                                                  cds_TAIListNonConsecutive_tlv(v_PLMN,
                                                                                                { '0001'O, '0002'O }), // TAC1=1, TAC2=2
                                                                  v_EpsBearerCtxtStatus,
                                                                  v_LAI,
                                                                  f_GetMSId(NORMAL), // @sic R5s110176 sic@
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)))));
    //@siclog "Step 18A" siclog@
    // The UE sends TRACKING AREA UPDATE COMPLETE.
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 18A");
    
    //+  the SS releases the RRC connection
    //@siclog "Step 19" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //@siclog "Step 20 Void" siclog@
    //@siclog "Step 21" siclog@
    //+  Cell 5 is configured as the Serving Cell and Cell A is configured as a Suitable Neighbour Cell as defined in table 6.2.2.1-1 of TS 36.508.
    f_EUTRA_SendAuthCoOrdParameters(UTRAN, eutra_CellA, v_SecurityParams.AuthParams);
    f_EUTRA_SetCellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE); // @sic R5s110726 sic@
    
    //+ Step 22 to 28 are implemented in UTRAN side.
    f_IRAT_WaitForCoOrd_Trigger(UTRAN);
  } // function fl_TC_9_2_3_3_1_Body

  function f_TC_9_2_3_3_2_EUTRA() runs on EUTRA_PTC
  { /* Iu mode to S1 mode intersystem change / ISR is active / Expiry of T3312 in E-UTRAN or T3412 in UTRAN and further intersystem change */
    var GutiParameters_Type v_Guti_Params;
    var M_TMSI_Type v_MTmsi := oct2bit('9a26319c'O);
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c4);
    
    // Initial conditions state that UE has M-TMSI = 9a26319c (arbitrary value chosen for this test case)
    v_Guti_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    v_Guti_Params.M_TMSI := v_MTmsi;
    f_EUTRA_CellInfo_SetGuti(eutra_CellA, v_Guti_Params);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    
    // Preamble: UE is in state Registered, Idle Mode (state 2)
    // ==========================================================================
    f_EUTRA_Preamble_InterRAT(eutra_CellA, STATE2_IDLEUPDATE, UTRAN);
    f_EUTRA_TestBody_Set(true); // @sic R5s120482 sic@

    fl_TC_9_2_3_3_2_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E2_T3440); // @sic R5s110007 sic@

  } // function f_TC_9_2_3_3_2_EUTRA

  function fl_TC_9_2_3_3_2_Body() runs on EUTRA_PTC
  {
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;
    var NAS_MSG_Indication_Type v_NasInd;
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity);
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_Lac v_LAC := f_EUTRA_CellInfo_GetLocationAreaCode(eutra_CellA);
    var template (omit) LocAreaId v_LAI := f_GetLAI(v_PLMN, v_LAC, NORMAL); // @sic R5s110176 sic@
    var NAS_Tac v_Tac1  := '0001'O;
    var template (omit) MobileIdentity v_MSId := f_GetMSId(NORMAL); // @sic R5s110176 sic@
    var template (present) MobileIdentity v_OldGutiId;
    var template Nonce v_Nonce;
    var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get();
    var IRAT_Coordination_MSG v_RxdMsg;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType();
    var NAS_KsiValue v_KsiValue := f_EUTRA_SecurityKSIasme_Get();
    var EPS_UpdateTypeValue v_UpdateType_ISR, v_UpdateType := f_GetEPSTAUType(NORMAL);
    var bitstring v_RAC;
    var octetstring v_OldGUTI;
    timer t_WaitTimer;
    timer t_T3412 := f_EUTRA_SetTimerToleranceMin(eutra_CellA, nasTimer, 60.0);
    timer t_T3423 := f_EUTRA_SetTimerToleranceMax(eutra_CellA, nasTimer, 120.0);
    
    //The signal strength of Cell A is lowered to that of a non-suitable neighbour cell
    // @siclog "Step 1" siclog@
    f_EUTRA_SetCellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE);
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    
    //@siclog "Step 5" siclog@
    //+   Cell A is configured as the Serving Cell, Cell 5 is configured as a Suitable Neighbour Cell.
    f_IRAT_WaitForCoOrd_Trigger(UTRAN);
    f_EUTRA_SetCellPower(eutra_CellA, tsc_ServingCellRS_EPRE);
    
    //@siclog "Step 5Aa1" siclog@
    if ((pc_CS_PS_voice_centric or pc_CS_PS_data_centric) and px_AttachTypeTested == COMBINED_ATTACH) { // @sic R5-120766, R5s120482 sic@
      //+   The UE transmits a TRACKING AREA UPDATE REQUEST message
      v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                                 v_RRC_TI,
                                                 cr_EstablishmentCause_Any,
                                                 cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                   cdr_TAU_Request_CheckAllAuthParams(tsc_EpsUpdate_Combined_IMSIAttach, // @sic R5s120482 sic@
                                                                                                      v_KsiValue,
                                                                                                      cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                      v_AdditionalUpdateType,
                                                                                                      cr_MobileIdAny(omit),
                                                                                                      ?,
                                                                                                      omit,
                                                                                                      cr_MobileIdAny ('50'O),
                                                                                                      cr_TAI_Any ifpresent,
                                                                                                      cr_LAI_Any ifpresent,
                                                                                                      cr_UeRadioCap ifpresent)));
      
      //@siclog "Step 5Aa2" siclog@
      //+   The SS transmits a TRACKING AREA UPDATE ACCEPT message
      v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
      SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_508_TAU_Accept(tsc_EpsUpdate_Combined_TaLaUpdate_ISRActivated,
                                                                    f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti1_Params),
                                                                    cds_TAIListNonConsecutive_tlv(v_PLMN, { v_Tac1 }), // TAC1=1
                                                                    v_EpsBearerCtxtStatus,
                                                                    v_LAI,
                                                                    v_MSId,
                                                                    f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)))));
      //@siclog "Step 5Aa3" siclog@
      // The UE transmits a TRACKING AREA UPDATE COMPLETE message.
      SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                        cr_508_TAU_Complete)));
      //@siclog "Step 5Aa4" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);   // @sic R5-122106 sic@
    }
    //@siclog "Step 6" siclog@
    //+   Wait for the timer on the UTRAN cell to time out before changing the power back again
    f_IRAT_WaitForCoOrd_Trigger(UTRAN);
    f_EUTRA_SetCellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE);
    
    //@siclog "Step 9" siclog@
    //+   Cell A is configured as the Serving Cell, Cell 5 is configured as a Suitable Neighbour Cell.
    f_IRAT_WaitForCoOrd_Trigger(UTRAN);
    f_EUTRA_SetCellPower(eutra_CellA, tsc_ServingCellRS_EPRE);
    
    //@siclog "Step 9Aa1" siclog@
    if ((pc_CS_PS_voice_centric or pc_CS_PS_data_centric) and px_AttachTypeTested == COMBINED_ATTACH) { // @sic R5-120766, R5s120482 sic@
      //+   The UE transmits a TRACKING AREA UPDATE REQUEST message
      v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                                 v_RRC_TI,
                                                 cr_EstablishmentCause_Any,
                                                 cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                   cdr_TAU_Request_CheckAllAuthParams(tsc_EpsUpdate_Combined_IMSIAttach, // @sic R5s120482 sic@
                                                                                                      v_KsiValue,
                                                                                                      cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                      v_AdditionalUpdateType,
                                                                                                      cr_MobileIdAny(omit),
                                                                                                      ?,
                                                                                                      omit,
                                                                                                      cr_MobileIdAny ('50'O),
                                                                                                      cr_TAI_Any ifpresent,
                                                                                                      cr_LAI_Any ifpresent,
                                                                                                      cr_UeRadioCap ifpresent)));
      //@siclog "Step 9Aa2" siclog@
      //+   The SS transmits a TRACKING AREA UPDATE ACCEPT message
      v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
      SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                  cs_508_TAU_Accept(tsc_EpsUpdate_Combined_TaLaUpdate_ISRActivated,
                                                                    f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti1_Params),
                                                                    cds_TAIListNonConsecutive_tlv(v_PLMN, { v_Tac1 }), // TAC1=1
                                                                    v_EpsBearerCtxtStatus,
                                                                    v_LAI,
                                                                    v_MSId,
                                                                    f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)))));
      //@siclog "Step 9Aa3" siclog@
      // The UE transmits a TRACKING AREA UPDATE COMPLETE message.
      SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                        cr_508_TAU_Complete)));
      //@siclog "Step 9Aa4" siclog@
      f_EUTRA_RRC_ConnectionRelease(eutra_CellA);   // @sic R5-122106 sic@
    } else { // @sic R5s120482 sic@
      f_EUTRA_SS_NAS_CountSet (omit, f_EUTRA_SS_NAS_CountGetULNext());
    }
    //@siclog "Step 10" siclog@
    //+   Wait for the timer on the UTRAN cell to time out before changing the power back again
    f_IRAT_WaitForCoOrd_Trigger(UTRAN);
    f_EUTRA_SetCellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE);
    f_EUTRA_SendAuthParameters (eutra_CellA, UTRAN); // Send info to UTRAN for next RAU @sic R5s120378 sic@
    
    //@siclog "Step 13" siclog@
    //+   Cell A is configured as the Serving Cell, Cell 5 is configured as a Non-Suitable Cell.
    f_IRAT_WaitForCoOrd_Trigger(UTRAN);
    f_EUTRA_SetCellPower(eutra_CellA, tsc_ServingCellRS_EPRE);
    
    //@siclog "Step 14" siclog@
    //+   The UE transmits a TRACKING AREA UPDATE REQUEST message
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                  cdr_TAU_Request_CheckAllAuthParams(?,  // @sic R5s120482 sic@
                                                                                                      v_KsiValue,
                                                                                                      cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                      v_AdditionalUpdateType,
                                                                                                      cr_MobileIdAny(omit),
                                                                                                      ?,
                                                                                                      omit,
                                                                                                      cr_MobileIdAny ('50'O),
                                                                                                      cr_TAI_Any ifpresent,
                                                                                                      cr_LAI_Any ifpresent,
                                                                                                      cr_UeRadioCap ifpresent)));
    // Need to send the update type with ISR activated
    if (v_UpdateType == tsc_EpsUpdate_TaUpdate) {
      v_UpdateType_ISR := tsc_EpsUpdate_TaLaUpdate_ISRActivated;
    } else {
      v_UpdateType_ISR := tsc_EpsUpdate_Combined_TaLaUpdate_ISRActivated;
    }
    
    //@siclog "Step 15" siclog@
    //+   The SS transmits a TRACKING AREA UPDATE ACCEPT message with EPS update result indicating
    //    that ISR is active, T3412 set to 1 minute and T3423 set to 2 minutes.
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cds_TAU_Accept_T3412_T3423(v_UpdateType_ISR,
                                                                           f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti1_Params), //GUTI.M-TMSI = 9a26319c from preamble
                                                                           cds_TAIListNonConsecutive_tlv(v_PLMN, { v_Tac1 }), // TAC1=1
                                                                           v_EpsBearerCtxtStatus,
                                                                           v_LAI,
                                                                           v_MSId,
                                                                           f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType),
                                                                           cs_GprsTimer_tv('5A'O, tsc_GprsTimerUnit_1min, '00001'B),      //t3412
                                                                           cs_GprsTimer_tv('59'O, tsc_GprsTimerUnit_1min, '00010'B)))));  //t3423
    //@siclog "Step 16" siclog@
    // The UE transmits a TRACKING AREA UPDATE COMPLETE message.
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);   // @sic R5s120163 sic@
    
    t_WaitTimer.start(f_EUTRA_SetTimerToleranceMin(eutra_CellA, nonProtocolTimer, 90.0));
    t_T3412.start; // @sic R5-120766 sic@
    // +  Cell 5 is configured as the Serving Cell
    // +  Cell A is configured as a Non Suitable Cell
    //@siclog "Step 17" siclog@
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE);
    
    // + 90s after step 16, the SS sets the cell type of Cell A to "Serving cell" and
    //   the cell type of Cell 5 to "Non-suitable cell".
    //@siclog "Step 18" siclog@
    t_T3412.timeout; // @sic R5-120766 sic@ this is only 60 seconds, so this will finish first
    t_T3423.start; // @sic R5-120766, R5s120163 sic@
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger); // To indicate T3412 has finished @sic R5-122114 sic@
    t_WaitTimer.timeout;
    if ((pc_CS_PS_voice_centric or pc_CS_PS_data_centric) and px_AttachTypeTested == COMBINED_ATTACH) { //@sic R5s120482 sic@
      f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    }
    f_EUTRA_SetCellPower(eutra_CellA, tsc_ServingCellRS_EPRE);
    
    // Get latest values of Auth params from the UTRAN cell
    UTRAN.receive(cmr_IRAT_AuthInfo) -> value v_RxdMsg;
    v_SecurityParams.AuthParams := v_RxdMsg.Authentication.AuthPS;
    v_RAC := v_RxdMsg.Authentication.GutiParams.MME_Code;
    v_OldGUTI := v_PLMN & bit2oct(v_RxdMsg.Authentication.GutiParams.MME_GroupId) & bit2oct(v_RAC) & bit2oct(v_RxdMsg.Authentication.GutiParams.M_TMSI);                  // 4 octets
    f_EUTRA_Security_Set(v_SecurityParams);

    if ((pc_CS_PS_voice_centric or pc_CS_PS_data_centric) and px_AttachTypeTested == COMBINED_ATTACH) { // @sic R5s120482 sic@
      v_OldGutiId := cs_MobileIdentityGuti(omit, v_OldGUTI);
      v_Nonce := cr_NonceUE_Any;
    } else {
      v_OldGutiId := f_GutiParameters2MobileIdentity(omit, v_Guti1_Params); //GUTI.M-TMSI = 9a26319c from preamble
      v_Nonce := omit;
    }
    //@siclog "Step 19" siclog@
    // +  Check: does the UE transmit a TRACKING AREA UPDATE REQUEST message on Cell A?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldAddGutiTAI(?, // @sic R5s120378, R5s120482 sic@
                                                                                               v_KsiValue,
                                                                                               cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                               v_AdditionalUpdateType,
                                                                                               v_OldGutiId,
                                                                                               cr_TAI(tsc_PLMN1, tsc_TAC1), // This includes TAC1, which is the same as RAC of 1
                                                                                               omit,
                                                                                               omit,
                                                                                               v_Nonce)));
    t_T3423.stop; // @sic R5-120766 sic@
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 19");
    
    //@siclog "Step 20" siclog@
    //  The SS transmits a TRACKING AREA UPDATE ACCEPT message with EPS update result indicating
    //  that ISR is active, T3412 set to 1 minute and T3423 set to 1 minute.
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cds_TAU_Accept_T3412_T3423(v_UpdateType_ISR,
                                                                           omit, // Guti
                                                                           cs_TrackingAreaIdListDef_tlv,
                                                                           v_EpsBearerCtxtStatus,
                                                                           v_LAI,
                                                                           omit,  // @sic R5-122106 sic@
                                                                           f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType),
                                                                           cs_GprsTimer_tv('5A'O, tsc_GprsTimerUnit_1min, '00001'B),      //t3412
                                                                           cs_GprsTimer_tv('59'O, tsc_GprsTimerUnit_1min, '00001'B)))));  //t3423
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);   // @sic R5s120163 sic@
    t_WaitTimer.start(f_EUTRA_SetTimerToleranceMin(eutra_CellA, nonProtocolTimer, 150.0));
    t_T3412.start; // @sic R5-120766 sic@
    
    //@siclog "Step 21" siclog@
    // The SS sets the cell type of Cell 5 to "Serving Cell" and the cell type of Cell A to "Non-suitable cell".
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE);
    
    //@siclog "Step 22" siclog@
    //  150s after step 20, the SS sets the cell type of Cell A to "Serving cell" and the cell type of Cell 5 to "Non-suitable cell".
    t_T3412.timeout; // @sic R5-120766 sic@ this is only 60 seconds, so this will finish first
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger); // To indicate T3412 has finished @sic R5-122114 sic@
    t_T3423.start(f_EUTRA_SetTimerToleranceMin(eutra_CellA, nasTimer, 60.0)); // @sic R5-120766, R5s120163 sic@
    t_T3423.timeout; // @sic R5-120766 sic@ this is only 60 seconds, so this will finish first
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger); // To indicate T3423 has finished @sic R5-122114 sic@
    t_WaitTimer.timeout;
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower(eutra_CellA, tsc_ServingCellRS_EPRE);
    
    //@siclog "Step 23" siclog@
    //  Check: does the UE transmit a TRACKING AREA UPDATE REQUEST message on Cell A?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldAddGutiTAI(?,  // @sic R5s120482 sic@
                                                                                    v_KsiValue,
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType,
                                                                                    cs_MobileIdentityGuti(omit, v_OldGUTI),
                                                                                    cr_TAI(tsc_PLMN1, tsc_TAC1),
                                                                                    f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti1_Params),
                                                                                    -,
                                                                                    cr_NonceUE_Any))); // @sic R5s120378 sic@
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 23");
    
    //@siclog "Step 24" siclog@
    //  The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cds_TAU_Accept_T3412_T3423(v_UpdateType,
                                                                           omit, // Guti
                                                                           cds_TAIListNonConsecutive_tlv(v_PLMN, { '0001'O }), // TAC1=1
                                                                           v_EpsBearerCtxtStatus,
                                                                           v_LAI,
                                                                           omit,  // @sic R5-122106 sic@
                                                                           f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType),
                                                                           cs_GprsTimer_tv('5A'O, tsc_GprsTimerUnit_6min, '10101'B), //t3412
                                                                           omit))));                                                 //t3423
    // Now tell the UTRAN cell the test is finished
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    
  } // function fl_TC_9_2_3_3_2_Body

  function f_TC_9_2_3_3_3_EUTRA() runs on EUTRA_PTC
  {
    var GutiParameters_Type v_Guti_Params; // @sic R5s120604 sic@

    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c4);
    
    v_Guti_Params  := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    v_Guti_Params.M_TMSI := oct2bit('9a26319c'O);
    f_EUTRA_CellInfo_SetGuti(eutra_CellA, v_Guti_Params);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    
    f_EUTRA_Preamble_InterRAT(eutra_CellA, STATE2_IDLEUPDATE, UTRAN); // @sic R5-122114 sic@
    f_EUTRA_TestBody_Set(true);
    fl_TC_9_2_3_3_3_Body();

    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E2_T3440);
     
  }// function f_TC_9_2_3_3_3_EUTRA

  function fl_TC_9_2_3_3_3_Body() runs on EUTRA_PTC
  {
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;
    var NAS_MSG_Indication_Type v_NasInd;
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity);
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_Lac v_LAC := f_EUTRA_CellInfo_GetLocationAreaCode(eutra_CellA);
    var template (omit) LocAreaId v_LAI := f_GetLAI(v_PLMN, v_LAC, NORMAL); // @sic R5s110176 sic@
    var NAS_Tac v_Tac1  := '0001'O;
    var template (omit) MobileIdentity v_MSId := f_GetMSId(NORMAL); // @sic R5s110176 sic@
    var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get();
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType();
    var NAS_KsiValue v_KsiValue := f_EUTRA_SecurityKSIasme_Get();
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(NORMAL); // @sic R5s110176 sic@
    var EPS_UpdateTypeValue v_UpdateResult;
    var O10_Type v_GutiStringFromRAT;
    var IRAT_Coordination_MSG v_RxdMsg;
    timer t_WaitTimer := f_EUTRA_SetTimerToleranceMin(eutra_CellA, nonProtocolTimer, 150.0);
    timer t_T3412 := f_EUTRA_SetTimerToleranceMin(eutra_CellA, nasTimer, 60.0);
    timer t_T3423 := f_EUTRA_SetTimerToleranceMin(eutra_CellA, nasTimer, 60.0);

    //@siclog "Step 1" siclog@
    //The SS sets the cell type of Cell 5 to "Serving Cell" and the cell type of Cell A to "Non-suitable cell".
    f_EUTRA_SetCellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE);
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    
    //@siclog "Step 5" siclog@
    //The SS sets the cell type of Cell A to "Serving cell" and the cell type of Cell 5 to "Non-suitable cell".
    f_IRAT_WaitForCoOrd_Trigger(UTRAN);
    f_EUTRA_SetCellPower(eutra_CellA, tsc_ServingCellRS_EPRE);
    
    //@siclog "Step 5Aa1" siclog@
    if ((pc_CS_PS_voice_centric or pc_CS_PS_data_centric) and px_AttachTypeTested == COMBINED_ATTACH  ) { // @sic R5-120766, R5-122114 sic@
      //+   The UE transmits a TRACKING AREA UPDATE REQUEST message
      v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_CheckAllAuthParams(tsc_EpsUpdate_Combined_IMSIAttach, // @sic R5-122114 sic@
                                                                  v_KsiValue,
                                                                  cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                  v_AdditionalUpdateType,
                                                                  cr_MobileIdAny(omit),
                                                                  ?,
                                                                  omit,
                                                                  cr_MobileIdAny ('50'O),
                                                                  cr_TAI_Any ifpresent,
                                                                  cr_LAI_Any ifpresent,
                                                                  cr_UeRadioCap ifpresent)));
      
      //@siclog "Step 5Aa2" siclog@
      //+   The SS transmits a TRACKING AREA UPDATE ACCEPT message
      v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
      SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(tsc_EpsUpdate_Combined_TaLaUpdate_ISRActivated,
                                                                           f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti1_Params),
                                                                    cds_TAIListNonConsecutive_tlv(v_PLMN, { v_Tac1 }), // TAC1=1
                                                                           v_EpsBearerCtxtStatus,
                                                                           v_LAI,
                                                                           v_MSId,
                                                                           f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)))));
      //@siclog "Step 5Aa3" siclog@
      // The UE transmits a TRACKING AREA UPDATE COMPLETE message.
      SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    f_EUTRA_RRC_ConnectionRelease ( eutra_CellA, v_RRC_TI ); // @sic R5-122114 sic@
    }
    //@siclog "Step 6" siclog@
    //90s after step 3, the SS sets the cell type of Cell 5 to "Serving Cell" and the cell type of Cell A to "Non-suitable cell".
    //wait for UTRAN to send Auth parameters.
    UTRAN.receive (cmr_IRAT_AuthInfo) -> value v_RxdMsg;
    f_EUTRA_SetCellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE);
    v_SecurityParams.AuthParams := v_RxdMsg.Authentication.AuthPS;
    f_EUTRA_Security_Set (v_SecurityParams);
    v_GutiStringFromRAT := v_PLMN & bit2oct(v_RxdMsg.Authentication.GutiParams.MME_GroupId) & bit2oct(v_RxdMsg.Authentication.GutiParams.MME_Code) & bit2oct(v_RxdMsg.Authentication.GutiParams.M_TMSI);
        
    //@siclog "Step 9" siclog@
    //The SS sets the cell type of Cell A to "Serving cell" and the cell type of Cell 5 to "Non-suitable cell".
    f_IRAT_WaitForCoOrd_Trigger(UTRAN);
    f_EUTRA_SetCellPower(eutra_CellA, tsc_ServingCellRS_EPRE);
    
    //@siclog "Step 10" siclog@
    //The UE transmits a TRACKING AREA UPDATE REQUEST message
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                                v_RRC_TI,
                                                cr_EstablishmentCause_Any,
                                                cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                      cdr_TAU_Request_CheckAllAuthParams ( ?,
                                                                                                           v_KsiValue,
                                                                                                           cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                           v_AdditionalUpdateType,
                                                                                                           cr_MobileIdAny(omit),
                                                                                                           ?,
                                                                                                           omit,
                                                                                                           cr_MobileIdAny('50'O),
                                                                                                           cr_TAI_Any ifpresent,
                                                                                                           cr_LAI_Any ifpresent,
                                                                                                           cr_UeRadioCap ifpresent))); // @sic R5s120285 subject to prose CR approval sic@
    
    if (v_UpdateType == tsc_EpsUpdate_TaUpdate) {
      v_UpdateResult := tsc_EpsUpdate_TaLaUpdate_ISRActivated;
    } else {
      v_UpdateResult := tsc_EpsUpdate_Combined_TaLaUpdate_ISRActivated;
    }
    
    //@siclog "Step 11" siclog@
    //The SS transmits a TRACKING AREA UPDATE ACCEPT message with EPS update result indicating that ISR is active, T3412 set to 1 minute and T3423 set to 1 minute.
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                      cs_TimingInfo_Now,
                                      cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                     cds_TAU_Accept_T3412_T3423(v_UpdateResult,
                                                                                omit, // Guti
                                                                           cds_TAIListNonConsecutive_tlv(v_PLMN, { '0001'O }), // TAC1=1
                                                                                v_EpsBearerCtxtStatus,
                                                                                v_LAI,
                                                                                omit,  // @sic R5-122114 sic@
                                                                                f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType),
                                                                                cs_GprsTimer_tv('5A'O, tsc_GprsTimerUnit_1min, '00001'B), //t3412
                                                                                cs_GprsTimer_tv('59'O, tsc_GprsTimerUnit_1min, '00001'B)  //t3423
                                                                                ))));
    f_EUTRA_RRC_ConnectionRelease ( eutra_CellA, v_RRC_TI );
    t_T3412.start;

    //@siclog "Step 12" siclog@
    //The SS sets the cell type of Cell 5 to "Serving Cell" and the cell type of Cell A to "Non-suitable cell".
    f_EUTRA_SetCellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE);
    t_WaitTimer.start;
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    
    //@siclog "Step 13" siclog@
    //150s after step 12, the SS sets the cell type of Cell A to "Serving cell" and the cell type of Cell 5 to "Non-suitable cell".
    t_T3412.timeout; // This is only a minute, so this will finish first
    t_T3423.start;
    if ((pc_CS_PS_voice_centric or pc_CS_PS_data_centric) and px_AttachTypeTested == COMBINED_ATTACH  ) { // @sic R5-122114 sic@
      f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger); // To indicate T3412 has finished @sic R5-122114 sic@
    }
    t_T3423.timeout; // This is only a minute, so this will finish first
    if ((pc_CS_PS_voice_centric or pc_CS_PS_data_centric) and px_AttachTypeTested == COMBINED_ATTACH  ) { // @sic R5-122114 sic@
      f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger); // To indicate T3423 has finished @sic R5-122114 sic@
    }
    t_WaitTimer.timeout;
    f_EUTRA_SetCellPower(eutra_CellA, tsc_ServingCellRS_EPRE);
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
   
     //@siclog "Step 14" siclog@
     //Check: does the UE transmit a TRACKING AREA UPDATE REQUEST message on Cell A?
     v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                                    v_RRC_TI,
                                                    cr_EstablishmentCause_Any,
                                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected, // @sic R5s120285 subject to prose CR approval sic@
                                                                      cdr_TAU_Request_OldAddGutiTAI(?,
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType,
                                                                                    cs_MobileIdentityGuti(omit, v_GutiStringFromRAT),
                                                                                                    cr_TAI(v_PLMN, v_Tac1), // RAI is the same as TAC
                                                                                    f_GutiParameters2MobileIdentity('50'O, v_Guti1_Params),
                                                                                    omit,
                                                                                    cr_NonceUE_Any)));
     f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 14: TAU Request on cellA");
       
     //@siclog "Step 15" siclog@
     //The SS transmits a TRACKING AREA UPDATE ACCEPT message.
     SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                      cs_TimingInfo_Now,
                                      cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                     cds_TAU_Accept_T3412_T3423(v_UpdateType,
                                                                                omit, // Guti
                                                                                cds_TAIListNonConsecutive_tlv(v_PLMN, { '0001'O }), // TAC1=1
                                                                                v_EpsBearerCtxtStatus,
                                                                                v_LAI,
                                                                                omit, // @sic R5-122114 sic@
                                                                                f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType),
                                                                                cs_GprsTimer_tv('5A'O, tsc_GprsTimerUnit_6min, '10101'B), //t3412
                                                                            omit))));                                         //t3423
    
     
    f_EUTRA_RRC_ConnectionRelease ( eutra_CellA, v_RRC_TI );
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
 }// function fl_TC_9_2_3_3_3_Body

  function f_TC_9_2_3_3_4_EUTRA() runs on EUTRA_PTC
  { /* @desc First S1 mode to Iu mode inter-system change after attach */
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c4);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    // Go to state 2
    f_EUTRA_PreambleOtherRAT(eutra_CellA, NORMAL, true); // @sic R5s120210 sic@
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_3_4_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E1_IDLE);
    
  } // end f_TC_9_2_3_3_4_EUTRA

  function fl_TC_9_2_3_3_4_Body() runs on EUTRA_PTC
  {
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var template (omit) EPS_BearerContextStatus v_EPS_ContextStatus;
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity);
    var NAS_MSG_Indication_Type v_NasInd;
    var B3_Type v_EpsUpdate_TypeValue := f_GetEPSTAUType(NORMAL); // @sic R5s110176, R5s100029 sic@
    var B3_Type v_EpsUpdate_TypeResult;
    var TrackingAreaCode v_Tac := f_EUTRA_CellInfo_GetTAC(eutra_CellA);
    var NAS_Lac v_LAC := f_EUTRA_CellInfo_GetLocationAreaCode(eutra_CellA);
    var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get();
    var template (omit) LocAreaId v_LAI := f_GetLAI(v_PLMN, v_LAC, NORMAL); // @sic R5s110176 sic@
    var template (omit) MobileIdentity v_MSId := f_GetMSId(NORMAL);
    var template (value) TrackingAreaIdList v_TaiList := cds_TAIListNonConsecutive_tlv(v_PLMN, { bit2oct(v_Tac) });
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType();
    var CoOrd_GUTIParam_Type v_GUTIFromUTRAN;
    var IRAT_Coordination_MSG v_RxdMsg;
    var octetstring v_OldGUTI;
    
    //The signal strength of Cell A is lowered to that of a non-suitable neighbour cell
    // @siclog "Step 1" siclog@
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    f_EUTRA_SetCellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE);
    // Steps 2 to 12 in UTRAN side
    UTRAN.receive(cmr_IRAT_AuthInfo) -> value v_RxdMsg;
    
    v_SecurityParams.AuthParams := v_RxdMsg.Authentication.AuthPS;
    f_EUTRA_Security_Set(v_SecurityParams);
    v_GUTIFromUTRAN := v_RxdMsg.Authentication.GutiParams;
    
    // Cell A is configured as the Serving cell and cell 5 is configured as a Suitable Neighbour Cell.
    f_EUTRA_SetCellPower(eutra_CellA, tsc_ServingCellRS_EPRE);
    
    // Step 12. Check: does the UE transmit an RRCConnectionRequest with the InitialUE-Identity
    //          set to "random value" and the establishmentcause set to MO-signalling?
    // @siclog "Step 12" siclog@
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_CellA, mo_Signalling, cr_InitialUE_Identity_Random);    // @sic R5-120721 change 3 sic@
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 12");
    
    // Step 13. The SS responds with RRCConnectionSetup
    // @siclog "Step 13" siclog@
    f_EUTRA_RRC_ConnectionSetup_Def(eutra_CellA);
    
    v_SecurityParams := f_EUTRA_Security_Get();
    // Step 14
    // Check: does the UE transmit an RRCConnectionSetupComplete message with the mmegi and mmec
    //        set to the values derived from the mapped RAI and P-TMSI, and containing
    //        a TRACKING AREA UPDATE REQUEST message as described in the specific message contents?
    // NOTE: The UE should not include "radio capability information" in the TAU request.
    v_OldGUTI := v_PLMN & bit2oct(v_GUTIFromUTRAN.MME_GroupId) & bit2oct(v_GUTIFromUTRAN.MME_Code) & bit2oct(v_GUTIFromUTRAN.M_TMSI);                  // 4 octets
    
    v_EpsUpdate_TypeResult := v_EpsUpdate_TypeValue; // @sic R5-120630 sic@
    if (v_EpsUpdate_TypeValue == tsc_EpsUpdate_Combined_TaLaUpdate) {
      v_EpsUpdate_TypeValue := tsc_EpsUpdate_Combined_IMSIAttach; // @sic R5s110801 sic@
    }
    // @siclog "Step 14" siclog@
    //+   Check: does the UE send an RRCConnectionSetupComplete with the selectedPLMN-identity set to the value of the registered MME
    //(i.e. to the value in the GUTI stored on the USIM in EFEPSLOCI), and, the mmegi and mmec are set to the values derived from the GUTI stored on the USIM in EFEPSLOCI; [1,P]
    //  Check: are the contents of the TRACKING AREA UPDATE REQUEST with the correct parameters? [2,3,P]
    v_NasInd := f_EUTRA_RRCConnectionSetupComplete_Def(eutra_CellA,                                       // @sic R5s120121 MCC160 implementation sic@
                                                       cr_508_RRCConnectionSetupComplete(v_RRC_TI,
                                                                                         ?,
                                                                                         cr_RegisteredMME(omit, // @sic R5s110801 sic@
                                                                                                          v_GUTIFromUTRAN.MME_GroupId, // @sic R5s120067 sic@
                                                                                                          v_GUTIFromUTRAN.MME_Code)),
                                                       cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                         cdr_TAU_Request_CheckAllAuthParams(v_EpsUpdate_TypeValue,
                                                                                                            f_EUTRA_SecurityKSIasme_Get(),
                                                                                                            cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                            v_AdditionalUpdateType,
                                                                                                            cs_MobileIdentityGuti(omit, v_OldGUTI), // from UTRAN,
                                                                                                            cr_CiphKeySeqNum('8'H, v_SecurityParams.AuthParams.KeySeq),
                                                                                                            cr_PTMSI_Signature(px_PTMSI_SigDef),
                                                                                                            f_GutiParameters2MobileIdentity('50'O, v_Guti1_Params), // New Value
                                                                                                            cr_TAI_Any,
                                                                                                            v_LAI,
                                                                                                            cr_UeRadioCap ifpresent)));
    v_EPS_ContextStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus; // Send this back in the Accept
    
    /* In case MME has the cached security context it verifies the TAU Request message
       and replies with TAU Accept message protected with the cached security context
       ( 33.401 cl. 9.1.2 Idle mode procedures in E-UTRAN ) */
    // @siclog "Step 15" siclog@
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                     cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(v_EpsUpdate_TypeResult, // @sic R5-120630 sic@
                                                                  f_GutiParameters2MobileIdentity('50'O, v_Guti1_Params),
                                                                          v_TaiList,
                                                                          v_EPS_ContextStatus,
                                                                          v_LAI,
                                                                          v_MSId,
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType))))); // @sic R5-103681 sic@
    
    // @siclog "Step 15A" siclog@
    // @sic R5s110801, R5-120630 sic@
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    
    // Step 16. The SS releases the RRC connection
    // @siclog "Step 16" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
   // tell UTRAN side test is finished
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
    
    
  }// end function fl_TC_9_2_3_3_4_Body

  function f_TC_9_2_3_3_5_EUTRA() runs on EUTRA_PTC
  {
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c10);   // @sic R5-113805, R5s110777 sic@
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    
    f_EUTRA_SendTriggerToOtherRAT(); // @sic R5-105361 sic@
    f_EUTRA_PreambleOtherRAT(eutra_CellA, -, true);   // @sic R5-113805 sic@
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_3_5_Body();
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_ReleaseAllCells(); //UE turned off on UTRAN cell, just release cell
    
  }// function f_TC_9_2_3_3_5_EUTRA

  function fl_TC_9_2_3_3_5_Body() runs on EUTRA_PTC
  {
    var charstring v_OtherPTC := "";
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;
    var NAS_MSG_Indication_Type v_NasInd;
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity);
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_Lac v_LAC := f_EUTRA_CellInfo_GetLocationAreaCode(eutra_CellA);
    var template (omit) LocAreaId v_LAI := f_GetLAI(v_PLMN, v_LAC, NORMAL); // @sic R5s110176 sic@
    var NAS_Tac v_Tac1  := '0001'O;
    var template (omit) MobileIdentity v_MSId := f_GetMSId(NORMAL); // @sic R5s110176 sic@
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType();
    var NAS_KsiValue v_KsiValue := f_EUTRA_SecurityKSIasme_Get();
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(NORMAL); // @sic R5s110176 sic@
    var float v_Delay1Min := f_EUTRA_SetTimerToleranceMax(eutra_CellA, nonProtocolTimer, 60.0);
    var float v_Delay2Min := f_EUTRA_SetTimerToleranceMax(eutra_CellA, nonProtocolTimer, 120.0);
    timer t_T3312 := f_EUTRA_SetTimerToleranceMin(eutra_CellA, nasTimer, 7.0 * 60.0); // Periodic Routing Area Update timer on UTRAN
    timer t_T3323 := f_EUTRA_SetTimerToleranceMax(eutra_CellA, nasTimer, 7.0 * 60.0); // @sic R5-120768, R5s120210 sic@
    
    v_OtherPTC := f_EUTRA_GetOtherRAT();  /* @sic R5-113805, R5-113696, R5-113734 sic@
                                             v_OtherPTC can be "UTRAN" or "GERAN" but not "NONE" since px_RATComb_Tested = EUTRA_Only is not allowed for this test case */
    
    // Step 1a1/1b1. IF pc_UTRAN THEN the SS sets the cell type of Cell 5/24 to "Serving cell" and
    // the cell type of Cell A to "Non-suitable cell".
    //@siclog "Step 1" siclog@
    select (v_OtherPTC) { // send trigger to other RAT to change its power level too
      case ("UTRAN") {
        f_EUTRA_SetCellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE);
        f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
        f_IRAT_WaitForCoOrd_Trigger(UTRAN); // wait for trigger from UTRAN side
        f_EUTRA_SetCellPower(eutra_CellA, tsc_ServingCellRS_EPRE);
      }
      case ("GERAN") {
        f_EUTRA_SetCellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE);
        f_IRAT_SendCoOrd(GERAN, cms_IRAT_Trigger);
        f_IRAT_WaitForCoOrd_Trigger(GERAN); // wait for trigger from GERAN side
        f_EUTRA_SetCellPower(eutra_CellA, tsc_ServingCellRS_EPRE);
      }
    }
    
    //@siclog "Step 1Aa1" siclog@
    if ((pc_CS_PS_voice_centric or pc_CS_PS_data_centric) and px_AttachTypeTested == COMBINED_ATTACH) { // @sic R5-120768, R5-121764 sic@
      //+   The UE transmits a TRACKING AREA UPDATE REQUEST message
      v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_CheckAllAuthParams(tsc_EpsUpdate_Combined_IMSIAttach, // @sic R5s120210 sic@
                                                                  v_KsiValue,
                                                                  cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                  v_AdditionalUpdateType,
                                                                  cr_MobileIdAny(omit),
                                                                  ?,
                                                                  cr_PTMSI_SignatureAny,  // @sic sic@
                                                                  cr_MobileIdAny('50'O) ifpresent,
                                                                  cr_TAI_Any ifpresent,
                                                                  cr_LAI_Any ifpresent,
                                                                  cr_UeRadioCap ifpresent)));
      
      //@siclog "Step 1Aa2" siclog@
      //+   The SS transmits a TRACKING AREA UPDATE ACCEPT message
      v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
      SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(tsc_EpsUpdate_Combined_TaLaUpdate_ISRActivated,
                                                                           f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti1_Params),
                                                                    cds_TAIListNonConsecutive_tlv(v_PLMN, { v_Tac1 }), // TAC1=1
                                                                           v_EpsBearerCtxtStatus,
                                                                           v_LAI,
                                                                           v_MSId,
                                                                           f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)))));
    
     
      //@siclog "Step 1Aa3" siclog@
      // The UE transmits a TRACKING AREA UPDATE COMPLETE message.
      SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
      //@siclog "Step 1Aa4" siclog@
       f_EUTRA_RRC_ConnectionRelease(eutra_CellA); // @sic R5s120210 sic@
    }
    // Wait for 1 minute.
    //@siclog "Step 2" siclog@
    f_Delay(v_Delay1Min);
    
    //@siclog "Step 3 - 6" siclog@
    f_EUTRA_RbEst_508_AM(eutra_CellA);
    //@siclog "Step 7 - 8" siclog@
    fl_DeactivateEPSBearer(eutra_CellA);
    //@siclog "Step 8A" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    
    //@siclog "Step 9a1 - 9a5" siclog@
    select (v_OtherPTC) { // send trigger to other RAT to change its power level too
      case ("UTRAN") {
        f_EUTRA_SetCellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE);
        f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
        f_IRAT_WaitForCoOrd_Trigger(UTRAN); // wait for trigger from UTRAN side
        t_T3312.start;
        f_EUTRA_SetCellPower(eutra_CellA, tsc_ServingCellRS_EPRE);
      }
      case ("GERAN") {
        f_EUTRA_SetCellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE);
        f_IRAT_SendCoOrd(GERAN, cms_IRAT_Trigger);
        f_IRAT_WaitForCoOrd_Trigger(GERAN); // wait for trigger from GERAN side
        t_T3312.start;
        f_EUTRA_SetCellPower(eutra_CellA, tsc_ServingCellRS_EPRE);
      }
    }
    
    //@siclog "Step 9Aa1" siclog@
    if ((pc_CS_PS_voice_centric or pc_CS_PS_data_centric) and px_AttachTypeTested == COMBINED_ATTACH) { // @sic R5-120768, R5-121764 sic@
      //+   The UE transmits a TRACKING AREA UPDATE REQUEST message
      v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_CheckAllAuthParams(v_UpdateType,
                                                                  v_KsiValue,
                                                                  cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                  v_AdditionalUpdateType,
                                                                  cr_MobileIdAny(omit),
                                                                  ?,
                                                                  cr_PTMSI_SignatureAny,  // @sic R5s120210 sic@
                                                                  cr_MobileIdAny('50'O) ifpresent,
                                                                  cr_TAI_Any ifpresent,
                                                                  cr_LAI_Any ifpresent,
                                                                  cr_UeRadioCap ifpresent)));
      
      //@siclog "Step 9Aa2" siclog@
      //+   The SS transmits a TRACKING AREA UPDATE ACCEPT message
      v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
      SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                   cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(tsc_EpsUpdate_Combined_TaLaUpdate_ISRActivated,
                                                                           f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti1_Params),
                                                                    cds_TAIListNonConsecutive_tlv(v_PLMN, { v_Tac1 }), // TAC1=1
                                                                           v_EpsBearerCtxtStatus,
                                                                           v_LAI,
                                                                           v_MSId,
                                                                           f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)))));
    
     
      //@siclog "Step 9Aa3" siclog@
      // The UE transmits a TRACKING AREA UPDATE COMPLETE message.
      SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
      //@siclog "Step 9Aa4" siclog@
       f_EUTRA_RRC_ConnectionRelease(eutra_CellA); // @sic R5s120210 sic@
    }
    
    // Wait for 1 minute.
    //@siclog "Step 10" siclog@
    f_Delay(v_Delay1Min);
    
    //@siclog "Step 11 - 14" siclog@
    f_EUTRA_RbEst_508_AM(eutra_CellA);
    //@siclog "Step 15" siclog@
    if (v_OtherPTC != "NONE") {
      t_T3312.timeout;
      t_T3323.start; // @sic R5-120768, R5s120210 sic@
    }
    //@siclog "Step 16" siclog@
    f_EUTRA_508Check_DedicatedEPSIsActive(eutra_CellA,
                                          tsc_EpsDedicatedBearerId,
                                          cds_508_EPS_QoS_Dedicated_1_tlv,
                                          f_EUTRA_Get_508_TrafficFlowTemplate_2_Modify(tsc_EpsDedicatedBearerId));
    
    //@siclog "Step 17 - 18" siclog@
    fl_DeactivateEPSBearer(eutra_CellA);
    
    //  Wait for 2 minutes.
    //@siclog "Step 19" siclog@
    f_Delay(v_Delay2Min);
    
    //@siclog "Step 19A" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //  Check: Does the test result of generic test procedure in TS 36.508
    // subclause 6.4.2.2 indicate that the UE is in state Registered, Idle Mode on Cell A?
    //@siclog "Step 20" siclog@
    f_EUTRA_508Check_IdleState(eutra_CellA);
    
    //@siclog "Step 21" siclog@
    select (v_OtherPTC) { // send trigger to other RAT to change its power level too
      case ("UTRAN") {
        f_EUTRA_SetCellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE);
        f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger);
        f_IRAT_WaitForCoOrd_Trigger(UTRAN); // wait for trigger from UTRAN side
      }
      case ("GERAN") {
        f_EUTRA_SetCellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE);
        f_IRAT_SendCoOrd(GERAN, cms_IRAT_Trigger);
        f_IRAT_WaitForCoOrd_Trigger(GERAN); // wait for trigger from GERAN side
      }
    }
    t_T3323.stop; // @sic R5-120768 sic@
    
  }// function fl_tc_9_2_3_3_5_Body

  function f_TC_9_2_3_3_5a_EUTRA() runs on EUTRA_PTC
  { /* Periodic Location Update */
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c10);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    
    f_UT_ConfigureCombinedAttach(UT);

    f_EUTRA_SendTriggerToOtherRAT (true); // Wait for other RAT to do preamble @sic R5s120584 sic@
  //  f_EUTRA_PreambleOtherRAT(eutra_CellA, Combined, true);   // Preamble: UE is Switched OFF (state 1) @sic R5s120639 subject to prose CR approval sic@
  //  f_EUTRA_UE_Detach_SwitchOffUe(eutra_CellA, RRC_IDLE);
    f_EUTRA_TestBody_Set(true);
    
    f_EUTRA_SetCellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE);
    f_EUTRA_SendTriggerToOtherRAT();

    fl_TC_9_2_3_3_5a_Body();

    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E1_IDLE, Combined); // @sic R5-121774 sic@
  } // function f_TC_9_2_3_3_5a_EUTRA

  function fl_TC_9_2_3_3_5a_Body() runs on EUTRA_PTC
  {
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;
    var NAS_MSG_Indication_Type v_NasInd;
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity);
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var template (omit) LocAreaId v_LAI_1 := f_EUTRA_GetCellLAI(eutra_CellA, Combined); //LAI-1
    var TrackingAreaCode v_Tac := f_EUTRA_CellInfo_GetTAC(eutra_CellA);
    var template (value) TrackingAreaIdList v_TaiList := cds_TAIListNonConsecutive_tlv(v_PLMN, { bit2oct(v_Tac) });
    var template (omit) AccessPointName v_APN := omit;
    var boolean v_EIT_Flag := false;
    var template (omit) MobileIdentity v_MSId := f_GetMSId(Combined);
    var template (omit) AdditionalUpdateResult v_AdditionalUpdateResult;
    
    //@siclog "Step 10" siclog@
    //  The SS sets the cell type of CellA to "Serving Cell"
    //  The cell type of Cell 24 is set to Suitable Neighbour Cell
    if (f_EUTRA_GetOtherRAT() == "UTRAN") {
      f_EUTRA_InterRAT_InitialiseAuthParams(UTRAN);
    } else if (f_EUTRA_GetOtherRAT() == "GERAN") {
      f_EUTRA_InterRAT_InitialiseAuthParams(GERAN);
    }
    f_EUTRA_SetCellPower(eutra_CellA, tsc_ServingCellRS_EPRE);
    
    //@siclog "Step 11" siclog@
    //+   The UE camps on E-UTRAN cell A and transmits a TRACKING AREA UPDATE REQUEST message.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_TAU_RequestIdleMobilityDiffRAT(tsc_EpsUpdate_Combined_IMSIAttach, // @sic R5s120639 subject to prose CR approval sic@
                                                                                                     ?,
                                                                                                     cr_508_EPS_BearerContextStatusTAUReq,
                                                                                                     f_GetAdditionalUpdateType (Combined),
                                                                                                     tsc_NasKsi_MappedSecurityContext)));
    
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    v_AdditionalUpdateResult := f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType);
      
    //@siclog "Step 12 - 15" siclog@
    //+   The SS transmits an AUTHENTICATION REQUEST message to initiate the EPS authentication and AKA procedure.
    //+   The UE transmits an AUTHENTICATION RESPONSE message and establishes mutual authentication.
    //+   The SS transmits a NAS SECURITY MODE COMMAND message to activate NAS security.
    //+   The UE transmits a NAS SECURITY MODE COMPLETE message and establishes the initial security configuration.
    v_APN := f_EUTRA_Authentication_NAS_AS_Security(eutra_CellA, v_EIT_Flag, '00'O);
    
    //@siclog "Step 16" siclog@
    // +  SS responds with TRACKING AREA UPDATE ACCEPT message including a valid TAI list containing the TAI
    //    of Cell A; with PLMN ID of Cell A included in the GUTI. The UE sets the TIN = GUTI.
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(tsc_EpsUpdate_Combined_TaLaUpdate, // @sic R5-121774 sic@
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti1_Params),
                                                                  v_TaiList,
                                                                  v_EpsBearerCtxtStatus,
                                                                  v_LAI_1,
                                                                  v_MSId,
                                                                  v_AdditionalUpdateResult))));
    
    //@siclog "Step 17" siclog@
    //  The UE transmits a TRACKING AREA UPDATE COMPLETE message
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    
    //@siclog "Step 18" siclog@
    // The SS releases the RRC Connection
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //@siclog "Step 19-28 Void" siclog@
    f_EUTRA_SendTriggerToOtherRAT(true);
    
  } // function fl_TC_9_2_3_3_5a_Body

  function f_TC_9_2_3_3_6_EUTRA() runs on EUTRA_PTC
  { /* E-UTRAN RRC connection failure / reselection of UTRAN cell / NAS signaling to release old S1 interface connection (multi RAT test) */
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c4);         // c1 doesn't initialise the UTRAN PTC, so have to configure c4 first, then change it
    f_EUTRA_ChangeSysinfoCombination(eutra_CellA, c1);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def(eutra_CellA); // Enter state 3, dedicated DRB established
    f_EUTRA_SendAuthParameters(eutra_CellA, UTRAN);
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_3_6_Body();
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_ReleaseAllCells();
  } // function f_TC_9_2_3_3_6_EUTRA

  function fl_TC_9_2_3_3_6_Body() runs on EUTRA_PTC
  {
    timer t_Wait;
    
    //@siclog "Step 1" siclog@
    f_EUTRA_SetCellPower(eutra_CellA, tsc_NonSuitableOffCellRS_EPRE);
    f_Delay(f_EUTRA_SetTimerToleranceMax(eutra_CellA, nasTimer, 1.5));    // T310 @sic R5-121099 sic@
    
    //@siclog "Step 2" siclog@
    f_EUTRA_SetCellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE);
    f_IRAT_SendCoOrd(UTRAN, cms_IRAT_Trigger); // Send 2nd trigger to UTRAN side
    f_Delay(f_EUTRA_SetTimerToleranceMax(eutra_CellA, nasTimer, 10.0));   // T311
    
    //  Check: does the UE transmit a RRCConnectionReestablishmentRequest messages within the next 60s?
    //@siclog "Step 3" siclog@
    t_Wait.start(f_EUTRA_SetTimerToleranceMax(eutra_CellA, nonProtocolTimer, 60.0));
    alt {
      [] SRB.receive(car_SRB0_RrcPdu_IND(eutra_CellA,
                                         cr_508_RRCConnectionReestablishmentRequest(?, ?, cr_ReestablishmentCause_Any)))
        {
          f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 3");
        }
      [] t_Wait.timeout {   }
    }
    
    f_IRAT_WaitForCoOrd_Trigger(UTRAN); // wait for trigger from UTRAN side
    
  }// function fl_tc_9_2_3_3_6_Body

  function f_TC_9_2_3_4_1_EUTRA() runs on EUTRA_PTC
  { /* @desc TAU/RAU procedure for inter-system cell re-selection between A/Gb and S1 modes */
    
    var template (value) PLMN_Identity v_HPLMN_987_65 := { mcc := {9, 8, 7},  mnc := {6, 5} };
    var template (value) GutiParameters_Type v_Guti_Parameters := cs_Guti(v_HPLMN_987_65, 65244, 186);
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c5);
    f_EUTRA_CellInfo_SetGuti(eutra_CellB, v_Guti_Parameters);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    
    // Preamble: The UE is in state Switched OFF (state 1)
    f_EUTRA_Preamble_InterRAT(eutra_CellB, STATE2_IDLEUPDATE, GERAN);
    f_EUTRA_UE_Detach_SwitchOffUe(eutra_CellB, RRC_IDLE);
    
    // switch off cell B.
    f_EUTRA_SetCellPower(eutra_CellB, tsc_NonSuitableOffCellRS_EPRE);
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_4_1_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E2_T3440); // @sic R5s110007 sic@
    
  } // function f_TC_9_2_3_4_1_EUTRA

  function fl_TC_9_2_3_4_1_Body() runs on EUTRA_PTC
  {
    var NAS_MSG_Indication_Type v_NasInd;
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;
    var IRAT_CoOrd_Auth_Type v_CoOrd_AuthParams;
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(NORMAL); // @sic R5s110176 sic@
    var EPS_UpdateTypeValue v_UpdateInd := f_GetEPSTAUType(NORMAL);
    
    // ==========================================================================
    // initialize component specific data structures
    // ==========================================================================
    // get all data which are required for a GUTI
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var GutiParameters_Type v_Guti_CellB_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellB);
    var GutiParameters_Type v_Guti2_Params := f_CreateGutiParamsWithUpdatedSTmsi(v_Guti1_Params);
    var GutiParameters_Type v_Guti3_Params := f_CreateGutiParamsWithUpdatedSTmsi(v_Guti2_Params);
    var O10_Type v_GutiStringFromGERAN;
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity);
    var NAS_Tac v_TAC := bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellA));
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_Lac v_LAC := f_EUTRA_CellInfo_GetLocationAreaCode(eutra_CellA);
    var template (omit) LocAreaId v_LAI := f_GetLAI(v_PLMN, v_LAC, NORMAL); // @sic R5s110176 sic@
    var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get();
    var Common_AuthenticationParams_Type v_Auth_Params;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType();
    v_SecurityParams.AuthParams.KeySeq := v_SecurityParams.KSIasme; // The KSIasme value needs to be passed over as it will be used as the GERAN CKSN
    f_EUTRA_Security_Set(v_SecurityParams);
    v_Auth_Params := f_AuthenticationInit(v_SecurityParams.AuthParams);
    f_EUTRA_SendAuthCoOrdParameters(GERAN, eutra_CellA, v_Auth_Params);
    
    //+ Steps 1 to step 9 are implemented in GERAN side.
    
    //@siclog "Step 10 - 12 Void" siclog@
    
    //@siclog "Step 13" siclog@
    //+   The signal strength of Cell A is raised to that of the Serving Cell and that of Cell 24 is lowered to that of a Suitable Neighbour Cell as defined in table 6.2.2.1-1 of TS 36.508.
    //    Note: Cell 24 is still suitable but the UE is expected to select Cell A.
    v_CoOrd_AuthParams := f_IRAT_WaitForCoOrd_AuthParams(GERAN);
    f_EUTRA_SetCellPower(eutra_CellA, tsc_ServingCellRS_EPRE);
    v_GutiStringFromGERAN := v_PLMN & bit2oct(f_BitstringReplaceMSB(v_CoOrd_AuthParams.GutiParams.MME_GroupId, '0'B)) & bit2oct(v_CoOrd_AuthParams.GutiParams.MME_Code) & bit2oct(v_CoOrd_AuthParams.GutiParams.M_TMSI); // @sic R5s120356 sic@
    
    //@siclog "Step 14 Void" siclog@
    
    //@siclog "Step 15" siclog@
    //+   Check: does the UE send an RRCConnectionRequest with the InitialUE-Identity set to "randomValue" and the establishmentcause
    //     set to MO-signalling on Cell A?
    // Editor's Note: Cell reselection to E-UTRAN might not occur until the GPRS READY timer has expired. Hence this step might occur up to 40 seconds after step 13.
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_CellA, cr_EstablishmentCause_MoSignalling, cr_InitialUE_Identity_NotSTMSI);   /* @sic R5-120721 change 3 sic@ */
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 15"); // @sic R5-123131 sic@
    
    //@siclog "Step 16" siclog@
    //+   The SS responds with RRCConnectionSetup
    f_EUTRA_RRC_ConnectionSetup_Def(eutra_CellA);
    
    //@siclog "Step 17" siclog@
    //+   Check: does the UE send an RRCConnectionSetupComplete with the mmegi and mmec set to the values derived from the mapped RAI and P-TMSI; [1,P]
    //  Check: are the contents of the TRACKING AREA UPDATE REQUEST with the correct parameters? [2,3,P]
    v_NasInd := f_EUTRA_RRCConnectionSetupComplete_Def(eutra_CellA,                                       // @sic R5s120121 MCC160 implementation sic@
                                                       cr_508_RRCConnectionSetupComplete(v_RRC_TI,
                                                                                         ?,
                                                                                         cr_RegisteredMME(*,
                                                                                                          f_BitstringReplaceMSB(v_CoOrd_AuthParams.GutiParams.MME_GroupId, '0'B), // @sic R5s120356 sic@
                                                                                                          v_CoOrd_AuthParams.GutiParams.MME_Code)),
                                                       cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                         cdr_TAU_Request_OldandAdditionalGuti(v_UpdateType,
                                                                                                              f_EUTRA_SecurityKSIasme_Get(),
                                                                                                              cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                              v_AdditionalUpdateType,
                                                                                                              cs_MobileIdentityGuti(omit, v_GutiStringFromGERAN),
                                                                                                              cr_CiphKeySeqNum('8'H, v_CoOrd_AuthParams.AuthPS.KeySeq),
                                                                                                              f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti_CellB_Params),
                                                                                                              cr_UeRadioCap)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 17");
    
    //@siclog "Step 18" siclog@
    //+   The SS sends TRACKING AREA UPDATE ACCEPT
    //  Note: the default message contents cause the allocation of a new GUTI and new TAI list
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    f_EUTRA_CellInfo_SetGuti(eutra_CellA, v_Guti2_Params);
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(v_UpdateType,
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti2_Params),
                                                                  cds_TAIListNonConsecutive_tlv(v_PLMN,
                                                                                                { '0001'O, '0002'O }), // TAC1=1, TAC2=2
                                                                  v_EpsBearerCtxtStatus,
                                                                  v_LAI,
                                                                  f_GetMSId(NORMAL), // @sic R5s110176 sic@
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)))));
    //+  The UE sends TRACKING AREA UPDATE COMPLETE
    //@siclog "Step 19" siclog@
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    
    //+ the SS releases the RRC connection
    //@siclog "Step 20" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //+ Cell 24 is switched off
    //@siclog "Step 21" siclog@
    
    //@siclog "Step 22" siclog@
    // The signal strength of Cell 26 is raised to that of the Serving Cell and that of Cell A is lowered to that of a Suitable Neighbour Cell as defined in table 6.2.2.1-1 of TS 36.508.
    // Note: Cell A is still suitable but the UE is expected to select Cell 26.
    f_EUTRA_SetCellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE); // @sic R5s120218 sic@
    
    v_SecurityParams := f_EUTRA_Security_Get();
    v_SecurityParams.AuthParams.KeySeq := v_SecurityParams.KSIasme;
    f_EUTRA_SendAuthCoOrdParameters(GERAN, eutra_CellA, v_SecurityParams.AuthParams);
    
    
    //+ Step 21 to step 26 is implemented in GERAN side
    
    //@siclog "Step 27" siclog@
    //+  The signal strength of Cell A is raised to that of the Serving Cell and that of Cell 26 is lowered to that of a Suitable Neighbour Cell as defined in table 6.2.2.1-1 of TS 36.508.
    //   Note: Cell 26 is still suitable but the UE is expected to select Cell A.
    v_CoOrd_AuthParams := f_IRAT_WaitForCoOrd_AuthParams(GERAN);
    v_GutiStringFromGERAN := v_PLMN & bit2oct(f_BitstringReplaceMSB(v_CoOrd_AuthParams.GutiParams.MME_GroupId, '0'B)) & bit2oct(v_CoOrd_AuthParams.GutiParams.MME_Code) & bit2oct(v_CoOrd_AuthParams.GutiParams.M_TMSI); // @sic R5s120356 sic@
    f_EUTRA_SetCellPower(eutra_CellA, tsc_ServingCellRS_EPRE);
    
    if (v_UpdateInd == tsc_EpsUpdate_Combined_TaLaUpdate) // @sic R5s120218 sic@
    {
      v_UpdateInd := tsc_EpsUpdate_Combined_IMSIAttach;
    }
    
    //@siclog "Step 27A" siclog@
    // Check: does the UE send on Cell A an RRCConnectionSetupComplete with the selectedPLMN-identity indicating the registered MME
    // (i.e. the PLMN in the GUTI allocated in step 18), and, the mmegi and mmec are set to the values in the GUTI allocated in step 18? [1,P]
    // Check: does the UE send a TRACKING AREA UPDATE REQUEST with the correct parameters? [2,6,P]
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_CellA, mo_Signalling, cr_InitialUE_Identity_S_TMSI (v_Guti2_Params.MME_Code, v_Guti2_Params.M_TMSI));    // @sic R5-120721 change 3, R5-123474 sic@
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 27A"); // @sic R5-123474 sic@
    
    //@siclog "Step 27B" siclog@
    f_EUTRA_RRC_ConnectionSetup_Def(eutra_CellA);
    
    //@siclog "Step 28" siclog@
    v_NasInd := f_EUTRA_RRCConnectionSetupComplete_Def(eutra_CellA,                                       // @sic R5s120121 MCC160 implementation sic@
                                                       cr_508_RRCConnectionSetupComplete(v_RRC_TI,
                                                                                         ?,
                                                                                         omit), // @sic R5-123474 sic@
                                                       cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                         cdr_TAU_Request_OldandAdditionalGuti(v_UpdateInd,
                                                                                                              f_EUTRA_SecurityKSIasme_Get(),
                                                                                                              cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                              v_AdditionalUpdateType,
                                                                                                              cs_MobileIdentityGuti(omit, v_GutiStringFromGERAN),
                                                                                                              *,
                                                                                                              f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti2_Params),
                                                                                                              omit)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 28");
    
    //@siclog "Step 29" siclog@
    // The SS sends TRACKING AREA UPDATE ACCEPT
    // Note: the default message contents cause the allocation of a new GUTI.
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                     cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(v_UpdateType,
                                                                          f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti3_Params),
                                                                  cds_TAIListNonConsecutive_tlv(v_PLMN, {v_TAC }),
                                                                          v_EpsBearerCtxtStatus,
                                                                          v_LAI,
                                                                  f_GetMSId(NORMAL), // @sic R5s110176 sic@
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType)))));
    //@siclog "Step 30" siclog@
    //The UE sends TRACKING AREA UPDATE COMPLETE
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    f_EUTRA_CellInfo_SetGuti(eutra_CellA, v_Guti3_Params);
    f_IRAT_SendCoOrd(GERAN, cms_IRAT_Trigger); //send Trigger to release GERAN cell.
    
  } // function fl_TC_9_2_3_4_1_Body

  } // end of group TestcaseImplementations

}
