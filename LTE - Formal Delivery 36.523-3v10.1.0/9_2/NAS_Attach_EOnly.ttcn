// ***************************************************************************
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2012, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3v10.1.0
// * $Date: 2012-09-05 15:12:54 +0200 (Wed, 05 Sep 2012) $
// * $Rev: 7330 $
// ***************************************************************************

module NAS_Attach_EOnly {

  import from EUTRA_RRC_ASN1_Definitions language "ASN.1:1997" all;
  import from CommonDefs all;
  import from EPS_NAS_Constants all;
  import from EPS_NAS_MsgContainers all;
  import from EPS_NAS_Templates all;
  import from EPS_NAS_TypeDefs all;
  import from EUTRA_ASP_SrbDefs all;
  import from EUTRA_AspCommon_Templates all;
  import from EUTRA_AuxiliaryFunctions all;
  import from EUTRA_BandDependentParam all;
  import from EUTRA_CSG_Functions all;
  import from EUTRA_CellCfg_Templates all;
  import from EUTRA_CellInfo all;
  import from EUTRA_CellInfoFrequency all;
  import from EUTRA_CommonDefs all;
  import from EUTRA_CommonProcedures all;
  import from EUTRA_Component all;
  import from EUTRA_ConfigurationSteps all;
  import from EUTRA_NASCommonFunctions all;
  import from EUTRA_NASCommonTemplates all;
  import from EUTRA_NASSteps all;
  import from EUTRA_Paging all;
  import from EUTRA_Parameters all;
  import from EUTRA_RRCSteps all;
  import from EUTRA_RRC_Templates all;
  import from EUTRA_SRB_Templates all;
  import from EUTRA_SecurityFunctions all;
  import from EUTRA_SecuritySteps all;
  import from EUTRA_SysInfo_Templates all;
  import from EUTRA_Timing all;
  import from IP_PTC_CtrlMsgs all;
  import from L2_CommonFunctions all;
  import from NAS_AuxiliaryDefsAndFunctions all;
  import from NAS_CommonTemplates all;
  import from NAS_CommonTypeDefs all;
  import from Parameters all;
  import from UpperTesterFunctions all;

  group LocalTemplates {

  template (value) PartialTaiType cs_MultiplePlmnsList (template (value) PlmnAndTacs p_PlmnAndTacs) :=
  { /* @status    APPROVED */
    type2List := {
      {
        plmnAndTacs := p_PlmnAndTacs
      }
    }
  };

  template (value) PartialTai cs_PartialTAI(NAS_PlmnId  p_PlmnId,
                                            NAS_Tac p_Tac) :=
  { /* @status    APPROVED */
    plmnId := p_PlmnId,
    tac := p_Tac
  };

  template (value) ListOfPartialTaiList cs_PartialTaiListConsecutive (integer p_NumOfTACs, template(value)  PartialTai p_PartialTAI) :=
  { /* @status    APPROVED */
    spareBit         := tsc_Spare1,
    typeOfList       := tsc_ConsecutiveTacs,
    numberOfElements := int2bit((p_NumOfTACs - 1), 5),
    partialTaiList := {
      type1List := {
        {
          partialTac := p_PartialTAI
        }
      }
    }
  };

  template (value) ListOfPartialTaiList cs_PartialTaiListMultiplePlmns2 (template(value)  PartialTaiType p_PartialTAIList) :=
  {  /* @status    APPROVED */
    spareBit         := tsc_Spare1,
    typeOfList       := tsc_MultiplePlmns,
    numberOfElements := '00001'B, // Value 00001 means a list of 2 cells, see 24.301 Table 9.9.3.33.1
    partialTaiList   := p_PartialTAIList
  };

  template (value) ListOfPartialTaiList cs_PartialTaiListMultiplePlmns3 (template(value)  PartialTaiType p_PartialTAIList) :=
  { /* @status    APPROVED */
    spareBit         := tsc_Spare1,
    typeOfList       := tsc_MultiplePlmns,
    numberOfElements := '00010'B, // Value 00010 means a list of 3 cells, see 24.301 Table 9.9.3.33.1
    partialTaiList   := p_PartialTAIList
  };

  template (value) TrackingAreaIdList cs_TAIListMultiplePlmns2 (template(value)  PartialTaiType p_PartialTAI) :=
  { /* @status    APPROVED */
    iei := omit,
    iel := int2oct(11, 1),
    listOfPartialTais := {cs_PartialTaiListMultiplePlmns2 (p_PartialTAI)}
  };

  template (value) TrackingAreaIdList cs_TAIListMultiplePlmns3 (template(value) PartialTaiType p_MultiplePlmnPartialTAI,
                                                                integer p_NumOfConsecutiveTACs,
                                                                template(value)  PartialTai p_ConsecutivePartialTAI,
                                                                NAS_PlmnId  p_NonConsecutivePlmnId,
                                                                NAS_TacList p_NonConsecutiveTacList) :=
  {  /* @status    APPROVED */
    iei := omit,
    iel := int2oct(32, 1),
    listOfPartialTais := {cs_PartialTaiListMultiplePlmns3 (p_MultiplePlmnPartialTAI),
                          cs_PartialTaiListConsecutive (p_NumOfConsecutiveTACs, p_ConsecutivePartialTAI),
                          cs_ListNonConsecutivePartialTaiList (p_NonConsecutivePlmnId, p_NonConsecutiveTacList)
    }
  };

  } // end of group LocalTemplates

  group LocalFunctions {

  function fl_InitSIB5Info_92111a(EUTRA_CellId_Type p_CellId) runs on EUTRA_PTC  return template (value) SystemInformationBlockType5
  {
    var Ul_Bandwidth_Type v_UL_Bandwidth := f_EUTRA_CellInfo_GetUL_ChBandwidth (p_CellId);
    var Dl_Bandwidth_Type v_DL_Bandwidth := f_EUTRA_CellInfo_GetDL_ChBandwidth (p_CellId);
    var Frequency_fList_Type v_Frequency_PrimaryBand := f_EUTRA_InitFrequency_f1Tof4 (px_ePrimaryFrequencyBand, v_DL_Bandwidth, v_UL_Bandwidth);
    var ChannelBandwidthDependency_Type v_ChannelBandwidthDependency := f_EUTRA_BandDependentParam ( v_DL_Bandwidth, v_UL_Bandwidth );
    var CarrierFreqEUTRA v_EUTRA_CarrierFreq1;
    var CarrierFreqEUTRA v_EUTRA_CarrierFreq2;
    var template (value) InterFreqCarrierFreqList v_InterFreqCarrierList;
    
    select (p_CellId) {
      case (eutra_CellA, eutra_CellB, eutra_CellC) {
        v_EUTRA_CarrierFreq1 := v_Frequency_PrimaryBand.f2;
        v_EUTRA_CarrierFreq2 := v_Frequency_PrimaryBand.f3;
      }
      case (eutra_CellI, eutra_CellK) {
        v_EUTRA_CarrierFreq1 := v_Frequency_PrimaryBand.f1;
        v_EUTRA_CarrierFreq2 := v_Frequency_PrimaryBand.f2;
      }
      case(eutra_CellE, eutra_CellG, eutra_CellH) {
        v_EUTRA_CarrierFreq1 := v_Frequency_PrimaryBand.f1;
        v_EUTRA_CarrierFreq2 := v_Frequency_PrimaryBand.f3;
      }
      case else {
        FatalError (__FILE__, __LINE__, "invalid CellId");
      }
    }
    v_InterFreqCarrierList := {
      cs_InterFreqCarrierFreq ( v_EUTRA_CarrierFreq1, v_ChannelBandwidthDependency.AllowedMeasBandwidth),
      cs_InterFreqCarrierFreq ( v_EUTRA_CarrierFreq2, v_ChannelBandwidthDependency.AllowedMeasBandwidth)
    };
    return cs_508_SystemInformationBlockType5_Def(v_InterFreqCarrierList);
  }

  function fl_EUTRA_CellInfo_SetFrequency(EUTRA_CellId_Type p_CellId,
                                          Frequency_IE_Type p_Frequency_IE) runs on EUTRA_PTC
  {
    var template (value) EUTRA_CellInfo_Type v_CellInfo := f_EUTRA_CellInfo_Get(p_CellId);
    v_CellInfo.Frequency := p_Frequency_IE;
    f_EUTRA_CellInfo_Set (p_CellId, v_CellInfo);
  }

  } // end of group LocalFunctions

  group TestcaseImplementations {

  function f_TC_9_2_1_1_1_EUTRA() runs on EUTRA_PTC
  { /* @desc Attach procedure for EPS services. Attach Procedure / Success (valid GUTI). */
    
    var GutiParameters_Type v_Guti_Params;
    var GutiParameters_Type v_Guti_Old_Params;
    
    // @sic R5s106627 sic@
    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c1); // @sic R5-101121 sic@ Cell H is just used for preamble
    
    // Initial conditions state that UE is updated to Cell H parameters  // @sic R5-101121 sic@
    // so change this now to force Attach Accept to contain TAC2
    f_EUTRA_CellInfo_SetTAC(eutra_CellA, oct2bit(tsc_TAC2));
    v_Guti_Params := f_EUTRA_CellInfo_GetGuti (eutra_CellA); // @sic R5-101121 sic@
    v_Guti_Old_Params := f_EUTRA_CellInfo_GetGuti (eutra_CellH); // @sic R5-101121 sic@
    f_EUTRA_CellInfo_SetGuti(eutra_CellA, v_Guti_Old_Params);
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    
    f_UT_ConfigureEPSAttach (UT); // @sic R5-103810 sic@

    // Preamble: UE is in state Switched OFF (state 1)
    // ==========================================================================
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE ,-, EPS_Only); // @sic R5s110176 sic@
    
    // now change TAC back again as Cell A is to have TAI-1
    f_EUTRA_CellInfo_SetTAC(eutra_CellA, oct2bit(tsc_TAC1));
    f_EUTRA_CellInfo_SetGuti(eutra_CellA, v_Guti_Params); // @sic R5s100008 sic@
    f_EUTRA_ModifySysinfoUE_Off(eutra_CellA);
    
    f_EUTRA_TestBody_Set(true);
    fl_TC_9_2_1_1_1_Body(v_Guti_Params, v_Guti_Old_Params); // @sic R5-101121 sic@
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E1_IDLE, EPS_Only); //@sic R5-103849,  R5s110176 sic@
  }

  function f_TC_9_2_1_1_1a_EUTRA() runs on EUTRA_PTC
  { // @desc Attach Procedure / Success (last visited TAI, TAI list and equivalent PLMN list handling)
    
    const NAS_Tac tsc_TAC27  := '0027'O;
    const NAS_Tac tsc_TAC_FFF0  := 'FFF0'O;
    const NAS_Tac tsc_TAC_FFF9  := 'FFF9'O;
    template (value) PLMN_Identity cs_HPLMN_310_102 := { mcc := {3,1,0},  mnc :={1,0,2} };
    template (value) PLMN_Identity cs_HPLMN_004_07 := { mcc := {0,0,4},  mnc :={0,7} };
    template (value) PLMN_Identity cs_HPLMN_004_02 := { mcc := {0,0,4},  mnc :={0,2} };
    template (value) PLMN_Identity cs_HPLMN_316_002 := { mcc := {3,1,6},  mnc :={0,0,2} };
    
    // Configure c1 here as cells G & H are not initialised in the generic function
    // SIB 5 will then be configured correctly below for all cells used in this testcase
    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c1);  // @sic R5s106627, R5s100803 sic@
    f_EUTRA_CellInfo_SetTAC(eutra_CellA, oct2bit(tsc_TAC2)); // @sic R5s110168 change 2.9 sic@
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellA, cs_HPLMN_Def );
    f_EUTRA_CellInfo_SetTAC(eutra_CellI, oct2bit(tsc_TAC2));
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellI, cs_HPLMN_310_102 );
    f_EUTRA_CellInfo_SetTAC(eutra_CellB, oct2bit(tsc_TAC1));
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellB, cs_HPLMN_Def );
    f_EUTRA_CellInfo_SetTAC(eutra_CellC, oct2bit(tsc_TAC27));
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellC, cs_HPLMN_Def );
    f_EUTRA_CellInfo_SetTAC(eutra_CellG, oct2bit(tsc_TAC_FFF0));
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellG, cs_HPLMN_004_07 );
    f_EUTRA_CellInfo_SetTAC(eutra_CellH, oct2bit(tsc_TAC_FFF9));
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellH, cs_HPLMN_004_07 );
    f_EUTRA_CellInfo_SetTAC(eutra_CellK, oct2bit(tsc_TAC3));
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellK, cs_HPLMN_316_002 );
    f_EUTRA_CellInfo_SetTAC(eutra_CellE, oct2bit(tsc_TAC3));
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellE, cs_HPLMN_004_02 );
    
    // The SIB5 for every cell is specific for this test case
    f_EUTRA_ChangeSIB5_Combination3 (eutra_CellA, fl_InitSIB5Info_92111a (eutra_CellA));
    f_EUTRA_ChangeSIB5_Combination3 (eutra_CellI, fl_InitSIB5Info_92111a (eutra_CellI));
    f_EUTRA_ChangeSIB5_Combination3 (eutra_CellB, fl_InitSIB5Info_92111a (eutra_CellB));
    f_EUTRA_ChangeSIB5_Combination3 (eutra_CellC, fl_InitSIB5Info_92111a (eutra_CellC));
    f_EUTRA_ChangeSIB5_Combination3 (eutra_CellG, fl_InitSIB5Info_92111a (eutra_CellG));
    f_EUTRA_ChangeSIB5_Combination3 (eutra_CellH, fl_InitSIB5Info_92111a (eutra_CellH));
    f_EUTRA_ChangeSIB5_Combination3 (eutra_CellK, fl_InitSIB5Info_92111a (eutra_CellK));
    f_EUTRA_ChangeSIB5_Combination3 (eutra_CellE, fl_InitSIB5Info_92111a (eutra_CellE)); // @sic R5s100545 sic@
    
    // create cell and send out system information
    //Cell A
    f_EUTRA_CellConfig_Def(eutra_CellA);
    
    //Cell I
    f_EUTRA_CellConfig_Def(eutra_CellI);
    
    //Cell B
    f_EUTRA_CellConfig_Def(eutra_CellB);
    
    //Cell C
    f_EUTRA_CellConfig_Def(eutra_CellC);
    
    //Cell G
    f_EUTRA_CellConfig_Def(eutra_CellG);
    
    //Cell H
    f_EUTRA_CellConfig_Def(eutra_CellH);
    
    //Cell K
    f_EUTRA_CellConfig_Def(eutra_CellK);
    
    //Cell E
    f_EUTRA_CellConfig_Def(eutra_CellE);
    
    // Preamble: UE is in state Switched OFF (state 1)
    // ==========================================================================
    // make sure that UE has a valid GUTI before starting with actual test steps
    f_EUTRA_Preamble (eutra_CellA, STATE2_IDLEUPDATE);
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE ,-,NORMAL); // @sic R5s110176 sic@
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_1_1_1a_and9_2_1_1_1b_Body(tsc_SuitableCellRS_EPRE); // @sic R5-121740 sic@
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E2_T3440, NORMAL);  // @sic R5s110176, R5s110007 sic@
  }

  function f_TC_9_2_1_1_1b_EUTRA() runs on EUTRA_PTC
  { /* Procedure / Success / Last visited TAI, TAI list and equivalent PLMN list handling / Single Frequency operation */
    
    const NAS_Tac tsc_TAC27  := '0027'O;
    const NAS_Tac tsc_TAC_FFF0  := 'FFF0'O;
    const NAS_Tac tsc_TAC_FFF9  := 'FFF9'O;
    var Frequency_IE_Type v_Frequency_IE;
    template (value) PLMN_Identity cs_HPLMN_310_102 := { mcc := {3,1,0},  mnc :={1,0,2} };
    template (value) PLMN_Identity cs_HPLMN_004_07 := { mcc := {0,0,4},  mnc :={0,7} };
    template (value) PLMN_Identity cs_HPLMN_004_02 := { mcc := {0,0,4},  mnc :={0,2} };
    template (value) PLMN_Identity cs_HPLMN_316_002 := { mcc := {3,1,6},  mnc :={0,0,2} };
    
    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c2);  // @sic R5s106627, R5s100803 sic@

    v_Frequency_IE := f_EUTRA_CellInfo_GetFrequencyIEs (eutra_CellA); // @sic R5s120409 sic@

    f_EUTRA_CellInfo_SetTAC(eutra_CellA, oct2bit(tsc_TAC2)); // @sic R5s110168 change 2.9 sic@
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellA, cs_HPLMN_Def);
    f_EUTRA_CellInfo_SetTAC(eutra_CellI, oct2bit(tsc_TAC2));
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellI, cs_HPLMN_310_102);
    f_EUTRA_CellInfo_SetTAC(eutra_CellB, oct2bit(tsc_TAC1));
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellB, cs_HPLMN_Def);
    f_EUTRA_CellInfo_SetTAC(eutra_CellC, oct2bit(tsc_TAC27));
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellC, cs_HPLMN_Def);
    f_EUTRA_CellInfo_SetTAC(eutra_CellG, oct2bit(tsc_TAC_FFF0));
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellG, cs_HPLMN_004_07);
    f_EUTRA_CellInfo_SetTAC(eutra_CellH, oct2bit(tsc_TAC_FFF9));
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellH, cs_HPLMN_004_07);
    f_EUTRA_CellInfo_SetTAC(eutra_CellK, oct2bit(tsc_TAC3));
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellK, cs_HPLMN_316_002);
    f_EUTRA_CellInfo_SetTAC(eutra_CellE, oct2bit(tsc_TAC3));
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellE, cs_HPLMN_004_02);

    // set Frequency for CellI, eutra_CellB, eutra_CellC, eutra_CellG, eutra_CellH, eutra_CellK, eutra_CellE to f1
    fl_EUTRA_CellInfo_SetFrequency(eutra_CellI, v_Frequency_IE);
    fl_EUTRA_CellInfo_SetFrequency(eutra_CellB, v_Frequency_IE);
    fl_EUTRA_CellInfo_SetFrequency(eutra_CellC, v_Frequency_IE);
    fl_EUTRA_CellInfo_SetFrequency(eutra_CellG, v_Frequency_IE);
    fl_EUTRA_CellInfo_SetFrequency(eutra_CellH, v_Frequency_IE);
    fl_EUTRA_CellInfo_SetFrequency(eutra_CellK, v_Frequency_IE);
    fl_EUTRA_CellInfo_SetFrequency(eutra_CellE, v_Frequency_IE);
    
    // create cell and send out system information
    //Cell A
    f_EUTRA_CellConfig_Def(eutra_CellA);
    
    //Cell I
    f_EUTRA_CellConfig_Def(eutra_CellI);
    
    //Cell B
    f_EUTRA_CellConfig_Def(eutra_CellB);
    
    //Cell C
    f_EUTRA_CellConfig_Def(eutra_CellC);
    
    //Cell G
    f_EUTRA_CellConfig_Def(eutra_CellG);
    
    //Cell H
    f_EUTRA_CellConfig_Def(eutra_CellH);
    
    //Cell K
    f_EUTRA_CellConfig_Def(eutra_CellK);
    
    //Cell E
    f_EUTRA_CellConfig_Def(eutra_CellE);
    
    // Preamble: UE is in state Switched OFF (state 1)
    // ==========================================================================
    // make sure that UE has a valid GUTI before starting with actual test steps
    f_EUTRA_Preamble (eutra_CellA, STATE2_IDLEUPDATE);
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE ,-,NORMAL); // @sic R5s110176 sic@
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_1_1_1a_and9_2_1_1_1b_Body(tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE);
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E2_T3440, NORMAL);  // @sic R5s110176, R5s110007 sic@
  }

  function f_TC_9_2_1_1_2_EUTRA() runs on EUTRA_PTC
  {
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1); // @sic R5s106627 sic@
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    
    f_UT_ConfigureEPSAttach (UT); // @sic R5-103810 sic@

    // Preamble: UE is in state Switched OFF (state 1)
    // ==========================================================================
    // make sure that UE has a valid GUTI before starting with actual test steps
    f_EUTRA_Preamble (eutra_CellA, STATE2_IDLEUPDATE, EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_1_1_2_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E4_DEREGISTERED, EPS_Only);  // @sic R5s110176, R5-103875 sic@
  }

  function f_TC_9_2_1_1_7_EUTRA() runs on EUTRA_PTC
  { /* Attach Procedure / Success / list of equivalent PLMNs in the ATTACH ACCEPT message     */
    /* @sic R5s100610 sic@ */
    
    var template (value) CellPowerList_Type v_CellPowerList;
    var Frequency_IE_Type v_FrequencyIEs_CellG, v_FrequencyIEs_CellI, v_FrequencyIEs_CellJ;
    var ChannelBandwidthDependency_Type v_ChannelBandwidthDependency := f_EUTRA_BandDependentParam (px_ePrimaryBandChannelBandwidth,
                                                                                                    f_ConvertDL_BandwidthToUL(px_ePrimaryBandChannelBandwidth));
    
    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c1);  // @sic R5s106627 sic@
    
    // Initialise the frequencies of cell G, I J  @sic R5-110726 sic@
    v_FrequencyIEs_CellG := f_EUTRA_CellInfo_GetFrequencyIEs ( eutra_CellG);
    v_FrequencyIEs_CellI := f_EUTRA_CellInfo_GetFrequencyIEs ( eutra_CellI);
    v_FrequencyIEs_CellJ := f_EUTRA_CellInfo_GetFrequencyIEs ( eutra_CellJ);
    // Change sysinfoCombination of cellA to c3  @sic R5-110726 sic@
    f_EUTRA_ChangeSIB5_Combination3 (
         eutra_CellA,
         cs_508_SystemInformationBlockType5_Def ({
                cs_InterFreqCarrierFreq (v_FrequencyIEs_CellG.UL_DL_Earfcn, v_ChannelBandwidthDependency.AllowedMeasBandwidth ),
                cs_InterFreqCarrierFreq (v_FrequencyIEs_CellI.UL_DL_Earfcn, v_ChannelBandwidthDependency.AllowedMeasBandwidth),
                cs_InterFreqCarrierFreq (v_FrequencyIEs_CellJ.UL_DL_Earfcn, v_ChannelBandwidthDependency.AllowedMeasBandwidth )
                }));
                
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellG);
    f_EUTRA_CellConfig_Def(eutra_CellI);
    f_EUTRA_CellConfig_SRBs_Only(eutra_CellJ);
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellG, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellI, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellJ, tsc_NonSuitableOffCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    f_UT_ConfigureEPSAttach (UT); // @sic R5-103810 sic@
    
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE,-,EPS_Only); // @sic R5s110176 sic@
    //f_IP_Handling_Stop(IP); // @sic R5s110777 sic@ @sic R5s120065: not needed anymore sic@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellI, tsc_ServingCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList ); // @sic R5s110498 sic@
    
    // SS sends Authentication Reject with cause 'PLMN not allowed' to include PLMN3 the "forbidden PLMN list"
    f_EUTRA_Preamble_Reject (eutra_CellI, tsc_Cause_PLMN_NotAllowed, EPS_Only); // @sic R5s110176 sic@ @sic R5s120061 sic@
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_1_1_7_Body();
    // Postamble
    f_EUTRA_TestBody_Set(false);

    v_CellPowerList := {
      cs_CellPower ( eutra_CellJ, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellI, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellG, tsc_NonSuitableOffCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList ); // @sic R5s110498 sic@
    
    f_EUTRA_RmvFbdnPLMN (eutra_CellA, eutra_CellI, EPS_Only); // @sic R5s110176, R5-106675, R5s110498, R5s120347 sic@

    f_EUTRA_Postamble(eutra_CellA, E1_IDLE, EPS_Only);  // @sic R5s110176, R5s110168 change 2.21 sic@


  } // function f_TC_9_2_1_1_7_EUTRA

  function f_TC_9_2_1_1_7a_EUTRA() runs on EUTRA_PTC
  { /* Attach Procedure / Success / List of equivalent PLMNs in the ATTACH ACCEPT message / Single Frequency operation */
    
    var template (value) CellPowerList_Type v_CellPowerList;

    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c2);

    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellB, cs_HPLMN_001_02);
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellC, cs_HPLMN_002_101);

    f_EUTRA_CellInfo_SetTAC(eutra_CellB, oct2bit('0007'O));
    f_EUTRA_CellInfo_SetTAC(eutra_CellC, oct2bit('0009'O));

    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    f_EUTRA_CellConfig_Def(eutra_CellC);
 
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_NonSuitableCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    f_UT_ConfigureEPSAttach (UT);

    // Preamble: UE is in state Switched OFF (state 1)
    // ==========================================================================
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only);
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE,-,EPS_Only);
    //f_IP_Handling_Stop(IP); // @sic R5s110777 sic@ @sic R5s120065: not needed anymore sic@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_ServingCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    // SS sends Authentication Reject with cause 'PLMN not allowed' to include PLMN3 the "forbidden PLMN list"
    f_EUTRA_Preamble_Reject (eutra_CellC, tsc_Cause_PLMN_NotAllowed, EPS_Only);
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_1_1_7a_Body();

    // Postamble
    f_EUTRA_TestBody_Set(false);

    v_CellPowerList := {
      cs_CellPower ( eutra_CellC, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableOffCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );

    f_EUTRA_RmvFbdnPLMN (eutra_CellA, eutra_CellC, EPS_Only);

    f_EUTRA_Postamble(eutra_CellA, E1_IDLE, EPS_Only);
  }

  function f_TC_9_2_1_1_9_EUTRA() runs on EUTRA_PTC
  { // @desc: Attach / rejected / IMSI invalid     */

    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c1);  // @sic R5s106627 sic@
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB); // @sic R5s110593 ch 1 sic@
    if (px_SinglePLMN_Tested == MultiPLMN) { // @sic R5-113681 sic@
      f_EUTRA_CellConfig_Def(eutra_CellG);
    }

    f_UT_ConfigureEPSAttach (UT); // @sic R5-103810 sic@

    // Preamble: UE is in state Switched OFF (state 1)
    // ==========================================================================
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE,-,EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_1_1_9_and_10_Body(tsc_EmmCause_IllegalUe);
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellB, E2_CONNECTED,EPS_Only);  // @sic R5s110176, R5-105005, R5s100538, R5-113681 sic@
  }// function f_TC_9_2_1_1_9_EUTRA

  function f_TC_9_2_1_1_10_EUTRA() runs on EUTRA_PTC
  { // @desc: Attach / rejected / IMSI invalid

    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c1);  // @sic R5s106627 sic@

    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);  // @sic R5s110593 ch 2 sic@
    if (px_SinglePLMN_Tested == MultiPLMN) { // @sic R5-113681 sic@
      f_EUTRA_CellConfig_Def(eutra_CellG);
    }

    f_UT_ConfigureEPSAttach (UT); // @sic R5-103810 sic@

    // Preamble: UE is in state Switched OFF (state 1)
    // ==========================================================================
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE,-,EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_TestBody_Set(true);

    // Note the test is identical to 9.2.1.1.9 except that the reject cause is 'Illegal ME'
    fl_TC_9_2_1_1_9_and_10_Body(tsc_EmmCause_IllegalMe);

    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellB, E2_CONNECTED, EPS_Only); // @sic R5s110176, R5-105005, R5s100538, R5-113681 sic@
  }// function f_TC_9_2_1_1_10_EUTRA

  function f_TC_9_2_1_1_13_EUTRA() runs on EUTRA_PTC
  { /* @desc: Attach / rejected / PLMN not allowed */
    
    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c1, LTE_NAS_Replacef3_f1);  // @sic R5s106627 sic@ @sic R5-121081 sic@
     
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellG);
    f_EUTRA_CellConfig_SRBs_Only(eutra_CellH);
    f_EUTRA_CellConfig_Def(eutra_CellI);

    f_UT_ConfigureEPSAttach (UT); // @sic R5-103810 sic@

    // Preamble
    f_EUTRA_Preamble(eutra_CellG, STATE2_IDLEUPDATE, EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellG, RRC_IDLE ,-, EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_TestBody_Set(true);

    fl_TC_9_2_1_1_13_Body();

    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_UT_AutomaticPLMN_Select ( UT );
    //wait 300 seconds to let UE complete automatic PLMN search
    f_Delay(300.0);
    f_EUTRA_Postamble(eutra_CellG, E1_IDLE, EPS_Only); // @sic R5s110176 sic@
  }// function f_TC_9_2_1_1_13_EUTRA

  function f_TC_9_2_1_1_13a_EUTRA() runs on EUTRA_PTC
  { /* Attach / Rejected / PLMN not allowed / Single Frequency operation */

    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c1);

    // Set TACs and PLMNs
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellA, cs_HPLMN_001_02);
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellB, cs_HPLMN_001_02);
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellC, cs_HPLMN_002_101);

    f_EUTRA_CellInfo_SetTAC(eutra_CellA, oct2bit('0007'O));
    f_EUTRA_CellInfo_SetTAC(eutra_CellB, oct2bit('0008'O));
    f_EUTRA_CellInfo_SetTAC(eutra_CellC, oct2bit('0009'O));

     
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_SRBs_Only(eutra_CellB);
    f_EUTRA_CellConfig_Def(eutra_CellC);

    f_UT_ConfigureEPSAttach (UT);

    // Preamble: UE is in state Switched OFF (state 1)
    // ==========================================================================
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only);
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE ,-, EPS_Only);
    f_EUTRA_TestBody_Set(true);

    fl_TC_9_2_1_1_13a_Body();

    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_UT_AutomaticPLMN_Select (UT);
    //wait 300 seconds to let UE complete automatic PLMN search
    f_Delay(300.0);
    f_EUTRA_Postamble(eutra_CellA, E1_IDLE, EPS_Only);
  }

  function f_TC_9_2_1_1_14_EUTRA() runs on EUTRA_PTC
  {
    // @desc: Attach / rejected / tracking area not allowed */

    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c3);  // @sic R5s106627 sic@

    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    
    f_UT_ConfigureEPSAttach (UT); // @sic R5-103810 sic@

    // Preamble: UE is in state Switched OFF (state 1)
    // ==========================================================================
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE,-,EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_1_1_14_Body();
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E1_IDLE, EPS_Only); // @sic R5s110176 sic@
  }// function f_TC_9_2_1_1_14_EUTRA

  function f_TC_9_2_1_1_15_EUTRA() runs on EUTRA_PTC
  { /* @desc:     Attach / rejected / roaming not allowed in this tracking area */

    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c1);  // @sic R5s106627 sic@

    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellI);
    f_EUTRA_CellConfig_Def(eutra_CellE);
    f_EUTRA_CellConfig_Def(eutra_CellC);

    f_UT_ConfigureEPSAttach (UT); // @sic R5-103810 sic@

    // Preamble: UE is in state Switched OFF (state 1), but updated with GUTI-1, TAI-1
    // ==========================================================================
    f_EUTRA_Preamble(eutra_CellI, STATE2_IDLEUPDATE,EPS_Only);  // @sic R5s110176, R5-106214 sic@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellI, RRC_IDLE,-,EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_TestBody_Set(true);

    fl_TC_9_2_1_1_15_Body();
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellC, E1_IDLE, EPS_Only); // @sic R5s110176 sic@
  }// function f_TC_9_2_1_1_15_EUTRA

  function f_TC_9_2_1_1_15a_EUTRA() runs on EUTRA_PTC
  { /* Attach / Rejected / Roaming not allowed in this tracking area / Single Frequency operation */

    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c1);

    // Set TACs and PLMNs
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellA, cs_HPLMN_002_101);
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellB, cs_HPLMN_002_101);

    f_EUTRA_CellInfo_SetTAC(eutra_CellA, oct2bit('0009'O));
    f_EUTRA_CellInfo_SetTAC(eutra_CellB, oct2bit('000C'O));

    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellB);
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellC);

    f_UT_ConfigureEPSAttach (UT);

    // Preamble: UE is in state Switched OFF (state 1), but updated with GUTI-1, TAI-1
    // ==========================================================================
    f_EUTRA_Preamble(eutra_CellB, STATE2_IDLEUPDATE,EPS_Only);
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellB, RRC_IDLE,-,EPS_Only);
    f_EUTRA_TestBody_Set(true);

    fl_TC_9_2_1_1_15a_Body();
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellC, E1_IDLE, EPS_Only);
  }

  function f_TC_9_2_1_1_16_EUTRA() runs on EUTRA_PTC
  { /* Attach / Rejected / EPS services not allowed in this PLMN */
    
    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c1, LTE_NAS_Replacef3_f1); // @sic R5-121081 sic@
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellG);
    f_EUTRA_CellConfig_SRBs_Only(eutra_CellH);
    f_EUTRA_CellConfig_Def(eutra_CellI);
    
    f_UT_ConfigureEPSAttach (UT); // @sic R5-103810 sic@
    
    f_EUTRA_Preamble(eutra_CellG, STATE2_IDLEUPDATE, EPS_Only);  // @sic R5s110176 sic@ This requires a prose CR R5s100784 !!!
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellG, RRC_IDLE,-,EPS_Only ); // @sic R5s110176 sic@
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_1_1_16_Body ();
    
    f_EUTRA_TestBody_Set(false);

    f_UT_AutomaticPLMN_Select ( UT );
    //wait 300 seconds to let UE complete automatic PLMN search
    f_Delay(300.0);
    f_EUTRA_Postamble(eutra_CellG, E1_IDLE, EPS_Only); // @sic R5s110176 sic@
  } // end f_TC_9_2_1_1_16_EUTRA

  function f_TC_9_2_1_1_16a_EUTRA() runs on EUTRA_PTC
  { /* Attach / Rejected / EPS services not allowed in this PLMN / Single Frequency operation */

    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c1);

    // Set TACs and PLMNs
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellA, cs_HPLMN_001_02);
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellB, cs_HPLMN_001_02);
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellC, cs_HPLMN_002_101);
     
    f_EUTRA_CellInfo_SetTAC(eutra_CellA, oct2bit('0007'O));
    f_EUTRA_CellInfo_SetTAC(eutra_CellB, oct2bit('0008'O));
    f_EUTRA_CellInfo_SetTAC(eutra_CellC, oct2bit('0009'O));

    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_SRBs_Only(eutra_CellB);
    f_EUTRA_CellConfig_Def(eutra_CellC);
    
    f_UT_ConfigureEPSAttach (UT);

    // Preamble: UE is in state Switched OFF (state 1)
    // ==========================================================================
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only);
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE,-,EPS_Only );
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_1_1_16a_Body ();
    
    f_EUTRA_TestBody_Set(false);

    f_UT_AutomaticPLMN_Select ( UT );
    //wait 300 seconds to let UE complete automatic PLMN search
    f_Delay(300.0);
    f_EUTRA_Postamble(eutra_CellA, E1_IDLE, EPS_Only);
  }

  function f_TC_9_2_1_1_17_EUTRA() runs on EUTRA_PTC
  { /* @desc: Attach / rejected / no suitable cells in this TA */
  
    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c1, LTE_NAS_Usef1_f2);  // @sic R5s106627 sic@
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellI);
    f_EUTRA_CellConfig_SRBs_Only(eutra_CellK);
    f_EUTRA_CellConfig_Def(eutra_CellL);
    if (px_SinglePLMN_Tested == MultiPLMN) { // @sic R5-113681 sic@
      f_EUTRA_CellConfig_SRBs_Only(eutra_CellJ);
    }
        
    f_UT_ConfigureEPSAttach (UT); // @sic R5-103810 sic@
    
    // Preamble: UE is in state Switched OFF (state 1)
    // ==========================================================================
    f_EUTRA_Preamble(eutra_CellI, STATE2_IDLEUPDATE, EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellI, RRC_IDLE,-,EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_1_1_17_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellI, E1_IDLE, EPS_Only); // @sic R5s110176 sic@
  }// function f_TC_9_2_1_1_17_EUTRA

  function f_TC_9_2_1_1_18_EUTRA() runs on EUTRA_PTC
  { /* @desc     Attach / Rejected / Not authorized for this CSG */
    
    var CSG_Identity v_CSG_Identity_CellB := '000000000000000000000000010'B;
    var template (value) CellPowerList_Type v_CellPowerList;
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c2);   // @sic R5-121742 sic@
    f_EUTRA_CellInfo_SetTAC(eutra_CellD, oct2bit(tsc_TAC3));
    // create cells
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    f_EUTRA_CellConfig_Def(eutra_CellD);   // @sic R5-121742 sic@

    f_UT_ConfigureEPSAttach (UT); // @sic R5s120262 sic@ @sic R5s120326 sic@ @sic R5s120480 sic@

    // delete the UE's CSG whitelist, supported per test case selection expression
    f_EUTRA_EmptyCSG_AllowedList (eutra_CellB, EPS_Only);  // @sic R5s120102 sic@ @sic R5s120480 sic@

    // modify system information for the CSG cell
    //Set system information combination 7 in cell B
    f_EUTRA_ChangeSysinfoCombination (eutra_CellB, c7);  // @sic R5-121733 sic@
    //Set system information 1 cell B
    f_EUTRA_CellInfo_SetSysInfo_Csg_Ind(eutra_CellB, true);
    f_EUTRA_CellInfo_SetSysInfo_Csg_Id(eutra_CellB, v_CSG_Identity_CellB);
    //Set system information 4 cell B
    f_EUTRA_SetSIB4_CSG_Def (eutra_CellB);  // @sic R5-121733 sic@
    // make the modified system information become active
    f_EUTRA_SS_ConfigureSysinfo (eutra_CellB); // @sic R5s120326 sic@

    // UE gets EPS attached and registers on cell B using manual CSG selection
    f_EUTRA_Manual_CSG_Selection (eutra_CellB, v_CSG_Identity_CellB, EPS_Only); // @sic R5s120013 sic@  @sic R5s120102 sic@ @sic R5s120480 sic@

    v_CellPowerList := {
      cs_CellPower (eutra_CellB, tsc_NonSuitableOffCellRS_EPRE) // @sic R5s120338 sic@
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );

    // Preamble: UE is in state Switched OFF (state 1), but updated with GUTI-1, TAI-1
    // ==========================================================================
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE,-, EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_1_1_18_Body();
    // Postamble
    f_EUTRA_TestBody_Set(false);
    // no entries remaining in the CSG whitelist
    f_EUTRA_Postamble(eutra_CellA, E2_T3440, EPS_Only);  // @sic R5s110176, R5s110007 sic@
    
  }// function f_TC_9_2_1_1_18_EUTRA

  function f_TC_9_2_1_1_20_EUTRA() runs on EUTRA_PTC
  { // @desc: Attach / Abnormal case / Access barred because of access class barring or NAS signalling connection establishment rejected by the network
   
    // @sic R5s106627 sic@
    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c1, LTE_NAS_Usef1_f2); // @sic R5s100398 sic@
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellI);
    f_EUTRA_CellConfig_Def( eutra_CellK ); // @sic R5s100380 sic@

    f_UT_ConfigureEPSAttach (UT); // @sic R5-103810 sic@

    // Preamble: UE is in state Switched OFF (state 1)
    // ==========================================================================

    f_EUTRA_Preamble(eutra_CellI, STATE2_IDLEUPDATE, EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_UE_Detach_SwitchOffUe( eutra_CellI, RRC_IDLE,-, EPS_Only); // @sic R5s110176 sic@

    f_EUTRA_CellInfo_SetSysInfo_AccessBarring ( eutra_CellI, cs_AccessBarringInformation_TemporaryBarring );
    f_EUTRA_ModifySysinfoUE_Off (eutra_CellI);

    f_EUTRA_TestBody_Set(true);

    fl_TC_9_2_1_1_20_Body();

    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellK, E2_CONNECTED, EPS_Only); // @sic R5s110176 sic@
  }  // function f_TC_9_2_1_1_20_EUTRA

  function f_TC_9_2_1_1_21_EUTRA() runs on EUTRA_PTC
  { // @desc: Attach / Abnormal case / Success after several attempts due to no network response
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);  // @sic R5s106627 sic@
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    
    f_UT_ConfigureEPSAttach (UT); // @sic R5-103810 sic@
    
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE,-,EPS_Only ); // @sic R5s110176 sic@
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_1_1_21_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E2_CONNECTED, EPS_Only); // @sic R5s110176 sic@
  }  // function f_TC_9_2_1_1_21_EUTRA

  function f_TC_9_2_1_1_22_EUTRA() runs on EUTRA_PTC
  { // @desc: Attach / Abnormal case / Unsuccessful attach after 5 attempts
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);  // @sic R5s106627 sic@
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    
    f_UT_ConfigureEPSAttach (UT); // @sic R5-103810 sic@
    
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE,-, EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_1_1_22_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E2_CONNECTED, EPS_Only); // @sic R5s110176 sic@
  }  // function f_TC_9_2_1_1_22_EUTRA

  function f_TC_9_2_1_1_23_EUTRA() runs on EUTRA_PTC
  {
    // Attach / Abnormal case / Repeated rejects for network failures

    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);  // @sic R5s106627 sic@
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_UT_ConfigureEPSAttach (UT);    // @sic R5s120125 sic@
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only);   // @sic R5s120125 sic@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE,-, EPS_Only); // @sic R5s110176 sic@ @sic R5s120125 sic@
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_1_1_23_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E2_CONNECTED, EPS_Only); // @sic R5s110176 sic@ @sic R5s120125 sic@
    
  } // end f_TC_9_2_1_1_23_EUTRA

  function fl_TC_9_2_1_1_1_Body(GutiParameters_Type p_GutiParams,
                                GutiParameters_Type p_GutiOldParams) runs on EUTRA_PTC
  {
    // ==========================================================================
    // initialize constant test case data structures
    // ==========================================================================
    var HalfOctet_Type v_EPS_Bearer_Id := tsc_EpsDefaultBearerId;
    var ProcedureTransactionIdentifier v_EPS_TI := tsc_PTI_1;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    
    var template (omit) MobileIdentity v_MSId := f_GetMSId (EPS_Only);  // @sic R5s110176, R5-103847 sic@
    
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (p_GutiParams.PLMN_Identity);
    var NAS_PlmnId v_NAS_Old_PlmnId := f_Asn2Nas_PlmnId(p_GutiOldParams.PLMN_Identity);
    
    var NAS_Lac v_LAC := f_EUTRA_CellInfo_GetLocationAreaCode ( eutra_CellA );
    var template (omit) LocAreaId v_LAI := f_GetLAI(v_PLMN, v_LAC, EPS_Only); // @sic R5s110176 sic@
    //v_AdditionalUpdateType is also used to follow TTCN3 v411 standard
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only);  // @sic R5s110176, R5-103681 sic@
    var template (value) AccessPointName v_APN;
    var template (omit) ProtocolConfigOptions v_Pco := omit;
    var NAS_AttDetValue_Type v_AttachType :=f_GetEAttachType(EPS_Only); // @sic R5s110176 sic@
    var NAS_MSG_Indication_Type v_NasInd;
    var NAS_UL_Message_Type v_PdnConnectivityRequest;
    var boolean v_EIT_Flag := false;
    
    // Switch on UE
    //@siclog "Step 1" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@
    
    //@siclog "Step 2" siclog@
    //+ Check: Does the UE transmit an RRCConnectionRequest message not including S-TMSI
    //         and with establishmentCause set to mo-Signalling?
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_CellA, mo_Signalling, cr_InitialUE_Identity_Random);    // @sic R5-120721 change 3 sic@
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 2");
    
    //@siclog "Step 3" siclog@
    // send RRC Connection Setup on SRB0 (CCCH):
    f_EUTRA_RRC_ConnectionSetup_Def (eutra_CellA);
    
    // UE shall establish SRB1 acc. to 36.331 cl. 5.3.3.4 and 5.3.9
    // UE enters RRC_CONNECTED state
    
    //@siclog "Step 4" siclog@
    // Check: does the UE transmit an RRCConnectionSetupComplete message including MME group ID and MME code
    // with ATTACH REQUEST message including a GUTI and a PDN CONNECTIVITY REQUEST message?
    v_NasInd := f_EUTRA_RRCConnectionSetupComplete_Def(eutra_CellA,                                       // @sic R5s120121 MCC160 implementation sic@
                                                       cr_508_RRCConnectionSetupComplete(v_RRC_TI,
                                                                                         ?,
                                                                                         cr_RegisteredMME(p_GutiOldParams.PLMN_Identity, // @sic R5s100008 sic@
                                                                                                          p_GutiOldParams.MME_GroupId,
                                                                                                          p_GutiOldParams.MME_Code)),
                                                       cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                         cdr_ATTACH_REQUEST_WithGuti(v_AttachType,
                                                                                                                     v_AdditionalUpdateType,
                                                                                                                     ?,
                                                                                                                     f_GutiParameters2MobileIdentity(omit, p_GutiOldParams), // GUTI1
                                                                                                                     cr_TAI( v_NAS_Old_PlmnId, tsc_TAC2)),
                                                                                         cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, ?)));
    v_PdnConnectivityRequest := v_NasInd.Pdu.PiggybackedPduList[0].Msg;
    v_EPS_TI := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    // Get the PCO to be used later (TS 36.508 v.8.2.2 Table 4.7.3-6)
    if (ispresent( v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions)) {
      v_Pco := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    }
    
    //+   The SS transmits an AUTHENTICATION REQUEST message to initiate the EPS
    //+   authentication and AKA procedure.
    //+   The UE transmits an AUTHENTICATION RESPONSE message and establishes
    //+   mutual authentication.
    //+   The SS transmits a NAS SECURITY MODE COMMAND message to
    //+   activate NAS security.
    //+   The UE transmits a NAS SECURITY MODE COMPLETE message
    //+   and establishes the initial security configuration.
    
    //+  - ESM information optionally transferred
    //@siclog "Step 5 - 9" siclog@
    v_EIT_Flag := f_CheckEsmInfoTransferFlag(v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST);
    v_APN := f_EUTRA_Authentication_NAS_AS_Security (eutra_CellA, v_EIT_Flag, v_EPS_TI, true);
    
    //@siclog "Step 10" siclog@
    //+   SS responds with ATTACH ACCEPT message including a valid TAI list. The
    //+   ACTIVATE DEFAULT EPS BEARER CONTEXT REQUEST message is piggybacked in
    //+   ATTACH ACCEPT message.
    //+   Note: The IP addresses of the UE are not allocated in this test so PDN
    //+   address is not included in the message.
    f_EUTRA_RRCConnectionReconfigurationWithAttachAcceptAllParams(eutra_CellA,
                                                                  v_EPS_Bearer_Id,
                                                                  v_RRC_TI,
                                                                  v_EPS_TI,
                                                                  v_AttachType,
                                                                  f_EUTRA_GetPDNAddress(f_CheckPCOforIPallocationViaNas (v_Pco)),
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, p_GutiParams), // GUTI1
                                                                  cs_TrackingAreaIdListDef_lv,
                                                                  v_LAI,
                                                                  v_MSId,
                                                                  omit,
                                                                  v_APN,
                                                                  f_GetDefPCOforPCSCFAddress (v_Pco), // @sic R5-104703 sic@
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType,
                                                                                              EPS_Only));  // @sic R5s110176, R5-103681 sic@
    
    //@siclog "Step 11" siclog@
    //+   Check: does the UE transmit an ATTACH COMPLETE message including an
    //+   ACTIVATE DEFAULT EPS BEARER CONTEXT ACCEPT message?
    f_EUTRA_NAS_AttachComplete (eutra_CellA, v_EPS_Bearer_Id );  // @sic R5s110449 sic@
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 11"); // TP2
    
    //@siclog "Step 12 Void" siclog@
    
    //@siclog "Step 13" siclog@
    //+   The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //@siclog "Step 14" siclog@
    //+   Check: Does the test result of CALL generic procedure [36.508]
    //    indicate that the UE is in E-UTRA EMM-REGISTERED state on
    //    CellA? TP3
    f_EUTRA_508Check_IdleState(eutra_CellA);

    // ==========================================================================
  } // function fl_tc_9_2_1_1_1_Body

  function fl_TC_9_2_1_1_1a_and9_2_1_1_1b_Body(integer p_PowerLevel) runs on EUTRA_PTC
  {
    // ==========================================================================
    // initialize constant test case data structures
    // ==========================================================================
    var HalfOctet_Type                  v_EPS_Bearer_Id      := tsc_EpsDefaultBearerId;
    var ProcedureTransactionIdentifier  v_EPS_TI             := tsc_PTI_1;
    var RRC_TransactionIdentifier       v_RRC_TI             := tsc_RRC_TI_Def;
    var EUTRA_SecurityParams_Type       v_AuthParams_authentication := f_EUTRA_Security_Get();
    var template (omit) MobileIdentity  v_MSId               := f_GetMSId (NORMAL); // @sic R5s110176 sic@
    var template AdditionalUpdateType   v_AdditionalUpdateType := f_GetAdditionalUpdateType (NORMAL); // @sic R5s110176 sic@
    var GutiParameters_Type             v_GutiParams_CellA   := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var GutiParameters_Type             v_GutiParams_CellB   := f_EUTRA_CellInfo_GetGuti(eutra_CellB);
    var GutiParameters_Type             v_GutiParams_CellI   := f_EUTRA_CellInfo_GetGuti(eutra_CellI);
    var NAS_PlmnId                      v_PLMN_CellI         := f_Asn2Nas_PlmnId (v_GutiParams_CellI.PLMN_Identity);
    var GutiParameters_Type             v_GutiParams_CellE   := f_EUTRA_CellInfo_GetGuti(eutra_CellE);
    var NAS_PlmnId                      v_PLMN_CellE         := f_Asn2Nas_PlmnId (v_GutiParams_CellE.PLMN_Identity);
    var template (value) AccessPointName v_APN;
    var NAS_MSG_Indication_Type         v_NasInd;
    var NAS_UL_Message_Type             v_PdnConnectivityRequest;
    var template (omit) ProtocolConfigOptions v_Pco          := omit;
   
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(NORMAL); // @sic R5s110176 sic@
    var NAS_AttDetValue_Type v_EDetachType := f_GetEDetachType(NORMAL); // @sic R5s110176 sic@

    var NAS_Tac v_TAC27  := '0027'O;
    var NAS_Tac v_TAC_FFF0  := 'FFF0'O;
    var PLMN_Identity v_HPLMN_005_002 := { mcc := {0,0,5},  mnc :={0,0,2} };
    var PLMN_Identity v_HPLMN_004_02 := { mcc := {0,0,4},  mnc :={0,2} };
    var PLMN_Identity v_HPLMN_004_03 := { mcc := {0,0,4},  mnc :={0,3} };
    var PLMN_Identity v_HPLMN_001_01 := { mcc := {0,0,1},  mnc :={0,1} };
    var PLMN_Identity v_HPLMN_004_07 := { mcc := {0,0,4},  mnc :={0,7} };
    var PLMN_Identity v_HPLMN_316_002 := { mcc := {3,1,6},  mnc :={0,0,2} };
    var PLMN_Identity v_HPLMN_310_102 := { mcc := {3,1,0},  mnc :={1,0,2} };
    
    var template (value) PLMN_List v_OneEquivalentPLMN  := cs_PLMN_List_1PLMN(f_Asn2Nas_PlmnId ( f_EUTRA_CellInfo_GetGutiPLMN (eutra_CellI) ) );
    var template (value) PLMN_List v_FourEquivalentPLMN := cs_PLMN_List_4PLMNs(f_Asn2Nas_PlmnId ( v_HPLMN_004_02),
                                                                               f_Asn2Nas_PlmnId ( v_HPLMN_004_03),
                                                                               f_Asn2Nas_PlmnId ( v_HPLMN_004_07),
                                                                               f_Asn2Nas_PlmnId ( v_HPLMN_316_002) );
    var NasCount_Type v_NasCountUL; // @sic R5s100545 sic@
    var NAS_Tac                         v_TAC_CellA          := bit2oct(f_EUTRA_CellInfo_GetTAC ( eutra_CellA));
    var NAS_Lac                         v_LAC_CellA          := f_EUTRA_CellInfo_GetLocationAreaCode ( eutra_CellA);
    var NAS_PlmnId                      v_PLMN_CellA         := f_Asn2Nas_PlmnId (v_GutiParams_CellA.PLMN_Identity);
    var NAS_Tac                         v_TAC_CellI          := bit2oct(f_EUTRA_CellInfo_GetTAC ( eutra_CellI));
    var NAS_Tac                         v_TAC_CellE          := bit2oct(f_EUTRA_CellInfo_GetTAC ( eutra_CellE));

    var NAS_Lac v_LAC_A := f_EUTRA_CellInfo_GetLocationAreaCode ( eutra_CellA );
    var NAS_Lac v_LAC_B := f_EUTRA_CellInfo_GetLocationAreaCode ( eutra_CellB );
    var template (omit) LocAreaId v_LAI_A := f_GetLAI ( v_PLMN_CellA, v_LAC_A, NORMAL); // @sic R5s110427 sic@
    var template (omit) LocAreaId v_LAI_B := f_GetLAI ( v_PLMN_CellA, v_LAC_B, NORMAL); // @sic R5s110427 sic@

    var template (value) CellPowerList_Type v_CellPowerList;
    var template (value) PlmnAndTacs v_PlmnAndTacs;

    var float v_TimerValue := f_EUTRA_SetTimerToleranceMax(eutra_CellI, nasTTCNTimer, 70.0); // @sic R5s100545 R5w100302, R5-106604, R5-106675 sic@

    // Switch on UE
    //@siclog "Step 1" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@

    //+ //@siclog "Step 2" siclog@
    //+ The UE transmits an ATTACH REQUEST message on cell A including a PDN CONNECTIVITY REQUEST message
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas( eutra_CellA,
                                                tsc_RRC_TI_Def,
                                                cr_EstablishmentCause_Any,
                                                cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  f_GetPdnType())));
    v_PdnConnectivityRequest := v_NasInd.Pdu.PiggybackedPduList[0].Msg;
    v_EPS_TI := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    // Get the PCO to be used later (TS 36.508 v.8.2.2 Table 4.7.3-6)
    if (ispresent( v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions)) {
      v_Pco := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    }

    //+   The SS transmits an AUTHENTICATION REQUEST message to initiate the EPS
    //+ authentication and AKA procedure.
    //+  The UE transmits an AUTHENTICATION RESPONSE message and establishes
    //+   mutual authentication.
    //+  The SS transmits a NAS SECURITY MODE COMMAND message to
    //+   activate NAS security.
    //+  The UE transmits a NAS SECURITY MODE COMPLETE message
    //+   and establishes the initial security configuration.
    //@siclog "Step 3 - 7a2" siclog@
    v_APN := f_EUTRA_Authentication_NAS_AS_Security (eutra_CellA,
                                                     f_CheckEsmInfoTransferFlag(v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST),
                                                     v_EPS_TI);
    
    //@siclog "Step 8" siclog@
    //+   SS responds with ATTACH ACCEPT message including a valid TAI list containing the TAIs of Cell A and Cell I; with
    //    PLMN ID of Cell A included in the GUTI; and with the PLMN ID of Cell I included in the Equivalent PLMNs IE. The ACTIVATE
    //    DEFAULT EPS BEARER CONTEXT REQUEST message is piggybacked in ATTACH ACCEPT message
    v_PlmnAndTacs :=  {
      cs_PartialTAI(f_Asn2Nas_PlmnId(v_HPLMN_310_102), tsc_TAC2), // @sic R5-110728 sic@
      cs_PartialTAI(f_Asn2Nas_PlmnId(v_HPLMN_001_01),  tsc_TAC2)
    };
    f_EUTRA_RRCConnectionReconfigurationWithAttachAcceptAllParams(eutra_CellA,                      // @sic R5s100780 sic@
                                                                  v_EPS_Bearer_Id,
                                                                  v_RRC_TI,
                                                                  v_EPS_TI,
                                                                  v_AttachType,
                                                                  f_EUTRA_GetPDNAddress(f_CheckPCOforIPallocationViaNas (v_Pco)),
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_GutiParams_CellA),
                                                                  cs_TAIListMultiplePlmns2(cs_MultiplePlmnsList(v_PlmnAndTacs)),
                                                                  v_LAI_A, // @sic R5s110427 sic@
                                                                  v_MSId,
                                                                  omit,
                                                                  v_APN,
                                                                  f_GetDefPCOforPCSCFAddress (v_Pco), // @sic R5-104703 sic@
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType,
                                                                                              NORMAL), // @sic R5s110176 sic@
                                                                  cs_GprsTimer_v(tsc_GprsTimerUnit_deact, tsc_Spare5),
                                                                  omit,
                                                                  omit,
                                                                  v_OneEquivalentPLMN,
                                                                  omit,
                                                                  cs_EPS_NwkFtSup_IMSVoice);
    
    //@siclog "Step 9" siclog@
    //+   The UE transmits an ATTACH COMPLETE message including an
    //+   ACTIVATE DEFAULT EPS BEARER CONTEXT ACCEPT message?
    f_EUTRA_NAS_AttachComplete (eutra_CellA, v_EPS_Bearer_Id );  // @sic R5s110449 sic@

    //@siclog "Step 10 Void" siclog@
    
    //@siclog "Step 11" siclog@
    //+   The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //+   The signal strength of Cell I is raised to that of the Serving Cell and that of Cell A
    //         is lowered to that of a Suitable Neighbour Cell as defined in table 6.2.2.1-1 of TS 36.508 .
    //     Note: Cell A is still suitable but the UE shall select Cell I
    //@siclog "Step 12" siclog@
    v_CellPowerList := {
      cs_CellPower(eutra_CellI, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellA, p_PowerLevel)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);    // @sic R5s110726 additional changes for change 2 sic@

    //+ Wait [70] seconds for mobile to camp on cell I
    //@siclog "Step 13" siclog@
    f_Delay(70.0); // @sic R5-106604 sic@
    
    //+  The UE is switched off
    //@siclog "Step 14" siclog@
    f_UT_SwitchOffUE (UT, false);
    
    //@siclog "Step 15" siclog@
    //Check: does the UE send DETACH on cell I?
    if ( pc_SwitchOnOff  or  pc_USIM_Removal  ) { //@sic R5s110307 sic@
      v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellI,
                                                 tsc_RRC_TI_Def,
                                                 cr_EstablishmentCause_MoSignalling,
                                                 cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                   cr_508_DETACH_REQUEST_MO(cr_NAS_KeySetIdentifier (?, ?), // @sic R5-110472 sic@
                                                                                            f_GutiParameters2MobileIdentity(omit, v_GutiParams_CellA),
                                                                                            cr_DetachType( '1'B, v_EDetachType)))); //@sic R5s110139 sic@
      f_EUTRA_RRC_ConnectionRelease(eutra_CellI); // @sic R5s100545 sic@ @sic R5s100527 sic@
    }
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 15");
    
    //@siclog "Step 16" siclog@
    //    Cells A and I are set to the Non-suitable "Off" level and cell B is set to the Serving Cell level
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_NonSuitableOffCellRS_EPRE),
      cs_CellPower(eutra_CellI, tsc_NonSuitableOffCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);    // @sic R5s110726 additional changes for change 2 sic@
    
    //@siclog "Step 17" siclog@
    //+   The UE is switched on.
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellB); // @sic R5s120065 sic@
    v_AuthParams_authentication := f_EUTRA_Security_Get();
    
    //@siclog "Step 18" siclog@
    //   Check: does the UE send an ATTACH REQUEST message on cell B (including a PDN CONNECTIVITY REQUEST message) with the last visited
    //          TAI correctly indicating the TAI of cell I; the GUTI allocated in step 8 and the KSIASME allocated in step 3?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas( eutra_CellB,
                                                tsc_RRC_TI_Def,
                                                cr_EstablishmentCause_Any,
                                                cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cdr_ATTACH_REQUEST_WithGuti(v_AttachType,
                                                                                                              v_AdditionalUpdateType,
                                                                                                              v_AuthParams_authentication.KSIasme,
                                                                                                              f_GutiParameters2MobileIdentity(omit, v_GutiParams_CellA),
                                                                                                              cr_TAI( v_PLMN_CellI, v_TAC_CellI)),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 18");
    
    v_PdnConnectivityRequest := v_NasInd.Pdu.PiggybackedPduList[0].Msg;
    v_EPS_TI := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    // Get the PCO to be used later (TS 36.508 v.8.2.2 Table 4.7.3-6)
    if (ispresent( v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions)) {
      v_Pco := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    }
    
    // @sic R5s100545 sic@ steps 18A and 18B removed
    //@siclog Steps 18a1-18a2 siclog@
    v_APN := f_ESM_InitAPN(eutra_CellB, f_CheckEsmInfoTransferFlag(v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST), v_EPS_TI); // @sic R5s100751 Additional changes sic@
    v_NasCountUL := v_NasInd.SecurityProtection.NasCount;
    v_AuthParams_authentication := f_EUTRA_Authentication_InitAS(v_AuthParams_authentication, v_NasCountUL);
    v_AuthParams_authentication := f_EUTRA_RRC_ActivateSecurity(eutra_CellB, v_AuthParams_authentication, v_NasCountUL);
    f_EUTRA_Security_Set ( v_AuthParams_authentication );
    
    
    //@siclog "Step 19" siclog@
    //   The SS sends an ATTACH ACCEPT message allocating 16 TAIs and an aligned set of equivalent PLMNs
    v_PlmnAndTacs :=  {
      cs_PartialTAI(f_Asn2Nas_PlmnId(v_HPLMN_004_02), tsc_TAC3),
      cs_PartialTAI(f_Asn2Nas_PlmnId(v_HPLMN_005_002), tsc_TAC3),
      cs_PartialTAI(f_Asn2Nas_PlmnId(v_HPLMN_316_002), tsc_TAC3)
    };
    f_EUTRA_RRCConnectionReconfigurationWithAttachAcceptAllParams(eutra_CellB,            // @sic R5s100780 sic@
                                                                  v_EPS_Bearer_Id,
                                                                  v_RRC_TI,
                                                                  v_EPS_TI,
                                                                  v_AttachType,
                                                                  f_EUTRA_GetPDNAddress(f_CheckPCOforIPallocationViaNas (v_Pco)),
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_GutiParams_CellB),
                                                                  cs_TAIListMultiplePlmns3(cs_MultiplePlmnsList(v_PlmnAndTacs),
                                                                                           10,
                                                                                           cs_PartialTAI(f_Asn2Nas_PlmnId(v_HPLMN_004_07), v_TAC_FFF0),
                                                                                           f_Asn2Nas_PlmnId(v_HPLMN_001_01),
                                                                                           {tsc_TAC1, tsc_TAC5, v_TAC27} ),  // @sic R5s110214 sic@
                                                                  v_LAI_B, // @sic R5s110427 sic@
                                                                  v_MSId,
                                                                  omit,
                                                                  v_APN,
                                                                  f_GetDefPCOforPCSCFAddress (v_Pco), // @sic R5-104703 sic@
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType,
                                                                                              NORMAL), // @sic R5s110176 sic@
                                                                  cs_GprsTimer_v(tsc_GprsTimerUnit_deact, tsc_Spare5),
                                                                  omit,
                                                                  omit,
                                                                  v_FourEquivalentPLMN,
                                                                  omit,
                                                                  cs_EPS_NwkFtSup_IMSVoice);
    
    //+ The UE sends ATTACH COMPLETE
    //@siclog "Step 20" siclog@
    f_EUTRA_NAS_AttachComplete (eutra_CellB, v_EPS_Bearer_Id );  // @sic R5s110449 sic@
    
    //@siclog "Step 21 Void" siclog@
    
    //@siclog "Step 22" siclog@
    //+  The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
    
    //+ SS Wait [5] seconds
    //@siclog "Step 23" siclog@
    f_Delay( f_EUTRA_SetTimerToleranceMax(eutra_CellB, nonProtocolTimer, 5.0)); // R5w100302
    
    //  EXCEPTION: steps 24 to 26 are repeated for N = 3 to N = 7 with cells C,G,H,K,E according to T3 in table 9.2.1.1.1a-2.
    
    //+    Cell power levels are set according to T3 and the value of N.
    //@siclog "Step 24(N=3)" siclog@
    v_CellPowerList := {
      cs_CellPower(eutra_CellC, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellB, p_PowerLevel)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@
    
    //+ Step 25(N=3)    Check: does the UE transmit a TRACKING AREA UPDATE REQUEST message in the next 30 seconds?
    //@siclog "Step 25(N=3)" siclog@
    if (f_EUTRA_RRC_RRCConnectionRequest_Check(eutra_CellC, v_TimerValue)) {        // @sic R5s110507 Additional Changes sic@
      // even though prose says TAU, as soon as UE sends RRC ConnReq, we know something is wrong
      f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 25(N=3)");
    }
    
    //+     Using the procedure of clause 6.4.2.2 of TS 36.508 ,Check: does the UE camp on the strongest cell?
    //@siclog "Step 26(N=3)" siclog@
    f_EUTRA_508Check_IdleState ( eutra_CellC );
    
    //+     Cell power levels are set according to T3 and the value of N.
    //@siclog "Step 24(N=4)" siclog@
    v_CellPowerList := {
      cs_CellPower(eutra_CellB, tsc_NonSuitableOffCellRS_EPRE),
      cs_CellPower(eutra_CellG, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellC, p_PowerLevel)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@
    
    //+     Check: does the UE transmit a TRACKING AREA UPDATE REQUEST message in the next 30 seconds?
    //@siclog "Step 25(N=4)" siclog@
    if (f_EUTRA_RRC_RRCConnectionRequest_Check(eutra_CellG, v_TimerValue)) {        // @sic R5s110507 Additional Changes sic@
      // even though prose says TAU, as soon as UE sends RRC ConnReq, we know something is wrong
      f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 25(N=4)");
    }
    
    //+    Using the procedure of clause 6.4.2.2 of TS 36.508 ,Check: does the UE camp on the strongest cell?
    //@siclog "Step 26(N=4)" siclog@
    f_EUTRA_508Check_IdleState ( eutra_CellG );
    
    //+    Cell power levels are set according to T3 and the value of N.
    //@siclog "Step 24(N=5)" siclog@
    v_CellPowerList := {
      cs_CellPower(eutra_CellC, tsc_NonSuitableOffCellRS_EPRE),
      cs_CellPower(eutra_CellH, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellG, p_PowerLevel)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@
    
    //+    Check: does the UE transmit a TRACKING AREA UPDATE REQUEST message in the next 30 seconds?
    //@siclog "Step 25(N=5)" siclog@
    if (f_EUTRA_RRC_RRCConnectionRequest_Check(eutra_CellH, v_TimerValue)) {        // @sic R5s110507 Additional Changes sic@
      // even though prose says TAU, as soon as UE sends RRC ConnReq, we know something is wrong
      f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 25(N=5)");
    }
    
    //+    Using the procedure of clause 6.4.2.2 of TS 36.508 ,Check: does the UE camp on the strongest cell?
    //@siclog "Step 26(N=5)" siclog@
    f_EUTRA_508Check_IdleState ( eutra_CellH );
    
    //+    Cell power levels are set according to T3 and the value of N.
    //@siclog "Step 24(N=6)" siclog@
    v_CellPowerList := {
      cs_CellPower(eutra_CellG, tsc_NonSuitableOffCellRS_EPRE),
      cs_CellPower(eutra_CellK, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellH, p_PowerLevel)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@
    
    //+   Check: does the UE transmit a TRACKING AREA UPDATE REQUEST message in the next 30 seconds?
    //@siclog "Step 25(N=6)" siclog@
    if (f_EUTRA_RRC_RRCConnectionRequest_Check(eutra_CellK, v_TimerValue)) {        // @sic R5s110507 Additional Changes sic@
      // even though prose says TAU, as soon as UE sends RRC ConnReq, we know something is wrong
      f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 25(N=6)");
    }
    
    //+     Using the procedure of clause 6.4.2.2 of TS 36.508 ,Check: does the UE camp on the strongest cell?
    //@siclog "Step 26(N=6)" siclog@
    f_EUTRA_508Check_IdleState ( eutra_CellK );
    
    //+    Cell power levels are set according to T3 and the value of N.
    //@siclog "Step 24(N=7)" siclog@
    v_CellPowerList := {
      cs_CellPower(eutra_CellH, tsc_NonSuitableOffCellRS_EPRE),
      cs_CellPower(eutra_CellK, p_PowerLevel),
      cs_CellPower(eutra_CellE, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@
    
    //+    Check: does the UE transmit a TRACKING AREA UPDATE REQUEST message in the next 30 seconds?
    //@siclog "Step 25(N=7)" siclog@
    if (f_EUTRA_RRC_RRCConnectionRequest_Check(eutra_CellE, v_TimerValue)) {        // @sic R5s110507 Additional Changes sic@
      // even though prose says TAU, as soon as UE sends RRC ConnReq, we know something is wrong
      f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 25(N=7)");
    }
    
    //+   Using the procedure of clause 6.4.2.2 of TS 36.508 ,Check: does the UE camp on the strongest cell?
    //@siclog "Step 26(N=7)" siclog@
    f_EUTRA_508Check_IdleState ( eutra_CellE );
    
    //+   Cell K is is set to the Non-suitable "Off" level. The signal strength of Cell E is lowered to
    //      that of a Suitable Neighbour Cell and that of Cell I is raised to the Serving Cell level.
    //      Note: the new list of equivalent PLMNs allocated in step 19 means that list of equivalent PLMNs
    //       allocated in step 8 should have been deleted. Hence the PLMN of cell I shall not be selected by a cell
    //       reselection process, and the UE shall remain camped on cell E.
    //@siclog "Step 27" siclog@
    v_CellPowerList := {
      cs_CellPower(eutra_CellK, tsc_NonSuitableOffCellRS_EPRE),
      cs_CellPower(eutra_CellE, p_PowerLevel),
      cs_CellPower(eutra_CellI, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@
    
    //+   Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message on cell I in the next 70 seconds?
    //@siclog "Step 28" siclog@
    if (f_EUTRA_RRC_RRCConnectionRequest_Check(eutra_CellI, v_TimerValue)) {        // @sic R5s110507 Additional Changes sic@
      // even though prose says TAU, as soon as UE sends RRC ConnReq, we know something is wrong
      f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 28");
    }
    
    //+  Using the procedure of clause 6.4.2.2 of TS 36.508 , page the UE on cells E and I.
    //   Check: Does the UE camp on cell E and not on cell I?
    //@siclog "Step 29" siclog@
    // We just need to page the UE on Cell I at this point.  If it responds on Cell I it should be caught in the Check Idle function
    f_EUTRA_UE_Page ( eutra_CellI,
                      cs_NasPaging_OneRecord ( cs_PagingUE_Identity_S_TMSI ( v_GutiParams_CellI.MME_Code, v_GutiParams_CellI.M_TMSI )) );
    f_EUTRA_508Check_IdleState ( eutra_CellE );
    
    //+  Cell I is set to the Non-suitable "Off" level. The signal strength of Cell A
    //         is raised to the Serving Cell level such that that the UE shall select Cell A.
    //@siclog "Step 30" siclog@
    v_CellPowerList := {
      cs_CellPower(eutra_CellI, tsc_NonSuitableOffCellRS_EPRE),
      cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@
    //+ Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message on cell A
    //         with the last visted TAI set to the TAI of cell E; the GUTI allocated in step 8 and the KSIASME allocated in step 3?
    //@siclog "Step 31" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(f_GetEPSTAUType(NORMAL), // @sic R5s110176 sic@
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_GutiParams_CellB),
                                                                                         cr_TAI(v_PLMN_CellE, v_TAC_CellE))));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 31");
    
    //@sic R5s100545 sic@
    //@siclog "Step 32" siclog@
    //SS responds with TRACKING AREA UPDATE ACCEPT message
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(f_GetEPSTAUType(NORMAL), // @sic R5s110176 sic@
                                                                  f_GutiParameters2MobileIdentity('50'O, v_GutiParams_CellA ),
                                                                  cds_TAIListNonConsecutive_tlv(v_PLMN_CellA , {v_TAC_CellA}),
                                                                  v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus,
                                                                  f_GetLAI (v_PLMN_CellA, v_LAC_CellA, NORMAL), // @sic R5s110176 sic@
                                                                  f_GetMSId (NORMAL), // @sic R5s110176 sic@
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType))) ) );
    //@siclog "Step 33" siclog@
    // The UE transmits a TRACKING AREA UPDATE COMPLETE message
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    
    
  } // function fl_TC_9_2_1_1_1a_and9_2_1_1_1b_Body

  function fl_TC_9_2_1_1_2_Body() runs on EUTRA_PTC
  {
    // ==========================================================================
    // initialize constant test case data structures
    // ==========================================================================
    var HalfOctet_Type v_EPS_Bearer_Id := tsc_EpsDefaultBearerId;
    var ProcedureTransactionIdentifier v_EPS_TI := '00'O;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var template (value) AccessPointName v_APN;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only);  // @sic R5s110176 sic@
    var boolean v_EIT_Flag := false;
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only); // @sic R5s110176 sic@

    // ==========================================================================
    // initialize component specific data structures
    // ==========================================================================
    // get all data which are required for a GUTI
    var GutiParameters_Type v_Guti_1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    // create new GUTI with different S-TMSI (gets sent to UE in Attach Accept)
    var GutiParameters_Type v_Guti_2_Params := f_CreateGutiParamsWithUpdatedSTmsi(v_Guti_1_Params);
    var B3_Type v_PDNValue := f_GetPdnType();
    var template (omit) ProtocolConfigOptions v_Pco := omit; // @sic R5s100084 sic@
    // ==========================================================================

    // temporary variable which is used when receiving NAS ASPs
    var NAS_MSG_Indication_Type v_NasInd;

    //  Send Paging with IMSI
    //@siclog "Step 1" siclog@
    f_EUTRA_UE_Page ( eutra_CellA,
                    cs_NasPaging_OneRecord ( cs_PagingUE_Identity_IMSI (f_ConvertImsi2ASN(px_IMSI_Def))));
   //@siclog "Step 1a" siclog@
   //+   IF not pc_Automatic_Re_Attach, Attach is triggered by AT command.
   if (not pc_Automatic_EPS_Re_Attach) { // @sic R5-110400 sic@ @sic R5-121541 sic@
                            f_UT_TriggerAttach (UT);
                            }


    // - Does the UE send an ATTACH REQUEST including the IMSI?
    //@siclog "Step 2" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                 cdr_ATTACH_REQUEST_IMSIonly(v_AttachType, v_AdditionalUpdateType), // @sic R5-103681 sic@
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                 v_PDNValue)));

    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    v_EIT_Flag := f_CheckEsmInfoTransferFlag(v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST);
    if (ispresent( v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions)) { // @sic R5s100084 sic@
      v_Pco := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    }

    // TP 1
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 2");

    //+   The SS transmits an AUTHENTICATION REQUEST message to initiate
    //    the EPS authentication and AKA procedure.
    //+   The UE transmits an AUTHENTICATION RESPONSE message and
    //    establishes mutual authentication.
    //+   The SS transmits a NAS SECURITY MODE COMMAND message to
    //    activate NAS security.
    //+   The UE transmits a NAS SECURITY MODE COMPLETE message and
    //    establishes the initial security configuration.  Enable
    //    integrity protection/ciphering for RRC connection
    //@siclog "Step 3 - 6" siclog@
    v_APN := f_EUTRA_Authentication_NAS_AS_Security (eutra_CellA,  v_EIT_Flag, v_EPS_TI, false); // @sic R5s100094 sic@

    //@siclog "Step 7" siclog@
    //+   SS responds with ATTACH ACCEPT message with a new GUTI2 in the EPS Mobile Identity.
    f_EUTRA_RRCConnectionReconfigurationWithAttachAcceptAllParams(eutra_CellA,
                                                                  v_EPS_Bearer_Id,
                                                                  v_RRC_TI,
                                                                  v_EPS_TI,
                                                                  tsc_EAttachType_EpsOnly,
                                                                  f_EUTRA_GetPDNAddress (f_CheckPCOforIPallocationViaNas (v_Pco)), // @sic R5s100084 sic@
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti_2_Params),
                                                                  cs_TrackingAreaIdListDef_lv,
                                                                  omit,
                                                                  omit,
                                                                  omit,
                                                                  v_APN,
                                                                  f_GetDefPCOforPCSCFAddress (v_Pco), // @sic R5-104703 sic@
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType,
                                                                                              EPS_Only)); // @sic R5s110176, R5-103681 sic@

    //@siclog "Step 8" siclog@
    //+   Check: does the UE transmit an ATTACH COMPLETE message including an
    //+   ACTIVATE DEFAULT EPS BEARER CONTEXT ACCEPT message?
    f_EUTRA_NAS_AttachComplete (eutra_CellA, v_EPS_Bearer_Id );  // @sic R5s110449 sic@

    //+  @sic R5s100189 sic@
    //@siclog "Step 9" siclog@
    //+   Cause the UE to detach
    f_UT_InitiateDetach (UT);

    //@siclog "Step 10" siclog@
    //+   UE transmits a Detach Request containing GUTI2
    SRB.receive ( car_SRB2_NasPdu_IND ( eutra_CellA,
                                        cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_DETACH_REQUEST_MO (cr_NAS_KeySetIdentifier (?, ?),  // @sic R5-110472 sic@
                                                                                      f_GutiParameters2MobileIdentity(omit, v_Guti_2_Params),
                                                                                      cr_DetachType( '0'B, v_AttachType))))); // @sic R5-103675 sic@
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Step 10");
    
    //@siclog "Step 11" siclog@
    //+   SS responds with a Detach Accept message
        SRB.send (cas_SRB2_NasPdu_REQ ( eutra_CellA,
                                    cs_TimingInfo_Now,
                                    cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                   cs_508_DETACH_ACCEPT)));
    //@siclog "Step 12" siclog@
    //+  The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA); // @sic R5s120314 sic@
  } // end of fl_TC_9_2_1_1_2_Body

  function fl_TC_9_2_1_1_7_Body() runs on EUTRA_PTC
  {
    // ==========================================================================
    // initialize test case data structures
    // ==========================================================================
    var HalfOctet_Type v_EPS_Bearer_Id := tsc_EpsDefaultBearerId;
    var ProcedureTransactionIdentifier v_EPS_TI := '00'O;
    var NAS_MSG_Indication_Type v_NasInd;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var GutiParameters_Type v_Guti2_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellG);
    var template (omit) AccessPointName v_APN := omit;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only); // @sic R5s110176 sic@
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only); // @sic R5s110176 sic@
    var template (omit) ProtocolConfigOptions v_Pco := omit;
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;
    var template (value) TrackingAreaIdList v_TaiList;
    var template (value) CellPowerList_Type v_CellPowerList;
    var boolean v_EIT_Flag := false;
    var NasCount_Type v_NasCountUL;
    var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get();
    
    //@siclog "Step 1" siclog@
    //The SS configures: Cell A as the "Serving cell". Cell G as a "Non-Suitable cell". Cell I as a "Non-Suitable cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellG, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellI, tsc_NonSuitableCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 2" siclog@
    //+   The UE is switched on.
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@
    
    //@siclog "Step 3" siclog@
    //+  The UE transmits an ATTACH REQUEST message.
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                              v_RRC_TI,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    
    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    v_EIT_Flag := f_CheckEsmInfoTransferFlag(v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST);
    if (ispresent( v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions)) {
      v_Pco := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    }
    
    //+  The SS transmits an AUTHENTICATION REQUEST message to initiate the EPS authentication and AKA procedure.
    //+  The UE transmits an AUTHENTICATION RESPONSE message and establishes mutual authentication.
    //+  The SS transmits a NAS SECURITY MODE COMMAND message to activate NAS security.
    //+  The UE transmits a NAS SECURITY MODE COMPLETE message and establishes the initial security configuration.
    //+ Steps 7Aa1 and 7Aa2 ESM INFORMATION REQUEST / ESM INFORMATION RESPONSE
    //@siclog "Step 4 - 7Aa2" siclog@
    v_APN := f_EUTRA_Authentication_NAS_AS_Security (eutra_CellA,v_EIT_Flag, v_EPS_TI, false);
    
    //@siclog "Step 8" siclog@
    //+  SS responds with ATTACH ACCEPT message including PLMN2, PLMN3 and PLMN4 in the list of equivalent PLMNs.
    f_EUTRA_RRCConnectionReconfigurationWithAttachAcceptAllParams(eutra_CellA,                   // @sic R5s100780 sic@
                                                 v_EPS_Bearer_Id,
                                                 v_RRC_TI,
                                                 v_EPS_TI,
                                                 tsc_EAttachType_EpsOnly,
                                                 f_EUTRA_GetPDNAddress(f_CheckPCOforIPallocationViaNas (v_Pco)),
                                                 f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti1_Params),
                                                 cs_TrackingAreaIdListDef_lv,
                                                 omit,
                                                 omit,
                                                 omit,
                                                 omit,
                                                 f_GetDefPCOforPCSCFAddress (v_Pco), // @sic R5-104703 sic@
                                                 f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType,
                                                                             EPS_Only), // @sic R5s110176 sic@
                                                 cs_GprsTimer_v(tsc_GprsTimerUnit_deact, tsc_Spare5),
                                                 omit,
                                                 omit,
                                                 cs_PLMN_List_3PLMNs(tsc_PLMN2, tsc_PLMN3, tsc_PLMN4),
                                                 omit,
                                                 cs_EPS_NwkFtSup_IMSVoice);
    
    //@siclog "Step 9" siclog@
    //+  The UE transmits an ATTACH COMPLETE message
    f_EUTRA_NAS_AttachComplete(eutra_CellA, v_EPS_Bearer_Id);
    
    //@siclog "Steps 10 - 10a" siclog@
    //+  The UE is switched off.
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_CONNECTED,-,EPS_Only); // @sic R5s110176 sic@
    
    //@siclog "Step 11" siclog@
    //+  The SS configures: Cell A as the "Non-Suitable cell". Cell G as a "Suitable cell". Cell I as a "Serving cell".
    //   Note: Cell I belongs to the forbidden PLMN.
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellG, tsc_SuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellI, tsc_ServingCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 12" siclog@
    //+  The UE is switched on.
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellG); // @sic R5s120065 sic@
    
    // EXCEPTION: The behaviour in table 9.2.1.1.7.3.2-2 occurs in parallel with step 13.
    // This is implicitely tested, i.e. if the UE sends any message other than that in step 13,
    // the test will fail.
    
    //@siclog "Step 13" siclog@
    //+  Check: Does the UE transmit an ATTACH REQUEST message on PLMN2?
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellG,
                                              v_RRC_TI,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 13");
    
    v_NasCountUL := v_NasInd.SecurityProtection.NasCount;
    // @sic R5-101122 sic@
    //  Security Mode Command, Security Mode Complete
    // @sic R5s100610 sic@
    //  VOID
    //@siclog "Step 13A - 13B Void" siclog@
    
    // ESM INFORMATION REQUEST / ESM INFORMATION RESPONSE
    //@siclog "Step 13Aa1 - 13Aa2" siclog@
    if (f_CheckEsmInfoTransferFlag(v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST)) {
      v_APN := f_ESM_InformationTransfer_GetAPN (eutra_CellG, v_EPS_TI);
    }
    v_SecurityParams := f_EUTRA_Security_Get();
    v_SecurityParams := f_EUTRA_RRC_ActivateSecurity(eutra_CellG,
                                                     v_SecurityParams,
                                                     v_NasCountUL);
    f_EUTRA_Security_Set(v_SecurityParams);
    
    //@siclog "Step 14" siclog@
    // The SS transmits an ATTACH ACCEPT message without the Equivalent PLMNs list.
    // The ACTIVATE DEFAULT EPS BEARER CONTEXT REQUEST message is piggybacked in ATTACH ACCEPT message.
    v_TaiList := cs_TAIListNonConsecutive_lv(
                   f_Asn2Nas_PlmnId(v_Guti2_Params.PLMN_Identity),
                   { bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellG)) });
    f_EUTRA_RRCConnectionReconfigurationWithAttachAcceptAllParams(eutra_CellG,
                                                                  tsc_EpsDefaultBearerId,
                                                                  v_RRC_TI,
                                                                  v_EPS_TI,
                                                                  tsc_EAttachType_EpsOnly,
                                                                  f_EUTRA_GetPDNAddress (f_CheckPCOforIPallocationViaNas (v_Pco)),
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti2_Params),
                                                                  v_TaiList,
                                                                  omit,
                                                                  omit,
                                                                  omit,
                                                                  v_APN,
                                                                  f_GetDefPCOforPCSCFAddress (v_Pco), // @sic R5-104703 sic@
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType,
                                                                                              EPS_Only)); // @sic R5s110176 sic@
    //@siclog "Step 15" siclog@
    //+ Check: does the UE transmit an ATTACH COMPLETE?
    f_EUTRA_NAS_AttachComplete(eutra_CellG, tsc_EpsDefaultBearerId);
    
    f_EUTRA_RRC_ConnectionRelease(eutra_CellG);
    
    // The SS configures: Cell A as a "Suitable cell",
    //  Cell I as a "Non-suitable "Off" cell".
    //  Cell J as a "Serving cell".
    //@siclog "Step 15A" siclog@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_SuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellG, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellI, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellJ, tsc_ServingCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    // Tested implicitly: EXCEPTION: The behaviour in table 9.2.1.1.7.3.2-3 occurs in parallel with step 15B.
    
    //  Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message on Cell A (PLMN1)?
    //@siclog "Step 15b" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(f_GetEPSTAUType(EPS_Only),
                                                                 f_EUTRA_SecurityKSIasme_Get(),
                                                                 cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                 v_AdditionalUpdateType))); // @sic R5s110176 sic@
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 15b");
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    v_NasCountUL := v_NasInd.SecurityProtection.NasCount;
    
    // @sic R5s100799 sic@

    //The SS sends TRACKING AREA UPDATE ACCEPT.
    //@siclog "Step 15c" siclog@
    v_TaiList := cds_TAIListNonConsecutive_tlv(f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity),
                                               { bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellA)) } );
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(f_GetEPSTAUType(EPS_Only), // @sic R5s110176 sic@
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti1_Params),
                                                                  v_TaiList,
                                                                  v_EpsBearerCtxtStatus,
                                                                  f_EUTRA_GetCellLAI(eutra_CellA, EPS_Only), // @sic R5s110176 sic@
                                                                  omit,
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType, EPS_Only))))); // @sic R5s110176 sic@
    
    //  UE sends TRACKING AREA UPDATE COMPLETE
    //@siclog "Step 15d" siclog@
    SRB.receive (car_SRB1_NasPdu_IND(eutra_CellA,
                                     cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                       cr_508_TAU_Complete)));
    
    //@siclog "Step 16-34 Void" siclog@
    
  }// function fl_tc_9_2_1_1_7_Body

  function fl_TC_9_2_1_1_7a_Body() runs on EUTRA_PTC
  {
    var HalfOctet_Type v_EPS_Bearer_Id := tsc_EpsDefaultBearerId;
    var ProcedureTransactionIdentifier v_EPS_TI := '00'O;
    var NAS_MSG_Indication_Type v_NasInd;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var GutiParameters_Type v_Guti2_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellB);
    var template (omit) AccessPointName v_APN := omit;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only);
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only);
    var template (omit) ProtocolConfigOptions v_Pco := omit;
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;
    var template (value) TrackingAreaIdList v_TaiList;
    var template (value) CellPowerList_Type v_CellPowerList;
    var boolean v_EIT_Flag := false;
    var NasCount_Type v_NasCountUL;
    var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get();
    
    //@siclog "Step 1" siclog@
    //The SS configures: Cell A as the "Serving cell". Cell B as a "Non-Suitable cell". Cell C as a "Non-Suitable cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_NonSuitableCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 2" siclog@
    //+   The UE is switched on.
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA);
    
    //@siclog "Step 3" siclog@
    //+  The UE transmits an ATTACH REQUEST message.
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                              v_RRC_TI,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    
    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    v_EIT_Flag := f_CheckEsmInfoTransferFlag(v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST);
    if (ispresent( v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions)) {
      v_Pco := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    }
    
    //@siclog "Step 4 - 7Aa2" siclog@
    //+  The SS transmits an AUTHENTICATION REQUEST message to initiate the EPS authentication and AKA procedure.
    //+  The UE transmits an AUTHENTICATION RESPONSE message and establishes mutual authentication.
    //+  The SS transmits a NAS SECURITY MODE COMMAND message to activate NAS security.
    //+  The UE transmits a NAS SECURITY MODE COMPLETE message and establishes the initial security configuration.
    //+ Steps 7Aa1 and 7Aa2 ESM INFORMATION REQUEST / ESM INFORMATION RESPONSE
    v_APN := f_EUTRA_Authentication_NAS_AS_Security (eutra_CellA,v_EIT_Flag, v_EPS_TI, false);
    
    //@siclog "Step 8" siclog@
    //+  SS responds with ATTACH ACCEPT message including PLMN2, PLMN3 and PLMN4 in the list of equivalent PLMNs.
    f_EUTRA_RRCConnectionReconfigurationWithAttachAcceptAllParams(eutra_CellA,
                                                                  v_EPS_Bearer_Id,
                                                                  v_RRC_TI,
                                                                  v_EPS_TI,
                                                                  tsc_EAttachType_EpsOnly,
                                                                  f_EUTRA_GetPDNAddress(f_CheckPCOforIPallocationViaNas (v_Pco)),
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti1_Params),
                                                                  cs_TrackingAreaIdListDef_lv,
                                                                  omit,
                                                                  omit,
                                                                  omit,
                                                                  omit,
                                                                  f_GetDefPCOforPCSCFAddress (v_Pco),
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType,
                                                                                              EPS_Only),
                                                                  cs_GprsTimer_v(tsc_GprsTimerUnit_deact, tsc_Spare5),
                                                                  omit,
                                                                  omit,
                                                                  cs_PLMN_List_3PLMNs(tsc_PLMN2, tsc_PLMN3, tsc_PLMN4),
                                                                  omit,
                                                                  cs_EPS_NwkFtSup_IMSVoice);
    
    //@siclog "Step 9" siclog@
    //+  The UE transmits an ATTACH COMPLETE message
    f_EUTRA_NAS_AttachComplete(eutra_CellA, v_EPS_Bearer_Id);
    
    //@siclog "Steps 10 - 10a" siclog@
    //+  The UE is switched off.
    f_EUTRA_UE_Detach_SwitchOffUe (eutra_CellA, RRC_CONNECTED, -, EPS_Only);
    
    //@siclog "Step 11" siclog@
    //+  The SS configures: Cell A as the "Non-Suitable cell". Cell B as a "Non-Suitable cell". Cell C as a "Serving cell".
    //   Note: Cell C belongs to the forbidden PLMN.
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_ServingCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 12" siclog@
    //+  The UE is switched on.
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellC);
    
    //@siclog "Step 12a" siclog@
    //+ Check: Does the UE transmit an ATTACH REQUEST message in the next 60 seconds on Cell C?
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellC, 60.0, "Step 12a");
    
    //@siclog "Step 12b" siclog@
    //+  The SS configures: Cell A as the "Non-Suitable cell". Cell B as a "Serving cell". Cell C as a "Non-Suitable cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_NonSuitableCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 13" siclog@
    //+  Check: Does the UE transmit an ATTACH REQUEST message on PLMN2?
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                              v_RRC_TI,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 13");
    
    v_NasCountUL := v_NasInd.SecurityProtection.NasCount;
    
    //@siclog "Step 13Aa1 - 13Aa2" siclog@
    //+  ESM INFORMATION REQUEST / ESM INFORMATION RESPONSE
    if (f_CheckEsmInfoTransferFlag(v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST)) {
      v_APN := f_ESM_InformationTransfer_GetAPN (eutra_CellB, v_EPS_TI);
    }
    v_SecurityParams := f_EUTRA_Security_Get();
    v_SecurityParams := f_EUTRA_RRC_ActivateSecurity(eutra_CellB,
                                                     v_SecurityParams,
                                                     v_NasCountUL);
    f_EUTRA_Security_Set(v_SecurityParams);
    
    //@siclog "Step 14" siclog@
    //+  The SS transmits an ATTACH ACCEPT message without the Equivalent PLMNs list.
    //+  The ACTIVATE DEFAULT EPS BEARER CONTEXT REQUEST message is piggybacked in ATTACH ACCEPT message.
    v_TaiList := cs_TAIListNonConsecutive_lv(
                   f_Asn2Nas_PlmnId(v_Guti2_Params.PLMN_Identity),
                   { bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellB)) });
    f_EUTRA_RRCConnectionReconfigurationWithAttachAcceptAllParams(eutra_CellB,
                                                                  tsc_EpsDefaultBearerId,
                                                                  v_RRC_TI,
                                                                  v_EPS_TI,
                                                                  tsc_EAttachType_EpsOnly,
                                                                  f_EUTRA_GetPDNAddress (f_CheckPCOforIPallocationViaNas (v_Pco)),
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti2_Params),
                                                                  v_TaiList,
                                                                  omit,
                                                                  omit,
                                                                  omit,
                                                                  v_APN,
                                                                  f_GetDefPCOforPCSCFAddress (v_Pco),
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType,
                                                                                              EPS_Only));
    //@siclog "Step 15" siclog@
    //+ Check: does the UE transmit an ATTACH COMPLETE?
    f_EUTRA_NAS_AttachComplete(eutra_CellB, tsc_EpsDefaultBearerId);
    
    //@siclog "Step 15AA" siclog@
    //+  The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
    
    //@siclog "Step 15A" siclog@
    //+  The SS configures: Cell A as the "Serving cell". Cell B as a "Non-Suitable cell". Cell C as a "Non-suitable "Off" cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_NonSuitableOffCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 15B" siclog@
    //+  Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message on Cell A (PLMN1)?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(f_GetEPSTAUType(EPS_Only),
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 15B");
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    v_NasCountUL := v_NasInd.SecurityProtection.NasCount;
    
    //@siclog "Step 15C" siclog@
    //+  The SS sends TRACKING AREA UPDATE ACCEPT.
    v_TaiList := cds_TAIListNonConsecutive_tlv(f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity),
                                               { bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellA)) } );
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(f_GetEPSTAUType(EPS_Only),
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti1_Params),
                                                                  v_TaiList,
                                                                  v_EpsBearerCtxtStatus,
                                                                  f_EUTRA_GetCellLAI(eutra_CellA, EPS_Only),
                                                                  omit,
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType, EPS_Only))))); // @sic R5s110176 sic@
    
    //@siclog "Step 15D" siclog@
    //+  UE sends TRACKING AREA UPDATE COMPLETE
    SRB.receive (car_SRB1_NasPdu_IND(eutra_CellA,
                                     cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                       cr_508_TAU_Complete)));
    
    //@siclog "Step 16-34 Void" siclog@
    
  }

  function fl_TC_9_2_1_1_9_and_10_Body(NAS_CauseValue_Type p_RejectCause) runs on EUTRA_PTC
  {
    // ==========================================================================
    // initialize test case data structures
    // ==========================================================================
    
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NasInd;
    var GutiParameters_Type v_GutiParams := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only); // @sic R5s110176 sic@
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only); // @sic R5s110176 sic@
    var float v_NoReactionTime := f_EUTRA_SetTimerToleranceMax( eutra_CellB, rrcTimer, 3.0 ); // R5w100302
    var template (value) CellPowerList_Type v_CellPowerList;

    //@siclog "Step 1" siclog@
    //+ The SS configures Cell A as the "Serving cell". Cell B as a "Non-Suitable cell". If present Cell G as a "Non-Suitable cell"
    if (px_SinglePLMN_Tested == MultiPLMN) { // @sic R5-113681 sic@
      v_CellPowerList := {
        cs_CellPower( eutra_CellA, tsc_ServingCellRS_EPRE ),
        cs_CellPower( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),
        cs_CellPower( eutra_CellG, tsc_NonSuitableOffCellRS_EPRE ) // @sic R5-104728 sic@
      };
    } else {
      v_CellPowerList := {
        cs_CellPower( eutra_CellA, tsc_ServingCellRS_EPRE ),
        cs_CellPower( eutra_CellB, tsc_NonSuitableCellRS_EPRE )
      };
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 2" siclog@
    //+   The UE is switched on.
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@
    
    //@siclog "Step 3" siclog@
    //+   Check: does the UE transmit an ATTACH REQUEST message
    //    including a GUTI and a PDN CONNECTIVITY REQUEST message on cell A?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                 cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                 f_GetPdnType())));
    
    //@siclog "Step 4" siclog@
    //+ The SS transmits an ATTACH REJECT message with EMM cause = "Illegal UE" as specified.
    // Note: In test case 9.2.1.1.9 the reject cause is tsc_EmmCause_IllegalUe
    //       Test case 9.2.1.1.10 is identical to 9.2.1.1.9 except that reject cause is tsc_EmmCause_IllegalMe
    SRB.send( cas_SRB1_NasPdu_REQ( eutra_CellA,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request( tsc_SHT_NoSecurityProtection,
                                                   cs_508_AttachReject( cs_EMM_Cause_v(p_RejectCause),
                                                                        omit ))));
    
    //@siclog "Step 5" siclog@
    //+  The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //@siclog "Step 6" siclog@
    //+ The SS configures: Cell A as a "Non-Suitable cell". Cell B as the "Serving cell"
    v_CellPowerList := {
      cs_CellPower( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower( eutra_CellB, tsc_ServingCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList( v_CellPowerList );
    
    //@siclog "Step 7" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds?
    // Note: Cell B belongs to the same PLMN where the UE was rejected but a different TA
    f_EUTRA_CheckNoAttachOn1Cell( eutra_CellB, 30.0, "Step 7");
    
    //@siclog "Step 8" siclog@
    //+ The operator initiates an attach by MMI or by AT command.
    f_UT_TriggerAttach(UT);
    
    //@siclog "Step 9" siclog@
    //  Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds?
    f_EUTRA_CheckNoAttachOn1Cell( eutra_CellB, 30.0, "Step 9");
    
    //@siclog "Step 10 Void" siclog@
    
    //@siclog "Step 11" siclog@
    //  Check: Does the test result of CALL generic procedure (TS 36.508 subclause 6.4.2.5) indicate that
    //         the UE ignores paging on cell B for PS domain with GUTI-1?
    f_EUTRA_508Check_NASNoResponse( eutra_CellB,
                                    cs_NasPaging_OneRecord ( cs_PagingUE_Identity_S_TMSI ( v_GutiParams.MME_Code, v_GutiParams.M_TMSI )),
                                    v_NoReactionTime );
    
    if (px_SinglePLMN_Tested == MultiPLMN) { // @sic R5-113681 sic@
      //@siclog "Step 12a1" siclog@
      //+ IF px_SinglePLMN_Tested == MultiPLMN, the SS configures: Cell A as "Off", Cell B as a "Non-Suitable cell". Cell G as the "Serving cell".
      v_CellPowerList := {
        cs_CellPower( eutra_CellA, tsc_NonSuitableOffCellRS_EPRE ), // @sic R5-104728 sic@
        cs_CellPower( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),
        cs_CellPower( eutra_CellG, tsc_ServingCellRS_EPRE )
      };
      f_EUTRA_SetCellPowerList( v_CellPowerList );
    
      //@siclog "Step 12a2" siclog@
      //+ Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds on cell G or on cell B?
      f_EUTRA_CheckNoAttachOn1Cell( eutra_CellG, 30.0, "Step 13");
    
      //@siclog "Step 12a3" siclog@
      //+ The user initiates an attach by MMI or by AT command
      f_UT_TriggerAttach(UT);
    
      //@siclog "Step 12a4" siclog@
      // Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds?
      f_EUTRA_CheckNoAttachOn1Cell( eutra_CellG, 30.0, "Step 15");
    }
    
    //@siclog "Step 13-15 Void" siclog@

    //@siclog "Step 16" siclog@
    f_UT_SwitchOffUE( UT, false, CNF_REQUIRED); // @sic R5s1100395 sic@

    //@siclog "Step 16A" siclog@
    //+ The SS configures Cell A as a "Non-Suitable cell". Cell B as the "Serving cell". If present Cell G as a "Non-Suitable cell"
    if (px_SinglePLMN_Tested == MultiPLMN) { // @sic R5-113681 sic@
      v_CellPowerList := {
        cs_CellPower( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
        cs_CellPower( eutra_CellB, tsc_ServingCellRS_EPRE ),
        cs_CellPower( eutra_CellG, tsc_NonSuitableOffCellRS_EPRE ) // @sic R5-104728 sic@
      };
    } else {
      v_CellPowerList := {
        cs_CellPower( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
        cs_CellPower( eutra_CellB, tsc_ServingCellRS_EPRE )
      };
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );


    //@siclog "Step 17" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellB); // @sic R5s120065 sic@
    
    //@siclog "Step 17" siclog@
    // The following messages are to be observed on Cell B unless explicitly stated otherwise
     
    //@siclog "Step 18 Void" siclog@
    
    // Check: Does the UE transmit an ATTACH REQUEST message with IMSI-1?
    //@siclog "Step 19" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                 cdr_ATTACH_REQUEST_IMSIonly( v_AttachType, v_AdditionalUpdateType),
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                 f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 19");

    //@siclog "Step 20-31" siclog@
    f_EUTRA_IdleUpdated_Step5_17 (eutra_CellB, STATE2_IDLEUPDATE, EPS_Only, v_NasInd, false); // @sic R5-105005, R5s110395 sic@
    
  }// function fl_tc_9_2_1_1_9_and_10_Body

  function fl_TC_9_2_1_1_13_Body() runs on EUTRA_PTC
  {
    // ==========================================================================
    // initialize test case data structures
    // ==========================================================================
    var template (value) CellPowerList_Type v_CellPowerList;
    var NAS_MSG_Indication_Type v_NasInd;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only); // @sic R5s110176 sic@
    var ProcedureTransactionIdentifier v_EPS_TI := '00'O;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var B3_Type v_PDNValue := f_GetPdnType();
    var GutiParameters_Type v_GutiParams_CellI := f_EUTRA_CellInfo_GetGuti(eutra_CellI);
    var GutiParameters_Type v_GutiParams_CellG := f_EUTRA_CellInfo_GetGuti(eutra_CellG);
    var NAS_PlmnId v_PLMN_I := f_Asn2Nas_PlmnId (v_GutiParams_CellI.PLMN_Identity);
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only); // @sic R5s110176 sic@
    
    //@siclog "Step 1" siclog@
    // The SS configures Cell G as the "Serving cell",Cell H as a " Suitable Neighbour cell", Cell I as a "Non-Suitable Off cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellG, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellH, tsc_SuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellI, tsc_NonSuitableOffCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 2" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellG); // @sic R5s120065 sic@
    
    //@siclog "Step 3" siclog@
    //+ The UE transmits an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message on Cell G.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellG,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking( tsc_SHT_IntegrityProtected,
                                                                                  cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  f_GetPdnType())));
    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    
    //@siclog "Step 4" siclog@
    //+ The SS transmits an ATTACH REJECT message, EMM cause = "PLMN not allowed".
    SRB.send  ( cas_SRB1_NasPdu_REQ ( eutra_CellG,
                                      cs_TimingInfo_Now,
                                      cs_NAS_Request ( tsc_SHT_NoSecurityProtection,
                                                       cs_508_AttachReject ( cs_EMM_Cause_v(tsc_Cause_PLMN_NotAllowed),
                                                                             omit))));
    //@siclog "Step 5" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellG);
       
    //@siclog "Step 6" siclog@
    //+ Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds on cell G or on cell H?
    f_EUTRA_CheckNoAttachOn2Cells (eutra_CellG, eutra_CellH, 30.0, "Step 6");
    
    //@siclog "Step 7" siclog@
    f_UT_SwitchOffUE (UT, false, CNF_REQUIRED); // @sic R5s1100395 sic@
    //@siclog "Step 8" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellI); // @sic R5s120065 sic@
    
    //@siclog "Step 9" siclog@
    f_EUTRA_CheckNoAttachOn2Cells (eutra_CellG, eutra_CellH, 90.0, "Step 9"); // @sic R5-115560 sic@
    
    //@siclog "Step 10" siclog@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellG, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellH, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellI, tsc_SuitableCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //  The following messages are sent and shall be received on cell I
    //  - Does the UE send an ATTACH REQUEST including the IMSI?
    //@siclog "Step 11 - 12" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellI,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                 cdr_ATTACH_REQUEST_IMSIonly(v_AttachType, v_AdditionalUpdateType),
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                 v_PDNValue)));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 12");
    
    // //@siclog "Step 12A 12M" siclog@
    // The SS completes the attach procedure successfully and then releases the RRC -connection by executing
    // steps 5 to 17 of UE registration procedure in TS 36.508 clause 4.5.2.3.
    f_EUTRA_IdleUpdated_Step5_17 (eutra_CellI, STATE2_IDLEUPDATE, EPS_Only, v_NasInd); // @sic R5s110395 sic@
    
    //@siclog "Step 13 - 19 Void" siclog@
    
    //@siclog "Step 20 - 21" siclog@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellI, RRC_IDLE ,-, EPS_Only); // @sic R5s110176 sic@
    
    //@siclog "Step 22" siclog@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellG, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellI, tsc_NonSuitableOffCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    //@siclog "Step 23" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellG, CNF_REQUIRED); // @sic R5s120065 sic@ @sic R5s120361 sic@
    // Steps 25 and 26. Select PLMN of cell G (as set in fl_EUTRA_InitNAS_forNAS_Cells)
    //@siclog "Step 25 - 26" siclog@
    f_UT_ManualPLMN_Select (UT, f_Asn2Nas_PlmnId(v_GutiParams_CellG.PLMN_Identity)); // @sic R5-106675 sic@
    
    //@siclog "Step 27" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message including
    // a PDN CONNECTIVITY REQUEST message as specified?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellG,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                 cdr_ATTACH_REQUEST_AttachType(v_AttachType,
                                                                                                               v_AdditionalUpdateType,
                                                                                                               f_GutiParameters2MobileIdentity(omit, v_GutiParams_CellI),
                                                                                                               cr_TAI (v_PLMN_I, bit2oct(f_EUTRA_CellInfo_GetTAC ( eutra_CellI ))), // @sic R5s100597 sic@
                                                                                                               cr_LAI_Any ifpresent,
                                                                                                               cr_TMSI_Status ifpresent),
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                 f_GetPdnType())));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 27");
    
    //@siclog "Step 28 - 40" siclog@
    // The SS completes the attach procedure successfully and then releases the RRC -connection by executing
    // steps 5 to 17 of UE registration procedure in TS 36.508 clause 4.5.2.3.
    f_EUTRA_IdleUpdated_Step5_17 (eutra_CellG, STATE2_IDLEUPDATE, EPS_Only, v_NasInd); // @sic R5s110395 sic@
    
  }// function fl_tc_9_2_1_1_13_Body

  function fl_TC_9_2_1_1_13a_Body() runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList;
    var NAS_MSG_Indication_Type v_NasInd;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only);
    var ProcedureTransactionIdentifier v_EPS_TI := '00'O;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var B3_Type v_PDNValue := f_GetPdnType();
    var GutiParameters_Type v_GutiParams_CellC := f_EUTRA_CellInfo_GetGuti(eutra_CellC);
    var GutiParameters_Type v_GutiParams_CellA := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var NAS_PlmnId v_PLMN_C := f_Asn2Nas_PlmnId (v_GutiParams_CellC.PLMN_Identity);
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only);
    
    //@siclog "Step 1" siclog@
    // The SS configures Cell A as the "Serving cell",Cell B as a " Suitable Neighbour cell", Cell C as a "Non-Suitable Off cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_NonSuitableOffCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 2" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA);
    
    //@siclog "Step 3" siclog@
    //+ The UE transmits an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message on Cell A.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking( tsc_SHT_IntegrityProtected,
                                                                                  cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  f_GetPdnType())));
    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    
    //@siclog "Step 4" siclog@
    //+ The SS transmits an ATTACH REJECT message, EMM cause = "PLMN not allowed".
    SRB.send  ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                      cs_TimingInfo_Now,
                                      cs_NAS_Request ( tsc_SHT_NoSecurityProtection,
                                                       cs_508_AttachReject ( cs_EMM_Cause_v(tsc_Cause_PLMN_NotAllowed),
                                                                             omit))));
    //@siclog "Step 5" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
       
    //@siclog "Step 6" siclog@
    //+ Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds on cell A or on cell B?
    f_EUTRA_CheckNoAttachOn2Cells (eutra_CellA, eutra_CellB, 30.0, "Step 6");
    
    //@siclog "Step 7" siclog@
    f_UT_SwitchOffUE (UT, false, CNF_REQUIRED);
    
    //@siclog "Step 8" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellC);
    
    //@siclog "Step 9" siclog@
    f_EUTRA_CheckNoAttachOn2Cells (eutra_CellA, eutra_CellB, 90.0, "Step 9");
    
    //@siclog "Step 10" siclog@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_ServingCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //  The following messages are sent and shall be received on cell C
    //  - Does the UE send an ATTACH REQUEST including the IMSI?
    //@siclog "Step 11 - 12" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellC,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                 cdr_ATTACH_REQUEST_IMSIonly(v_AttachType, v_AdditionalUpdateType),
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                 v_PDNValue)));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 12");
    
    // //@siclog "Step 12A 12M" siclog@
    // The SS completes the attach procedure successfully and then releases the RRC -connection by executing
    // steps 5 to 17 of UE registration procedure in TS 36.508 clause 4.5.2.3.
    f_EUTRA_IdleUpdated_Step5_17 (eutra_CellC, STATE2_IDLEUPDATE, EPS_Only, v_NasInd);
    
    //@siclog "Step 13 - 19 Void" siclog@
    
    //@siclog "Step 20 - 21" siclog@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellC, RRC_IDLE ,-, EPS_Only);
    
    //@siclog "Step 22" siclog@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_NonSuitableOffCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    //@siclog "Step 23" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA, CNF_REQUIRED);
    // Steps 25 and 26. Select PLMN of cell A (as set in fl_EUTRA_InitNAS_forNAS_Cells)
    //@siclog "Step 25 - 26" siclog@
    f_UT_ManualPLMN_Select (UT, f_Asn2Nas_PlmnId(v_GutiParams_CellA.PLMN_Identity));
    
    //@siclog "Step 27" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message including
    // a PDN CONNECTIVITY REQUEST message as specified?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                 cdr_ATTACH_REQUEST_AttachType(v_AttachType,
                                                                                                               v_AdditionalUpdateType,
                                                                                                               f_GutiParameters2MobileIdentity(omit, v_GutiParams_CellC),
                                                                                                               cr_TAI (v_PLMN_C, bit2oct(f_EUTRA_CellInfo_GetTAC ( eutra_CellC ))),
                                                                                                               cr_LAI_Any ifpresent,
                                                                                                               cr_TMSI_Status ifpresent),
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                 f_GetPdnType())));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 27");
    
    //@siclog "Step 28 - 40" siclog@
    // The SS completes the attach procedure successfully and then releases the RRC -connection by executing
    // steps 5 to 17 of UE registration procedure in TS 36.508 clause 4.5.2.3.
    f_EUTRA_IdleUpdated_Step5_17 (eutra_CellA, STATE2_IDLEUPDATE, EPS_Only, v_NasInd);
    
  }

  function fl_TC_9_2_1_1_14_Body() runs on EUTRA_PTC
  {
    // ==========================================================================
    // initialize test case data structures
    // ==========================================================================

    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var ProcedureTransactionIdentifier v_EPS_TI := '00'O;
    var NAS_MSG_Indication_Type v_NasInd;
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only); // @sic R5s110176 sic@
    var template (value) CellPowerList_Type v_CellPowerList;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only);
    var B3_Type v_PDNType := f_GetPdnType();
    
    //@siclog "Step 1" siclog@
    //The SS configures:The SS configures:Cell A as the "Serving cell".Cell B as a "Suitable cell".
    v_CellPowerList := {
      cs_CellPower( eutra_CellA, tsc_ServingCellRS_EPRE  ),
      cs_CellPower( eutra_CellB, tsc_SuitableCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList( v_CellPowerList );

    //@siclog "Step 2" siclog@
    //+ The UE is switched on.
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@

    //@siclog "Step 3" siclog@
    //+ The UE transmits an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message as specified on Cell A.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas( eutra_CellA,
                                                tsc_RRC_TI_Def,
                                                cr_EstablishmentCause_Any,
                                                cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  f_GetPdnType())));
    
    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    
    //@siclog "Step 4" siclog@
    //+ The SS transmits an ATTACH REJECT message, EMM cause = "Tracking area not allowed".
    //+ (The list of "forbidden tracking areas for roaming" in the UE should now contain TAI-1)
    SRB.send( cas_SRB1_NasPdu_REQ( eutra_CellA,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request( tsc_SHT_NoSecurityProtection,
                                                   cs_508_AttachReject( cs_EMM_Cause_v(tsc_Cause_TA_NotAllowed),
                                                                        omit ))));
    //@siclog "Step 5" siclog@
    //+ The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);

    //@siclog "Step 6" siclog@
    //+ Check: Does the UE transmit the ATTACH REQUEST message in the next 30 seconds on Cell A or Cell B?? (2, F)
    f_EUTRA_CheckNoAttachOn2Cells(eutra_CellA, eutra_CellB, 30.0, "Step 6");

    // The user initiates an attach by MMI or by AT command.
    //@siclog "Step 7" siclog@
    f_UT_TriggerAttach(UT); // @sic R5-101012 sic@
    
    //+ Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds on Cell A? (F)
    //@siclog "Step 8" siclog@
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellA, 30.0, "Step 8"); // @sic R5-101012 sic@
    
    //@siclog "Step 9" siclog@
    //+ The SS reconfigures:
    //+ Cell A as a "Suitable cell".  Cell B as a " serving cell"
    v_CellPowerList := {
      cs_CellPower( eutra_CellA, tsc_SuitableCellRS_EPRE ),
      cs_CellPower( eutra_CellB, tsc_ServingCellRS_EPRE  )
    };
    f_EUTRA_SetCellPowerList( v_CellPowerList );
    
    //@siclog "Step 10" siclog@
    //+ Check: Does the UE transmit the ATTACH REQUEST message including
    //         a PDN CONNECTIVITY REQUEST message as specified on Cell B? ( 1,4, P)
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                 cdr_ATTACH_REQUEST_IMSIonly(v_AttachType, v_AdditionalUpdateType),
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                 f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 10");
    
    //+ The SS transmits an ATTACH REJECT message, EMM cause = "Tracking area not allowed".
    //+ (The list of "forbidden tracking areas for roaming" in the UE should now contain TAI-1 and TAI-2)
    //@siclog "Step 11" siclog@
    SRB.send( cas_SRB1_NasPdu_REQ( eutra_CellB,
                                   cs_TimingInfo_Now,
                                   cs_NAS_Request( tsc_SHT_NoSecurityProtection,
                                                   cs_508_AttachReject( cs_EMM_Cause_v(tsc_Cause_TA_NotAllowed),
                                                                        omit ))));
    
    //+ The SS releases the RRC connection.
    //@siclog "Step 12" siclog@
    f_EUTRA_RRC_ConnectionRelease( eutra_CellB );
    
    //+ The SS reconfigures:
    //+ Cell A as the "Serving cell". Cell B as a " Suitable cell",
    //@siclog "Step 13" siclog@
    v_CellPowerList := {
      cs_CellPower( eutra_CellA, tsc_ServingCellRS_EPRE  ),
      cs_CellPower( eutra_CellB, tsc_SuitableCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList( v_CellPowerList );
    
    //@siclog "Step 14" siclog@
    //+ Check: Does the UE transmit the ATTACH REQUEST message in the next 30 seconds? (1,3,5, F)
    f_EUTRA_CheckNoAttachOn2Cells( eutra_CellA, eutra_CellB, 30.0, "Step 14");

    //@siclog "Step 15" siclog@
    //+ If possible (see ICS) switch off is performed. Otherwise the power is removed.
    f_UT_SwitchOffUE(UT, false, CNF_REQUIRED); // @sic R5s1100395 sic@

    //@siclog "Step 16" siclog@
    //+ The SS reconfigures:
    //+ Cell A as the "Serving cell". Cell B as a " Non Suitable cell",
    v_CellPowerList := {
      cs_CellPower( eutra_CellA, tsc_ServingCellRS_EPRE ),
      cs_CellPower( eutra_CellB, tsc_NonSuitableCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList( v_CellPowerList );

    //@siclog "Step 17" siclog@
    //+ The UE is brought back to operation.
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@

    //@siclog "Step 18 Void" siclog@

    //@siclog "Step 19" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                 cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, v_PDNType)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 19");
    
    //@siclog "Step 30 - 32" siclog@
    f_EUTRA_IdleUpdated_Step5_17(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only, v_NasInd); // @sic R5s110395 sic@
    
  }// function fl_tc_9_2_1_1_14_Body

  function fl_TC_9_2_1_1_15_Body() runs on EUTRA_PTC
  {
    // ==========================================================================
    // initialize test case data structures
    // ==========================================================================
    
    var NAS_MSG_Indication_Type v_NasInd;
    var ProcedureTransactionIdentifier v_EPS_TI := '00'O;
    var template (value) CellPowerList_Type v_CellPowerList;
    var B3_Type v_PDNValue := f_GetPdnType();
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only);
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only);
    
    //@siclog "Step 1" siclog@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellI, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellE, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_NonSuitableOffCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList ); // @sic R5-101012 sic@
    
    //@siclog "Step 2" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellI); // @sic R5s120065 sic@
    
    //@siclog "Step 3" siclog@
    //+ The UE transmits an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message on Cell I.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellI,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking( tsc_SHT_IntegrityProtected,
                                                                                  cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  f_GetPdnType())));
    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    
    //@siclog "Step 4" siclog@
    //+ The SS transmits an ATTACH REJECT message, EMM cause = "roaming not allowed in this tracking area ".
    SRB.send  ( cas_SRB1_NasPdu_REQ ( eutra_CellI,
                                      cs_TimingInfo_Now,
                                      cs_NAS_Request ( tsc_SHT_NoSecurityProtection,
                                                       cs_508_AttachReject ( cs_EMM_Cause_v(tsc_Cause_Roaming_NotAllowed),
                                                                             omit))));
    //@siclog "Step 5" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellI);
    
    //+  Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds on Cell I? (F)
    //@siclog "Step 6" siclog@
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellI, 30.0, "Step 6");
    
    //  The operator initiates an attach by MMI or by AT command.
    //@siclog "Step 7" siclog@
    f_UT_TriggerAttach(UT);
    
    //+ Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds on Cell I? (F)
    //@siclog "Step 8" siclog@
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellI, 30.0, "Step 8");
    
    //@siclog "Step 8a" siclog@
    // The following messages are to be observed on Cell E unless explicitly stated otherwise.
    //The SS configures:Cell I as the "Serving cell".Cell E as a " Suitable Neighbour cell",Cell C as a "Non-Suitable Off cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellI, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellE, tsc_SuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_NonSuitableOffCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList ); // @sic R5-101012 sic@
    
    //  Check: Does the UE transmit an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message on Cell E as specified?
    // Note: according to TS 24.301, the UE has the choice to enter "LIMITED-SERVICE" or "PLMN- SEARCH" state. But in any case it shall do a PLMN selection.
    //      In the first option, the UE shall apply reselection so it will select cell E and then attempt to attach; in the second option it will select the
    //      same PLMN again and exclude cells from forbidden TAs so it will select cell E.
    //@siclog "Step 9" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellE,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking( tsc_SHT_NoSecurityProtection,
                                                                                  cdr_ATTACH_REQUEST_IMSIonly(v_AttachType, v_AdditionalUpdateType),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  v_PDNValue)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 9");
    
    //@siclog "Step 10" siclog@
    //+ The SS transmits an ATTACH REJECT message, EMM cause = "roaming not allowed in this tracking area ".
    SRB.send  ( cas_SRB1_NasPdu_REQ ( eutra_CellE,
                                      cs_TimingInfo_Now,
                                      cs_NAS_Request ( tsc_SHT_NoSecurityProtection,
                                                       cs_508_AttachReject ( cs_EMM_Cause_v(tsc_Cause_Roaming_NotAllowed),
                                                                             omit))));
    //@siclog "Step 11" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellE);
    
    //@siclog "Step 12" siclog@
    f_EUTRA_CheckNoAttachOn2Cells(eutra_CellI, eutra_CellE, 60.0 , "Step 12");
    
    //@siclog "Step 13" siclog@
    f_UT_SwitchOffUE (UT, false, CNF_REQUIRED); // @sic R5s1100395 sic@
    
    //@siclog "Step 14" siclog@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellI, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellE, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_NonSuitableOffCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 15" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellI); // @sic R5s120065 sic@
    
    //@siclog "Step 16" siclog@
    //+ The UE transmits an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message on Cell I.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellI,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking( tsc_SHT_NoSecurityProtection,
                                                                                  cdr_ATTACH_REQUEST_IMSIonly(v_AttachType, v_AdditionalUpdateType),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  v_PDNValue)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 16");
    
    //@siclog "Step 17" siclog@
    //+ The SS transmits an ATTACH REJECT message, EMM cause = "roaming not allowed in this tracking area ".
    SRB.send  ( cas_SRB1_NasPdu_REQ ( eutra_CellI,
                                      cs_TimingInfo_Now,
                                      cs_NAS_Request ( tsc_SHT_NoSecurityProtection,
                                                       cs_508_AttachReject ( cs_EMM_Cause_v(tsc_Cause_Roaming_NotAllowed),
                                                                             omit))));
    
    //@siclog "Step 18" siclog@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellI, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellE, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_SuitableCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 19" siclog@
    // The UE transmits an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message on Cell C.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellC,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking( tsc_SHT_NoSecurityProtection,
                                                                                  cdr_ATTACH_REQUEST_IMSIonly(v_AttachType, v_AdditionalUpdateType),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  v_PDNValue)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 19");
    
    //@siclog "Steps 20 - 32" siclog@
    f_EUTRA_IdleUpdated_Step5_17 (eutra_CellC, STATE2_IDLEUPDATE, EPS_Only, v_NasInd); // @sic R5s110395 sic@
    
  }// function fl_tc_9_2_1_1_15_Body

  function fl_TC_9_2_1_1_15a_Body() runs on EUTRA_PTC
  {
    var NAS_MSG_Indication_Type v_NasInd;
    var ProcedureTransactionIdentifier v_EPS_TI := '00'O;
    var template (value) CellPowerList_Type v_CellPowerList;
    var B3_Type v_PDNValue := f_GetPdnType();
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only);
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only);
    
    //@siclog "Step 1" siclog@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellA, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_NonSuitableOffCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 2" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellB);
    
    //@siclog "Step 3" siclog@
    //+ The UE transmits an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message on Cell B.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking( tsc_SHT_IntegrityProtected,
                                                                                  cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  f_GetPdnType())));
    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    
    //@siclog "Step 4" siclog@
    //+ The SS transmits an ATTACH REJECT message, EMM cause = "roaming not allowed in this tracking area ".
    SRB.send  ( cas_SRB1_NasPdu_REQ ( eutra_CellB,
                                      cs_TimingInfo_Now,
                                      cs_NAS_Request ( tsc_SHT_NoSecurityProtection,
                                                       cs_508_AttachReject ( cs_EMM_Cause_v(tsc_Cause_Roaming_NotAllowed),
                                                                             omit))));
    //@siclog "Step 5" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
    
    //+  Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds on Cell B? (F)
    //@siclog "Step 6" siclog@
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellB, 90.0, "Step 6");
    
    //  The operator initiates an attach by MMI or by AT command.
    //@siclog "Step 7" siclog@
    f_UT_TriggerAttach(UT);
    
    //+ Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds on Cell B? (F)
    //@siclog "Step 8" siclog@
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellB, 90.0, "Step 8");
    
    //@siclog "Step 8A" siclog@
    // The following messages are to be observed on Cell A unless explicitly stated otherwise.
    //The SS configures:Cell B as the "Serving cell".Cell A as a " Suitable Neighbour cell",Cell C as a "Non-Suitable Off cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellA, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_NonSuitableOffCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //  Check: Does the UE transmit an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message on Cell A as specified?
    // Note: according to TS 24.301, the UE has the choice to enter "LIMITED-SERVICE" or "PLMN- SEARCH" state. But in any case it shall do a PLMN selection.
    //      In the first option, the UE shall apply reselection so it will select cell A and then attempt to attach; in the second option it will select the
    //      same PLMN again and exclude cells from forbidden TAs so it will select cell A.
    //@siclog "Step 9" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking( tsc_SHT_NoSecurityProtection,
                                                                                  cdr_ATTACH_REQUEST_IMSIonly(v_AttachType, v_AdditionalUpdateType),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  v_PDNValue)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 9");
    
    //@siclog "Step 10" siclog@
    //+ The SS transmits an ATTACH REJECT message, EMM cause = "roaming not allowed in this tracking area ".
    SRB.send  ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                      cs_TimingInfo_Now,
                                      cs_NAS_Request ( tsc_SHT_NoSecurityProtection,
                                                       cs_508_AttachReject ( cs_EMM_Cause_v(tsc_Cause_Roaming_NotAllowed),
                                                                             omit))));
    //@siclog "Step 11" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //@siclog "Step 12" siclog@
    f_EUTRA_CheckNoAttachOn2Cells(eutra_CellB, eutra_CellA, 90.0 , "Step 12");
    
    //@siclog "Step 13" siclog@
    f_UT_SwitchOffUE (UT, false, CNF_REQUIRED);
    
    //@siclog "Step 14" siclog@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellA, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_NonSuitableOffCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 15" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellB);
    
    //@siclog "Step 16" siclog@
    //+ The UE transmits an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message on Cell B.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking( tsc_SHT_NoSecurityProtection,
                                                                                  cdr_ATTACH_REQUEST_IMSIonly(v_AttachType, v_AdditionalUpdateType),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  v_PDNValue)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 16");
    
    //@siclog "Step 17" siclog@
    //+ The SS transmits an ATTACH REJECT message, EMM cause = "roaming not allowed in this tracking area ".
    SRB.send  ( cas_SRB1_NasPdu_REQ ( eutra_CellB,
                                      cs_TimingInfo_Now,
                                      cs_NAS_Request ( tsc_SHT_NoSecurityProtection,
                                                       cs_508_AttachReject ( cs_EMM_Cause_v(tsc_Cause_Roaming_NotAllowed),
                                                                             omit))));
    
    //@siclog "Step 18" siclog@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellB, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE ),
      cs_CellPower ( eutra_CellA, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_ServingCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 19" siclog@
    // The UE transmits an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message on Cell C.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellC,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking( tsc_SHT_NoSecurityProtection,
                                                                                  cdr_ATTACH_REQUEST_IMSIonly(v_AttachType, v_AdditionalUpdateType),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  v_PDNValue)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 19");
    
    //@siclog "Steps 20 - 32" siclog@
    f_EUTRA_IdleUpdated_Step5_17 (eutra_CellC, STATE2_IDLEUPDATE, EPS_Only, v_NasInd);
    
  }// function fl_tc_9_2_1_1_15a_Body

  function fl_TC_9_2_1_1_16_Body() runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList;
    var NAS_MSG_Indication_Type v_NAS_Ind;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only); // @sic R5s110176 sic@
    var GutiParameters_Type v_GutiParams_CellG := f_EUTRA_CellInfo_GetGuti(eutra_CellG);
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only); // @sic R5s110176 sic@
    //timer t_Wait := f_EUTRA_SetTimerToleranceMax( eutra_CellA, nonProtocolTimer, 300.0 ); // This needs a prose CR @sic R5s100784 sic@!!!
    
    //@siclog "Step 1" siclog@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellG, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellH, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellI, tsc_NonSuitableOffCellRS_EPRE )  // @sic R5-110741 sic@
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 2 Void" siclog@
    
    // Switch on UE
    //@siclog "Step 3" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellG); // @sic R5s120065 sic@
    
    //  The UE transmits an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message
    //@siclog "Step 4" siclog@
    v_NAS_Ind:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellG,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                 cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                 f_GetPdnType())));
    
    //@siclog "Step 5" siclog@
    // The SS transmits an ATTACH REJECT message with EMM cause = "EPS services not allowed in this PLMN"
    SRB.send  ( cas_SRB1_NasPdu_REQ ( eutra_CellG,
                                      cs_TimingInfo_Now,
                                      cs_NAS_Request ( tsc_SHT_NoSecurityProtection,
                                                       cs_508_AttachReject (
                                                                            cs_EMM_Cause_v(tsc_Cause_EPSServNotAllowedInThisPLMN),
                                                                            omit))));
    
    //  The SS releases the RRC connection
    //@siclog "Step 6" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellG);
    
    //@siclog "Step 7" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds?
    f_EUTRA_CheckNoAttachOn1Cell ( eutra_CellG, 90.0, "Step 7" );
    
    //@siclog "Step 8" siclog@
    // Note: cellG and cellH are in the different TAI and same PLMN
    v_CellPowerList := {
      cs_CellPower ( eutra_CellG, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellH, tsc_ServingCellRS_EPRE )
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 9 Void" siclog@
    //@siclog "Step 10" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds?
    f_EUTRA_CheckNoAttachOn1Cell ( eutra_CellH, 90.0, "Step 10" );
    
    //@siclog "Step 11" siclog@
    // Note: cellG and cellI are different PLMNs
    v_CellPowerList := {
      cs_CellPower ( eutra_CellI, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellH, tsc_NonSuitableOffCellRS_EPRE )
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    
    //@siclog "Step 12 Void" siclog@
    //  Does the UE transmit an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message
    //@siclog "Step 13" siclog@
    v_NAS_Ind:= f_EUTRA_RRC_ConnEst_DefWithNas( eutra_CellI,
                                                tsc_RRC_TI_Def,
                                                cr_EstablishmentCause_Any,
                                                cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                  cdr_ATTACH_REQUEST_IMSIonly(v_AttachType, v_AdditionalUpdateType),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 13");
    
    
    //@siclog "Step 13a" siclog@
    // The SS completes the attach procedure successfully and then releases the RRC
    // connection by executing steps 5 to 17 of UE registration procedure in TS 36.508 clause 4.5.2.3
    f_EUTRA_IdleUpdated_Step5_17 (eutra_CellI, STATE2_IDLEUPDATE, EPS_Only, v_NAS_Ind); // @sic R5s110395 sic@
    
    //@siclog "Step 14 - 20 Void" siclog@
    
    // If possible (see ICS) switch off is performed. Otherwise the power is removed.
    //@siclog "Step 21" siclog@
    f_EUTRA_UE_Detach_SwitchOffUe (eutra_CellI, RRC_IDLE,-, EPS_Only);   // @sic R5s110176 sic@ This needs a prose CR R5s100784 !!!
    
    //@siclog "Step 22" siclog@
    // The SS reconfigures:
    // Cell G as the "Serving cell". Cell I as a " Non Suitable cell",
    v_CellPowerList := {
      cs_CellPower ( eutra_CellG, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellI, tsc_NonSuitableCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 23" siclog@
    // The UE is brought back to operation.
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellG); // @sic R5s120065 sic@
    
    //@siclog "Step 24 Void" siclog@
    //@siclog "Step 25" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message?
    // @sic R5s110168 change 2.13 sic@
    f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellG,
                                   tsc_RRC_TI_Def,
                                   cr_EstablishmentCause_Any,
                                   cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                     cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                     cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                     f_GetPdnType()))); /* @sic R5-120721 change 3 sic@ */
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "step 25");
    
    //@siclog "Step 26" siclog@
    // The SS transmits an ATTACH REJECT message with EMM cause = "EPS services not allowed in this PLMN"
    SRB.send  ( cas_SRB1_NasPdu_REQ ( eutra_CellG,
                                      cs_TimingInfo_Now,
                                      cs_NAS_Request ( tsc_SHT_NoSecurityProtection,
                                                       cs_508_AttachReject (cs_EMM_Cause_v(tsc_Cause_EPSServNotAllowedInThisPLMN),
                                                                            omit))));
    
    //  The SS releases the RRC connection
    //@siclog "Step 26A" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellG);

    //  Select PLMN of cell G (as set in fl_EUTRA_InitNAS_forNAS_Cells)
    //@siclog "Step 27 - 28" siclog@
    f_UT_ManualPLMN_Select (UT, f_Asn2Nas_PlmnId(v_GutiParams_CellG.PLMN_Identity)); // @sic R5-106675 sic@
    
    //  Does the UE transmit an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message
    //@siclog "Step 29" siclog@
    v_NAS_Ind:= f_EUTRA_RRC_ConnEst_DefWithNas( eutra_CellG,
                                                tsc_RRC_TI_Def,
                                                cr_EstablishmentCause_Any,
                                                cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                  cdr_ATTACH_REQUEST_IMSIonly(v_AttachType, v_AdditionalUpdateType),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 29");
    
    //@siclog "Steps 30 - 42" siclog@
    // The attach procedure is completed and the RRC connection is released
    // by executing steps 5 to 17 of TS 36.508 sub clause 4.5.2.3.
    f_EUTRA_IdleUpdated_Step5_17 (eutra_CellG, STATE2_IDLEUPDATE, EPS_Only, v_NAS_Ind); // @sic R5s110395 sic@
    
  }// end function fl_TC_9_2_1_1_16_Body

  function fl_TC_9_2_1_1_16a_Body() runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList;
    var NAS_MSG_Indication_Type v_NAS_Ind;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only);
    var GutiParameters_Type v_GutiParams_CellA := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only);
    
    //@siclog "Step 1" siclog@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_NonSuitableOffCellRS_EPRE )
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 2 Void" siclog@
    
    // Switch on UE
    //@siclog "Step 3" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA);
    
    //  The UE transmits an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message
    //@siclog "Step 4" siclog@
    v_NAS_Ind:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                 cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                 f_GetPdnType())));
    
    //@siclog "Step 5" siclog@
    // The SS transmits an ATTACH REJECT message with EMM cause = "EPS services not allowed in this PLMN"
    SRB.send  ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                      cs_TimingInfo_Now,
                                      cs_NAS_Request ( tsc_SHT_NoSecurityProtection,
                                                       cs_508_AttachReject (
                                                                            cs_EMM_Cause_v(tsc_Cause_EPSServNotAllowedInThisPLMN),
                                                                            omit))));
    
    //  The SS releases the RRC connection
    //@siclog "Step 6" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //@siclog "Step 7" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds?
    f_EUTRA_CheckNoAttachOn1Cell ( eutra_CellA, 90.0, "Step 7" );
    
    //@siclog "Step 8" siclog@
    // Note: cellA and cellB are in the different TAI and same PLMN
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE )
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 9 Void" siclog@
    //@siclog "Step 10" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds?
    f_EUTRA_CheckNoAttachOn1Cell ( eutra_CellB, 90.0, "Step 10" );
    
    //@siclog "Step 11" siclog@
    // Note: cellA and cellC are different PLMNs
    v_CellPowerList := {
      cs_CellPower ( eutra_CellC, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableOffCellRS_EPRE )
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    
    //@siclog "Step 12 Void" siclog@
    //  Does the UE transmit an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message
    //@siclog "Step 13" siclog@
    v_NAS_Ind:= f_EUTRA_RRC_ConnEst_DefWithNas( eutra_CellC,
                                                tsc_RRC_TI_Def,
                                                cr_EstablishmentCause_Any,
                                                cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                  cdr_ATTACH_REQUEST_IMSIonly(v_AttachType, v_AdditionalUpdateType),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 13");
    
    
    //@siclog "Step 13A" siclog@
    // The SS completes the attach procedure successfully and then releases the RRC
    // connection by executing steps 5 to 17 of UE registration procedure in TS 36.508 clause 4.5.2.3
    f_EUTRA_IdleUpdated_Step5_17 (eutra_CellC, STATE2_IDLEUPDATE, EPS_Only, v_NAS_Ind);
    
    //@siclog "Step 14 - 20 Void" siclog@
    
    // If possible (see ICS) switch off is performed. Otherwise the power is removed.
    //@siclog "Step 21" siclog@
    f_EUTRA_UE_Detach_SwitchOffUe (eutra_CellC, RRC_IDLE,-, EPS_Only);
    
    //@siclog "Step 22" siclog@
    // The SS reconfigures:
    // Cell A as the "Serving cell". Cell C as a " Non Suitable cell",
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_NonSuitableCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 23" siclog@
    // The UE is brought back to operation.
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA);
    
    //@siclog "Step 24 Void" siclog@
    //@siclog "Step 25" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message?
    // @sic R5s110168 change 2.13 sic@
    f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                   tsc_RRC_TI_Def,
                                   cr_EstablishmentCause_Any,
                                   cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                     cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                     cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                     f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "step 25");
    
    //@siclog "Step 26" siclog@
    // The SS transmits an ATTACH REJECT message with EMM cause = "EPS services not allowed in this PLMN"
    SRB.send  ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                      cs_TimingInfo_Now,
                                      cs_NAS_Request ( tsc_SHT_NoSecurityProtection,
                                                       cs_508_AttachReject (cs_EMM_Cause_v(tsc_Cause_EPSServNotAllowedInThisPLMN),
                                                                            omit))));
    
    //  The SS releases the RRC connection
    //@siclog "Step 26A" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);

    //  Select PLMN of cell A (as set in fl_EUTRA_InitNAS_forNAS_Cells)
    //@siclog "Step 27 - 28" siclog@
    f_UT_ManualPLMN_Select (UT, f_Asn2Nas_PlmnId(v_GutiParams_CellA.PLMN_Identity));
    
    //  Does the UE transmit an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message
    //@siclog "Step 29" siclog@
    v_NAS_Ind:= f_EUTRA_RRC_ConnEst_DefWithNas( eutra_CellA,
                                                tsc_RRC_TI_Def,
                                                cr_EstablishmentCause_Any,
                                                cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                  cdr_ATTACH_REQUEST_IMSIonly(v_AttachType, v_AdditionalUpdateType),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 29");
    
    //@siclog "Steps 30 - 42" siclog@
    // The attach procedure is completed and the RRC connection is released
    // by executing steps 5 to 17 of TS 36.508 sub clause 4.5.2.3.
    f_EUTRA_IdleUpdated_Step5_17 (eutra_CellA, STATE2_IDLEUPDATE, EPS_Only, v_NAS_Ind);
    
  }

  function fl_TC_9_2_1_1_17_Body() runs on EUTRA_PTC
  {
    // ==========================================================================
    // initialize test case data structures
    // ==========================================================================
    var NAS_MSG_Indication_Type v_NasInd;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var template (value) CellPowerList_Type v_CellPowerList;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only); // @sic R5s110176 sic@
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only); // @sic R5s110176 sic@
    
    //@siclog "Step 1" siclog@
    //+ The SS configures Cell A as the "Serving cell". Cell B as a "Suitable neighbour cell", Cell L as a "Non-Suitable off cell. If present Cell G as a "Non-Suitable off cell"
    if (px_SinglePLMN_Tested == MultiPLMN) { // @sic R5-113681 sic@
      v_CellPowerList := {
        cs_CellPower ( eutra_CellI, tsc_ServingCellRS_EPRE ),
        cs_CellPower ( eutra_CellK, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE ),
        cs_CellPower ( eutra_CellL, tsc_NonSuitableOffCellRS_EPRE ),
        cs_CellPower ( eutra_CellJ, tsc_NonSuitableOffCellRS_EPRE )
      };
    } else {
      v_CellPowerList := {
        cs_CellPower ( eutra_CellI, tsc_ServingCellRS_EPRE ),
        cs_CellPower ( eutra_CellK, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE ),
        cs_CellPower ( eutra_CellL, tsc_NonSuitableOffCellRS_EPRE )
      };
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 2" siclog@
    //+   The UE is switched on.
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellI); // @sic R5s120065 sic@
    
    //@siclog "Step 3" siclog@
    //+  The UE transmits an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message as specified on Cell I.
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellI,
                                              v_RRC_TI,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    
    //@siclog "Step 4" siclog@
    //  The SS transmits an ATTACH REJECT message, EMM cause = "No suitable cells in tracking area".
    SRB.send  ( cas_SRB1_NasPdu_REQ ( eutra_CellI,
                                      cs_TimingInfo_Now,
                                      cs_NAS_Request ( tsc_SHT_NoSecurityProtection,
                                                       cs_508_AttachReject ( cs_EMM_Cause_v(tsc_Cause_NoSuitableCells),
                                                                             omit))));
    
    //@siclog "Step 5" siclog@
    //+  The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellI);
    
    //@siclog "Step 6" siclog@
    //   Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds on Cell I or Cell K? (1, F)
    f_EUTRA_CheckNoAttachOn2Cells(eutra_CellI, eutra_CellK, 30.0, "Step 6");
    
    //@siclog "Step 7" siclog@
    //  The SS reconfigures:Cell I as a "Suitable neighbour cell",Cell K as the "Serving cell",Cell L as a "Non-Suitable off cell", if present Cell J as a "Non-Suitable off cell ".
    if (px_SinglePLMN_Tested == MultiPLMN) { // @sic R5-113681 sic@
      v_CellPowerList := {
        cs_CellPower ( eutra_CellI, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE ),
        cs_CellPower ( eutra_CellK, tsc_ServingCellRS_EPRE ),
        cs_CellPower ( eutra_CellL, tsc_NonSuitableOffCellRS_EPRE ),
        cs_CellPower ( eutra_CellJ, tsc_NonSuitableOffCellRS_EPRE )
      };
    } else {
      v_CellPowerList := {
        cs_CellPower ( eutra_CellI, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE ),
        cs_CellPower ( eutra_CellK, tsc_ServingCellRS_EPRE ),
        cs_CellPower ( eutra_CellL, tsc_NonSuitableOffCellRS_EPRE )
      };
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );

    //@siclog "Step 8" siclog@
    //+  Check: Does the UE transmit an ATTACH REQUEST message in the next 30 seconds on Cell K or Cell I? (2, F)
    f_EUTRA_CheckNoAttachOn2Cells(eutra_CellI, eutra_CellK, 30.0, "Step 8");
    
    //@siclog "Step 8A" siclog@
    //+  If possible (see ICS) switch off is performed. Otherwise the power is removed.
    f_UT_SwitchOffUE (UT, false, CNF_REQUIRED); // @sic R5s1100395 sic@
    
    //@siclog "Step 9" siclog@
    //+ The SS reconfigures: Cell I as a "Serving cell", Cell K, Cell L and, if present, Cell J as a "Non-suitable Off cell".
    if (px_SinglePLMN_Tested == MultiPLMN) { // @sic R5-113681 sic@
      v_CellPowerList := {
        cs_CellPower ( eutra_CellI, tsc_ServingCellRS_EPRE ),
        cs_CellPower ( eutra_CellK, tsc_NonSuitableOffCellRS_EPRE ),
        cs_CellPower ( eutra_CellL, tsc_NonSuitableOffCellRS_EPRE ),
        cs_CellPower ( eutra_CellJ, tsc_NonSuitableOffCellRS_EPRE )
      };
    } else {
      v_CellPowerList := {
        cs_CellPower ( eutra_CellI, tsc_ServingCellRS_EPRE ),
        cs_CellPower ( eutra_CellK, tsc_NonSuitableOffCellRS_EPRE ),
        cs_CellPower ( eutra_CellL, tsc_NonSuitableOffCellRS_EPRE )
      };
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 9A" siclog@
    //+  The UE is brought back to operation.
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellI); // @sic R5s120065 sic@
    
    //@siclog "Step 9B" siclog@
    //+  The UE transmits an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message as specified on Cell I.
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellI,
                                              v_RRC_TI,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    
    //@siclog "Step 9C" siclog@
    //+ The SS reconfigures: Cell L and, if present, Cell J as a "Suitable neighbour cell".
    if (px_SinglePLMN_Tested == MultiPLMN) { // @sic R5-113681 sic@ @sic R5-121504 sic@
      v_CellPowerList := {
        cs_CellPower ( eutra_CellL, tsc_ServingCellRS_EPRE ),
        cs_CellPower ( eutra_CellI, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE ),
        cs_CellPower ( eutra_CellJ, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE )
      };
    } else {
      v_CellPowerList := {
        cs_CellPower ( eutra_CellL, tsc_ServingCellRS_EPRE ),
        cs_CellPower ( eutra_CellI, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE )
      };
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 9D" siclog@
    //  The SS transmits an ATTACH REJECT message, EMM cause = "No suitable cells in tracking area".
    SRB.send  ( cas_SRB1_NasPdu_REQ ( eutra_CellI,
                                      cs_TimingInfo_Now,
                                      cs_NAS_Request ( tsc_SHT_NoSecurityProtection,
                                                       cs_508_AttachReject ( cs_EMM_Cause_v(tsc_Cause_NoSuitableCells),
                                                                             omit))));
    
    //@siclog "Step 9E" siclog@
    //+  The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellI);  /* @sic R5-110803 change 13 sic@ */
    
    //@siclog "Step 10" siclog@
    //+  Check: Does the UE transmit an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message as specified on Cell L? (3,4, P)
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellL,
                                              v_RRC_TI,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                              cdr_ATTACH_REQUEST_WithOldMobileIdNoTAI( v_AttachType,
                                                                                                               v_AdditionalUpdateType,
                                                                                                               f_Imsi2MobileIdentity(px_IMSI_Def)),
                                                                      cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                      f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 10");
    
    //@siclog "Step 11" siclog@
    //+  The SS transmits an ATTACH REJECT message, EMM cause = "Tracking area not allowed".(The list of "forbidden tracking areas for roaming" in the UE should now contain TAI-9 and TAI-11)
    SRB.send  ( cas_SRB1_NasPdu_REQ ( eutra_CellL,
                                      cs_TimingInfo_Now,
                                      cs_NAS_Request ( tsc_SHT_NoSecurityProtection,
                                                       cs_508_AttachReject ( cs_EMM_Cause_v(tsc_Cause_NoSuitableCells), // @sic R5-113681 sic@
                                                                             omit))));
    
    //@siclog "Step 12" siclog@
    //+  The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellL);
    
    //@siclog "Step 13" siclog@
    //+  The SS reconfigures:Cell I as the "Serving cell".Cell K as a "Non-Suitable off cell", Cell L as a " Suitable neighbour cell", and, if present, Cell J as a "Non-Suitable off cell".
    if (px_SinglePLMN_Tested == MultiPLMN) { // @sic R5-113681 sic@
      v_CellPowerList := {
        cs_CellPower ( eutra_CellI, tsc_ServingCellRS_EPRE ),
        cs_CellPower ( eutra_CellK, tsc_NonSuitableOffCellRS_EPRE ),
        cs_CellPower ( eutra_CellL, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE ),
        cs_CellPower ( eutra_CellJ, tsc_NonSuitableOffCellRS_EPRE )
      };
    } else {
      v_CellPowerList := {
        cs_CellPower ( eutra_CellI, tsc_ServingCellRS_EPRE ),
        cs_CellPower ( eutra_CellK, tsc_NonSuitableOffCellRS_EPRE ),
        cs_CellPower ( eutra_CellL, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE )
      };
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 14" siclog@
    //+  Check: Does the UE transmit the ATTACH REQUEST message in the next 30 seconds? (5,F)
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellI, 30.0, "Step 14");
    
    //@siclog "Step 15" siclog@
    //+  If possible (see ICS) switch off is performed. Otherwise the power is removed.
    f_UT_SwitchOffUE (UT, false, CNF_REQUIRED); // @sic R5s1100395 sic@
    
    //@siclog "Step 16" siclog@
    //+  The UE is brought back to operation.
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellI); // @sic R5s120065 sic@
    
    //@siclog "Step 17 Void" siclog@
    
    //@siclog "Step 18" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellI,
                                                v_RRC_TI,
                                                cr_EstablishmentCause_Any,
                                                cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                  cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 18");
    
    //@siclog "Steps 19 - 31" siclog@
    f_EUTRA_IdleUpdated_Step5_17 (eutra_CellI, STATE2_IDLEUPDATE, EPS_Only, v_NasInd); // @sic R5s110395 sic@

  }// function fl_tc_9_2_1_1_17_Body

  function fl_TC_9_2_1_1_18_Body() runs on EUTRA_PTC
  {
    // ==========================================================================
    // initialize test case data structures
    // ==========================================================================

    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NasInd;
    var ProcedureTransactionIdentifier v_EPS_TI := '00'O;
    var GutiParameters_Type v_GutiParams_cellD:= f_EUTRA_CellInfo_GetGuti ( eutra_CellD );
    var GutiParameters_Type v_GutiParams:= f_EUTRA_CellInfo_GetGuti ( eutra_CellA );
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (v_GutiParams.PLMN_Identity);
    var NAS_PlmnId v_PLMN_cellD := f_Asn2Nas_PlmnId (v_GutiParams_cellD.PLMN_Identity);
    var template (value) CellPowerList_Type v_CellPowerList;
    var TrackingAreaCode v_Tac := f_EUTRA_CellInfo_GetTAC ( eutra_CellA );
    var NAS_Lac v_LAC := f_EUTRA_CellInfo_GetLocationAreaCode ( eutra_CellA );
    var template (omit) EPS_BearerContextStatus v_EPS_ContextStatus;
    var template (omit) LocAreaId v_LAI := f_GetLAI ( v_PLMN, v_LAC, EPS_Only); // @sic R5s110176 sic@
    var template (omit) MobileIdentity v_MSId := f_GetMSId (EPS_Only); // @sic R5s110176 sic@
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only); // @sic R5s110176 sic@
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(EPS_Only); // @sic R5s110176 sic@
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only); // @sic R5s110176 sic@
    var template (value) TrackingAreaIdList v_TaiList := cds_TAIListNonConsecutive_tlv ( v_PLMN, { bit2oct(v_Tac) } );
    var template (value) AccessPointName v_APN;
    var boolean v_EIT_Flag := false;
    var template (omit) ProtocolConfigOptions v_Pco := omit;

    timer t_WaitTimer := f_EUTRA_SetTimerToleranceMin(eutra_CellA, nasTTCNTimer, 30.0);
    
    //@siclog "Step 1" siclog@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellD, tsc_NonSuitableCellRS_EPRE ) // @sic R5-121742 sic@
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 2" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellB); // @sic R5s120065 sic@
    
    //@siclog "Step 3" siclog@
    //+ The UE transmits an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking( tsc_SHT_IntegrityProtected,
                                                                                  cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  f_GetPdnType())));
    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    
    //@siclog "Step 4" siclog@
    //+ The SS transmits an ATTACH REJECT message with EMM cause = " Not authorized for this CSG " as specified.
    SRB.send  ( cas_SRB1_NasPdu_REQ ( eutra_CellB,
                                      cs_TimingInfo_Now,
                                      cs_NAS_Request ( tsc_SHT_IntegrityProtected_Ciphered,
                                                       cs_508_AttachReject ( cs_EMM_Cause_v(tsc_Cause_NotAuthorizedCSG),
                                                                             omit))));
    //+ The SS releases the RRC connection.
    //@siclog "Step 5" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
    
    //+ The SS configures: Cell A as a " Not Suitable cell". Cell B as a " Serving cell". Cell D as a " Suitable cell".
    //@siclog "Step 6" siclog@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellD, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE ) // @sic R5s120013 sic@ @sic R5-121742 sic@
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //+ Check: Does the UE transmit an ATTACH REQUEST message? Note: The UE shall search for a suitable cell in the same PLMN.  (1,P)
    //@siclog "Step 7" siclog@
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellD, // @sic R5-121742 sic@
                                              v_RRC_TI,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    v_EIT_Flag := f_CheckEsmInfoTransferFlag(v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST);
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 7");
    
    //+ Step 8  The SS transmits an AUTHENTICATION REQUEST message to initiate the EPS authentication and AKA procedure.
    //+ Step 9  The UE transmits an AUTHENTICATION RESPONSE message and establishes mutual authentication.
    //+ Step 10 The SS transmits a NAS SECURITY MODE COMMAND message to activate NAS security.
    //+ Step 11 The UE transmits a NAS SECURITY MODE COMPLETE message and establishes the initial security configuration.
    //     -    EXCEPTION: Steps 12a1 to 12a2 describe behaviour that depends on UE configuration.
    //+ Step 12a1   IF the UE sets the ESM information transfer flag in the last PDN CONNECTIVITY REQUEST message THEN the SS transmits an ESM INFORMATION REQUEST message to initiate exchange of protocol configuration options and/or APN.
    //+ Step 12a2   The UE transmits an ESM INFORMATION RESPONSE message to transfer protocol configuration options and/or APN.
    //+ Step 13 SS responds with ATTACH ACCEPT message. The ACTIVATE DEFAULT EPS BEARER CONTEXT REQUEST message is piggybacked in ATTACH ACCEPT message.
    //     -    EXCEPTION: In parallel to the event described in step14 below the generic procedure for IP address allocation in the U-plane specified in TS 36.508 subclause 4.5A.1 takes place performing IP address allocation in the U-plane if requested by the UE.
    //+ Step 14 The UE transmit an ATTACH COMPLETE message including an ACTIVATE DEFAULT EPS BEARER CONTEXT ACCEPT message.
    //@siclog "Step 8 - 14" siclog@
    v_APN := f_EUTRA_Authentication_NAS_AS_Security (eutra_CellD, v_EIT_Flag, v_EPS_TI);
    f_EUTRA_RRCConnectionReconfigurationWithAttachAcceptAllParams(eutra_CellD,
                                                                  tsc_EpsDefaultBearerId,
                                                                  v_RRC_TI,
                                                                  v_EPS_TI,
                                                                  tsc_EAttachType_EpsOnly,
                                                                  f_EUTRA_GetPDNAddress (f_CheckPCOforIPallocationViaNas (v_Pco)),
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_GutiParams_cellD),
                                                                  cs_TAIListNonConsecutive_lv (v_PLMN_cellD, {bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellD))}),
                                                                  omit,
                                                                  omit,
                                                                  omit,
                                                                  v_APN,
                                                                  f_GetDefPCOforPCSCFAddress (v_Pco), // @sic R5-104703 sic@
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType,
                                                                                              EPS_Only)); // @sic R5s110176 sic@
    f_EUTRA_NAS_AttachComplete(eutra_CellD, tsc_EpsDefaultBearerId);
    
    //+ The SS releases the RRC connection.
    //@siclog "Step 14A" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellD);
    
    //+  The SS configures:- Cell A as a "Non-Suitable cell".- Cell B as the "Serving cell".- Cell D as a "Not Suitable cell".
    //@siclog "Step 15" siclog@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellD, tsc_NonSuitableCellRS_EPRE ) // @sic R5-121742 sic@
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    
    //@siclog "Step 16" siclog@
    //+ Check: does the UE transmits a TRACKING AREA UPDATE REQUEST message in the next 30 seconds? (2,F)
    t_WaitTimer.start;
    alt {
      []  SRB.receive(car_SRB1_NasPdu_IND(eutra_CellB,
                                          cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                            cr_508_TAU_Request(v_UpdateType,
                                                                               f_EUTRA_SecurityKSIasme_Get(),
                                                                               cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                               v_AdditionalUpdateType))))
        {
          t_WaitTimer.stop;
          f_EUTRA_SetVerdictFailOrInconc (__FILE__, __LINE__, "Step 16");
        }
      []  t_WaitTimer.timeout
        {
        }
    }
    
    //@siclog "Step 17" siclog@
    //  The SS configures:- Cell A as a " Serving cell".- Cell B as the "Not Suitable cell".- Cell D as a " Non-Suitable cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellD, tsc_NonSuitableCellRS_EPRE ) // @sic R5-121742 sic@
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    
    //  Check: does the UE transmits a TRACKING AREA UPDATE REQUEST message? (2,P)
    //@siclog "Step 18" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA, // @sic R5-112625 sic@ @sic R5s120013 sic@
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(v_UpdateType,
                                                                 f_EUTRA_SecurityKSIasme_Get(),
                                                                 cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                 v_AdditionalUpdateType)));
    
    v_EPS_ContextStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus; // Send this back in the Accept
    //  The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    //@siclog "Step 19" siclog@
    SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request ( tsc_SHT_IntegrityProtected_Ciphered,
                                                      cs_508_TAU_Accept ( v_UpdateType,
                                                                          f_GutiParameters2MobileIdentity (tsc_IEI_Guti, v_GutiParams ),
                                                                          v_TaiList,
                                                                          v_EPS_ContextStatus,
                                                                          v_LAI,
                                                                          v_MSId,
                                                                          f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType, EPS_Only)) ) ) ); // @sic R5s110176 sic@ @sic R5s120013 sic@
    
    // The UE transmits a TRACKING AREA UPDATE COMPLETE message.
    //@siclog "Step 20" siclog@
    SRB.receive ( car_SRB1_NasPdu_IND ( eutra_CellA,
                                        cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_TAU_Complete ) ) );
  }// function fl_tc_9_2_1_1_18_Body

  function f_TC_9_2_1_1_19_EUTRA() runs on EUTRA_PTC
  { // Attach / Abnormal case / Failure due to non integrity protection

    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);  // @sic R5s106627 sic@
    
    // Create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    
    f_UT_ConfigureEPSAttach (UT); // @sic R5-103810 sic@
    
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE,-, EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_1_1_19_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E1_IDLE, EPS_Only); // @sic R5s110176 sic@
  }// function f_TC_9_2_1_1_19_EUTRA

  function fl_TC_9_2_1_1_19_Body() runs on EUTRA_PTC
  {
    var ProcedureTransactionIdentifier v_EPS_TI := '00'O;
    var GutiParameters_Type v_GutiParams := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var GutiParameters_Type v_Guti2_Params := f_CreateGutiParamsWithUpdatedSTmsi(v_GutiParams);
    var template (value) NAS_MSG_Request_Type v_AttachAccept;
    var template (value) MobileIdentity v_Guti := f_GutiParameters2MobileIdentity( tsc_IEI_Guti, v_GutiParams);
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (v_GutiParams.PLMN_Identity);
    var template (omit) LocAreaId v_LAI := f_EUTRA_GetCellLAI(eutra_CellA, EPS_Only); // @sic R5s110176 sic@
    var template (omit) MobileIdentity v_MSId := f_GetMSId (EPS_Only); // @sic R5s110176 sic@
    var template (value) PDN_Address v_PDN_Address;
    var template (omit) ProtocolConfigOptions v_Pco := omit;
    var NAS_MSG_Indication_Type v_NasInd;
    var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get();
    var NasCount_Type v_NasCountUL;
    var NAS_UL_Message_Type v_PdnConnectivityRequest;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only); // @sic R5s110176 sic@
    var template (value) AccessPointName v_APN;
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only); // @sic R5s110176 sic@
    timer t_Wait1s := f_EUTRA_SetTimerToleranceMin(eutra_CellA, nasTTCNTimer, 1.0); // @sic R5-106675 sic@
    
    // The UE is switched on.
    //@siclog "Step 1" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@
    
    //@siclog "Step 2" siclog@
    //+  The UE transmits an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message
    //   Note:  The ATTACH REQUEST message shall be sent as a security protected NAS message
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                              tsc_RRC_TI_Def,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    
    v_PdnConnectivityRequest := v_NasInd.Pdu.PiggybackedPduList[0].Msg;
    v_EPS_TI := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    // Get the PCO to be used later (TS 36.508 v.8.2.2 Table 4.7.3-6)
    if (ispresent( v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions)) {
      v_Pco := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    }
    //@siclog "Steps 2Aa1 - 2Aa2" siclog@
    v_APN := f_ESM_InitAPN(eutra_CellA, f_CheckEsmInfoTransferFlag(v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST), v_EPS_TI);  // @sic R5s100751 Additional changes sic@
    v_PDN_Address := f_EUTRA_GetPDNAddress (f_CheckPCOforIPallocationViaNas (v_Pco));
    
    //  The SS transmits an ATTACH ACCEPT although UE has not
    //   successfully completed any NAS security mode control procedure.
    
    // activate security in AS with parameters from AKA performed in preamble
      v_NasCountUL := v_NasInd.SecurityProtection.NasCount;
      v_SecurityParams := f_EUTRA_Authentication_InitAS(v_SecurityParams, v_NasCountUL);
      v_SecurityParams := f_EUTRA_RRC_ActivateSecurity(eutra_CellA,
      v_SecurityParams,
      v_NasCountUL);
      f_EUTRA_Security_Set(v_SecurityParams);
    
    //@siclog "Step 3" siclog@
    v_AttachAccept := cs_NAS_RequestWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                     cs_508_ATTACH_ACCEPT(v_AttachType,
                                                                          cs_TrackingAreaIdListDef_lv,
                                                                          f_GutiParameters2MobileIdentity( tsc_IEI_Guti, v_Guti2_Params),
                                                                          v_LAI,
                                                                          v_MSId,
                                                                          omit,
                                                                          f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType, EPS_Only)), // @sic R5s110176 sic@
                                                     cs_508_ActivateDefEpsBearerContextRequest(tsc_EpsDefaultBearerId,
                                                                                               v_EPS_TI,
                                                                                               v_APN,
                                                                                               v_PDN_Address,
                                                                                               -,
                                                                                               f_GetDefPCOforPCSCFAddress (v_Pco)));
    f_IP_ChangeEutraCell(IP, eutra_CellA);       /* @sic R5-113734 change 8 sic@ */
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 v_AttachAccept )); // @sic R5s110234 sic@
    
    //  Check: Does the UE transmit an ATTACH COMPLETE message within the next 1s? (F)
    //@siclog "Step 4" siclog@
    t_Wait1s.start;
    alt {
      []SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                        cr_NAS_IndicationWithPiggybacking(?,
                                                                          cr_508_ATTACH_COMPLETE,
                                                                          ?)))
        {
          f_EUTRA_SetVerdictFailOrInconc (__FILE__, __LINE__, "Step 4");
        }
      []  t_Wait1s.timeout {}
    }
    
    //@siclog "Step 5 - 6" siclog@
    v_SecurityParams := f_EUTRA_NAS_Authentication(eutra_CellA,
                                                   tsc_SRB1,
                                                   v_SecurityParams,
                                                   tsc_SHT_IntegrityProtected_Ciphered,
                                                   tsc_SHT_IntegrityProtected_Ciphered,
                                                   v_PLMN);
    //@siclog "Step 7 - 8" siclog@
    // NAS Security Mode Command / NAS Security Mode Complete
    v_NasCountUL := f_EUTRA_NAS_ActivateSecurity(eutra_CellA, v_SecurityParams, tsc_SRB1);
    f_EUTRA_Security_Set ( v_SecurityParams );//Saving security parameters
    
    // The SS transmits an ATTACH ACCEPT without integrity protection.
    //@siclog "Step 9" siclog@
    SRB.send  ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                      cs_TimingInfo_Now,
                                      v_AttachAccept ));
    
    //  Check: Does the UE transmit an ATTACH COMPLETE message within the next 1s? (F)
    //@siclog "Step 10" siclog@
    t_Wait1s.start;
    alt {
      
      []SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                        cr_NAS_IndicationWithPiggybacking(?,
                                                                          cr_508_ATTACH_COMPLETE,
                                                                          ?)))
        {
          f_EUTRA_SetVerdictFailOrInconc (__FILE__, __LINE__, "Step 10");
        }
      
      []t_Wait1s.timeout{}
    }
    
    //  The SS transmits an ATTACH ACCEPT with integrity protection
    // with the Message authentication code set to an incorrect value.
    // Use GUTI-3 different from GUTI-2
    //@siclog "Step 11" siclog@
    v_GutiParams.M_TMSI := oct2bit('33345678'O); // different from previous value, default is oct2bit('12345678'O)
    v_Guti := f_GutiParameters2MobileIdentity( tsc_IEI_Guti, v_GutiParams);
    
    v_AttachAccept := cs_NAS_RequestWithPiggybacking(tsc_SHT_IntegrityProtected_Ciphered,
                                                     cs_508_ATTACH_ACCEPT(v_AttachType,
                                                                          cs_TrackingAreaIdListDef_lv,
                                                                          v_Guti,
                                                                          v_LAI,
                                                                          v_MSId,
                                                                          omit,
                                                                          f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType,EPS_Only)), // @sic R5s110176 sic@
                                                     cs_508_ActivateDefEpsBearerContextRequest(tsc_EpsDefaultBearerId,
                                                                                               v_EPS_TI,
                                                                                               v_APN, // @sic R5-110708 sic@
                                                                                               v_PDN_Address,
                                                                                               -,
                                                                                               f_GetDefPCOforPCSCFAddress (v_Pco))); // @sic R5-104703 sic@
    
    v_AttachAccept.SecurityProtection.ForceMacError := true; // force an integrity MAC error
    f_IP_ChangeEutraCell(IP, eutra_CellA);       /* @sic R5-113734 change 8 sic@ */
    SRB.send  ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                      cs_TimingInfo_Now,
                                      v_AttachAccept ));
    
    //  Check: Does the UE transmit an ATTACH COMPLETE message within the next 1s? (F)
    //@siclog "Step 12" siclog@
    t_Wait1s.start;
    alt {
      
      []SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                        cr_NAS_IndicationWithPiggybacking(?,
                                                                          cr_508_ATTACH_COMPLETE,
                                                                          ?)))
        {
          f_EUTRA_SetVerdictFailOrInconc (__FILE__, __LINE__, "Step 12");
        }
      
      []  t_Wait1s.timeout {}
    }
    
    // The SS transmits an ATTACH ACCEPT message including an ACTIVATE DEFAULT EPS BEARER CONTEXT REQUEST.
    // Note: The ATTACH ACCEPT message is sent as a security protected NAS message
    
    // Use GUTI-4 different from GUTI-3
    v_GutiParams.M_TMSI := oct2bit('44445678'O); // default is oct2bit('12345678'O)
    // Set global GUTI to be used by other sub-functions
    //@siclog "Step 13" siclog@
    f_EUTRA_CellInfo_SetGuti(eutra_CellA, v_GutiParams);
    v_Guti := f_GutiParameters2MobileIdentity( tsc_IEI_Guti, v_GutiParams);
    v_AttachAccept := cs_NAS_RequestWithPiggybacking(tsc_SHT_IntegrityProtected_Ciphered,
                                                     cs_508_ATTACH_ACCEPT(v_AttachType,
                                                                          cs_TrackingAreaIdListDef_lv,
                                                                          v_Guti,
                                                                          v_LAI,
                                                                          v_MSId,
                                                                          omit,
                                                                          f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType, EPS_Only)), // @sic R5s110176 sic@
                                                     cs_508_ActivateDefEpsBearerContextRequest(tsc_EpsDefaultBearerId,
                                                                                               v_EPS_TI,
                                                                                               v_APN, // @sic R5-110708 sic@
                                                                                               v_PDN_Address,
                                                                                               -,
                                                                                               f_GetDefPCOforPCSCFAddress (v_Pco))); // @sic R5-104703 sic@
    f_IP_ChangeEutraCell(IP, eutra_CellA);       /* @sic R5-113734 change 8 sic@ */
    f_EUTRA_RRCConnectionReconfiguration_SRB2_1AM_DRB_Est(eutra_CellA,
                                                          tsc_RRC_TI_Def,
                                                          v_AttachAccept);   // @sic R5s110234 sic@
    
    //@siclog "Step 14" siclog@
    f_EUTRA_NAS_AttachComplete(eutra_CellA, tsc_EpsDefaultBearerId);
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Step 14");
    
    //@siclog "Step 15" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //@siclog "Step 16" siclog@
    //  Check : Does the test results of test procedure in TS 36.508 clause 6.4.2.4 indicate that the UE is in EUTRA EMM-REGISTERED state?
    f_EPS_508Check_NAS_Paging(eutra_CellA, ps); // @sic R5-113850 sic@
    
  } // function fl_tc_9_2_1_1_19_Body

  function fl_TC_9_2_1_1_20_Body() runs on EUTRA_PTC
  {
    // ==========================================================================
    // initialize test case data structures
    // ==========================================================================
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NasInd;
    var GutiParameters_Type v_Guti_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellI);
    var ProcedureTransactionIdentifier v_EPS_TI := tsc_PTI_1;
    var template (value) AccessPointName v_APN;
    var boolean v_EIT_Flag := false;
    var template (omit) ProtocolConfigOptions v_Pco := omit;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only); // @sic R5s110176 sic@
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only); // @sic R5s110176 sic@
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (v_Guti_Params.PLMN_Identity);
    var TrackingAreaCode v_TAC := f_EUTRA_CellInfo_GetTAC(eutra_CellI);
    var template (value) CellPowerList_Type v_CellPowerList;

    timer t_Wait_RRCConnectReject := f_EUTRA_SetTimerToleranceMin( eutra_CellI, rrcTimer, 10.0 );
 
    //@siclog "Step 1" siclog@
    //+ The SS set the cell type of cell I to the ''Serving cell'', set the cell type of cell K to the '' Non- Suitable cell'',
    //  and set SystemInformationBlockType2 parameters as described below.
    //  The UE is switched on
    v_CellPowerList := {
      cs_CellPower(eutra_CellK, tsc_NonSuitableCellRS_EPRE), // @sic R5s110692 sic@
      cs_CellPower(eutra_CellI, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@

    f_EUTRA_SwitchOnUEandStartIP(eutra_CellI); // @sic R5s120065 sic@

    //@siclog "Step 2" siclog@
    //+ Check: for 90 seconds if UE initiates Attach procedure and hence transmits RRC Connection Request? (1, F)
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellI, 90.0, "Step 2"); // @sic R5s110587 sic@
 
    //@siclog "Step 3 - 4" siclog@
    //+ The SS transmits a Paging message including systemInfoModification.
    //+ The SS changes SystemInformationBlockType2 parameters to default parameters defined in TS 36.508.
    f_EUTRA_ChangeSystemInformation_ToDefault ( eutra_CellI );
    f_EUTRA_ModifySysinfo ( eutra_CellI );

    //@siclog "Step 5" siclog@
    //+ The UE transmits RRC Connection Request
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_CellI);    // @sic R5-120721 change 3 sic@

    //@siclog "Step 6" siclog@
    //+ SS responds with RRCConnectionReject message with IE waitTime set to 10 seconds(Max Value).
    SRB.send ( cas_SRB0_RrcPdu_REQ ( eutra_CellI,
                                     cs_TimingInfo_Now,
                                     cs_RRCConnectionReject ) );
    //@siclog "Step 7" siclog@
    //+ Check: for 10 seconds if UE initiates Attach procedure and hence transmits RRC Connection Request? (2, F)
    t_Wait_RRCConnectReject.start;
    f_EUTRA_SS_SRBs_DRBs_Reset (eutra_CellI, 500); // @sic R5s100803: 500ms delay before the reset sic@
    alt {
      []  SRB.receive(car_SRB0_RrcPdu_IND(eutra_CellI, cr_RRCConnectionRequest(?)))
        {
          t_Wait_RRCConnectReject.stop;
          f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 7"); // @sic R5-104796 sic@
        }
      []  t_Wait_RRCConnectReject.timeout {}
    }
    
    //@siclog "Step 8" siclog@
    //+ Check: Does the UE transmit an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message? (3, P)
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellI,
                                            v_RRC_TI,
                                            cr_EstablishmentCause_Any,
                                            cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                              cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                              cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                              f_GetPdnType())));
    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    if (ispresent( v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions)) { // @sic R5s100084 sic@
      v_Pco := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    }

    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 8");

    //@siclog "Step 9 - 12" siclog@
    //+ The SS transmits an AUTHENTICATION REQUEST message to initiate the EPS authentication and AKA procedure.
    //+ The UE transmits an AUTHENTICATION RESPONSE message and establishes mutual authentication.
    //+ The SS transmits a NAS SECURITY MODE COMMAND message to activate NAS security.
    //+ The UE transmits a NAS SECURITY MODE COMPLETE message and establishes the initial security configuration.
    v_APN := f_EUTRA_Authentication_NAS_AS_Security (eutra_CellI, v_EIT_Flag, v_EPS_TI, true);

    //@siclog "Step 13" siclog@
    //+ SS responds with ATTACH ACCEPT message including a valid TAI list. The ACTIVATE DEFAULT EPS BEARER CONTEXT REQUEST message is piggybacked in ATTACH ACCEPT message
    f_EUTRA_RRCConnectionReconfigurationWithAttachAcceptAllParams(eutra_CellI,
                                                                  tsc_EpsDefaultBearerId,
                                                                  v_RRC_TI,
                                                                  v_EPS_TI,
                                                                  tsc_EAttachType_EpsOnly,
                                                                  f_EUTRA_GetPDNAddress (f_CheckPCOforIPallocationViaNas (v_Pco)),
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti_Params),
                                                                  cs_TAIListNonConsecutive_lv (v_PLMN, {bit2oct(v_TAC)}),
                                                                  omit,
                                                                  omit,
                                                                  omit,
                                                                  v_APN,
                                                                  f_GetDefPCOforPCSCFAddress (v_Pco), // @sic R5-104703 sic@
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType,
                                                                                              EPS_Only)); // @sic R5s110176 sic@
    //@siclog "Step 14" siclog@
    //+ Check: does the UE transmit an ATTACH COMPLETE message including an ACTIVATE DEFAULT EPS BEARER CONTEXT ACCEPT message?
    f_EUTRA_NAS_AttachComplete(eutra_CellI, tsc_EpsDefaultBearerId);
    
    //@siclog "Step 15" siclog@
    //+ The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellI);
    
    //+ The UE is switched off.
    //@siclog "Step 16" siclog@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellI, RRC_IDLE,-, EPS_Only);  // @sic R5s110176, R5-104083 sic@

    //+  The SS set the cell type of cell I to the ''Serving cell'', set the cell type of cell K to the '' Non- Suitable cell'', and set SystemInformationBlockType2 parameters as described below.
    //          The UE is switched on.
    //@siclog "Step 17" siclog@
    f_EUTRA_CellInfo_SetSysInfo_AccessBarring ( eutra_CellI, cs_AccessBarringInformation_TemporaryBarring );
    f_EUTRA_Cellinfo_SetSysInfo_IntraFreqRes ( eutra_CellI, allowed ); // @sic R5-104729 sic@
    f_EUTRA_ModifySysinfoUE_Off (eutra_CellI);
    
    v_CellPowerList := {
      cs_CellPower(eutra_CellK, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellI, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@
     
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellK); // @sic R5s120065 sic@
    
    //+  Check: for 90 seconds if UE initiates Attach procedure and hence transmits RRC Connection Request?
    //@siclog "Step 18" siclog@
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellI, 90.0, "Step 18"); // @sic R5s110587 sic@

    //+  The SS set the cell type of cell K to "Serving Cell" and cell I to "Suitable Cell".
    //@siclog "Step 19" siclog@
    v_CellPowerList := {
      cs_CellPower(eutra_CellK, tsc_ServingCellRS_EPRE),   // @sic R5-104729 sic@
      cs_CellPower(eutra_CellI, tsc_SuitableCellRS_EPRE)   // @sic R5-104729 sic@
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@

    //@siclog "Step  20" siclog@
    // Check: Does the UE transit an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message;  @sic R5-105005 sic@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellK,
                                                v_RRC_TI,
                                                cr_EstablishmentCause_Any,
                                                cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 20");
    
    //@siclog "Step  21 - 32" siclog@
    f_EUTRA_IdleUpdated_Step5_17 (eutra_CellK, STATE2_IDLEUPDATE, EPS_Only, v_NasInd, false); // @sic R5-105005, R5s110395 sic@
      
  }// function fl_tc_9_2_1_1_20_Body

  function fl_TC_9_2_1_1_21_Body() runs on EUTRA_PTC
  { // @sic R5s100860 sic@
  
    // ==========================================================================
    // initialize test case data structures
    // ==========================================================================
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NasInd;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only); // @sic R5s110176 sic@
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only); // @sic R5s110176 sic@

    var float v_T3410Val := f_EUTRA_SetTimerToleranceMin(eutra_CellA, nasTimer, 15.0);
    var float v_T3411Val := f_EUTRA_SetTimerToleranceMin(eutra_CellA, nasTimer, 10.0);
    var float v_T3411HalfVal := v_T3411Val / 2.0;

    //+  The UE is switched on
    //@siclog "Step 1" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@

    //+ The UE transmit an ATTACH REQUEST message.
    //@siclog "Step 2" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                 cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                 f_GetPdnType())));
    
    //+The SS waits 20 seconds (15 seconds T3410 and 5 seconds half of T3411).
    //@siclog "Step 3" siclog@
    f_Delay(v_T3410Val);
    f_Delay(v_T3411HalfVal);

    //+ SS transmits an IDENTITY REQUEST message requesting IMSI in the IE Identity type
    //@siclog "Step 4" siclog@
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,  // @sic R5-106597 sic@
                                                cs_IDENTITY_REQUEST(tsc_IdType_IMSI))));
    //  Exception: In parallel with steps 5 and 6, the parallel behaviour defined in table 9.2.1.1.1.3.2-2 is running.
    //             Check: Does the UE sends an IDENTITY RESPONSE message?   --> IDENTITY RESPONSE   1   F
    //+  The SS waits 5 seconds (half of T3411)
    //+  Check: The UE transmit an ATTACH REQUEST message? (2 P)
    //@siclog "Step 5 - 6" siclog@
    f_Delay(v_T3411HalfVal);
    f_EUTRA_SS_SRBs_DRBs_Reset(eutra_CellA);   // @sic R5s110423 additional comments sic@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                 cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                 f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "step 6");
    
    //+ The SS releases the RRC connection.
    //@siclog "Step 7" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //+  The SS waits 10 seconds (T3411).
    //@siclog "Step 8" siclog@
    f_Delay(v_T3411Val);
    
    //@siclog "Step 9 siclog@
    // Check: Does the UE transit an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message; @sic R5-105005 sic@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                 cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 9");
    
    //@siclog "Step  10 - 21" siclog@
    f_EUTRA_IdleUpdated_Step5_17 (eutra_CellA, STATE2_IDLEUPDATE, EPS_Only, v_NasInd, false); // @sic R5-105005, R5s110395 sic@
  }// function fl_tc_9_2_1_1_21_Body

  function fl_TC_9_2_1_1_22_Body() runs on EUTRA_PTC
  { // @sic R5s100860 sic@
    // ==========================================================================
    // initialize test case data structures
    // ==========================================================================
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NasInd;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only); // @sic R5s110176 sic@
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only); // @sic R5s110176 sic@

    var float v_T3410Val := f_EUTRA_SetTimerToleranceMin(eutra_CellA, nasTimer, 15.0);
    var float v_T3411Val := f_EUTRA_SetTimerToleranceMin(eutra_CellA, nasTimer, 10.0);
    var float v_T3402Val := f_EUTRA_SetTimerToleranceMin(eutra_CellA, nasTimer, 720.0);

    //+  The UE is switched on
    //@siclog "Step 1" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@

    //+  The UE transmit an ATTACH REQUEST message.
    //@siclog "Step 2" siclog@
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                              v_RRC_TI,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    
    //+ The SS waits 25 seconds (15 seconds T3410 and 10 seconds T3411).
    //@siclog "Step 3" siclog@
    f_Delay(v_T3410Val);
    f_Delay(v_T3411Val);
    f_EUTRA_SS_SRBs_DRBs_Reset(eutra_CellA);   // @sic R5s110423 additional comments sic@
    
    //+  The UE transmits an ATTACH REQUEST message. (Attach attempt counter = 2)
    //@siclog "Step 4" siclog@
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                              v_RRC_TI,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    //+  The SS releases the RRC connection.
    //@siclog "Step 5" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //+ The SS waits 10 seconds ( T3411).
    //@siclog "Step 6" siclog@
    f_Delay(v_T3411Val);
    
    //+ The UE transmits an ATTACH REQUEST message. (Attach attempt counter = 3)
    //@siclog "Step 7" siclog@
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                              v_RRC_TI,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    
    //+ The SS waits 25 seconds (15 seconds T3410 and 10 seconds T3411).
    //@siclog "Step 8" siclog@
    f_Delay(v_T3410Val);
    f_Delay(v_T3411Val);
    f_EUTRA_SS_SRBs_DRBs_Reset(eutra_CellA);   // @sic R5s110423 additional comments sic@
    
    //+ The UE transmits an ATTACH REQUEST message. (Attach attempt counter = 4)
    //@siclog "Step 9" siclog@
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                              v_RRC_TI,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));

    //+ The SS releases the RRC connection.
    //@siclog "Step 10" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //+ The SS waits 10 seconds ( T3411).
    //@siclog "Step 11" siclog@
    f_Delay(v_T3411Val);
    
    //+ The UE transmits an ATTACH REQUEST message. (Attach attempt counter = 5)
    //@siclog "Step 12" siclog@
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                              v_RRC_TI,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    
    //+ The SS releases the RRC connection.
    //@siclog "Step 13" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);

    //+ Check: Does the UE transmits an ATTACH REQUEST message after 12 minutes (default value of T3402, after step 13? [1,P]
    //@siclog "Step 14" siclog@
    f_Delay(v_T3402Val);
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                              v_RRC_TI,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                cdr_ATTACH_REQUEST_WithIMSIAndnoTAI(v_AttachType,
                                                                                                                    v_AdditionalUpdateType,
                                                                                                                    f_Imsi2MobileIdentity(px_IMSI_Def),
                                                                                                                    cr_TMSI_Status('0'B) ifpresent),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 14");
    
    //+ The attach procedure is completed and the RRC connection is released by executing steps 5 to 17 of TS 36.508 sub clause 4.5.2.3.
    //@siclog "Steps 15 - 26" siclog@
    f_EUTRA_IdleUpdated_Step5_17 (eutra_CellA, STATE2_IDLEUPDATE, EPS_Only, v_NasInd, false); // @sic R5s110395 sic@
  }// function fl_tc_9_2_1_1_22_Body

  function fl_TC_9_2_1_1_23_Body() runs on EUTRA_PTC
  {
    var NAS_MSG_Indication_Type v_NAS_Ind;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only); // @sic R5s110176 sic@ @sic R5s120125 sic@
    
    var GutiParameters_Type v_GutiParams1 := f_EUTRA_CellInfo_GetGuti (eutra_CellA);
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (v_GutiParams1.PLMN_Identity);
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only); // @sic R5s110176 sic@ @sic R5s120125 sic@
    
    var float v_T3402Val := f_EUTRA_SetTimerToleranceMin(eutra_CellA, nasTimer, 720.0);
    var float v_T3411Val := f_EUTRA_SetTimerToleranceMin(eutra_CellA, nasTimer, 10.0);
    
    // Step 1. Switch on UE
    // Step 2. The UE transmits an ATTACH REQUEST message. (Attach attempt counter = 1)
    // Step 3. The SS transmits an ATTACH REJECT message, with EMM cause = Network failure (#17)
    // Step 4: The SS releases the RRC connection
    //@siclog "Step 1 - 4" siclog@
    f_EUTRA_AttachReject (eutra_CellA, tsc_EmmCause_NetworkFailure, EPS_Only); // @sic R5s110176 sic@ @sic R5s120125 sic@

    //  The SS waits 10 seconds (T3411)
    //@siclog "Step 5" siclog@
    f_Delay (v_T3411Val);
    
    //  Check: does the UE transmit an ATTACH REQUEST message? (Attach attempt counter = 2)
    //@siclog "Step 6" siclog@
    v_NAS_Ind := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                                tsc_RRC_TI_Def,
                                                cr_EstablishmentCause_Any,
                                                cr_NAS_IndicationWithPiggybacking( tsc_SHT_IntegrityProtected,
                                                                                   cdr_ATTACH_REQUEST_WithGuti(v_AttachType,
                                                                                                               v_AdditionalUpdateType,
                                                                                                               f_EUTRA_SecurityKSIasme_Get(),
                                                                                                               f_GutiParameters2MobileIdentity(omit, v_GutiParams1),
                                                                                                               cr_TAI( v_PLMN, tsc_TAC1)),
                                                                                   cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                   f_GetPdnType())
                                                                                   ));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 6");
    
    // The SS transmits an ATTACH REJECT message, with EMM cause = Network failure (#17)
    //@siclog "Step 7" siclog@
    SRB.send  ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                      cs_TimingInfo_Now,
                                      cs_NAS_Request ( tsc_SHT_NoSecurityProtection,
                                                       cs_508_AttachReject ( cs_EMM_Cause_v(tsc_EmmCause_NetworkFailure),
                                                                             omit))));
    
    //  The SS releases the RRC connection
    //@siclog "Step 8" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //  The SS waits 10 seconds (T3411)
    //@siclog "Step 9" siclog@
    f_Delay (v_T3411Val);
    
    //  Check: does the UE transmit an ATTACH REQUEST message? (Attach attempt counter = 3)
    //@siclog "Step 10" siclog@
    v_NAS_Ind:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking( tsc_SHT_IntegrityProtected,
                                                                                  cdr_ATTACH_REQUEST_WithGuti(v_AttachType,
                                                                                                              v_AdditionalUpdateType,
                                                                                                              f_EUTRA_SecurityKSIasme_Get(),
                                                                                                              f_GutiParameters2MobileIdentity(omit, v_GutiParams1),
                                                                                                              cr_TAI( v_PLMN, tsc_TAC1)),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  f_GetPdnType())
                                                                                  ));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 10");
    
    // The SS transmits an ATTACH REJECT message, with EMM cause = Congestion (#22)
    //@siclog "Step 11" siclog@
    SRB.send  ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                      cs_TimingInfo_Now,
                                      cs_NAS_Request ( tsc_SHT_NoSecurityProtection,
                                                       cs_508_AttachReject ( cs_EMM_Cause_v(tsc_Cause_Congestion),
                                                                             omit))));
    
    // The SS releases the RRC connection
    //@siclog "Step 12" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    // The SS waits 10 seconds (T3411)
    //@siclog "Step 13" siclog@
    f_Delay (v_T3411Val);
    
    //  Check: does the UE transmit an ATTACH REQUEST message? (Attach attempt counter = 4)
    //@siclog "Step 14" siclog@
    v_NAS_Ind := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                                tsc_RRC_TI_Def,
                                                cr_EstablishmentCause_Any,
                                                cr_NAS_IndicationWithPiggybacking( tsc_SHT_IntegrityProtected,
                                                                                   cdr_ATTACH_REQUEST_WithGuti(v_AttachType,
                                                                                                               v_AdditionalUpdateType,
                                                                                                               f_EUTRA_SecurityKSIasme_Get(),
                                                                                                               f_GutiParameters2MobileIdentity(omit, v_GutiParams1),
                                                                                                               cr_TAI( v_PLMN, tsc_TAC1)),
                                                                                   cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                   f_GetPdnType())
                                                                                   ));
    // The SS transmits an ATTACH REJECT message, with EMM cause = Congestion (#22)
    //@siclog "Step 15" siclog@
    SRB.send  ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                      cs_TimingInfo_Now,
                                      cs_NAS_Request ( tsc_SHT_NoSecurityProtection,
                                                       cs_508_AttachReject ( cs_EMM_Cause_v(tsc_Cause_Congestion),
                                                                             omit))));
    
    // The SS releases the RRC connection
    //@siclog "Step 16" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //  The SS waits 10 seconds (T3411)
    //@siclog "Step 17" siclog@
    f_Delay (v_T3411Val);
    
    // Check: does the UE transmit an ATTACH REQUEST message? (Attach attempt counter = 5)
    //@siclog "Step 18" siclog@
    v_NAS_Ind := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                                tsc_RRC_TI_Def,
                                                cr_EstablishmentCause_Any,
                                                cr_NAS_IndicationWithPiggybacking( tsc_SHT_IntegrityProtected,
                                                                                   cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                   cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                   f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 18");
    
    //  The SS transmits an ATTACH REJECT message, with EMM cause = Congestion (#22)
    //@siclog "Step 19" siclog@
    SRB.send  ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                      cs_TimingInfo_Now,
                                      cs_NAS_Request ( tsc_SHT_NoSecurityProtection,
                                                       cs_508_AttachReject ( cs_EMM_Cause_v(tsc_Cause_Congestion),
                                                                             omit))));
    
    //  The SS releases the RRC connection
    //@siclog "Step 20" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //  The SS waits 12 minutes (default value of T3402)
    //@siclog "Step 21" siclog@
    f_Delay (v_T3402Val);
    
    //  Check: Does the UE transmit an ATTACH REQUEST message?
    //@siclog "Step 22" siclog@
    v_NAS_Ind := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                                tsc_RRC_TI_Def,
                                                cr_EstablishmentCause_Any,
                                                cr_NAS_IndicationWithPiggybacking( tsc_SHT_NoSecurityProtection,
                                                                                   cdr_ATTACH_REQUEST_WithOldMobileIdNoTAI(v_AttachType,
                                                                                                                           v_AdditionalUpdateType,
                                                                                                                           f_Imsi2MobileIdentity(px_IMSI_Def)),
                                                                                   cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                   f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 22");
    
    //@siclog "Steps 23 - 34" siclog@
    // The attach procedure is completed and the RRC connection is released by executing
    // steps 5 to 16 of TS 36.508 sub clause 4.5.2.3
    f_EUTRA_IdleUpdated_Step5_17 (eutra_CellA, STATE2_IDLEUPDATE, EPS_Only, v_NAS_Ind, false); // @sic R5s120264 sic@
    
  }// end function fl_TC_9_2_1_1_23_Body

  function f_TC_9_2_1_1_24_EUTRA() runs on EUTRA_PTC
  { /* @desc Attach / Abnormal case / Change of cell into a new tracking area */
    // @sic R5s110026 sic@
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c3);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_SRBs_Only(eutra_CellB);
    
    f_UT_ConfigureEPSAttach (UT); // @sic R5-103810 sic@
    
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE ,-, EPS_Only); // @sic R5s110176 sic@
    
    f_EUTRA_SetCellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE );
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_1_1_24_Body ();
    
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E1_IDLE, EPS_Only); // @sic R5s110176 sic@
  } // end f_TC_9_2_1_1_24_EUTRA

  function fl_TC_9_2_1_1_24_Body() runs on EUTRA_PTC
  { // @sic R5s110026 sic@
    var template (value) CellPowerList_Type v_CellPowerList;
    var template (value) EUTRA_FDD_TDD_CellInfo_Type v_EUTRA_FDD_TDD_CellInfo;
    var NAS_MSG_Indication_Type v_NAS_Ind;
    var boolean v_EIT_Flag := false;
    var ProcedureTransactionIdentifier v_EPS_TI := '00'O;
    var template (value) AccessPointName v_APN;
    var template (omit) ProtocolConfigOptions v_Pco := omit;
    var template (value) TrackingAreaIdList v_TaiList;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only); // @sic R5s110176 sic@
    var HalfOctet_Type v_EpsBearerId := tsc_EpsDefaultBearerId;
    var NAS_UL_Message_Type v_PdnConnectivityRequest;
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only); // @sic R5s110176 sic@
    
    var GutiParameters_Type v_GutiParams1 := f_EUTRA_CellInfo_GetGuti (eutra_CellA);
    var NAS_Lac v_LAC := f_EUTRA_CellInfo_GetLocationAreaCode ( eutra_CellA );
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (v_GutiParams1.PLMN_Identity);
    
    var template (omit) MobileIdentity v_MSId := f_GetMSId (EPS_Only); // @sic R5s110176 sic@
    var template (omit) LocAreaId v_LAI := f_GetLAI(v_PLMN, v_LAC, EPS_Only); // @sic R5s110176 sic@
    var NextHopChainingCount v_Ncc0 := 0;  //Default configuration value according to TS 36.508 Table 4.6.1-10
    var EUTRA_SecurityParams_Type v_Auth_Params;
    var SRB_COMMON_IND v_ReceivedAsp;
    var template (value) NAS_MSG_Request_Type v_AttachAccept;
    var SubFrameTiming_Type v_TimingInfo;

    //  Switch on UE
    //@siclog "Step 1" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@
    
    //  The UE transmits an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message on cell A
    //@siclog "Step 2" siclog@
    v_NAS_Ind:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                 cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                 f_GetPdnType())));
    
    
    // TA on Cell A is disabled to avoid interference with contention resolution
    //@siclog "Step 2A" siclog@
    f_EUTRA_StopULGrantTransmission_No_PUCCH_Sync(eutra_CellA, cs_TimingInfo_Now);  // @sic R5s110710 sic@

    //@siclog "Step 3" siclog@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE )
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 4" siclog@
    //  Check: Does the UE transmit an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message
    // on CellB?
    v_NAS_Ind := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                                tsc_RRC_TI_Def,
                                                cr_EstablishmentCause_Any,
                                                cr_NAS_IndicationWithPiggybacking( tsc_SHT_IntegrityProtected,
                                                                                   cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                   cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                   f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 4");
    
    f_EUTRA_SS_SRBs_DRBs_Reset(eutra_CellA);   // @sic R5s110423 additional comments sic@

    v_PdnConnectivityRequest := v_NAS_Ind.Pdu.PiggybackedPduList[0].Msg;
    v_EPS_TI := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    // Get the PCO to be used later (TS 36.508 v.8.2.2 Table 4.7.3-6)
    if (ispresent( v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions)) {
      v_Pco := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    }
    v_EIT_Flag := f_CheckEsmInfoTransferFlag(v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST);
    
    //@siclog "Step 4A - 8b" siclog@
    // Step 4A   @sic R5-102202 sic@
    // The SS transmits an AUTHENTICATION REQUEST message to initiate the EPS authentication and AKA procedure.
    // Step 5
    // The UE transmits an AUTHENTICATION RESPONSE message and establishes mutual authentication.
    // Step 6
    // The SS transmits a NAS SECURITY MODE COMMAND message to activate NAS security.
    // Step 7
    // The UE transmits a NAS SECURITY MODE COMPLETE message and establishes the initial security configuration.
    // Steps 8a and 8b ESM INFORMATION REQUEST / ESM INFORMATION RESPONSE
    v_APN := f_EUTRA_Authentication_NAS_AS_Security (eutra_CellB, v_EIT_Flag, v_EPS_TI);
    
    //@siclog "Step 9" siclog@
    f_EUTRA_SetCellPower ( eutra_CellA, tsc_ServingCellRS_EPRE );
    
    //  Configure SS not to allocate UL grant to the UE in Cell B
    // Configure SS to disable report of PRACH preamble reception
    //@siclog "Step 10" siclog@
    f_EUTRA_SS_ConfigRachPreambleIndMode (eutra_CellB, tsc_L1Mac_IndicationMode_Disable);
    f_EUTRA_StopULGrantTransmission_PUCCH_Sync ( eutra_CellB, cs_TimingInfo_Now );
    f_EUTRA_SS_ConfigRachProcedure(eutra_CellB,      // @sic R5s110168 change 2.6 sic@
                                   omit,
                                   cs_RachProcedureConfig_NoResponse(f_EUTRA_CellInfo_GetDL_ChBandwidth ( eutra_CellB ) ) );
    
    //@siclog "Step 11" siclog@
    // SS responds with ATTACH ACCEPT message including a valid TAI list. The
    // ACTIVATE DEFAULT EPS BEARER CONTEXT REQUEST message is piggybacked in
    // ATTACH ACCEPT message. GUTI-1 is allocated
    // @sic R5s110116 change 1 sic@
    v_AttachAccept := cs_NAS_RequestWithPiggybacking(tsc_SHT_IntegrityProtected_Ciphered,
                                                     cs_508_ATTACH_ACCEPT (v_AttachType,
                                                                           cs_TAIListNonConsecutive_lv (tsc_PLMN1, {tsc_TAC2}),   // @sic R5s110710 sic@
                                                                           f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_GutiParams1),
                                                                           v_LAI,
                                                                           v_MSId,
                                                                           omit,
                                                                           f_GetAdditionalUpdateResult(v_NAS_Ind.Pdu.Msg.aTTACH_REQUEST.addUpdateType,EPS_Only)), // @sic R5s110176 sic@
                                                     cs_508_ActivateDefEpsBearerContextRequest(v_EpsBearerId,
                                                                                               v_EPS_TI,
                                                                                               v_APN,
                                                                                               f_EUTRA_GetPDNAddress(f_CheckPCOforIPallocationViaNas (v_Pco)),
                                                                                               -,
                                                                                               f_GetDefPCOforPCSCFAddress (v_Pco)));

    v_EUTRA_FDD_TDD_CellInfo := f_EUTRA_CellInfo_GetFDD_TDD_Info ( eutra_CellB );
    v_TimingInfo := f_EUTRA_GetNextSendOccasion(eutra_CellB);      /* 100ms in advance; @sic R5s110116 change 2: scheduled sending and power level change sic@ */
    f_IP_ChangeEutraCell(IP, eutra_CellB);       /* @sic R5-113734 change 8 sic@ */
    SRB.send(cas_SRB1_RrcNasPdu_REQ ( eutra_CellB,
                                      cs_TimingInfo(v_TimingInfo.SFN.Number, v_TimingInfo.Subframe.Number),                         /* @sic R5s110116 change 2 sic@ */
                                      cs_RRCConnectionReconfiguration_SRB2_1AM_DRB_Est(tsc_RRC_TI_Def,
                                                                                       v_EUTRA_FDD_TDD_CellInfo.cqi_ReportConfig,
                                                                                       v_EUTRA_FDD_TDD_CellInfo.soundingRS_UL_Config,
                                                                                       f_EUTRA_CellInfo_GetAntennaInfoDedicated (eutra_CellB)),
                                      v_AttachAccept));
    v_TimingInfo := f_EUTRA_TimingInfoAdd (v_TimingInfo, 60);
    f_EUTRA_OneULGrantTransmission(eutra_CellB, cs_TimingInfo(v_TimingInfo.SFN.Number, v_TimingInfo.Subframe.Number), 1, 2);        /* @sic R5s110116 change 2 sic@ */
 
    //@siclog "Step 12" siclog@
    f_EUTRA_SetCellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE, cs_TimingInfo(v_TimingInfo.SFN.Number, v_TimingInfo.Subframe.Number));  /* @sic R5s110116 change 2 sic@ */

    //@siclog "Step 13" siclog@
    // UE transmits RRCConnectionReestablishmentRequest message on Cell A @sic R5-102202 sic@
    SRB.receive( car_SRB0_RrcPdu_IND( eutra_CellA,
                                      cr_508_RRCConnectionReestablishmentRequest (?,
                                                                                  f_EUTRA_CellInfo_GetPhyCellId ( eutra_CellB ),
                                                                                  cr_ReestablishmentCause_Any)));

    f_IP_ChangeEutraCell(IP, eutra_CellA);       /* @sic R5-113734 change 8 sic@ @sic R5s120464 sic@  */
    // Activate RRC security at SS target cell (Cell2) for SRB 1, 2 and 1 AM DRB
    v_Auth_Params := f_EUTRA_SS_AS_ActivateSecurity_HO_Reest ( eutra_CellA, f_EUTRA_Security_Get ( ), v_Ncc0 );
    f_EUTRA_Security_Set ( v_Auth_Params );
    
    //  Transmit RRConnectionReestablishment to resume SRB1 and re-activate security
    //@siclog "Step 14" siclog@
    f_EUTRA_RRC_RRCConnectionReestablishment_Def ( eutra_CellA, -, v_Ncc0 );
    
    //  Receive RRCConnectionReestablishmentComplete
    //@siclog "Step 15" siclog@
    SRB.receive ( car_SRB1_RrcPdu_IND ( eutra_CellA,  cr_508_RRCConnectionReestablishmentComplete( tsc_RRC_TI_Def ) ) );
    
    //  Resume the SRB2 & DRB
    f_EUTRA_RRC_RRCConnectionReconfiguration_Resume_SRB2_DRBs ( eutra_CellA, tsc_RRC_TI_Def );

    //  Check: Does the UE transmit an ATTACH REQUEST message, containing GUTI-1?
    //@siclog "Step 16" siclog@
    SRB.receive(car_SRB2_NasPdu_IND(eutra_CellA,
                                    cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                      cdr_ATTACH_REQUEST_WithGuti(v_AttachType,
                                                                                                  v_AdditionalUpdateType,
                                                                                                  f_EUTRA_SecurityKSIasme_Get(),
                                                                                                  f_GutiParameters2MobileIdentity(omit, v_GutiParams1),
                                                                                                  cr_TAI( v_PLMN, tsc_TAC2)),  // @sic R5s110710 sic@
                                                                      cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                      f_GetPdnType() ))))-> value v_ReceivedAsp;
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "step 16");

    v_NAS_Ind := v_ReceivedAsp.Signalling.Nas[0];
    v_PdnConnectivityRequest := v_NAS_Ind.Pdu.PiggybackedPduList[0].Msg;
    
    v_EPS_TI := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier;
    // Get the PCO to be used later (TS 36.508 v.8.2.2 Table 4.7.3-6)
    if (ispresent( v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions)) {
      v_Pco := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    }
    
    //@siclog "Step 17" siclog@
    // SS responds with ATTACH ACCEPT message including a valid TAI list.
    // The ACTIVATE DEFAULT EPS BEARER CONTEXT REQUEST message is piggybacked in ATTACH ACCEPT message
    v_TaiList := cs_TAIListNonConsecutive_lv( v_PLMN, { bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellA)) });
    v_AttachAccept := cs_NAS_RequestWithPiggybacking(tsc_SHT_IntegrityProtected_Ciphered,
                                                     cs_508_ATTACH_ACCEPT(v_AttachType,
                                                                          v_TaiList,
                                                                          f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_GutiParams1),
                                                                          omit,
                                                                          omit,
                                                                          omit,
                                                                          f_GetAdditionalUpdateResult(v_NAS_Ind.Pdu.Msg.aTTACH_REQUEST.addUpdateType,EPS_Only)), // @sic R5s110176 sic@
                                                     cs_508_ActivateDefEpsBearerContextRequest(tsc_EpsDefaultBearerId,
                                                                                               v_EPS_TI,
                                                                                               v_APN, // @sic R5-110708 sic@
                                                                                               f_EUTRA_GetPDNAddress (f_CheckPCOforIPallocationViaNas (v_Pco)),
                                                                                               -,
                                                                                               f_GetDefPCOforPCSCFAddress (v_Pco))); // @sic R5-104703 sic@
    SRB.send  ( cas_SRB2_NasPdu_REQ ( eutra_CellA,
                                      cs_TimingInfo_Now,
                                      v_AttachAccept ));

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //   EXCEPTION: In parallel to the event described in step below the generic procedure for IP address     //
    //   allocation in the U-plane specified in TS 36.508 subclause 4.5A.1 takes place performing IP address  //
    //   allocation in the U-plane if requested by the UE.                                                    //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
        
    // The UE transmits an ATTACH COMPLETE message
    // including an ACTIVATE DEFAULT EPS BEARER CONTEXT ACCEPT message
    //@siclog "Step 18" siclog@
    f_EUTRA_NAS_AttachComplete(eutra_CellA, v_EpsBearerId);
    
    //  The SS releases the RRC connection
    //@siclog "Step 19" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
  }// end function fl_TC_9_2_1_1_24_Body

  function f_TC_9_2_1_1_25_EUTRA() runs on EUTRA_PTC
  { // Attach / Abnormal case / Mobile originated detach required
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE); // @sic R5s110176 sic@  @sic R5s120084 sic@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE, - ); // @sic R5s110176 sic@ @sic R5s120084 sic@
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_1_1_25_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E4_DEREGISTERED ); // @sic R5s110176 sic@ @sic R5s120084 sic@
  }

  function fl_TC_9_2_1_1_25_Body() runs on EUTRA_PTC
  {
    var ProcedureTransactionIdentifier v_EPS_TI := '00'O;
    var GutiParameters_Type v_GutiParams := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (); // @sic R5s110176 sic@ @sic R5s120084 sic@
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(NORMAL); // @sic R5s110176 sic@ @sic R5s120084 sic@
    var template (omit) ProtocolConfigOptions v_Pco := omit;
    var NAS_MSG_Indication_Type v_NasInd;
    var NAS_UL_Message_Type v_PdnConnectivityRequest;
    var boolean v_EIT_Flag := false;
    var float v_NoReactionTime := f_EUTRA_SetTimerToleranceMax( eutra_CellA, rrcTimer, 3.0 );
    
    timer t_T3410 := f_EUTRA_SetTimerToleranceMax(eutra_CellA, nasTimer, 15.0);
    
    //  The UE is switched on.
    //@siclog "Step 1" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@
    
    //@siclog "Step 2" siclog@
    //+  The UE transmits an ATTACH REQUEST message
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                              tsc_RRC_TI_Def,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    
    t_T3410.start; // 15 seconds + tolerance
    // Timeout is handled implicitly in default as we don't know when it will occur

    v_PdnConnectivityRequest := v_NasInd.Pdu.PiggybackedPduList[0].Msg;
    v_EPS_TI := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    // Get the PCO to be used later (TS 36.508 v.8.2.2 Table 4.7.3-6)
    if (ispresent( v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions)) {
      v_Pco := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    }
    
    //@siclog "Step 3 - 6" siclog@
    // The SS transmits an AUTHENTICATION REQUEST message to initiate the EPS authentication and AKA procedure.
    // The UE transmits an AUTHENTICATION RESPONSE message and establishes mutual authentication.
    // The SS transmits a NAS SECURITY MODE COMMAND message to activate NAS security.
    // The UE transmits a NAS SECURITY MODE COMPLETE message and establishes the initial security configuration.
    f_EUTRA_Authentication_NAS_AS_Security (eutra_CellA, v_EIT_Flag, v_EPS_TI);

    //  The SS does not respond to ATTACH REQUEST message.
    //@siclog "Step 7" siclog@

    // Cause UE to initiate detach before the T3410 times out.
    //@siclog "Step 7A" siclog@
    f_UT_InitiateDetach(UT);

    //@siclog "Step 8" siclog@
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                         cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                           cr_508_DETACH_REQUEST_MO(?, ?, cr_DetachType( '0'B, (tsc_DetachMO_GprsOnly, tsc_DetachMO_Combined)))))); // @sic R5-115355 sic@
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "step 8");
    t_T3410.stop;
    
    //@siclog "Step 9" siclog@
    SRB.send (cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                  cs_TimingInfo_Now,
                                  cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                 cs_508_DETACH_ACCEPT)));
    
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //@siclog "Step 10" siclog@
    // Check: Does the test result of CALL generic procedure "Test procedure for no response to paging
    // (for NAS testing)" clause 6.4.2.5 TS 36.508 indicates that the UE responds to paging when paged with GUTI-1
    // and with CN domain indicator set to "PS"?
    f_EUTRA_508Check_NASNoResponse ( eutra_CellA,
                                     cs_NasPaging_OneRecord ( cs_PagingUE_Identity_S_TMSI ( v_GutiParams.MME_Code, v_GutiParams.M_TMSI )),
                                     v_NoReactionTime );
    //@siclog "Step 11 Void" siclog@
    
  }// function fl_tc_9_2_1_1_25_EUTRA_Body

  function f_TC_9_2_1_1_26_EUTRA() runs on EUTRA_PTC
  { // @desc Attach / Abnormal case / Detach procedure collision
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    
    f_UT_ConfigureEPSAttach (UT); // @sic R5-103810 sic@
    
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE,-, EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_1_1_26_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E1_IDLE,EPS_Only); // @sic R5s110176 sic@
    
  } // end f_TC_9_2_1_1_26_EUTRA

  function fl_TC_9_2_1_1_26_Body() runs on EUTRA_PTC
  {
    var NAS_MSG_Indication_Type v_NAS_Ind;
    var boolean v_EIT_Flag := false;
    var HalfOctet_Type v_EpsBearerId := tsc_EpsDefaultBearerId;
    var ProcedureTransactionIdentifier v_EPS_TI := '00'O;
    var template (value) AccessPointName v_APN;
    var template (omit) ProtocolConfigOptions v_Pco := omit;
    var NAS_UL_Message_Type v_PdnConnectivityRequest;
    var GutiParameters_Type v_GutiParams1 := f_EUTRA_CellInfo_GetGuti (eutra_CellA);
    var NAS_Lac v_LAC := f_EUTRA_CellInfo_GetLocationAreaCode ( eutra_CellA );
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (v_GutiParams1.PLMN_Identity);
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only); // @sic R5s110176 sic@
    var template (omit) MobileIdentity v_MSId := f_GetMSId (EPS_Only); // @sic R5s110176 sic@
    var template (omit) LocAreaId v_LAI := f_GetLAI(v_PLMN, v_LAC,EPS_Only); // @sic R5s110176 sic@
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only); // @sic R5s110176 sic@
    var template (omit) EMM_Cause v_EMMCause :=cs_EMM_Cause_tv(tsc_Cause_EPSServNotAllowed);  // @sic R5s110692 sic@
    
    //  Switch on UE
    //@siclog "Step 1" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@
    
    //  The UE transmit an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message
    //@siclog "Step 2" siclog@
    v_NAS_Ind:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected, // @sic R5s100815 sic@
                                                                                 cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                 f_GetPdnType())));
    
    
    //  The SS initiates Detach procedure with the Detach Type IE "re-attach not required"
    //@siclog "Step 3" siclog@
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,   // @sic R5s110157 sic@
                                                cs_508_DETACH_REQUEST_MT(cs_DetachType(tsc_DetachMT_NoReAttach), v_EMMCause))));
    
    // Check: Does the UE send DETACH ACCEPT message?
    //@siclog "Step 4" siclog@
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered, // @sic R5s110157 sic@
                                                      cr_508_DETACH_ACCEPT)));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 4");
    
    // The SS releases the RRC connection
    //@siclog "Step 5" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //  UE is switched off and switched on
    //@siclog "Step 6" siclog@
    f_UT_SwitchOffUE (UT, false, CNF_REQUIRED); // @sic R5s1100395 sic@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@
    
    //  Check: Does the UE send ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message?
    //@siclog "Step 7" siclog@
    v_NAS_Ind := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                                tsc_RRC_TI_Def,
                                                cr_EstablishmentCause_Any,
                                                cr_NAS_IndicationWithPiggybacking( tsc_SHT_NoSecurityProtection,
                                                                                   cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                   cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                   f_GetPdnType())));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 7");
    
    v_PdnConnectivityRequest := v_NAS_Ind.Pdu.PiggybackedPduList[0].Msg;
    v_EPS_TI := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier;
    // Get the PCO to be used later (TS 36.508 v.8.2.2 Table 4.7.3-6)
    if (ispresent( v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions)) {
      v_Pco := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    }
    v_EIT_Flag := f_CheckEsmInfoTransferFlag(v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST);
    
    //@siclog "Step 8 - 12a2" siclog@
    // The SS transmits an AUTHENTICATION REQUEST message to initiate the EPS authentication and AKA procedure.
    // The UE transmits an AUTHENTICATION RESPONSE message and establishes mutual authentication.
    // The SS transmits a NAS SECURITY MODE COMMAND message to activate NAS security.
    // The UE transmits a NAS SECURITY MODE COMPLETE message and establishes the initial security configuration.
    // Steps 12a1 and 12a2 ESM INFORMATION REQUEST / ESM INFORMATION RESPONSE
    v_APN := f_EUTRA_Authentication_NAS_AS_Security (eutra_CellA, v_EIT_Flag, v_EPS_TI, false);
    
    //  The SS initiates Detach procedure with the Detach Type IE "re-attach required"
    //@siclog "Step 13" siclog@
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_DETACH_REQUEST_MT(cs_DetachType(tsc_DetachMT_ReAttach), omit))));
    
    
    //@siclog "Step 14" siclog@
    // SS responds with ATTACH ACCEPT message including a valid TAI list. The
    // ACTIVATE DEFAULT EPS BEARER CONTEXT REQUEST message is piggybacked in
    // ATTACH ACCEPT message. GUTI-1 is allocated
    f_EUTRA_RRCConnectionReconfigurationWithAttachAcceptAllParams(eutra_CellA,
                                                                  v_EpsBearerId,
                                                                  tsc_RRC_TI_Def,
                                                                  v_EPS_TI,
                                                                  v_AttachType,
                                                                  f_EUTRA_GetPDNAddress(f_CheckPCOforIPallocationViaNas (v_Pco)),
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_GutiParams1), // GUTI1
                                                                  cs_TrackingAreaIdListDef_lv,
                                                                  v_LAI,
                                                                  v_MSId,
                                                                  omit,
                                                                  v_APN,
                                                                  f_GetDefPCOforPCSCFAddress (v_Pco), // @sic R5-104703 sic@
                                                                  f_GetAdditionalUpdateResult(v_NAS_Ind.Pdu.Msg.aTTACH_REQUEST.addUpdateType,
                                                                                              EPS_Only)); // @sic R5s110176 sic@
    
    alt
      { //parallel behaviour
        []SRB.receive(car_SRB2_NasPdu_IND(eutra_CellA,
                                          cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_DETACH_ACCEPT)
                                          ))
          {
            f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "parallel behaviour: detach accept Rx");
          }
        
        // The UE transmits an ATTACH COMPLETE message
        // including an ACTIVATE DEFAULT EPS BEARER CONTEXT ACCEPT message
        //@siclog "Step 15" siclog@
        []SRB.receive(car_SRB2_NasPdu_IND(eutra_CellA,
                                          cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected_Ciphered,
                                                                            cr_508_ATTACH_COMPLETE,
                                                                            cr_508_ActivateDefEpsBearerContextAccept(v_EpsBearerId))))
          {
            f_EUTRA_DelayForUserPlaneSignalling();  // @sic R5s110449 sic@
            f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "step 15");
          }
      }
    
    // The SS waits 5 seconds
    //@siclog "Step 16" siclog@
    f_Delay (5.0);
    
    // Step 17: The SS releases the RRC connection
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
  }// end function fl_TC_9_2_1_1_26_Body

  function f_TC_9_2_1_2_1_EUTRA() runs on EUTRA_PTC
  {

   f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c3); //@sic R5-106627 sic@
   
   // create cell and send out system information
   f_EUTRA_CellConfig_Def(eutra_CellA);
   f_EUTRA_CellConfig_Def(eutra_CellB);
   f_EUTRA_CellConfig_Def(eutra_CellC);
   
   f_UT_ConfigureCombinedAttach (UT); // @sic R5-103815 sic@
   
   f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, Combined); // @sic R5s110176 sic@
   f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE,-,Combined ); // @sic R5s110176 sic@
   f_EUTRA_TestBody_Set(true);
   
   fl_TC_9_2_1_2_1_Body();
   
   // Postamble
   f_EUTRA_TestBody_Set(false);
   f_EUTRA_Postamble(eutra_CellC, E2_CONNECTED,Combined); // @sic R5s110176 sic@
  }// function f_TC_9_2_1_2_1_EUTRA

  function fl_TC_9_2_1_2_1_Body() runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList;
    var ProcedureTransactionIdentifier v_EPS_TI := '00'O;
    var GutiParameters_Type v_GutiParams := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var GutiParameters_Type v_Guti2Params := f_EUTRA_CellInfo_GetGuti(eutra_CellB);
    var GutiParameters_Type v_Guti3_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellC);
    var template (value) MobileIdentity v_Guti_2 := f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti2Params);
    var template (value) MobileIdentity v_Guti_3 := f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti3_Params);
    
    var NAS_Lac v_LAC := f_EUTRA_CellInfo_GetLocationAreaCode ( eutra_CellA );
    var NAS_Lac v_LAC3 := f_EUTRA_CellInfo_GetLocationAreaCode ( eutra_CellC );
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (v_GutiParams.PLMN_Identity);
    var template (omit) LocAreaId v_LAI := f_GetLAI(v_PLMN,v_LAC, Combined); // @sic R5s110176 sic@
    var template (omit) LocAreaId v_LAI_3 := f_GetLAI(v_PLMN,v_LAC3, Combined); // @sic R5s110176 sic@
    var template (omit) MobileIdentity v_MSId := f_GetMSId (Combined); // @sic R5s110176 sic@
    var template (omit) ProtocolConfigOptions v_Pco := omit;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (Combined); // @sic R5s110176 sic@
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;
    var boolean v_IPallocationViaNasFlag;
    var template (value) PDN_Address v_PDN_Address;
    var NAS_MSG_Indication_Type v_NasInd;
    var NAS_UL_Message_Type v_PdnConnectivityRequest;
    var template (value) NAS_MSG_Request_Type v_AttachAccept;
    var boolean v_EIT_Flag := false;
    var template (value) AccessPointName v_APN := cs_AccessPointName (px_AccessPointName);
    var float v_TimerValue;

    //  Set power levels
    //@siclog "Step 1" siclog@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_NonSuitableOffCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //  The UE is switched on.
    //@siclog "Step 2" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@
    
    //  Check: Does the UE ATTACH REQUEST message with a PDN CONNECTIVITY REQUEST message
    // to request PDN connectivity to the default PDN. EPS attach type = "combined EPS/IMSI attach"?
    //@siclog "Step 3" siclog@
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                              tsc_RRC_TI_Def,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                cdr_ATTACH_REQUEST_AttachType(tsc_EAttachType_Combined,
                                                                                                              v_AdditionalUpdateType,
                                                                                                              f_GutiParameters2MobileIdentity(omit, v_GutiParams),
                                                                                                              cr_TAI( v_PLMN, v_LAC),
                                                                                                              v_LAI,
                                                                                                              omit),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    
    v_PdnConnectivityRequest := v_NasInd.Pdu.PiggybackedPduList[0].Msg;
    v_EPS_TI := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier;
    // Get the PCO to be used later (TS 36.508 v.8.2.2 Table 4.7.3-6)
    if (ispresent( v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions)) {
      v_Pco := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    }
    
    v_EIT_Flag := f_CheckEsmInfoTransferFlag(v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST);
    
    //@siclog "Step 4 - 7Aa2" siclog@
    //+  The SS starts an authentication procedure
    //+  The UE responds properly to the authentication procedure
    //+  The SS starts a NAS security mode command procedure to perform NAS integrity protection
    //+  The UE responds properly to the NAS security mode command procedure
    // describe behaviour that depends on UE configuration; the "lower case letter" identifies a step sequence that take place if the UE has ESM information which needs to be transferred.
    // IF the UE sets the ESM information transfer flag in the last PDN CONNECTIVITY REQUEST message THEN the SS transmits an ESM INFORMATION REQUEST message to initiate exchange of protocol configuration options and/or APN.
    // The UE transmits an ESM INFORMATION RESPONSE message to transfer protocol configuration options and/or APN.
    v_APN := f_EUTRA_Authentication_NAS_AS_Security (eutra_CellA,v_EIT_Flag, v_EPS_TI);
    
    // The SS sends ATTACH ACCEPT message with the ACTIVATE DEFAULT EPS BEARER CONTEXT REQUEST message.
    //@siclog "Step 8" siclog@
    v_IPallocationViaNasFlag :=  f_CheckPCOforIPallocationViaNas (v_Pco);
    v_PDN_Address := f_EUTRA_GetPDNAddress (v_IPallocationViaNasFlag);
    v_AttachAccept := cs_NAS_RequestWithPiggybacking(tsc_SHT_IntegrityProtected_Ciphered,
                                                     cs_508_ATTACH_ACCEPT(tsc_EAttachType_Combined,
                                                                          cs_TAIListNonConsecutive_lv (tsc_PLMN1, {tsc_TAC1, tsc_TAC2}),
                                                                          v_Guti_2,
                                                                          v_LAI,
                                                                          v_MSId,
                                                                          omit,
                                                                          f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType, Combined)), // @sic R5s110176 sic@
                                                     cs_508_ActivateDefEpsBearerContextRequest( tsc_EpsDefaultBearerId,
                                                                                               v_EPS_TI,
                                                                                               v_APN,
                                                                                               v_PDN_Address,
                                                                                               -,
                                                                                               f_GetDefPCOforPCSCFAddress (v_Pco))); // @sic R5-104703 sic@
    f_IP_ChangeEutraCell(IP, eutra_CellA);       /* @sic R5-113734 change 8 sic@ */
    f_EUTRA_RRCConnectionReconfiguration_SRB2_1AM_DRB_Est(eutra_CellA,
                                                          tsc_RRC_TI_Def,
                                                          v_AttachAccept);
    
    //  ATTACH COMPLETE
    //@siclog "Step 9" siclog@
    f_EUTRA_NAS_AttachComplete(eutra_CellA, tsc_EpsDefaultBearerId);
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 9");
    
    //@siclog "Step 10" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //@siclog "Step 11 Void" siclog@   // @sic R5-113682 sic@
    //@siclog "Step 12 Void" siclog@
    //@siclog "Step 12Aa1 Void" siclog@
    //@siclog "Step 13 Void" siclog@
    //@siclog "Step 14 Void" siclog@
    //@siclog "Step 14A Void" siclog@
    //@siclog "Step 14B Void" siclog@
      //@siclog "Step 15 Void" siclog@

    //  Set power levels
    //@siclog "Step 16" siclog@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_NonSuitableOffCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    // Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message in the next 30 seconds?
    //@siclog "Step 17" siclog@
    v_TimerValue := f_EUTRA_SetTimerToleranceMin(eutra_CellB, nasTTCNTimer, 30.0);  // @sic R5-106675 sic@
    if (f_EUTRA_RRC_RRCConnectionRequest_Check(eutra_CellB, v_TimerValue)) {        // @sic R5s110507 Additional Changes sic@
      // even though prose says TAU, as soon as UE sends RRC ConnReq, we know something is wrong
      f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 17");
    }

    //@siclog "Step 18 Void" siclog@    // @sic R5-113682 sic@
    //@siclog "Step 19 Void" siclog@
    //@siclog "Step 19Aa1 Void" siclog@
    //@siclog "Step 19B Void" siclog@
    //@siclog "Step 19C Void" siclog@
    //@siclog "Step 19D Void" siclog@
    //@siclog "Step 19E Void" siclog@

    //  Set power levels
    //@siclog "Step 20" siclog@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_ServingCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 21" siclog@
    // Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellC,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti_LAI(tsc_EpsUpdate_Combined_TaLaUpdate,  // @sic R5s110269 sic@
                                                                                            f_EUTRA_SecurityKSIasme_Get(),
                                                                                            cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                            v_AdditionalUpdateType,
                                                                                            f_GutiParameters2MobileIdentity(omit, v_Guti2Params), //GUTI-2
                                                                                            v_LAI )));
    
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 21");
    
    //@siclog "Step 22" siclog@
    //+   The SS sends TRACKING AREA UPDATE ACCEPT
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellC,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(tsc_EpsUpdate_Combined_TaLaUpdate,
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti3_Params),
                                                                  cds_TAIListNonConsecutive_tlv(v_PLMN,
                                                                                                { '0003'O }), // TAC3=3
                                                                  v_EpsBearerCtxtStatus,
                                                                  v_LAI_3,
                                                                  f_GetMSId (Combined),
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType, Combined)) ) ) ); // @sic R5s110176 sic@
    
    //+ The UE sends TRACKING AREA UPDATE COMPLETE
    //@siclog "Step 23" siclog@
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellC,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    
    // The SS releases connection
    //@siclog "Step 24" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellC);
    
    //  Switch off and detach
    //@siclog "Step 25 - 26" siclog@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellC, RRC_IDLE,-, Combined);  // @sic R5s110176, R5-101012 sic@
    
    //  The UE is switched on.
    //@siclog "Step 27" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellC); // @sic R5s120065 sic@
    
    //  Attach Procedure.
    //@siclog "Step28 - 34" siclog@
    // Step 28 Check: Does the UE ATTACH REQUEST message with a PDN CONNECTIVITY REQUEST message
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellC,
                                              tsc_RRC_TI_Def,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                cr_508_ATTACH_REQUEST(tsc_EAttachType_Combined, v_AdditionalUpdateType),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    
    v_PdnConnectivityRequest := v_NasInd.Pdu.PiggybackedPduList[0].Msg;
    v_EPS_TI := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier;
    // Get the PCO to be used later (TS 36.508 v.8.2.2 Table 4.7.3-6)
    if (ispresent( v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions)) {
      v_Pco := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    }
    v_EIT_Flag := f_CheckEsmInfoTransferFlag(v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST);
    
    // Steps 29 and 30 - Steps 5 to 16 of the UE registration procedure
    v_APN := f_EUTRA_Authentication_NAS_AS_Security (eutra_CellC, v_EIT_Flag, v_EPS_TI);
    f_EUTRA_Capability (eutra_CellC, tsc_RRC_TI_Def); // This enquires for the eutra capability but does not check the contents of the message received
    
    v_PDN_Address := f_EUTRA_GetPDNAddress (v_IPallocationViaNasFlag);
    v_AttachAccept := cs_NAS_RequestWithPiggybacking(tsc_SHT_IntegrityProtected_Ciphered,
                                                     cs_508_ATTACH_ACCEPT(tsc_EAttachType_Combined,
                                                                          cs_TAIListNonConsecutive_lv (tsc_PLMN1, {tsc_TAC3}),
                                                                          v_Guti_3,
                                                                          v_LAI_3,
                                                                          v_MSId,
                                                                          omit,
                                                                          f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType, Combined)), // @sic R5s110176 sic@
                                                     cs_508_ActivateDefEpsBearerContextRequest(tsc_EpsDefaultBearerId,
                                                                                               v_EPS_TI,
                                                                                               v_APN, // @sic R5-110708 sic@
                                                                                               v_PDN_Address,
                                                                                               -,
                                                                                               f_GetDefPCOforPCSCFAddress (v_Pco))); // @sic R5-104703 sic@
    f_IP_ChangeEutraCell(IP, eutra_CellC);       /* @sic R5-113734 change 8 sic@ */
    f_EUTRA_RRCConnectionReconfiguration_SRB2_1AM_DRB_Est(eutra_CellC,
                                                          tsc_RRC_TI_Def,
                                                          v_AttachAccept); // @sic R5-101012 sic@
    
    //  ATTACH COMPLETE
    f_EUTRA_NAS_AttachComplete(eutra_CellC, tsc_EpsDefaultBearerId);   // @sic R5-101012 sic@
    
  }// function fl_tc_9_2_1_2_1_Body

  function f_TC_9_2_1_2_2_EUTRA() runs on EUTRA_PTC
  { /* @desc Combined attach procedure / Success / EPS services only / IMSI unknown in HSS */

    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    
    f_UT_ConfigureCombinedAttach (UT); // @sic R5-103815 sic@
    
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE,Combined); // @sic R5s110176 sic@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE,-,Combined); // @sic R5s110176 sic@
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_1_2_2_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E2_CONNECTED, Combined); // @sic R5s110176 sic@
  }// function f_TC_9_2_1_2_2_EUTRA

  function fl_TC_9_2_1_2_2_Body() runs on EUTRA_PTC
  { //@sic R5s110129 sic@
    var ProcedureTransactionIdentifier v_EPS_TI := '00'O;
    var GutiParameters_Type v_GutiParams := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var template (value) MobileIdentity v_Guti := f_GutiParameters2MobileIdentity(omit, v_GutiParams);
    var NAS_Lac v_LAC := f_EUTRA_CellInfo_GetLocationAreaCode ( eutra_CellA );
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (v_GutiParams.PLMN_Identity);
    var template (omit) LocAreaId v_LAI := f_GetLAI(v_PLMN,v_LAC, Combined); // @sic R5s110176 sic@
    var template (omit) MobileIdentity v_MSId := f_GetMSId (Combined); // @sic R5s110176 sic@
    var template (omit) ProtocolConfigOptions v_Pco := omit;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (Combined); // @sic R5s110176 sic@
    var boolean v_IPallocationViaNasFlag;
    var template (value) PDN_Address v_PDN_Address;
    var NAS_MSG_Indication_Type v_NasInd;
    var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get();
    var NasCount_Type v_NasCountUL;
    var NAS_UL_Message_Type v_PdnConnectivityRequest;
    var template (value) NAS_MSG_Request_Type v_AttachAccept;
    var template (value) AccessPointName v_APN := cs_AccessPointName (px_AccessPointName);
    var boolean v_EIT_Flag := false;
    var GutiParameters_Type v_GutiParamsNew := f_CreateGutiParamsWithUpdatedSTmsi(v_GutiParams);
    var template (value) MobileIdentity v_GutiNew := f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_GutiParamsNew);

    f_EUTRA_CellInfo_SetGuti(eutra_CellA, v_GutiParamsNew);
    
    //  The UE is switched on.
    //@siclog "Step 1" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@

    //@siclog "Step 2" siclog@
    // The UE transmits ATTACH REQUEST message with a PDN CONNECTIVITY REQUEST message to request
    // PDN connectivity to the default PDN with EPS attach type set to "combined EPS/IMSI attach"
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                              tsc_RRC_TI_Def,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                cdr_ATTACH_REQUEST_AttachType(tsc_EAttachType_Combined,
                                                                                                              v_AdditionalUpdateType,
                                                                                                              v_Guti,
                                                                                                              cr_TAI( v_PLMN, v_LAC),
                                                                                                              v_LAI,
                                                                                                              omit),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    
    v_PdnConnectivityRequest := v_NasInd.Pdu.PiggybackedPduList[0].Msg;
    v_EPS_TI := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    // Get the PCO to be used later (TS 36.508 v.8.2.2 Table 4.7.3-6)
    if (ispresent( v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions)) {
      v_Pco := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    }
    v_EIT_Flag := f_CheckEsmInfoTransferFlag(v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST);
    
    // Steps 3 and 4 - Authentication procedure.
    // Steps 5 and 6  - NAS SECURITY MODE COMMAND / NAS SECURITY MODE COMPLETE
    // Steps 6Aa1 and 6Aa2 -ESM INFORMATION TRANSFER
    //@siclog "Step 3 - 6Aa2" siclog@
    v_APN := f_EUTRA_Authentication_NAS_AS_Security (eutra_CellA, v_EIT_Flag, v_EPS_TI);
    
    //  ATTACH ACCEPT
    //@siclog "Step 7" siclog@
    v_IPallocationViaNasFlag :=  f_CheckPCOforIPallocationViaNas (v_Pco); // See TS 36.508 v.8.2.2 Table 4.7.3-6
    v_PDN_Address := f_EUTRA_GetPDNAddress (v_IPallocationViaNasFlag);
    v_AttachAccept := cs_NAS_RequestWithPiggybacking(tsc_SHT_IntegrityProtected_Ciphered,
                                                     cs_508_ATTACH_ACCEPT(tsc_EAttachType_EpsOnly,
                                                                          cs_TAIListNonConsecutive_lv (tsc_PLMN1, {tsc_TAC1, tsc_TAC2}),
                                                                          v_GutiNew,
                                                                          omit,
                                                                          omit,
                                                                          cs_EMM_Cause_tv(tsc_EmmCause_UnknownIMSI),
                                                                          f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType, Combined)), // @sic R5s110176 sic@
                                                     cs_508_ActivateDefEpsBearerContextRequest(tsc_EpsDefaultBearerId,
                                                                                               v_EPS_TI,
                                                                                               v_APN,
                                                                                               v_PDN_Address,
                                                                                               -,
                                                                                               f_GetDefPCOforPCSCFAddress (v_Pco))); // @sic R5-104703 sic@
    f_IP_ChangeEutraCell(IP, eutra_CellA);       /* @sic R5-113734 change 8 sic@ */
    f_EUTRA_RRCConnectionReconfiguration_SRB2_1AM_DRB_Est(eutra_CellA,
                                                          tsc_RRC_TI_Def,
                                                          v_AttachAccept);
    
    // ATTACH COMPLETE
    //@siclog "Step 8" siclog@
    f_EUTRA_NAS_AttachComplete(eutra_CellA, tsc_EpsDefaultBearerId);
    
    //@siclog "Step 9 - 12 Void" siclog@
    
    //@siclog "Step 13" siclog@
    //  The SS initiates Detach procedure with the Detach Type IE
    //+   "re-attach required"
    SRB.send(cas_SRB2_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_DETACH_REQUEST_MT(cs_DetachType(tsc_DetachMT_ReAttach), omit))));
    
    //@siclog "Step 14" siclog@
    //+   Check: Does the UE send DETACH ACCEPT message? [1,P]
    SRB.receive(car_SRB2_NasPdu_IND(eutra_CellA,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_DETACH_ACCEPT)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 14");
    
    //+  The SS releases the RRC connection
    //@siclog "Step 15" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);   /* @sic R5-110803 change 13 sic@ */
    
    //@siclog "Step 15a" siclog@
    if (not pc_Automatic_Re_Attach) { // @sic R5-106186 sic@
      f_UT_TriggerAttach (UT);
    }
    //+ Step 16 Check: Does the UE send ATTACH REQUEST message? [1,P]
    //@siclog "Step 16" siclog@
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                              tsc_RRC_TI_Def,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                cdr_ATTACH_REQUEST_AttachType(tsc_EAttachType_EpsOnly,
                                                                                                              v_AdditionalUpdateType,
                                                                                                              f_GutiParameters2MobileIdentity(omit, v_GutiParamsNew), // @sic R5s110168 change 2.15 sic@
                                                                                                              cr_TAI (tsc_PLMN1, (tsc_TAC1)),
                                                                                                              omit,
                                                                                                              omit),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 16");
    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    v_NasCountUL := v_NasInd.SecurityProtection.NasCount;
    v_SecurityParams := f_EUTRA_RRC_ActivateSecurity(eutra_CellA, v_SecurityParams, v_NasCountUL); // RRC SECURITY COMMAND & COMPLETE
    f_EUTRA_Security_Set ( v_SecurityParams );//Saving security parameters
    
    //@siclog "Step 17" siclog@
    f_EUTRA_RRCConnectionReconfigurationWithAttachAcceptAllParams(eutra_CellA,
                                                                  tsc_EpsDefaultBearerId,
                                                                  tsc_RRC_TI_Def,
                                                                  v_EPS_TI,
                                                                  tsc_EAttachType_EpsOnly,
                                                                  f_EUTRA_GetPDNAddress (f_CheckPCOforIPallocationViaNas (v_Pco)),
                                                                  omit,
                                                                  cs_TrackingAreaIdListDef_lv,
                                                                  v_LAI,
                                                                  v_MSId,
                                                                  omit,
                                                                  omit,
                                                                  f_GetDefPCOforPCSCFAddress (v_Pco), // @sic R5-104703 sic@
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType,
                                                                                              Combined)); // @sic R5s110176 sic@
    
    //@siclog "Step 18" siclog@
    //+   Check: Does the UE send ATTACH COMPLETE message? [1,P]
    f_EUTRA_NAS_AttachComplete(eutra_CellA, tsc_EpsDefaultBearerId);
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 18");
    
    //@siclog "Step 19a" siclog@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_CONNECTED, -,Combined, cr_DetachType( '1'B, tsc_DetachMO_EpsOnly) ); // @sic R5s110176 sic@
    
    //@siclog "Step 20" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@
    
    //@siclog "Step 21" siclog@
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                              tsc_RRC_TI_Def,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                cdr_ATTACH_REQUEST_AttachType(tsc_EAttachType_Combined,
                                                                                                              v_AdditionalUpdateType,
                                                                                                              f_GutiParameters2MobileIdentity(omit, v_GutiParamsNew),
                                                                                                              cr_TAI (tsc_PLMN1, (tsc_TAC1)),
                                                                                                              omit,
                                                                                                              cr_TMSI_Status('0'B)),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 21");
    v_PdnConnectivityRequest := v_NasInd.Pdu.PiggybackedPduList[0].Msg;
    v_EPS_TI := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    // Get the PCO to be used later (TS 36.508 v.8.2.2 Table 4.7.3-6)
    if (ispresent( v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions)) {
      v_Pco := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    }
    v_EIT_Flag := f_CheckEsmInfoTransferFlag(v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST);
    v_APN := f_ESM_InitAPN(eutra_CellA, v_EIT_Flag, v_EPS_TI);  // @sic R5s110219 sic@
    
    v_NasCountUL := v_NasInd.SecurityProtection.NasCount;  // @sic R5s110219 sic@
    v_SecurityParams := f_EUTRA_Authentication_InitAS(v_SecurityParams, v_NasCountUL);
    // RRC Security Command / RRC Security Complete
    v_SecurityParams := f_EUTRA_RRC_ActivateSecurity(eutra_CellA, v_SecurityParams, v_NasCountUL);
    f_EUTRA_Security_Set ( v_SecurityParams );//Saving security parameters
    
    //@siclog "Step 22" siclog@
    //  ATTACH ACCEPT
    v_IPallocationViaNasFlag :=  f_CheckPCOforIPallocationViaNas (v_Pco); // See TS 36.508 v.8.2.2 Table 4.7.3-6
    v_PDN_Address := f_EUTRA_GetPDNAddress (v_IPallocationViaNasFlag);
    v_AttachAccept := cs_NAS_RequestWithPiggybacking(tsc_SHT_IntegrityProtected_Ciphered,
                                                     cs_508_ATTACH_ACCEPT(tsc_EAttachType_Combined,
                                                                          cs_TAIListNonConsecutive_lv (tsc_PLMN1, {tsc_TAC1, tsc_TAC2}),
                                                                          omit,
                                                                          v_LAI,
                                                                          v_MSId,
                                                                          omit,
                                                                          f_GetAdditionalUpdateResult( v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType,Combined)), // @sic R5s110176 sic@
                                                     cs_508_ActivateDefEpsBearerContextRequest(tsc_EpsDefaultBearerId,
                                                                                               v_EPS_TI,
                                                                                               v_APN,
                                                                                               v_PDN_Address,
                                                                                               -,
                                                                                               f_GetDefPCOforPCSCFAddress (v_Pco))); // @sic R5-104703 sic@
    f_IP_ChangeEutraCell(IP, eutra_CellA);       /* @sic R5-113734 change 8 sic@ */
    f_EUTRA_RRCConnectionReconfiguration_SRB2_1AM_DRB_Est(eutra_CellA,
                                                          tsc_RRC_TI_Def,
                                                          v_AttachAccept);
    
    // ATTACH COMPLETE
    //@siclog "Step 23" siclog@
    f_EUTRA_NAS_AttachComplete(eutra_CellA, tsc_EpsDefaultBearerId);
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 23");
    
  }// function fl_tc_9_2_1_2_2_Body

  function f_TC_9_2_1_2_3_EUTRA() runs on EUTRA_PTC
  { /* Successful combined attach procedure, EPS service only / MSC temporarily not reachable. */
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    
    f_UT_ConfigureCombinedAttach (UT); // @sic R5-103815 sic@
    
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, Combined); // @sic R5s110176 sic@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE,-,Combined); // @sic R5s110176 sic@
    f_EUTRA_TestBody_Set(true);
    //k=1
    fl_TC_9_2_1_2_3_Body(cs_EMM_Cause_tv(tsc_EmmCause_MSCnotReachable));
    
    //k=2
    if (pc_CS_PS_voice_centric and px_UE_CS_PS_UsageSetting_Tested == VOICE_CENTRIC) { // @sic R5s120079r1 sic@ @sic R5s120274 sic@
      //Expect the UE to release RRC connection
      f_EUTRA_RRC_ConnectionRelease(eutra_CellA );
      f_Delay (5.0);
    };
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE,-,Combined); // @sic R5s110176 sic@ @sic R5s120079 sic@
    fl_TC_9_2_1_2_3_Body(cs_EMM_Cause_tv(tsc_EmmCause_NetworkFailure));
    
    //k=3
    if (pc_CS_PS_voice_centric and px_UE_CS_PS_UsageSetting_Tested == VOICE_CENTRIC) { // @sic R5s120079r1 sic@ @sic R5s120274 sic@
      //Expect the UE to release RRC connection
      f_EUTRA_RRC_ConnectionRelease(eutra_CellA );
      f_Delay (5.0);
    };

    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE,-,Combined ); // @sic R5s110176 sic@ @sic R5s120079 sic@
    fl_TC_9_2_1_2_3_Body(cs_EMM_Cause_tv(tsc_Cause_Congestion));
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    if (pc_CS_PS_data_centric and px_UE_CS_PS_UsageSetting_Tested == DATA_CENTRIC) { // @sic R5s120079r1 sic@ @sic R5s120274 sic@
      f_EUTRA_Postamble(eutra_CellA, E1_IDLE, Combined); // @sic R5s110176 sic@
    }
    else { // pc_CS_PS_voice_centric
      f_EUTRA_Postamble(eutra_CellA, E2_T3440, Combined);  // @sic R5s110176, R5s110007 sic@
    }
  }// function f_TC_9_2_1_2_3_EUTRA

  function fl_TC_9_2_1_2_3_Body(template (value) EMM_Cause p_EMMCause) runs on EUTRA_PTC
  { //@sic R5s110143 sic@
    var ProcedureTransactionIdentifier v_EPS_TI := '00'O;
    var HalfOctet_Type v_EPS_Bearer_Id := tsc_EpsDefaultBearerId;
    var GutiParameters_Type v_GutiParams_CellA := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var template (omit) ProtocolConfigOptions v_Pco := omit;
    var NAS_MSG_Indication_Type v_NasInd;
    var NAS_UL_Message_Type v_PdnConnectivityRequest;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var template AdditionalUpdateType   v_AdditionalUpdateType := f_GetAdditionalUpdateType (Combined); // @sic R5s110176 sic@
    var template (omit) EPS_BearerContextStatus v_EPS_ContextStatus;
    var template (value) AccessPointName v_APN;
    var boolean v_EIT_Flag := false;
    var integer v_Step := 10;
    var NAS_Lac v_LAC := f_EUTRA_CellInfo_GetLocationAreaCode ( eutra_CellA );
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (v_GutiParams_CellA.PLMN_Identity);
    var template (omit) LocAreaId v_LAI := f_GetLAI(v_PLMN,v_LAC, Combined); // @sic R5s110176 sic@
    var template (value) NAS_DL_Message_Type v_TAU_Accept;
    
    timer t_T3411Min := f_EUTRA_SetTimerToleranceMin(eutra_CellA, nasTimer, 10.0);
    timer t_T3402Min := f_EUTRA_SetTimerToleranceMin(eutra_CellA, nasTimer, 30.0); // @sic R5s110551 sic@
    timer t_T3411Max := f_EUTRA_SetTimerToleranceMax(eutra_CellA, nasTimer, 10.0);
    timer t_T3402Max := f_EUTRA_SetTimerToleranceMax(eutra_CellA, nasTimer, 30.0); // @sic R5s110551 sic@

    //  The UE is switched on.
    //@siclog "Step 1" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@
    
    //@siclog "Step 2" siclog@
    //+  The UE transmits an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message as specified
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                              tsc_RRC_TI_Def,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                cdr_ATTACH_REQUEST_AttachType(tsc_EAttachType_Combined,
                                                                                                              v_AdditionalUpdateType,
                                                                                                              f_GutiParameters2MobileIdentity(omit, v_GutiParams_CellA),
                                                                                                              cr_TAI( v_PLMN, v_LAC),
                                                                                                              v_LAI,
                                                                                                              omit),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    
    v_PdnConnectivityRequest := v_NasInd.Pdu.PiggybackedPduList[0].Msg;
    v_EPS_TI := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    // Get the PCO to be used later (TS 36.508 v.8.2.2 Table 4.7.3-6)
    if (ispresent( v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions)) {
      v_Pco := v_PdnConnectivityRequest.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    }
    v_EIT_Flag := f_CheckEsmInfoTransferFlag(v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST);
    
    //@siclog "Step 3 - 6Aa2" siclog@
    //+ The SS transmits an AUTHENTICATION REQUEST message to initiate the EPS authentication and AKA procedure.
    //+ The UE transmits an AUTHENTICATION RESPONSE message and establishes mutual authentication.
    //+ The SS transmits a NAS SECURITY MODE COMMAND message to activate NAS security.
    //+ The UE transmits a NAS SECURITY MODE COMPLETE message and establishes the initial security configuration.
    // Steps 6Aa1 and 6Aa2 -ESM INFORMATION TRANSFER
    v_APN := f_EUTRA_Authentication_NAS_AS_Security (eutra_CellA, v_EIT_Flag, v_EPS_TI);
    
    //@siclog "Step 7" siclog@
    //The SS transmits an ATTACH ACCEPT message with IE EPS Bearer Identity set to default EPS bearer context. The ACTIVATE DEFAULT EPS BEARER CONTEXT REQUEST
    //message is piggybacked in ATTACH ACCEPT.
    //Note 1: SS allocates a PDN address of a PDN type which is compliant with from the PDN type requested by the UE.
    f_IP_ChangeEutraCell(IP, eutra_CellA);       /* @sic R5-113734 change 8 sic@ @sic R5s110744 sic @*/
    f_EUTRA_RRCConnectionReconfiguration_SRB2_1AM_DRB_Est(eutra_CellA,
                                                          v_RRC_TI,
                                                          cs_NAS_RequestWithPiggybacking(tsc_SHT_IntegrityProtected_Ciphered,
                                                                                         cs_508_ATTACH_ACCEPT(tsc_EAttachType_EpsOnly,
                                                                                                              cs_TrackingAreaIdListDef_lv,
                                                                                                              omit,
                                                                                                              omit,
                                                                                                              omit,
                                                                                                              p_EMMCause,
                                                                                                              f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType, Combined)),  // @sic R5s110176, R5-103681 sic@
                                                                                         cs_508_ActivateDefEpsBearerContextRequest(v_EPS_Bearer_Id,
                                                                                                                                   v_EPS_TI,
                                                                                                                                   v_APN,
                                                                                                                                   f_EUTRA_GetPDNAddress(f_CheckPCOforIPallocationViaNas(v_Pco)),
                                                                                                                                   -,
                                                                                                                                   f_GetDefPCOforPCSCFAddress (v_Pco)))); // @sic R5-104703 sic@
    
    
    //@siclog "Step 8" siclog@
    //+   Check: does the UE transmit an ATTACH COMPLETE message including an  ACTIVATE DEFAULT EPS BEARER CONTEXT ACCEPT message?  [1,P]
    SRB.receive(car_SRB2_NasPdu_IND(eutra_CellA,
                                    cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected_Ciphered,
                                                                      cr_508_ATTACH_COMPLETE,
                                                                      cr_508_ActivateDefEpsBearerContextAccept(v_EPS_Bearer_Id))));
    t_T3411Max.start;  // @sic R5s110593 ch 10 sic@
    t_T3411Min.start;
    
    f_EUTRA_DelayForUserPlaneSignalling(dontWaitForIMS);   // @sic R5s110449 sic@ @sic R5-123731 sic@
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 8");
    
    //@siclog "Step 9" siclog@
    //+   The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease ( eutra_CellA );  /* @sic R5-110803 change 13 sic@ */
    t_T3411Min.timeout;

    //@siclog "Step 10 - 15" siclog@
    //Check2: Is the time between the previous ATTACH ACCEPT and TRACKING AREA UPDATE REQUEST equal to T3411?
    //SS transmits a TRACKING AREA UPDATE ACCEPT message.
    //Note: Tracking area updating attempt counter is incrementing  [1,2,P]
    for (v_Step := 10; v_Step < 15; v_Step := v_Step + 2)
    {
      //@siclog "Step 10, 12, 14" siclog@
      //Check1: Does the UE transmit a TRACKING AREA UPDATE REQUEST message with  "combined TA/LA updating with IMSI attach"?
      v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                                 tsc_RRC_TI_Def,
                                                 cr_EstablishmentCause_Any,
                                                 cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                   cdr_TAU_RequestOldGutiLaiTmsiStatus(tsc_EpsUpdate_Combined_IMSIAttach,
                                                                                                       f_EUTRA_SecurityKSIasme_Get(),
                                                                                                       cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                       v_AdditionalUpdateType,
                                                                                                       f_GutiParameters2MobileIdentity(omit, v_GutiParams_CellA),
                                                                                                       v_LAI,
                                                                                                       cr_TAI( v_PLMN, v_LAC),
                                                                                                       omit)));
      t_T3411Max.stop; // If the timer times out, it will be caught in the default behaviour
      f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step "&int2str(v_Step));
        
      v_EPS_ContextStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus; // Send this back in the Accept
        
      //@siclog "Step 11, 13, 15" siclog@
      SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request ( tsc_SHT_IntegrityProtected_Ciphered,
                                                        cs_TAU_Accept_EMM_Cause ( tsc_EpsUpdate_TaUpdate,
                                                                                  omit, // @sic R5s110168 change 2.2 sic@
                                                                                  cs_TrackingAreaIdListDef_tlv,
                                                                                  v_EPS_ContextStatus,
                                                                                  omit,
                                                                                  omit,
                                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType, Combined), // @sic R5s110176 sic@
                                                                                  p_EMMCause))));
        
        
      //@siclog "Step 11A, 13A, 15A " siclog@
      //+   The SS releases the RRC connection.
      f_EUTRA_RRC_ConnectionRelease ( eutra_CellA );  /* @sic R5-113806 sic@ */

      t_T3411Max.start; // @sic R5s110593 ch 10 sic@
      t_T3411Min.start;
      t_T3411Min.timeout;
    }

    //@siclog "Step 16" siclog@
    //Check1: Does the UE transmit a TRACKING AREA UPDATE REQUEST message with  "combined TA/LA updating with IMSI attach"?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_RequestOldGutiLaiTmsiStatus(tsc_EpsUpdate_Combined_IMSIAttach,
                                                                                                     f_EUTRA_SecurityKSIasme_Get(),
                                                                                                     cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                     v_AdditionalUpdateType,
                                                                                                     f_GutiParameters2MobileIdentity(omit, v_GutiParams_CellA),
                                                                                                     v_LAI,
                                                                                                     cr_TAI( v_PLMN, v_LAC),
                                                                                                     omit)));
    t_T3411Max.stop; // If the timer times out, it will be caught in the default behaviour

    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 16");
    v_EPS_ContextStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus; // Send this back in the Accept
    
    // EXCEPTION: Steps 17a1 to 17b2 describe behaviour that depends on UE configuration;
    // the "lower case letter" identifies a step sequence that takes place according to UE mode of operation
    if (pc_CS_PS_data_centric and px_UE_CS_PS_UsageSetting_Tested == DATA_CENTRIC) { // @sic R5s120079r1 sic@ @sic R5s120274 sic@
      //@siclog "Step 17a1" siclog@
      //IF the UE is configured to operate in CS/PS mode 2, then SS transmits a TRACKING AREA UPDATE ACCEPT message.
      v_TAU_Accept := cs_TAU_Accept_EMM_Cause(tsc_EpsUpdate_TaUpdate,
                                              omit,
                                              cs_TrackingAreaIdListDef_tlv,
                                              v_EPS_ContextStatus,
                                              omit,
                                              omit,
                                              f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType, Combined), // @sic R5s110176 sic@
                                              p_EMMCause,
                                              cs_GprsTimer_tv('17'O, '000'B, '01111'B)); // @sic R5s110551 sic@
    
      SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request ( tsc_SHT_IntegrityProtected_Ciphered,
                                                        v_TAU_Accept))); // @sic R5s110168 change 2.2 sic@
      //@siclog "Step 17a2 " siclog@
      //+   The SS releases the RRC connection.
      f_EUTRA_RRC_ConnectionRelease ( eutra_CellA );
      t_T3402Max.start; // @sic R5s110593 ch 10 sic@
      t_T3402Min.start;
      t_T3402Min.timeout;
        
      //@siclog "Step 17a3" siclog@
      //Check1: Does the UE transmit a TRACKING AREA UPDATE REQUEST message with  "combined TA/LA updating with IMSI attach"?
      v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                                 tsc_RRC_TI_Def,
                                                 cr_EstablishmentCause_Any,
                                                 cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                   cdr_TAU_RequestOldGutiLaiTmsiStatus(tsc_EpsUpdate_Combined_IMSIAttach,
                                                                                                     f_EUTRA_SecurityKSIasme_Get(),
                                                                                                     cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                     v_AdditionalUpdateType,
                                                                                                     f_GutiParameters2MobileIdentity(omit, v_GutiParams_CellA),
                                                                                                     v_LAI,
                                                                                                     cr_TAI( v_PLMN, v_LAC),
                                                                                                     omit)));
      t_T3402Max.stop; // If the timer times out, it will be caught in the default behaviour
      f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 17a3");

      //@siclog "Step 17a4" siclog@
      //SS transmits a TRACKING AREA UPDATE ACCEPT message.
      v_TAU_Accept := cs_TAU_Accept_Common ( tsc_EpsUpdate_Combined_TaLaUpdate, // @sic R5s110593 ch 10 sic@
                                             f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_GutiParams_CellA),
                                             cs_TrackingAreaIdListDef_tlv,
                                             v_EPS_ContextStatus,
                                             omit,
                                             omit,
                                             f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType, Combined)); // @sic R5s110176 sic@
      SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request ( tsc_SHT_IntegrityProtected_Ciphered,
                                                        v_TAU_Accept)));
    
      //@siclog "Step 17a5" siclog@
      // The UE sends TRACKING AREA UPDATE COMPLETE
      SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                        cr_508_TAU_Complete)));
      //@siclog "Step 17a6" siclog@
      // The SS releases the RRC connection.
      f_EUTRA_RRC_ConnectionRelease ( eutra_CellA );

      //@siclog "Step 17a7" siclog@
      //Check: Does the result of test procedure in 36.508 clause 6.4.2.4 indicate that the UE answers to paging with S-TMSI-1 (associated with GUTI-1) for PS domain?
      f_EPS_508Check_NAS_Paging(eutra_CellA, ps);
    }
    else { // pc_CS_PS_voice_centric
      //@siclog "Step 17b1" siclog@
      //ELSE SS transmits a TRACKING AREA UPDATE ACCEPT message.
      v_TAU_Accept := cs_TAU_Accept_Common (tsc_EpsUpdate_Combined_TaLaUpdate, // @sic R5s110593 ch 10 sic@
                                            f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_GutiParams_CellA),
                                            cs_TrackingAreaIdListDef_tlv,
                                            v_EPS_ContextStatus,
                                            omit,
                                            omit,
                                            f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType, Combined)); // @sic R5s110176 sic@
      SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                       cs_TimingInfo_Now,
                                       cs_NAS_Request ( tsc_SHT_IntegrityProtected_Ciphered,
                                                        v_TAU_Accept)));
    
      //@siclog "Step 17b2" siclog@
      // The UE sends TRACKING AREA UPDATE COMPLETE
      SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                      cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                        cr_508_TAU_Complete)));
    }

    //@siclog "Step 18-20 Void" siclog@
  } // function tc_9_2_1_2_3_EUTRA

  function f_TC_9_2_1_2_4_EUTRA() runs on EUTRA_PTC
  { // @sic R5s100640 sic@

    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c3); //@sic R5-106627 sic@

    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    
    f_UT_ConfigureCombinedAttach (UT); // @sic R5-103815 sic@

    // Consistency check of capabilities vs. configuration
    // redundant with check in preamble
    // if (((px_UE_CS_PS_UsageSetting_Tested == DATA_CENTRIC) and not pc_CS_PS_data_centric) or
    //    ((px_UE_CS_PS_UsageSetting_Tested == VOICE_CENTRIC) and not (pc_CS_PS_voice_centric and pc_VoLTE))) {     // @sic R5s120528 sic@
    //  f_EUTRA_SetVerdictInconc (__FILE__, __LINE__, "Inconsistent configuration");
    //}
    // except
    if ((px_UE_CS_PS_UsageSetting_Tested == VOICE_CENTRIC) and not pc_VoLTE) {
      f_EUTRA_SetVerdictInconc (__FILE__, __LINE__, "Inconsistent configuration");
    }

    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, Combined); // @sic R5s110176 sic@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE,-,Combined); // @sic R5s110176 sic@

    f_EUTRA_TestBody_Set(true);

    fl_TC_9_2_1_2_4_Body();
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellB, E2_CONNECTED, Combined); // @sic R5s110176 sic@

  }// function f_TC_9_2_1_2_4_EUTRA

  function fl_TC_9_2_1_2_4_Body() runs on EUTRA_PTC
  {
    var HalfOctet_Type v_EPS_Bearer_Id := tsc_EpsDefaultBearerId;
    var ProcedureTransactionIdentifier v_EPS_TI := '00'O;
    var NAS_MSG_Indication_Type v_NasInd;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var GutiParameters_Type v_Guti2_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellB);
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity);
    var NAS_Lac v_LacA := f_EUTRA_CellInfo_GetLocationAreaCode ( eutra_CellA );
    var NAS_Lac v_LacB := f_EUTRA_CellInfo_GetLocationAreaCode ( eutra_CellB );
    var template (omit) LocAreaId v_LAI := f_GetLAI(v_PLMN, v_LacA, Combined); // @sic R5s110176 sic@
    var template (omit) LocAreaId v_LAI_B := f_GetLAI(v_PLMN, v_LacB, Combined); // @sic R5s110176 sic@
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (Combined); // @sic R5s110176 sic@
    var template (value) AccessPointName v_APN;
    var template (omit) ProtocolConfigOptions v_Pco := omit;
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;
    var template (value) CellPowerList_Type v_CellPowerList;
    var boolean v_EIT_Flag := false;
    var NasCount_Type v_NasCountUL;
    var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get();
    var EUTRA_SecurityParams_Type v_AuthParams := f_EUTRA_Security_Get();
    
    //  Set the cell type of cell A to the "Serving cell" Set the cell type of cell B to the "Non-suitable cell"
    //@siclog "Step 1" siclog@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 2" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@
    
    //@siclog "Step 3" siclog@
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                              v_RRC_TI,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                cdr_ATTACH_REQUEST_AttachType(tsc_EAttachType_Combined,
                                                                                                              v_AdditionalUpdateType,
                                                                                                              f_GutiParameters2MobileIdentity(omit, v_Guti1_Params), // GUTI1
                                                                                                              cr_TAI( v_PLMN, tsc_TAC1),
                                                                                                              v_LAI,
                                                                                                              omit),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 3");
    
    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    v_EIT_Flag := f_CheckEsmInfoTransferFlag(v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST);
    if (ispresent( v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions)) {
      v_Pco := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    }
    
    //+  The SS transmits an AUTHENTICATION REQUEST message to initiate the EPS authentication and AKA procedure.
    //+  The UE transmits an AUTHENTICATION RESPONSE message and establishes mutual authentication.
    //+  The SS transmits a NAS SECURITY MODE COMMAND message to activate NAS security.
    //+  The UE transmits a NAS SECURITY MODE COMPLETE message and establishes the initial security configuration.
    //+ Steps 7Aa1 and 7Aa2 ESM INFORMATION REQUEST / ESM INFORMATION RESPONSE
    //@siclog "Step 4 - 7Aa2" siclog@
    v_APN := f_EUTRA_Authentication_NAS_AS_Security (eutra_CellA,v_EIT_Flag, v_EPS_TI);
    
    //@siclog "Step 8" siclog@
    //+  SS responds with ATTACH ACCEPT message.
    f_IP_ChangeEutraCell(IP, eutra_CellA);       /* @sic R5-113734 change 8 sic@ */
    f_EUTRA_RRCConnectionReconfiguration_SRB2_1AM_DRB_Est(eutra_CellA,
                                                          v_RRC_TI,
                                                          cs_NAS_RequestWithPiggybacking(tsc_SHT_IntegrityProtected_Ciphered,
                                                                                         cs_508_ATTACH_ACCEPT(tsc_EAttachType_EpsOnly,
                                                                                                              cs_TrackingAreaIdListDef_lv,
                                                                                                              f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti1_Params),
                                                                                                              omit,
                                                                                                              omit,
                                                                                                              cs_EMM_Cause_tv(tsc_Cause_CSDomainNotAvailable), //@sic R5s100875 sic@
                                                                                                              f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType, Combined)),  // @sic R5s110176, R5-103681 sic@
                                                                                         cs_508_ActivateDefEpsBearerContextRequest(v_EPS_Bearer_Id,
                                                                                                                                   v_EPS_TI,
                                                                                                                                   v_APN,
                                                                                                                                   f_EUTRA_GetPDNAddress(f_CheckPCOforIPallocationViaNas(v_Pco)),
                                                                                                                                   -,
                                                                                                                                   f_GetDefPCOforPCSCFAddress (v_Pco))));
    
    //@siclog "Step 9" siclog@
    //+  The UE transmits an ATTACH COMPLETE message
    f_EUTRA_NAS_AttachComplete(eutra_CellA, v_EPS_Bearer_Id);
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 9");
    
    //@siclog "Step 10" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //@siclog "Step 11" siclog@
    f_EUTRA_508Check_IdleState ( eutra_CellA );
    
    //@siclog "Step 12" siclog@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 13" siclog@
    // Check: Does the UE transmit TRACKING AREA UPDATE REQUEST message?  [3,P]
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication (tsc_SHT_IntegrityProtected,
                                                                  cdr_TAU_RequestOldGutiLaiTmsiStatus(tsc_EpsUpdate_TaUpdate,
                                                                                                      f_EUTRA_SecurityKSIasme_Get(),
                                                                                                      cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                      v_AdditionalUpdateType,
                                                                                                      f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                                      omit,
                                                                                                      cr_TAI( v_PLMN, tsc_TAC1),
                                                                                                      omit)));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 13");
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    
    // @sic R5s100799 sic@
    
    //@siclog "Step 14" siclog@
    //+  SS responds with TRACKING AREA UPDATE ACCEPT message
    SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellB,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request ( tsc_SHT_IntegrityProtected_Ciphered,
                                                      cs_TAU_Accept_EMM_Cause ( tsc_EpsUpdate_TaUpdate,
                                                                                f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti2_Params),
                                                                                cds_TAIListNonConsecutive_tlv (tsc_PLMN1, {tsc_TAC2}),
                                                                                v_EpsBearerCtxtStatus,
                                                                                omit,
                                                                                omit,
                                                                                f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType, Combined), // @sic R5s110176 sic@
                                                                                cs_EMM_Cause_tv(tsc_Cause_CSDomainNotAvailable))))); //@sic R5s100875 sic@
    
    //  UE sends TRACKING AREA UPDATE COMPLETE
    //@siclog "Step 15" siclog@
    SRB.receive (car_SRB1_NasPdu_IND(eutra_CellB,
                                     cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                       cr_508_TAU_Complete)));
    
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);

    //@siclog "Step 16a" siclog@
    f_EUTRA_UE_Detach_SwitchOffUe (eutra_CellB, RRC_IDLE, -, Combined, cr_DetachType('1'B, tsc_DetachMO_EpsOnly)); // @sic R5s110176 sic@
    
    //@siclog "Step 17" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellB); // @sic R5s120065 sic@
    
    //@siclog "Step 18" siclog@
    //+   Check : Does the UE transmit a combined ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST
    //    message as specified on cell B?  [4,P]
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                 cdr_ATTACH_REQUEST_AttachType(tsc_EAttachType_Combined,
                                                                                                               v_AdditionalUpdateType,
                                                                                                               f_GutiParameters2MobileIdentity(omit, v_Guti2_Params), // GUTI2 @sic R5s100875 sic@
                                                                                                               cr_TAI( v_PLMN, tsc_TAC2),
                                                                                                               omit,
                                                                                                               cr_TMSI_Status('0'B)),
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                 f_GetPdnType())));
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Step 18");

    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier;  // @sic R5s110219 sic@
    v_EIT_Flag := f_CheckEsmInfoTransferFlag(v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST);
    if (ispresent( v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions)) {
      v_Pco := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    }
    v_APN := f_ESM_InitAPN(eutra_CellB, v_EIT_Flag, v_EPS_TI);  // @sic R5s110219 sic@
    
    v_NasCountUL := v_NasInd.SecurityProtection.NasCount;  // @sic R5s110219, R5s110279 sic@
    v_SecurityParams := f_EUTRA_Authentication_InitAS(v_SecurityParams, v_NasCountUL);
    // RRC Security Command / RRC Security Complete
    v_AuthParams := f_EUTRA_RRC_ActivateSecurity(eutra_CellB, v_AuthParams, v_NasCountUL);
    f_EUTRA_Security_Set ( v_AuthParams );//Saving security parameters
    
    //@siclog "Step 19" siclog@
    //+   SS responds with ATTACH ACCEPT message with IE EPS Bearer Identity set to default EPS bearer context.
    //    The ACTIVATE DEFAULT EPS BEARER CONTEXT REQUEST message is piggybacked in ATTACH ACCEPT.
    f_EUTRA_RRCConnectionReconfigurationWithAttachAcceptAllParams(eutra_CellB,
                                                                  v_EPS_Bearer_Id,
                                                                  v_RRC_TI,
                                                                  v_EPS_TI,
                                                                  tsc_EAttachType_Combined,
                                                                  f_EUTRA_GetPDNAddress(f_CheckPCOforIPallocationViaNas (v_Pco)),
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti2_Params), // @sic R5s100875 sic@
                                                                  cs_TAIListNonConsecutive_lv (tsc_PLMN1, {tsc_TAC2}),
                                                                  v_LAI_B,
                                                                  f_GetMSId (Combined), // @sic R5s110176 sic@
                                                                  omit,
                                                                  v_APN,
                                                                  f_GetDefPCOforPCSCFAddress (v_Pco), // @sic R5-104703 sic@
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType,
                                                                                              Combined)); // @sic R5s110176 sic@
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //   EXCEPTION: In parallel to the event described in step 20 below the generic procedure for IP address allocation in the U-plane /////
    //   specified in TS 36.508 subclause 4.5A.1 takes place performing IP address allocation in the U-plane if requested by the UE. ///////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    //@siclog "Step 20" siclog@
    //+   Check: Does the UE transmit an ATTACH COMPLETE message
    //    including a ACTIVATE DEFAULT EPS BEARER CONTEXT ACCEPT message as specified?
    f_EUTRA_NAS_AttachComplete(eutra_CellB, v_EPS_Bearer_Id);
    
  }// function fl_tc_9_2_1_2_4_Body

  function f_TC_9_2_1_2_10_EUTRA() runs on EUTRA_PTC
  { /* @desc Combined attach / rejected / Tracking area not allowed */
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c3);
    
    // Create cell and send out system information for CellA (serving) and Cell B (suitable)
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_SRBs_Only(eutra_CellB);
    f_EUTRA_CellConfig_Def(eutra_CellM);
    
    f_UT_ConfigureCombinedAttach (UT); // @sic R5-103815 sic@
    
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, Combined); // @sic R5s110176 sic@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE,-,Combined ); // @sic R5s110176 sic@
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_1_2_10_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellM, E2_CONNECTED, Combined); // @sic R5s110176 sic@
    
  }// function f_TC_9_2_1_2_10_EUTRA

  function fl_TC_9_2_1_2_10_Body() runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList;
    var NAS_MSG_Indication_Type v_NasInd;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (Combined); // @sic R5s110176 sic@
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(Combined); // @sic R5s110176 sic@
    // ==========================================================================
    
    //@siclog "Step 1" siclog@
    //+  The SS configures:
    //   - Cell A as the "Serving cell".
    //   - Cell B as a "Suitable neighbour cell".
    //   - Cell M as a "Non-Suitable cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_SuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellM, tsc_NonSuitableCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 2" siclog@
    //+  The UE is switched on.
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@
    
    // The following messages are sent and shall be received on Cell A.
    
    //@siclog "Step 3" siclog@
    //+ The UE transmits an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas( eutra_CellA,
                                                tsc_RRC_TI_Def,
                                                cr_EstablishmentCause_Any,
                                                cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  f_GetPdnType())));
    //@siclog "Step 4" siclog@
    //+   The SS transmits an ATTACH REJECT message with EMM cause = "Tracking area not allowed".
    SRB.send  ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                      cs_TimingInfo_Now,
                                      cs_NAS_Request ( tsc_SHT_NoSecurityProtection,
                                                       cs_508_AttachReject ( cs_EMM_Cause_v(tsc_Cause_TA_NotAllowed),
                                                                             omit))));
    //@siclog "Step 5" siclog@
    //+   The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //@siclog "Step 6" siclog@
    //+   Check: Does the UE transmit the ATTACH REQUEST message in the next 30 seconds on Cell A or Cell B? [1,2, F]
    f_EUTRA_CheckNoAttachOn2Cells(eutra_CellA, eutra_CellB, 30.0, "Step 6");
    
    //@siclog "Step 7" siclog@
    //+   The SS configures: Cell A as the "Non-Suitable cell". Cell B as a "Non-Suitable cell". Cell M as a "Serving cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellM, tsc_ServingCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 8" siclog@
    //+  Check: Does the UE transmit the ATTACH REQUEST message in the next 30 seconds on Cell M? [3,F]
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellM, 30.0, "Step 8");
    
    //@siclog "Step 9" siclog@
    //+   The UE is powered off or switched off.
    f_UT_SwitchOffUE (UT, false, CNF_REQUIRED); // @sic R5s1100395 sic@
    
    //@siclog "Step 10" siclog@
    //+   The UE is powered on or switched on.
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellM); // @sic R5s120065 sic@
    
    // The following messages are sent and shall be received on Cell M.
    
    //@siclog "Step 11" siclog@
    //+  Check: Does the UE transmit an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message as specified? [1,4,P]
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellM,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                 cdr_ATTACH_REQUEST_WithOldMobileIdNoTAI( v_AttachType,
                                                                                                                          v_AdditionalUpdateType,
                                                                                                                          f_Imsi2MobileIdentity(px_IMSI_Def)),
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                 f_GetPdnType())));
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Step 11");
    
    //@siclog "Step 12 - 23" siclog@
    f_EUTRA_IdleUpdated_Step5_17(eutra_CellM, STATE2_IDLEUPDATE, Combined, v_NasInd, false); // @sic R5s110094, R5s110395 sic@
  } // function tc_9_2_1_2_10_EUTRA

  function f_TC_9_2_1_2_12_EUTRA() runs on EUTRA_PTC
  { /* @desc Combined attach / Rejected / EPS services not allowed in this PLMN */
    /* @sic R5-113124 sic@ @sic R5s110561 sic@ */
   
    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c1, LTE_NAS_Replacef3_f1); // @sic R5-121081 sic@
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellG);
    f_EUTRA_CellConfig_SRBs_Only(eutra_CellH);
    f_EUTRA_CellConfig_Def(eutra_CellI);
        
    f_UT_ConfigureCombinedAttach (UT); // @sic R5-103815 sic@
    
    f_EUTRA_Preamble(eutra_CellG, STATE2_IDLEUPDATE,Combined); // @sic R5s110176 sic@
    f_EUTRA_UE_Detach_SwitchOffUe(eutra_CellG, RRC_IDLE, -, Combined); // @sic R5s110176 sic@
    
    f_EUTRA_TestBody_Set(true);

    fl_TC_9_2_1_2_12_Body();
    
    f_EUTRA_TestBody_Set(false);
    
    f_UT_AutomaticPLMN_Select ( UT );
    //wait 300 seconds to let UE complete automatic PLMN search
    f_Delay(300.0);
    
    f_EUTRA_Postamble(eutra_CellG, E1_IDLE, Combined);   // @sic R5s110176, R5-103875 sic@
    
  } // end f_TC_9_2_1_2_12_EUTRA

  function fl_TC_9_2_1_2_12_Body() runs on EUTRA_PTC
  { /* @sic R5-113124 sic@ @sic R5s110561 sic@ */

    var template (value) CellPowerList_Type v_CellPowerList;
    var NAS_MSG_Indication_Type v_NAS_Ind;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (Combined); // @sic R5s110176 sic@
    var GutiParameters_Type v_GutiParams_CellG := f_EUTRA_CellInfo_GetGuti(eutra_CellG);
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(Combined); // @sic R5s110176 sic@
    
    //@siclog "Step 1" siclog@
    // The SS configures:
    // Cell G as the "Serving cell", Cell H as a "Non-Suitable cell", Cell I as a "Non-Suitable off cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellG, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellH, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellI, tsc_NonSuitableOffCellRS_EPRE )  // @sic R5-110741 sic@
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 2" siclog@
    // Switch on UE
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellG); // @sic R5s120065 sic@
    
    //@siclog "Step 3" siclog@
    //  The UE transmits an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message
    v_NAS_Ind := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellG,
                                                tsc_RRC_TI_Def,
                                                cr_EstablishmentCause_Any,
                                                cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                  cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  f_GetPdnType())));
    
    //@siclog "Step 4" siclog@
    // The SS transmits an ATTACH REJECT message with EMM cause = "EPS services not allowed in this PLMN"
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellG,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_AttachReject (cs_EMM_Cause_v(tsc_Cause_EPSServNotAllowedInThisPLMN),
                                                                     omit))));
    
    //@siclog "Step 5" siclog@
    //  The SS releases the RRC connection
    f_EUTRA_RRC_ConnectionRelease(eutra_CellG);
    
    //@siclog "Step 6" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds?
    f_EUTRA_CheckNoAttachOn1Cell ( eutra_CellG, 90.0, "Step 6" );
    
    //@siclog "Step 7" siclog@
    // The SS configures:
    // Cell G as a "Non-Suitable cell", Cell H as the "Serving cell".
    // Note: cellG and cellH are in the different TAI and same PLMN
    v_CellPowerList := {
      cs_CellPower ( eutra_CellG, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellH, tsc_ServingCellRS_EPRE )
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 8" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds?
    f_EUTRA_CheckNoAttachOn1Cell ( eutra_CellH, 90.0, "Step 8" );
    
    //@siclog "Step 9" siclog@
    // The SS configures:
    // Cell H as a " Non Suitable off cell", Cell I as the "Serving cell".
    // Note: cellG and cellI are different PLMNs
    v_CellPowerList := {
      cs_CellPower ( eutra_CellI, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellH, tsc_NonSuitableOffCellRS_EPRE )
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
        
    //@siclog "Step 10" siclog@
    //  Does the UE transmit an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message?
    v_NAS_Ind := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellI,
                                                tsc_RRC_TI_Def,
                                                cr_EstablishmentCause_Any,
                                                cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                  cdr_ATTACH_REQUEST_IMSIonly(v_AttachType, v_AdditionalUpdateType),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 10");
        
    //@siclog "Step 11-23" siclog@
    // The SS completes the attach procedure successfully and then releases the RRC
    // connection by executing steps 5 to 17 of UE registration procedure in TS 36.508 clause 4.5.2.3
    f_EUTRA_IdleUpdated_Step5_17 (eutra_CellI, STATE2_IDLEUPDATE, Combined, v_NAS_Ind);
    
    //@siclog "Step 24" siclog@
    // If possible (see ICS) switch off is performed. Otherwise the power is removed.
    f_EUTRA_UE_Detach_SwitchOffUe (eutra_CellI, RRC_IDLE, -, Combined);   // @sic R5s110176 sic@ This needs a prose CR R5s100784 !!!
    
    //@siclog "Step 25" siclog@
    // The SS configures:
    // Cell G as the "Serving cell". Cell I as a " Non Suitable cell",
    v_CellPowerList := {
      cs_CellPower ( eutra_CellG, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellI, tsc_NonSuitableCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 26" siclog@
    // The UE is brought back to operation or the USIM is inserted.
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellG); // @sic R5s120065 sic@
    
    //@siclog "Step 27" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message?
    // @sic R5s110168 change 2.13 sic@
    f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellG,
                                   tsc_RRC_TI_Def,
                                   cr_EstablishmentCause_Any,
                                   cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                     cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                     cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                     f_GetPdnType()))); /* @sic R5-120721 change 3 sic@ */
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "step 27");
    //@siclog "Step 28" siclog@
    // The SS transmits an ATTACH REJECT message with EMM cause = "EPS services not allowed in this PLMN"
    SRB.send (cas_SRB1_NasPdu_REQ(eutra_CellG,
                                  cs_TimingInfo_Now,
                                  cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                 cs_508_AttachReject(cs_EMM_Cause_v(tsc_Cause_EPSServNotAllowedInThisPLMN),
                                                                     omit))));
    
    //@siclog "Step 29" siclog@
    //  The SS releases the RRC connection
    f_EUTRA_RRC_ConnectionRelease(eutra_CellG);

    //@siclog "Step 30" siclog@
    //  Select PLMN of cell G (as set in fl_EUTRA_InitNAS_forNAS_Cells)
    f_UT_ManualPLMN_Select (UT, f_Asn2Nas_PlmnId(v_GutiParams_CellG.PLMN_Identity)); // @sic R5-106675 sic@
    
    //@siclog "Step 31" siclog@
    //  Does the UE transmit an ATTACH REQUEST message including a PDN CONNECTIVITY REQUEST message
    v_NAS_Ind := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellG,
                                                tsc_RRC_TI_Def,
                                                cr_EstablishmentCause_Any,
                                                cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                  cdr_ATTACH_REQUEST_IMSIonly(v_AttachType, v_AdditionalUpdateType),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 31");
    
    //@siclog "Steps 32-44" siclog@
    // The attach procedure is completed and the RRC connection is released
    // by executing steps 5 to 17 of TS 36.508 sub clause 4.5.2.3.
    f_EUTRA_IdleUpdated_Step5_17 (eutra_CellG, STATE2_IDLEUPDATE, Combined, v_NAS_Ind);
 
  }// end function fl_TC_9_2_1_2_12_Body

  function f_TC_9_2_1_2_14_EUTRA() runs on EUTRA_PTC
  { /* Combined attach / Rejected / Not authorized for this CSG */

    var CSG_Identity v_CSG_Identity_CellB := '000000000000000000000000010'B;
    var template (value) CellPowerList_Type v_CellPowerList;
    
    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c7 );
    
    // create cells
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    f_EUTRA_CellConfig_SRBs_Only(eutra_CellG);
    
    f_UT_ConfigureCombinedAttach (UT); // @sic R5-103815 sic@ @sic R5s120480 sic@

    // delete the UE's CSG whitelist, supported per test case selection expression
    f_EUTRA_EmptyCSG_AllowedList (eutra_CellB, Combined); // @sic R5s120480 sic@
    
    // modify system information for the CSG cell
    //Set system information combination 7 in cell B
    f_EUTRA_ChangeSysinfoCombination (eutra_CellB, c7);  // @sic R5-121733 sic@
    //Set system information 1 cell B
    f_EUTRA_CellInfo_SetSysInfo_Csg_Ind(eutra_CellB, true);
    f_EUTRA_CellInfo_SetSysInfo_Csg_Id(eutra_CellB, v_CSG_Identity_CellB);
    //Set system information 4 cell B
    f_EUTRA_SetSIB4_CSG_Def (eutra_CellB);  // @sic R5-121733 sic@
    // make the modified system information become active
    f_EUTRA_SS_ConfigureSysinfo (eutra_CellB); // @sic R5s120326 sic@
    
    f_EUTRA_Manual_CSG_Selection (eutra_CellB, v_CSG_Identity_CellB, Combined); // @sic R5s120480 sic@ UE registers on cell B using manual CSG selection
    
    v_CellPowerList := {
      cs_CellPower (eutra_CellB, tsc_NonSuitableOffCellRS_EPRE)  // @sic R5s120367 sic@
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, Combined); // @sic R5s110176 sic@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE,-, Combined ); // @sic R5s110176 sic@
    f_EUTRA_TestBody_Set(true);

    fl_TC_9_2_1_2_14_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    // no entries remaining in the CSG whitelist
    f_EUTRA_Postamble(eutra_CellA, E2_CONNECTED, Combined); // @sic R5s110176 sic@
  } // end f_TC_9_2_1_2_14_EUTRA

  function fl_TC_9_2_1_2_14_Body() runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NasInd;
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA); //GUTI-1
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (Combined); // @sic R5s110176 sic@
    var template (omit) LocAreaId v_LAI := f_GetLAI( tsc_PLMN1, (tsc_TAC1), Combined); // @sic R5s110176 sic@
    
    var float v_T3410andT3411 := f_EUTRA_SetTimerToleranceMin( eutra_CellA, nasTimer, 25.0 );
    timer t_Wait := f_EUTRA_SetTimerToleranceMax( eutra_CellA, nonProtocolTimer, 30.0 );

    //@siclog "Step 1" siclog@
    // The SS configures CellA as "Non-Suitable cell", CellB as the "Serving cell" and CellG as a "Non-Suitable cell"
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellG, tsc_NonSuitableCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 2" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellB); // @sic R5s120065 sic@
    
    //@siclog "Step 3" siclog@
    // UE initiate attach procedure and send ATTACH REQUEST
    // including a PDN CONNECTIVITY REQUEST message on cell B
    
    // RRC Connection Establishment, with Attach Request and PDN Connectivity
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                 cdr_ATTACH_REQUEST_AttachType(tsc_EAttachType_Combined,
                                                                                                               v_AdditionalUpdateType,
                                                                                                               f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                                               cr_TAI( tsc_PLMN1, (tsc_TAC1) ),
                                                                                                               v_LAI,
                                                                                                               omit),
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                 f_GetPdnType())));
    
    //@siclog "Step 4" siclog@
    // The SS transmits an ATTACH REJECT message with EMM cause = "Not authorized for this CSG"
    // without integrity protection.
    SRB.send  ( cas_SRB1_NasPdu_REQ ( eutra_CellB,
                                      cs_TimingInfo_Now,
                                      cs_NAS_Request ( tsc_SHT_NoSecurityProtection,   // @sic R5s120367 sic@
                                                       cs_508_AttachReject ( cs_EMM_Cause_v(tsc_Cause_NotAuthorizedCSG),
                                                                             omit))));
    // The SS releases the RRC connection
    //@siclog "Step 5" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
    
    //@siclog "Step 6" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message on Cell B after the expiry of timer T3410andT3411?
    // Note 1: IF UE initiate ATTACH procedure again, it can prove that this UE has discard
    //         the unprotected ATTACH REJECT message.
    // Note 2: Default value of T3410 is 15s; default value of T3411 is 10s.
    //         In this TC, the network will wait for total 30 seconds.
    t_Wait.start;
    f_Delay(v_T3410andT3411); //Wait for expiry of these first
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                 cdr_ATTACH_REQUEST_AttachType(tsc_EAttachType_Combined,
                                                                                                               v_AdditionalUpdateType,
                                                                                                               f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                                               cr_TAI( tsc_PLMN1, (tsc_TAC1) ),
                                                                                                               v_LAI,
                                                                                                               omit ),
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                 f_GetPdnType())));  /* @sic R5-120721 change 3 sic@ */
    t_Wait.stop;
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 6");

    //@siclog "Step 7" siclog@
    // The SS transmits an ATTACH REJECT message with EMM cause = ""Not authorized for this CSG"
    // with integrity protection
    SRB.send  ( cas_SRB1_NasPdu_REQ ( eutra_CellB,
                                      cs_TimingInfo_Now,
                                      cs_NAS_Request ( tsc_SHT_IntegrityProtected_Ciphered,
                                                       cs_508_AttachReject ( cs_EMM_Cause_v(tsc_Cause_NotAuthorizedCSG),
                                                                             omit))));
    
    //  The SS releases the RRC connection
    //@siclog "Step 8" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
    
    // The UE is switched off and switched on
    //@siclog "Step 9" siclog@
    f_UT_SwitchOffUE (UT, false, CNF_REQUIRED); // @sic R5s1100395 sic@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@

    //@siclog "Step 10" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message on Cell B in the next 30 seconds?
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellB, 90.0, "Step 10"); // @sic R5-115560 sic@
    
    //@siclog "Step 11" siclog@
    // Configure Cell power levels
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_SuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellG, tsc_ServingCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 12" siclog@
    // Check: Does the UE transmit an ATTACH REQUEST message on Cell A?
    //@sic R5-112625 sic@

    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                 cdr_ATTACH_REQUEST_AttachType(tsc_EAttachType_Combined,
                                                                                                               v_AdditionalUpdateType,
                                                                                                               f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                                               cr_TAI( tsc_PLMN1, (tsc_TAC1) ),
                                                                                                               cr_LAI_Any ifpresent,   // @sic R5s120367 sic@
                                                                                                               omit),
                                                                               cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                               f_GetPdnType())));  /* @sic R5-120721 change 3 sic@ */
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 12");
    

    //  Generic test procedure in TS 36.508 subclause 4.5.2.3 is performed.
    //          NOTE: The UE performs an ATTACH procedure and the RRC connection is released.
    //@siclog "Step 13 - 24" siclog@
    f_EUTRA_IdleUpdated_Step5_17 (eutra_CellA, STATE2_IDLEUPDATE, Combined, v_NasInd, false); // @sic R5s110395 sic@
    
  }// end function fl_TC_9_2_1_2_14_Body

  } // end of group TestcaseImplementations

}
