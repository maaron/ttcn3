// ***************************************************************************
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2012, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3v10.1.0
// * $Date: 2012-09-04 16:54:28 +0200 (Tue, 04 Sep 2012) $
// * $Rev: 7319 $
// ***************************************************************************

module NAS_Detach_UG_UTRAN {

  import from UTRAN_RRC_ASN1_Definitions language "ASN.1:1997" all;
  import from UTRAN_ASP_Definitions language "ASN.1:1997" all;
  import from CommonDefs all;
  import from CommonIratDefs all;
  import from NAS_24008Templates all;
  import from NAS_CommonTemplates all;
  import from UTRANGERAN_CommonFunctions all;
  import from UTRAN_ASN1_ASP_Templates all;
  import from UTRAN_CellInfo all;
  import from UTRAN_CommonDefs all;
  import from UTRAN_CommonFunctions all;
  import from UTRAN_CommonProcedures all;
  import from UTRAN_Component all;
  import from UTRAN_ConfigurationSteps all;
  import from UTRAN_NAS_PDU_Templates all;
  import from UTRAN_RAB_Functions all;
  import from UTRAN_RRC_Templates all;
  import from UTRAN_TTCN_ASP_Templates all;
  import from UTRAN_TypeDefs all;

  function f_TC_9_2_2_1_3_UTRAN () runs on UTRAN_PTC
  { /* @sic R5-123790 sic@ */

    var UTRAN_SecurityInfo_Type v_SecurityInfo;
    var template (value) DL_CCCH_Message v_RRC_ConnSetup;
    var RRC_DATA_IND v_RRC_DataInd;
    var InitialUE_Identity v_InitialUE_Id;
    var RLC_TR_DATA_IND v_RLC_TR_DATA_IND;
    var RRCConnectionSetupComplete v_RRCConnectionSetupComplete;
    var bitstring v_UE_CapabilityContainer;
    var UE_CapabilityContainer_IEs v_UE_Capability_ASN;
    var U_RLC_AM_IND v_RLC_AM_DATA_IND;
    var STARTList v_STARTList;
    var START_Value v_START_Value;
    var integer v_DomainCnt, v_Result;
    var integer I;
    var octetstring v_PLMN;
    var octetstring v_LAC;

    f_UTRAN_Init(EUTRA_UTRAN); // This is still only a 2 PTC test
    
    f_UTRAN_SS_CreateCellDCH (utran_Cell5);
    f_UTRAN_SendDefSysInfo (utran_Cell5);
    f_UTRAN_InterRAT_InitialiseAuthParams();
    
    v_PLMN := f_U_Asn2Nas_PlmnId(f_UTRAN_CellInfo_GetPLMNIdentity(utran_Cell5));
    v_LAC := f_UTRAN_CellInfo_GetLAC(utran_Cell5);
    
    // Start of Test Body
    f_UTRAN_TestBody_Set( true );
    
    f_IRAT_WaitForCoOrd_Trigger(EUTRA);
    f_UTRAN_SetCellPower (utran_Cell5, tsc_AttenuationNonSuitableCell);
    
    //  @siclog "Step 5a2 Void" siclog@
    f_IRAT_WaitForCoOrd_Trigger(EUTRA);
    U_TM.receive(car_RRC_ConnReq(utran_Cell5,
                                 tsc_RB0,
                                 cdr_RRC_ConnReqWith_v860ext(?, cdr_RRCConnReq_v860ext_OptionalEUTRA(false, false)))) -> value v_RLC_TR_DATA_IND;
    v_InitialUE_Id := v_RLC_TR_DATA_IND.tM_message.uL_CCCH_Message.message_.rrcConnectionRequest.initialUE_Identity;
    f_UTRAN_PreliminaryPass (__FILE__, __LINE__, "Step 5a2");
    
    //@siclog "Step 5a3" siclog@
    v_RRC_ConnSetup := f_Get_cs_108_RRC_ConnSetupDCH(utran_Cell5, v_InitialUE_Id);
    
    //Set Cell configuration
    f_UTRAN_CellInfo_SetConfigType ( utran_Cell5, cell_DCH_StandAloneSRB );
    
    U_UM.send(cas_RRC_ConnSetup(utran_Cell5, tsc_RB0, v_RRC_ConnSetup));
    
    //@siclog "Step 5a4" siclog@
    alt {
      [] U_AM.receive(car_RLC_Data_Ind(utran_CellDedicated,
                                       tsc_RB2,
                                       cr_108_RRC_ConnSetupCmpl(tsc_RRC_TI, ?))) // can't check UE capabilities fully here
        -> value v_RLC_AM_DATA_IND
        {
          v_RRCConnectionSetupComplete := v_RLC_AM_DATA_IND.data.aM_message.uL_DCCH_Message.message_.rrcConnectionSetupComplete;
        }
      // swallow any excess ConnReq messages that haven't been processed yet
      [] U_TM.receive(car_RRC_ConnReq(?, tsc_RB0, cr_RRC_RrcConnReqAny))
        {
          repeat;
        }
    }
    
    v_UE_CapabilityContainer := v_RRCConnectionSetupComplete.v370NonCriticalExtensions.v380NonCriticalExtensions.v3a0NonCriticalExtensions.laterNonCriticalExtensions.v3g0NonCriticalExtensions.v4b0NonCriticalExtensions.v590NonCriticalExtensions.v5c0NonCriticalExtensions.v690NonCriticalExtensions.rrcConnectionSetupComplete_v690ext.ueCapabilityContainer;
    v_Result := decvalue(v_UE_CapabilityContainer, v_UE_Capability_ASN);
    
    if (v_Result != 0) {
      FatalError(__FILE__, __LINE__, "UE Capability cannot be decoded");
    }
    
    if (match (v_UE_Capability_ASN.v6b0NonCriticalExtensions.v6e0NonCriticalExtensions.v770NonCriticalExtensions.v790NonCriticalExtensions.v860NonCriticalExtensions.ue_RadioAccessCapability_v860ext,
               cr_UE_RadioAccessCapMultiRATCap(cr_MultiModeRATCap_NotSupportEUTRA))) {
      f_UTRAN_PreliminaryPass (__FILE__, __LINE__, "Step 5a4");
    }
    else {
      f_UTRAN_SetVerdictFailOrInconc (__FILE__, __LINE__, "Step 5a4");
    }
    
    // get start list
    v_SecurityInfo := f_UTRAN_Security_Get();
    v_STARTList := v_RRCConnectionSetupComplete.startList;
    v_SecurityInfo.cipheringAlgorithmCapability := v_RRCConnectionSetupComplete.ue_RadioAccessCapability.securityCapability.cipheringAlgorithmCap;
    v_SecurityInfo.integrProtAlgCap := v_RRCConnectionSetupComplete.ue_RadioAccessCapability.securityCapability.integrityProtectionAlgorithmCap;
    v_DomainCnt := lengthof(v_STARTList);

    if ((v_DomainCnt > 0) and (v_DomainCnt <= 2)) {
      for (I:=0; I<v_DomainCnt; I:=I+1) {
        if (v_STARTList[I].cn_DomainIdentity == cs_domain) {
          v_SecurityInfo.start_CS := v_STARTList[I].start_Value;
        } else {
          v_SecurityInfo.start_PS := v_STARTList[I].start_Value;
        }
      }
    } else {
      FatalError(__FILE__, __LINE__, "invalid configuration");
    }
    
    //@siclog "Step 5a5" siclog@
    alt {
      [] U_Dc.receive(car_PS_InitDirectTransfer(utran_CellDedicated,
                                                tsc_RB3,
                                                cr_U_RA_UpdReqAny(cr_GMM_UpdateType,
                                                                  cr_RAI (omit),
                                                                  cr_PTMSI_SignatureAny ifpresent,
                                                                  ?)))
        {
          f_UTRAN_SetVerdictFailOrInconc (__FILE__, __LINE__, "Parallel Behaviour");
          // If this message arrives any later, it will be picked up by the default behaviour
        }
      
      [] U_Dc.receive(car_InitDirectTransfer(utran_CellDedicated, tsc_RB3, cr_U_LocationUpdatingRequest)) -> value v_RRC_DataInd
        {
          v_START_Value := v_RRC_DataInd.ttcn_start;
          f_UTRAN_SS_SecurityDownloadStart(cs_domain, v_START_Value);
        }
    }
    //@siclog "Step 5a6 - 5a7" siclog@
    f_UTRAN_MM_Authentication (); //@sic R5s110594 sic@
    
    //Send SECURITY MODE COMMAND and receive SECURITY MODE COMPLETE
    f_UTRAN_RRC_Security(utran_Cell9, true, cs_domain);
    
    //@siclog "Step 5a8" siclog@
    //Send Location Updating Accept message
    U_Dc.send (cas_DataReq_CS(utran_CellDedicated, tsc_RB3, cs_U_LocUpdAcp_NoMobId (v_PLMN, v_LAC)));
    
    // Test case now finished on UTRAN side
    f_UTRAN_TestBody_Set( false );
    
    f_UTRAN_Postamble(utran_Cell5, U2_CONNECTED, Combined);
    
  }

  function f_TC_9_2_2_1_10_UTRAN () runs on UTRAN_PTC
  {
    f_UTRAN_Init(EUTRA_UTRAN); // This is still only a 2 PTC test
    
    f_UTRAN_SS_CreateCellDCH (utran_Cell5);
    f_UTRAN_SendDefSysInfo (utran_Cell5);
    f_UTRAN_InterRAT_InitialiseAuthParams();   // @sic R5s110777 sic@
    // Start of Test Body
    f_UTRAN_TestBody_Set( true );
    
    //  @siclog "Step 6" siclog@
    // Change power level
    f_IRAT_WaitForCoOrd_Trigger(EUTRA);
    f_UTRAN_SetCellPower (utran_Cell5, tsc_AttenuationServingCell);
      
    //  @siclog "Step 8-12" siclog@
    // Registration on
    f_UTRAN_IdleUpdated  (utran_Cell5);
    //  @siclog "Step 13-14" siclog@
    f_UTRAN_UE_PsRB_Est(utran_Cell5, cell_DCH_64kPS_RAB_SRB);
    
    //  @siclog "Step 15" siclog@
    f_UTRAN_RRC_ConnRel ( utran_Cell5, cell_Dch );
    //  @siclog "Step 16" siclog@
    f_UTRAN_SendAuthCoOrdParameters(EUTRA);
    f_UTRAN_SetCellPower (utran_Cell5, tsc_AttenuationNonSuitableCell);
    
    //  @siclog "Step 27 Void" siclog@
    f_IRAT_WaitForCoOrd_Trigger(EUTRA);
    f_UTRAN_SetCellPower (utran_Cell5, tsc_AttenuationCellOFF);
    
    // Test case now finished on UTRAN side
    f_IRAT_WaitForCoOrd_Trigger(EUTRA);
    f_UTRAN_TestBody_Set( false );
    
    f_UTRAN_ReleaseCell ( utran_Cell5, f_UTRAN_CellInfo_GetConfigType (utran_Cell5) ); // @sic R5s110176 sic@
    
  }

}
