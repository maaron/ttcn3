// ***************************************************************************
// @copyright   Copyright Notification
//   No part may be reproduced except as authorized by written permission.
//   The copyright and the foregoing restriction extend to reproduction in all media.
//   Trademark 2012, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TTA, TTC).
//   All rights reserved.
// @version: 36.523-3v10.1.0
// * $Date: 2012-09-04 15:06:15 +0200 (Tue, 04 Sep 2012) $
// * $Rev: 7298 $
// ***************************************************************************

module NAS_TrackingArea_EOnly {

  import from EUTRA_RRC_ASN1_Definitions language "ASN.1:1997" all;
  import from CommonDefs all;
  import from CommonIP all;
  import from EPS_NAS_Constants all;
  import from EPS_NAS_MsgContainers all;
  import from EPS_NAS_Templates all;
  import from EPS_NAS_TypeDefs all;
  import from EUTRA_ASP_DrbDefs all;
  import from EUTRA_ASP_SrbDefs all;
  import from EUTRA_AspCommon_Templates all;
  import from EUTRA_AuxiliaryFunctions all;
  import from EUTRA_CSG_Functions all;
  import from EUTRA_CellInfo all;
  import from EUTRA_CommonDefs all;
  import from EUTRA_CommonProcedures all;
  import from EUTRA_Component all;
  import from EUTRA_ConfigurationSteps all;
  import from EUTRA_DRB_Templates all;
  import from EUTRA_LoopBack all;
  import from EUTRA_NASCommonFunctions all;
  import from EUTRA_NASCommonTemplates all;
  import from EUTRA_NASSteps all;
  import from EUTRA_Paging all;
  import from EUTRA_RRCSteps all;
  import from EUTRA_RRC_Templates all;
  import from EUTRA_SRB_Templates all;
  import from EUTRA_SecurityFunctions all;
  import from EUTRA_SecuritySteps all;
  import from EUTRA_SysInfo_Templates all;
  import from EUTRA_Timing all;
  import from IP_PTC_CtrlMsgs all;
  import from NAS_AuxiliaryDefsAndFunctions all;
  import from NAS_CommonTemplates all;
  import from NAS_CommonTypeDefs all;
  import from Parameters all;
  import from UpperTesterFunctions all;

  template (value) NAS_DL_Message_Type cds_ATTACH_ACCEPT_T3412(NAS_AttDetValue_Type p_EpsAttachResultValue,
                                                               template (value) TrackingAreaIdList p_TaiList,
                                                               template (omit)  MobileIdentity p_Guti,
                                                               template (omit)  LocAreaId p_Lai,
                                                               template (omit)  MobileIdentity p_MSId,
                                                               template (omit)  EMM_Cause p_Cause,
                                                               template (omit)  AdditionalUpdateResult p_AdditionalUpdateResult,
                                                               template (value) GPRS_Timer p_T3412,
                                                               template (omit)  GPRS_Timer p_T3402 := omit,
                                                               template (omit) GPRS_Timer3 p_T3412Extd := omit) // @sic R5s120178 Baseline Moving sic@

    modifies cs_508_ATTACH_ACCEPT :=
  { /* @status    APPROVED */
    aTTACH_ACCEPT := {
      t3412                 := p_T3412
    }
  };

  template (value) NAS_DL_Message_Type cds_TAU_Accept_T3412(NAS_AttDetValue_Type p_UpdateValue,
                                                            template (omit) MobileIdentity p_Guti,
                                                            template (omit) TrackingAreaIdList p_TaiList,
                                                            template (omit) EPS_BearerContextStatus p_EPSCtxtStatus,
                                                            template (omit) LocAreaId p_LAI,
                                                            template (omit) MobileIdentity p_MS_Id,
                                                            template (omit) AdditionalUpdateResult p_AdditionalUpdateResult,
                                                            template (value) GPRS_Timer p_T3412)
    modifies cs_508_TAU_Accept :=
  { /* @status    APPROVED */
    tRACKING_AREA_UPDATE_ACCEPT := {
      t3412                  := p_T3412

    }
  };

  template (value) NAS_DL_Message_Type cds_TAU_Accept_T3402andT3412(NAS_AttDetValue_Type p_UpdateValue, // @sic R5-115720 sic@
                                                                    template (omit) MobileIdentity p_Guti,
                                                                    template (omit) TrackingAreaIdList p_TaiList,
                                                                    template (omit) EPS_BearerContextStatus p_EPSCtxtStatus,
                                                                    template (omit) LocAreaId p_LAI,
                                                                    template (omit) MobileIdentity p_MS_Id,
                                                                    template (omit) AdditionalUpdateResult p_AdditionalUpdateResult,
                                                                    template (value) GPRS_Timer p_T3402,
                                                                    template (value) GPRS_Timer p_T3412)
    modifies cs_508_TAU_Accept :=
  { /* @status    APPROVED */
    tRACKING_AREA_UPDATE_ACCEPT := {
      t3412                    := p_T3412,
      t3402                    := p_T3402
    }
  };

  template NAS_UL_Message_Type cdr_TAU_Request_AnyActiveFlag_OldGuti(template (present) EPS_UpdateTypeValue p_EpsUpdate_TypeValue,
                                                                     NAS_KsiValue p_KsiValue,
                                                                     template DRXparameter p_DRXparameter, // @sic R5s120210 sic@
                                                                     template AdditionalUpdateType p_AdditionalUpdateType,
                                                                     template (present) MobileIdentity p_OldGuti,
                                                                     template (present) TrackingAreaId p_LastTai)
    modifies cr_508_TAU_Request :=
  { /* @status    APPROVED */
    tRACKING_AREA_UPDATE_REQUEST := {
      epsUpdateType := cr_EPS_UpdateType(?, p_EpsUpdate_TypeValue),
      oldGuti := p_OldGuti,
      lastVisitedRegisteredTai := p_LastTai
    }
  };

  function f_TC_9_2_3_1_1_EUTRA() runs on EUTRA_PTC
  {
    /// @desc Network initiated detach procedure / re-attach required.

    var template (value) CellPowerList_Type v_CellPowerList;

    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1); //@sic R5-106627 sic@ @sic R5-113675 sic@

    // 3 Cells: A (serving), B and D (both suitable neighbour cells)
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);  //@sic R5-113675 sic@
    f_EUTRA_CellConfig_Def(eutra_CellD);

    f_UT_ConfigureEPSAttach (UT); // @sic R5-103811 sic@
    // Preamble: UE is in state Registered, Idle Mode (state 2) on Cell A
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only); // @sic R5s110176 sic@

    // Now turn other cells back on, before starting the test body
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellD, tsc_NonSuitableCellRS_EPRE )
    };
    f_Delay (5.0); // @sic R5s120274 sic@
    f_EUTRA_SetCellPowerList ( v_CellPowerList );

    f_EUTRA_TestBody_Set(true);

    fl_TC_9_2_3_1_1_Body();

    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E1_IDLE, EPS_Only); // @sic R5s110176 sic@

  } // function f_TC_9_2_3_1_1_EUTRA

  function fl_TC_9_2_3_1_1_Body() runs on EUTRA_PTC
  {
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var NAS_PlmnId v_HomePlmn:= f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity);
    var NAS_Tac v_Tac1 := bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellA));
    var GutiParameters_Type v_Guti2_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellB);   //@sic R5-113675 sic@
    var GutiParameters_Type v_Guti3_Params := f_CreateGutiParamsWithUpdatedSTmsi(v_Guti1_Params);
    var template (omit) MobileIdentity v_MsId := f_GetMSId (EPS_Only); // @sic R5s110176 sic@
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(EPS_Only); // @sic R5s110176 sic@
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus; // @sic R5s100755 sic@
    var template (value) CellPowerList_Type v_CellPowerList;
    
    var NAS_MSG_Indication_Type v_NasInd;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only); // @sic R5s110176 sic@

    var float v_TimerValue;
    
    // ==========================================================================
    //@siclog "Step 1" siclog@
    //+   Set the cell type of cell A to the "Non-Suitable cell".
    //+   Set the cell type of cell B to the "Serving cell"
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE ) // @sic R5s110688 sic@
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 2" siclog@
    //+   Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(v_UpdateType,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                         cr_TAI(v_HomePlmn, v_Tac1))));
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Step 2");
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    
    // @sic R5s100799 sic@
    
    //@siclog "Step 3" siclog@
    //+   The SS transmits a TRACKING AREA UPDATE ACCEPT message. <-- TRACKING
    //+   AREA UPDATE ACCEPT
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(v_UpdateType,
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti2_Params),
                                                                  cds_TAIListNonConsecutive_tlv(v_HomePlmn, // Cell B is using the same PLMN ID as Cell A
                                                                                                { '0002'O, '0004'O }), // TAC1=2, TAC2=4  @sic R5s110618 sic@
                                                                  v_EpsBearerCtxtStatus,
                                                                  f_EUTRA_GetCellLAI(eutra_CellB, EPS_Only), // @sic R5s110176 sic@
                                                                  v_MsId,
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType,
                                                                                              EPS_Only))))); // @sic R5s110176 sic@
    
    //@siclog "Step 4" siclog@
    //+   Check: Does the UE transmit a TRACKING AREA UPDATE COMPLETE message? -->
    //+   TRACKING AREA UPDATE COMPLETE [2,P]
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellB,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 4");
    
    //@siclog "Step 5" siclog@
    //+   The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
    
    //@siclog "Step 6" siclog@
    //+   Check: Does the UE respond to paging on cell C with S-TMSI2 for PS
    //+   domain? (Generic Procedure) [2]
    f_EPS_508Check_NAS_Paging(eutra_CellB, ps);
    
    //@siclog "Step 7" siclog@
    //+   Set the cell type of cell B to the "Non-Suitable cell ".
    //+   Set the cell type of cell D to the " Serving cell"
    v_CellPowerList := {
      cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellD, tsc_ServingCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 8" siclog@
    //+   Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message in
    //+    the next 30 seconds? [1,F]
    v_TimerValue := f_EUTRA_SetTimerToleranceMax (eutra_CellD, nasTTCNTimer, 30.0); // @sic R5w100302, R5-106675 sic@
    if (f_EUTRA_RRC_RRCConnectionRequest_Check(eutra_CellD, v_TimerValue)) {        // @sic R5s110507 Additional Changes sic@
      // even though prose says TAU, as soon as UE sends RRC ConnReq, we know something is wrong
      f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 8");  // @sic R5s110618 sic@
    }
    
    //@siclog "Step 9" siclog@
    //+   Check: Does the UE respond to paging on cell D with S-TMSI1 for PS
    //+    domain?(Generic Procedure) [1]
    f_EPS_508Check_NAS_Paging(eutra_CellD, ps);
    
    //@siclog "Step 10" siclog@
    //+   Set the cell type of cell D to the "Non-Suitable cell ".
    //+   Set the cell type of cell A to the " Serving cell"
    v_CellPowerList := {
      cs_CellPower ( eutra_CellD, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 11" siclog@
    //+   Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message? -->
    //+   TRACKING AREA UPDATE REQUEST [2;3,P]
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(v_UpdateType,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_Guti2_Params),
                                                                                         cr_TAI(v_HomePlmn, '0004'O))));
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Step 11");
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    
    //@siclog "Step 12" siclog@
    //+   The SS transmits a TRACKING AREA UPDATE ACCEPT message. <-- TRACKING AREA UPDATE ACCEPT
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(
                                                                  v_UpdateType,
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti3_Params),
                                                                  cds_TAIListNonConsecutive_tlv(
                                                                                                v_HomePlmn,
                                                                                                { '0001'O, '0002'O }), // TAC1=1, TAC2=2
                                                                  v_EpsBearerCtxtStatus,
                                                                  f_EUTRA_GetCellLAI(eutra_CellA, EPS_Only), // @sic R5s110176 sic@
                                                                  v_MsId,
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType,
                                                                                              EPS_Only))))); // @sic R5s110176 sic@
    
    // Store the new GUTI
    f_EUTRA_CellInfo_SetGuti(eutra_CellA, v_Guti3_Params);
    
    //@siclog "Step 13" siclog@
    //+   The UE transmits a TRACKING AREA UPDATE COMPLETE message?
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    
    //@siclog "Step 14" siclog@
    //+   The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
  } // function fl_TC_9_2_3_1_1_Body

  function f_TC_9_2_3_1_4_EUTRA() runs on EUTRA_PTC
  {
    /// @desc Normal tracking area update / list of equivalent PLMNs in the
    ///       TRACKING AREA UPDATE ACCEPT message
    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c2); // @sic R5s106627 sic@ @sic R5-115627 sic@

    // 5 Cells: A (serving), B, C, D and M
    f_EUTRA_CellInfo_SetPLMN_1Entry ( eutra_CellC, cs_HPLMN_001_02 ); // @sic R5s110776 sic@
    f_EUTRA_CellInfo_SetPLMN_1Entry ( eutra_CellD, cs_HPLMN_002_101 ); // @sic R5s110776 sic@
    f_EUTRA_CellInfo_SetPLMN_1Entry ( eutra_CellM, cs_HPLMN_003_101 ); // @sic R5s110776 sic@
    
    f_EUTRA_CellConfig_Def( eutra_CellA );
    f_EUTRA_CellConfig_Def( eutra_CellB );
    f_EUTRA_CellConfig_Def( eutra_CellC ); // @sic R5-115627 sic@
    f_EUTRA_CellConfig_Def( eutra_CellD ); // @sic R5-115627 sic@
    f_EUTRA_CellConfig_SRBs_Only( eutra_CellM ); // @sic R5-115627 sic@

    // SS send Authentication Reject with cause: PLMN3 is a forbidden PLMN
    // The "forbidden PLMN list" will contains PLMN3 in UE
    f_EUTRA_Preamble_Reject (eutra_CellD, tsc_Cause_PLMN_NotAllowed, NORMAL); // @sic R5s110176 sic@
    // f_IP_Handling_Stop(IP); // @sic R5s110777 sic@ @sic R5s120065: not needed anymore sic@
    // Now turn I off again whilst UE registers on A
    f_EUTRA_SetCellPower ( eutra_CellD, tsc_NonSuitableOffCellRS_EPRE );

    //Preamble: UE is in state Registered, Idle Mode (state 2) on Cell A
    f_EUTRA_Preamble (eutra_CellA, STATE2_IDLEUPDATE);

    f_EUTRA_TestBody_Set(true);

    fl_TC_9_2_3_1_4_Body();

    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellB, E2_T3440);     // @sic R5s110170 sic@  @sic R5-115627 sic@ @sic R5s120463 sic@
  } // function f_TC_9_2_3_1_4_EUTRA

  function fl_TC_9_2_3_1_4_Body() runs on EUTRA_PTC
  {
    var GutiParameters_Type v_Guti2_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellB);
    var GutiParameters_Type v_Guti3_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellC); // @sic R5-115627 sic@
    var GutiParameters_Type v_Guti4_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellD); // @sic R5-115627 sic@
    var template (omit) MobileIdentity v_MsId := f_GetMSId (NORMAL); // @sic R5s110176 sic@
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus; // @sic R5s100755 sic@
    var template (omit) LocAreaId v_LAI := f_EUTRA_GetCellLAI(eutra_CellA, NORMAL); // @sic R5s110176 sic@
    var NAS_MSG_Indication_Type v_NasInd;
    var template (value) CellPowerList_Type v_CellPowerList;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType ();
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(NORMAL); // @sic R5s110176 sic@

    var float v_TimerValue;

    //@siclog "Step 1" siclog@
    //+   Set the cell type of cell A to the "Non--Suitable cell".
    //+   Set the cell type of cell B to the "Serving cell".
    //+   Set the cell type of cell C to the "Non-Suitable Off cell"
    //+   Set the cell type of cell D to the "Non-Suitable Off cell"
    //+   Set the cell type of cell M to the "Non-Suitable Off cell"
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellD, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellM, tsc_NonSuitableOffCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );  // @sic R5-115627 sic@

    // ==========================================================================

    //@siclog "Step 2" siclog@
    //+   The UE transmits a TRACKING AREA UPDATE REQUEST message --> TRACKING
    //    AREA UPDATE REQUEST
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                             tsc_RRC_TI_Def,
                                             cr_EstablishmentCause_Any,
                                             cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                               cr_508_TAU_Request(v_UpdateType,
                                                                                  f_EUTRA_SecurityKSIasme_Get(),
                                                                                  cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                  v_AdditionalUpdateType)));
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;

    //@siclog "Step 3" siclog@
    //+   VOID
    //@siclog "Step 4" siclog@
    //+   VOID

    //@siclog "Step 5" siclog@
    //+   SS responds with a TRACKING AREA UPDATE ACCEPT message including PLMN2
    //+   and PLMN3 in the list of equivalent PLMNs.  <-- TRACKING AREA UPDATE
    //+   ACCEPT
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_TAU_Accept_EPLMN(v_UpdateType,
                                                                    f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti2_Params),
                                                                    cds_TAIListNonConsecutive_tlv(f_Asn2Nas_PlmnId(v_Guti2_Params.PLMN_Identity),
                                                                                                  { bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellB)) }),
                                                                    v_EpsBearerCtxtStatus,
                                                                    v_LAI,
                                                                    v_MsId,
                                                                    f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType), // @sic R5-103681 sic@,
                                                                    cs_PLMN_List_2PLMNs(tsc_PLMN2, tsc_PLMN3)))));
    
    //@siclog "Step 6" siclog@
    //+   The UE transmits a TRACKING AREA UPDATE COMPLETE message --> TRACKING
    //+   AREA UPDATE COMPLETE
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellB,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    //@siclog "Step 6A" siclog@
    //+  SS releases rrc connection <-- RRC_CONNECTION_RELEASE
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB); // @sic R5-113810 sic@
    //@siclog "Step 7" siclog@
    //+   Set the cell type of cell A to the "Non-Suitable Off cell".
    //+   Set the cell type of cell B to the "Non-Suitable cell".
    //+   Set the cell type of cell C to the "Suitable cell"
    //+   Set the cell type of cell M to the "Suitable cell"
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_SuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellM, tsc_SuitableCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList ); // @sic R5-115627 sic@

    //@siclog "Step 8" siclog@
    //+   Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message on
    //+   cell C (PLMN2)? --> TRACKING AREA UPDATE REQUEST [1,P]
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellC,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(v_UpdateType,
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType)));
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Step 8");
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    
    //@siclog "Step 9" siclog@
    //+   VOID
    //@siclog "Step 10" siclog@
    //+   VOID
    
    //@siclog "Step 11" siclog@
    //+   The SS transmits a TRACKING AREA UPDATE ACCEPT message including PLMN1
    //+   and PLMN3 in the list of equivalent PLMNs. <-- TRACKING AREA UPDATE
    //+   ACCEPT
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellC,  // @sic R5-115627 sic@
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_TAU_Accept_EPLMN(v_UpdateType,
                                                                    f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti3_Params),
                                                                    cds_TAIListNonConsecutive_tlv(f_Asn2Nas_PlmnId(v_Guti3_Params.PLMN_Identity),
                                                                                                  { bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellC)) }),  // @sic R5-115627 sic@
                                                                    v_EpsBearerCtxtStatus,
                                                                    v_LAI,
                                                                    v_MsId,
                                                                    f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType), // @sic R5-103681 sic@,
                                                                    cs_PLMN_List_2PLMNs(tsc_PLMN1, tsc_PLMN3)))));
    
    //@siclog "Step 12" siclog@
    //+   Check: Does the UE transmit a TRACKING AREA UPDATE COMPLETE message?
    //+   --> TRACKING AREA UPDATE COMPLETE [1,P]
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellC,  // @sic R5-115627 sic@
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 12");

    //@siclog "Step 12A" siclog@
    //+  SS releases rrc connection <-- RRC_CONNECTION_RELEASE
    f_EUTRA_RRC_ConnectionRelease(eutra_CellC); // @sic R5-113810 sic@  @sic R5-115627 sic@
    
    //@siclog "Step 13" siclog@
    //+   Set the cell type of cell C to the "Non-Suitable cell"
    //+   Set the cell type of cell D to the "Serving cell"
    //+   Set the cell type of cell M to the "Non-Suitable off cell"
    //+ Note: Cell D (PLMN3) belongs to the forbidden PLMN.
    v_CellPowerList := {
      cs_CellPower ( eutra_CellC, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellD, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellM, tsc_NonSuitableOffCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );  // @sic R5-115627 sic@
    
    //@siclog "Step 14" siclog@
    //+   Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message on
    //+   cell D (PLMN3) in next 30 seconds?  --> TRACKING AREA UPDATE REQUEST
    //+   [1,F]
    v_TimerValue := f_EUTRA_SetTimerToleranceMax(eutra_CellD, nasTTCNTimer, 30.0);  // @sic R5-106675 sic@ @sic R5-115627 sic@
    if (f_EUTRA_RRC_RRCConnectionRequest_Check(eutra_CellD, v_TimerValue)) {        // @sic R5s110507 Additional Changes sic@ @sic R5s120463 sic@
      // even though prose says TAU, as soon as UE sends RRC ConnReq, we know something is wrong
      f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 14");
    }
    
    //@siclog "Step 15" siclog@
    //+   The UE is switched to manual PLMN selection mode and is made to select
    //+   PLMN3 in order to remove PLMN3 in the forbidden PLMN list in the UE.
    f_UT_ManualPLMN_Select (UT, f_Asn2Nas_PlmnId(v_Guti4_Params.PLMN_Identity)); // @sic R5-106675, R5s100875 sic@
    
    //@siclog "Step 16" siclog@
    //+   The UE transmit a TRACKING AREA UPDATE REQUEST message on cell D
    //+   (PLMN3)? --> TRACKING AREA UPDATE REQUEST
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellD,  // @sic R5-115627 sic@
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                               cr_508_TAU_Request(v_UpdateType,
                                                                                  f_EUTRA_SecurityKSIasme_Get(),
                                                                                  cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                  v_AdditionalUpdateType)));
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    
    //@siclog "Step 17" siclog@
    //+   VOID
    //@siclog "Step 18" siclog@
    //+   VOID
    
    //@siclog "Step 19" siclog@
    //+   The SS transmits a TRACKING AREA UPDATE ACCEPT message without the list
    //+   of equivalent PLMNs.  <-- TRACKING AREA UPDATE ACCEPT
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellD,  // @sic R5-115627 sic@
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(v_UpdateType,
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti4_Params),
                                                                  cds_TAIListNonConsecutive_tlv(f_Asn2Nas_PlmnId(v_Guti4_Params.PLMN_Identity),
                                                                                                { bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellD)) }),  // @sic R5-115627 sic@
                                                                  v_EpsBearerCtxtStatus,
                                                                  f_EUTRA_GetCellLAI(eutra_CellI, NORMAL), // @sic R5s110176 sic@
                                                                  omit,
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)) ) ) );
    
    //@siclog "Step 20" siclog@
    //+   Check: Does the UE transmit a TRACKING AREA UPDATE COMPLETE message?
    //+   --> TRACKING AREA UPDATE COMPLETE [1,P]
    SRB.receive (car_SRB1_NasPdu_IND(eutra_CellD, // @sic R5-115627 sic@
                                     cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                       cr_508_TAU_Complete)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 20");
    
    //@siclog "Step 20A" siclog@
    //+  SS releases rrc connection <-- RRC_CONNECTION_RELEASE
    f_EUTRA_RRC_ConnectionRelease(eutra_CellD);  // @sic R5-115627 sic@
    
    //@siclog "Step 21" siclog@
    //+   The UE is switched back to automatic PLMN selection mode.
    f_UT_AutomaticPLMN_Select(UT);

    //@siclog "Step 21A" siclog@
    //+   SS waits for 5 minutes to allow UE to complete automatic PLMN search.
    f_Delay(300.0);  // @sic R5-113810 sic@
    
    //@siclog "Step 22" siclog@
    //+   Set the cell type of cell B to the "Suitable neighbour intra-frequency cell"
    //+   Set the cell type of cell C to the "Serving cell"
    //+   Set the cell type of cell D to the "Non-Suitable cell"
    v_CellPowerList := {
      cs_CellPower ( eutra_CellD, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE ) // @sic R5-121749 sic@
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList ); // @sic R5-115627 sic@
    
    //@siclog "Step 23" siclog@
    // Void  @sic R5-121749 sic@
    
    //@siclog "Step 24" siclog@
    // Void
    
    //@siclog "Step 24A" siclog@
    // Void

    //@siclog "Step 25" siclog@
    //+   Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message on
    //+   Cell B (PLMN1)? --> TRACKING AREA UPDATE REQUEST [2,P]
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB, // @sic R5-115627 sic@  @sic R5-121749 sic@
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(v_UpdateType, // @sic R5s120463 sic@
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 25");
    
    //@siclog "Step 26" siclog@
    //+   The SS responds with TRACKING AREA UPDATE ACCEPT message.
    // @sic R5s110170 sic@
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,  // @sic R5-115627 sic@ @sic R5-121749 sic@
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(v_UpdateType,
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti2_Params),
                                                                  cds_TAIListNonConsecutive_tlv(f_Asn2Nas_PlmnId(v_Guti2_Params.PLMN_Identity),
                                                                                                { bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellB)) }), // @sic R5-115627 sic@
                                                                  v_EpsBearerCtxtStatus,
                                                                  f_EUTRA_GetCellLAI(eutra_CellB, NORMAL), // @sic R5s110176 sic@
                                                                  omit,
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)) ) ) );
    //@siclog "Step 27" siclog@
    //+   The UE transmits a TRACKING AREA UPDATE COMPLETE message.
    SRB.receive (car_SRB1_NasPdu_IND(eutra_CellB, // @sic R5-115627 sic@ @sic R5-121749 sic@
                                     cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                       cr_508_TAU_Complete)));
    
  } // function tc_9_2_3_1_4_EUTRA

  function f_TC_9_2_3_1_5_EUTRA() runs on EUTRA_PTC
  {
    /// @desc Periodic tracking area update / accepted

    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);  // @sic R5s106627 sic@

    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);

    // Preamble: The UE is in state Switched OFF (state 1)
    // ==========================================================================
    f_EUTRA_Preamble_Reject(eutra_CellA, tsc_Cause_TA_NotAllowed, NORMAL); // @sic R5s110176 sic@
    f_EUTRA_TestBody_Set(true);

    fl_TC_9_2_3_1_5_Body();

    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E1_IDLE );
  } // function f_TC_9_2_3_1_5_EUTRA

  function fl_TC_9_2_3_1_5_Body() runs on EUTRA_PTC
  {
    const EPS_BearerIdentity tsc_EpsBearerId := '5'H;
    var ProcedureTransactionIdentifier v_EPS_TI  := '01'O;
    var template (value) AccessPointName v_APN;

    // ==========================================================================
    // initialize component specific data structures
    // ==========================================================================
    // get all data which are required for a GUTI
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var GutiParameters_Type v_Guti2_Params := f_CreateGutiParamsWithUpdatedSTmsi(v_Guti1_Params);
    var GutiParameters_Type v_Guti3_Params := f_CreateGutiParamsWithUpdatedSTmsi(v_Guti2_Params);
    var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get();
    var NAS_PlmnId v_Plmn1 := f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity);
    var NAS_Tac v_Tac1 := bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellA));
    var boolean v_EIT_Flag := false;
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus; // @sic R5s100755 sic@
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(NORMAL); // @sic R5s110176, R5s100536 sic@
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType ();  //used to follow TTCN3 v411 standard
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(NORMAL); // @sic R5s110176 sic@
    var EPS_UpdateTypeValue v_UpdateInd  := tsc_EpsUpdate_Periodic;
    var template (omit) LocAreaId v_LAI := f_EUTRA_GetCellLAI (eutra_CellA, NORMAL); // @sic R5s110478 sic@
    var template (omit) MobileIdentity v_MSId := f_GetMSId (NORMAL);  // @sic R5s110478 sic@

    // temporary dummy variable which gets used when receiving NAS ASPs
    var NAS_MSG_Indication_Type v_NasInd;
    

    //@siclog "Step 1" siclog@
    //+   The UE is powered up or switched on.
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@

    //@siclog "Step 2" siclog@
    //+   The UE transmits an ATTACH REQUEST message with a PDN
    //+   CONNECTIVITY REQUEST message to request PDN connectivity to the
    //+   default PDN --> ATTACH REQUEST
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                 cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),  //@sic R5s100536 sic@
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                 f_GetPdnType())));

    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    v_EIT_Flag := f_CheckEsmInfoTransferFlag(v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST);
    v_SecurityParams.NAS_SecurityCap := f_EUTRA_FillNAS_SecurityCapability(v_NasInd.Pdu.Msg.aTTACH_REQUEST);  // @sic R5s100135 sic@
    f_EUTRA_Security_Set ( v_SecurityParams );//Saving security parameters


    //@siclog "Step 3 - 6" siclog@
    //+   The SS starts an authentication procedure <-- AUTHENTICATION
    //+   REQUEST
    
    //+   The UE responds to the authentication procedure -->
    //+   AUTHENTICATION RESPONSE
    
    //+   The SS starts a NAS security mode command procedure to perform
    //+   NAS integrity protection. <-- SECURITY MODE COMMAND
    
    //+   The UE responds to the NAS security mode command procedure -->
    //+   SECURITY MODE COMPLETE
    v_APN := f_EUTRA_Authentication_NAS_AS_Security(eutra_CellA, v_EIT_Flag, v_EPS_TI, false); // @sic R5s100094 sic@

    //@siclog "Step 7" siclog@
    //+   The SS transmits an ATTACH ACCEPT message with GUTI-1 and with
    //+   the ACTIVATE DEFAULT EPS BEARER CONTEXT REQUEST message. <--
    //+   ATTACH ACCEPT @sic R5-104703 sic@
    f_IP_ChangeEutraCell(IP, eutra_CellA);       /* @sic R5-113734 change 8 sic@ */
    f_EUTRA_RRCConnectionReconfiguration_SRB2_1AM_DRB_Est(eutra_CellA,
                                                          tsc_RRC_TI_Def,
                                                          cs_NAS_RequestWithPiggybacking(tsc_SHT_IntegrityProtected_Ciphered,
                                                                                         cds_ATTACH_ACCEPT_T3412(v_AttachType,  //@sic R5s100536 sic@
                                                                                                                 cs_TAIListNonConsecutive_lv(v_Plmn1, { v_Tac1 }),
                                                                                                                 f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti1_Params),
                                                                                                                 v_LAI,  // @sic R5s110478 sic@
                                                                                                                 v_MSId,  // @sic R5s110478 sic@
                                                                                                                 omit,
                                                                                                                 f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType),
                                                                                                                 cs_GprsTimer_v(tsc_GprsTimerUnit_6min, '00001'B)),
                                                                                         cs_508_ActivateDefEpsBearerContextRequest(tsc_EpsBearerId,
                                                                                                                                   v_EPS_TI,
                                                                                                                                   v_APN,
                                                                                                                                   f_EUTRA_GetPDNAddress (f_CheckPCOforIPallocationViaNas (omit)),
                                                                                                                                   -,
                                                                                                                                   f_GetDefPCOforPCSCFAddress (v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions)))); // @sic R5-104703 sic@
    
    //@siclog "Step 8" siclog@
    //+   The UE transmits an ATTACH COMPLETE message with the ACTIVATE
    //+   DEFAULT EPS BEARER CONTEXT ACCEPT message --> ATTACH COMPLETE
    f_EUTRA_NAS_AttachComplete(eutra_CellA, tsc_EpsBearerId);

    //@siclog "Step 9" siclog@
    //+   The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);

    //@siclog "Step 10" siclog@
    //+   The SS waits 6minutes . (Expire of T3412)
    f_Delay(6.0 * 60.0*0.9); // 6 minutes - 10%

    //@siclog "Step 11" siclog@
    //+   Check: Does the UE send TRACKING AREA UPDATE REQUEST message?
    //+   --> TRACKING AREA UPDATE REQUEST [1 P]
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(tsc_EpsUpdate_Periodic,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                         cr_TAI_Any)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 11");
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;

    //@siclog "Step 12" siclog@
    //+   The SS sends TRACKING AREA UPDATE ACCEPT. <-- TRACKING AREA
    //+   UPDATE ACCEPT
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cds_TAU_Accept_T3412(f_GetEPSTAUType(EPS_Only), // @sic R5-121739 sic@
                                                                     f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti2_Params),
                                                                     cds_TAIListNonConsecutive_tlv(v_Plmn1, { v_Tac1 }),
                                                                     v_EpsBearerCtxtStatus,
                                                                     f_EUTRA_GetCellLAI (eutra_CellA, EPS_Only), // @sic R5s110478 sic@ @sic R5-121739 sic@
                                                                     f_GetMSId (EPS_Only), // @sic R5s110478 sic@ @sic R5-121739 sic@
                                                                     f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType), // @sic R5-103681 sic@,
                                                                     cs_GprsTimer_tv('5A'O, tsc_GprsTimerUnit_6min, '00001'B)))));
    f_EUTRA_CellInfo_SetGuti(eutra_CellA, v_Guti2_Params);

    //@siclog "Step 13" siclog@
    //+   Check: Does the UE send TRACKING AREA UPDATE COMPLETE message?
    //+   --> TRACKING AREA UPDATE COMPLETE [1 P]
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 13");

    //@siclog "Step 14" siclog@
    //+   The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);

    //@siclog "Step 15" siclog@
    //+   Check: Does the UE respond to paging on cell A with S-TMSI2
    //+   for PS domain?(Generic procedure) [1]
    f_EPS_508Check_NAS_Paging(eutra_CellA, ps);


    //@siclog "Step 16" siclog@
    //+   Set the cell type of cell A to the 'non-Suitable cell'.
    f_EUTRA_SetCellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE);

    //@siclog "Step 17" siclog@
    //+   The SS waits 8minutes.
    f_Delay(8.0 * 60.0 * 0.9); // - 10 %

    //@siclog "Step 18" siclog@
    //+   Set the cell type of cell A to the 'Serving cell'.
    f_EUTRA_SetCellPower(eutra_CellA, tsc_ServingCellRS_EPRE);

    //@siclog "Step 19" siclog@
    //+   Check: Does the UE send TRACKING AREA UPDATE REQUEST message?
    //+   --> TRACKING AREA UPDATE REQUEST [2, P]
    if(v_AttachType == tsc_EAttachType_Combined)  // @sic R5s110172 sic@
    {
      v_UpdateInd := tsc_EpsUpdate_Combined_IMSIAttach;
    }
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(v_UpdateInd,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_Guti2_Params),
                                                                                         cr_TAI_Any)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 19");
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;

    //@siclog "Step 20" siclog@
    //+   The SS sends TRACKING AREA UPDATE ACCEPT. <-- TRACKING AREA
    //+   UPDATE ACCEPT
    SRB.send(cas_SRB1_NasPdu_REQ(
                                 eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(v_UpdateType,
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti3_Params),
                                                                  cds_TAIListNonConsecutive_tlv(v_Plmn1, { v_Tac1 }),
                                                                  v_EpsBearerCtxtStatus,
                                                                  v_LAI, // @sic R5s110478 sic@
                                                                  v_MSId,  // @sic R5s110478 sic@
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)) ) ) );
    f_EUTRA_CellInfo_SetGuti(eutra_CellA, v_Guti3_Params);

    //@siclog "Step 21" siclog@
    //+   Check: Does the UE send TRACKING AREA UPDATE COMPLETE message?
    //+   --> TRACKING AREA UPDATE COMPLETE [2, P]
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 21");

    //@siclog "Step 22" siclog@
    //+   The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);

    //@siclog "Step 23" siclog@
    //+   Check: Does the UE respond to paging on cell A with S-TMSI3
    //+   for PS domain?(Generic procedure) [2]
    f_EPS_508Check_NAS_Paging(eutra_CellA, ps);

  } // function fl_TC_9_2_3_1_5_Body

  function f_TC_9_2_3_1_8_EUTRA() runs on EUTRA_PTC
  {
    /// @desc UE receives an indication that the RRC connection was released with
    ///       cause "load balancing TAU required"

    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);  // @sic R5s106627 sic@

    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);

    // Preamble:
    //   - UE is in state Generic RB established (state 3) on Cell A
    // ==========================================================================
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE);
    f_EUTRA_RbEst_Def(eutra_CellA);
    f_EUTRA_TestBody_Set(true);

    fl_TC_9_2_3_1_8_Body();

    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E2_T3440); // @sic R5s110007 sic@

  } // function f_TC_2_9_3_1_8_EUTRA

  function fl_TC_9_2_3_1_8_Body() runs on EUTRA_PTC
  {
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var GutiParameters_Type v_Guti2_Params := f_CreateGutiParamsWithUpdatedSTmsi(v_Guti1_Params);
    var template (value) TrackingAreaIdList v_TaiList;
    // get current security parameters
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;  // @sic R5s100755 sic@
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(NORMAL); // @sic R5s110176, R5s100545 sic@

    // temporary variable which is used when receiving NAS ASPs
    var NAS_MSG_Indication_Type v_NasInd;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType ();  //used to follow TTCN3 v411 standard

    //@siclog "Step 1" siclog@
    //+   The SS transmits RRCConnectionReleaese with cause "load balancing TAU
    //+   required".
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA, -, loadBalancingTAUrequired);   /* @sic R5-110803 change 13 sic@ */

    //@siclog "Step 2" siclog@
    //+   Check: Does the UE send TRACKING AREA UPDATE REQUEST message. -->
    //+   TRACKING AREA UPDATE REQUEST [1,P]
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(v_UpdateType,
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 2");
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    
    //@siclog "Step3 " siclog@
    //+   The SS sends TRACKING AREA UPDATE ACCEPT. <-- TRACKING AREA UPDATE
    //+   ACCEPT
    //+ Note: The SS assigns a different MME Identifier (MMEI) value in a GUTI.
    v_TaiList := cds_TAIListNonConsecutive_tlv(f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity),
                                               { bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellA)) } );
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(v_UpdateType,
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti2_Params),
                                                                  v_TaiList,
                                                                  v_EpsBearerCtxtStatus,
                                                                  f_EUTRA_GetCellLAI(eutra_CellA, NORMAL), // @sic R5s110176 sic@
                                                                  omit,
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)) ) ) );
    f_EUTRA_CellInfo_SetGuti(eutra_CellA, v_Guti2_Params);
    
    //@siclog "Step 4" siclog@
    //+   The UE sends TRACKING AREA UPDATE COMPLETE message -->
    //+   TRACKING AREA UPDATE COMPLETE
    SRB.receive (car_SRB1_NasPdu_IND(eutra_CellA,
                                     cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                       cr_508_TAU_Complete)));
    
    
  } // function fl_TC_9_2_3_1_8_Body

  function f_TC_9_2_3_1_9_EUTRA() runs on EUTRA_PTC
  { /*  Network initiated detach procedure / re-attach required */
    // @sic R5s12109 sic@

    var CSG_Identity v_CSG_Identity_CellB := '000000000000000000000000010'B; // @sic R5-121742 sic@

    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c2); // @sic R5-121742 sic@

    // create cells
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB); // @sic R5-121742 sic@
    f_EUTRA_CellConfig_Def(eutra_CellD);

    f_UT_ConfigureEPSAttach (UT);

    // delete the UE's CSG whitelist, supported per test case selection expression
    f_EUTRA_EmptyCSG_AllowedList (eutra_CellB, EPS_Only); // @sic R5s120480 sic@

    // modify system information for the CSG cell
    //Set system information combination 7 in cell B
    f_EUTRA_ChangeSysinfoCombination (eutra_CellB, c7);  // @sic R5-121733 sic@   @sic R5-121742 sic@
    //Set system information 1 cell B
    f_EUTRA_CellInfo_SetSysInfo_Csg_Ind ( eutra_CellB, true );
    f_EUTRA_CellInfo_SetSysInfo_Csg_Id ( eutra_CellB, v_CSG_Identity_CellB );
    //Set system information 4 cell B
    f_EUTRA_SetSIB4_CSG_Def (eutra_CellB);   // @sic R5-121733 sic@
    // make the modified system information become active
    f_EUTRA_SS_ConfigureSysinfo (eutra_CellB); // @sic R5s120298 sic@

    // Preamble: UE is in state Registered, Idle Mode (state 2) on Cell A
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only);

    f_EUTRA_TestBody_Set(true);

    fl_TC_9_2_3_1_9_Body();

    // Postamble
    f_EUTRA_TestBody_Set(false);
    // Release RRC connection
    f_EUTRA_RRC_ConnectionRelease (eutra_CellB);
    // Remove entry from the CSG Whitelist
    f_EUTRA_BringUSIMtoInital_CSG (eutra_CellB, eutra_CellA, EPS_Only); // @sic R5s120480 sic@
    // UE is IDLE on CSG Cell
    f_EUTRA_Postamble(eutra_CellB, E4_DEREGISTERED, EPS_Only); // @sic R5s120298 sic@ sic R5s120480 sic@
  } // function f_TC_9_2_3_1_9_EUTRA

  function fl_TC_9_2_3_1_9_Body() runs on EUTRA_PTC
  {
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var NAS_PlmnId v_HomePlmn:= f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity);
    var NAS_Tac v_Tac1 := bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellA));
    var NAS_Tac v_Tac2 := bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellB));
    var NAS_Tac v_Tac4 := bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellD));
    var GutiParameters_Type v_Guti2_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellB);
    var GutiParameters_Type v_Guti3_Params := f_CreateGutiParamsWithUpdatedSTmsi(v_Guti1_Params);
    var template (omit) MobileIdentity v_MsId := f_GetMSId (EPS_Only);
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (v_Guti1_Params.PLMN_Identity);
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(EPS_Only);
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;
    var template (value) CellPowerList_Type v_CellPowerList;
    
    var NAS_MSG_Indication_Type v_NasInd;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only);
    
    // ==========================================================================
    //@siclog "Step 1" siclog@
    //+   Set the cell type of cell A to the "Non-Suitable cell".
    //+   Set the cell type of cell B to the "Serving cell"
    //+   Cell D as a "Not Suitable 'Off' cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE ), // @sic R5-121742 sic@
      cs_CellPower ( eutra_CellD, tsc_NonSuitableOffCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 2" siclog@
    // The UE performs manual CSG ID selection and CSG Identity ('000 0000 0000 0000 0000 0000 0010'B) is selected manually.
    f_UT_ManualPLMN_CSG ( UT,v_PLMN,'000000000000000000000000010'B);
    
    //@siclog "Step 3" siclog@
    //+   Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message on Cell B?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB, // @sic R5-121742 sic@
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(v_UpdateType,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                         cr_TAI(v_HomePlmn, v_Tac1))));
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Step 3");
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    
    //@siclog "Step 4" siclog@
    //+   The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    //    NOTE: UE shall add the selected CSG ID as indicate in step 2 to UE's Allowed CSG list.
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(v_UpdateType,
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti2_Params),
                                                                  cds_TAIListNonConsecutive_tlv(v_HomePlmn, // Cell B is using the same PLMN ID as Cell A
                                                                                                { tsc_TAC2 }), // TAC1=2
                                                                  v_EpsBearerCtxtStatus,
                                                                  f_EUTRA_GetCellLAI(eutra_CellB, EPS_Only),
                                                                  v_MsId,
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType,
                                                                                              EPS_Only)))));
    
    //@siclog "Step 5" siclog@
    //+   Check: Does the UE transmit a TRACKING AREA UPDATE COMPLETE message on Cell B? -->
    //+   TRACKING AREA UPDATE COMPLETE [1,P]
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellB,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 5");
    
    //@siclog "Step 6" siclog@
    //+   The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
    
    //@siclog "Step 7" siclog@
    //+   The SS configures:
    //+  - Cell A as a "Not Suitable 'Off' cell".
    //+  - Cell B as a "Not Suitable cell".
    //+  - Cell D as a "Serving cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),  // @sic R5-121742 sic@
      cs_CellPower ( eutra_CellD, tsc_ServingCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 8" siclog@
    //+   The UE transmits a TRACKING AREA UPDATE REQUEST message on Cell D.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellD,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(v_UpdateType,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_Guti2_Params),
                                                                                         cr_TAI(v_HomePlmn, v_Tac2))));
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    
    
    //@siclog "Step 9" siclog@
    //+   The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellD,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(v_UpdateType,
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti3_Params), // @sic R5s12109 sic@
                                                                  cds_TAIListNonConsecutive_tlv(v_HomePlmn, // Cell D is using the same PLMN ID as Cell A
                                                                                                { tsc_TAC4 }), // TAC4=4
                                                                  v_EpsBearerCtxtStatus,
                                                                  f_EUTRA_GetCellLAI(eutra_CellD, EPS_Only),
                                                                  v_MsId,
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType,
                                                                                              EPS_Only)))));
    
    //@siclog "Step 10" siclog@
    //+   The UE transmits a TRACKING AREA UPDATE COMPLETE message on Cell D.
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellD,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    //@siclog "Step 11" siclog@
    //+   The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellD);
    
    //@siclog "Step 12" siclog@
    //+   The SS configures:
    //+   - Cell B as a "Serving cell".
    //+   - Cell D as a "Not Suitable cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellD, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE )   // @sic R5-121742 sic@
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 13" siclog@
    //+   Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message on Cell B?[2,P]
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(v_UpdateType,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_Guti3_Params),
                                                                                         cr_TAI(v_HomePlmn, v_Tac4))));
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Step 13");
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    
    //@siclog "Step 14" siclog@
    //+   The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(v_UpdateType,
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti2_Params),
                                                                  cds_TAIListNonConsecutive_tlv(v_HomePlmn, // Cell B is using the same PLMN ID as Cell A
                                                                                                { v_Tac2 }), // TAC1=2
                                                                  v_EpsBearerCtxtStatus,
                                                                  f_EUTRA_GetCellLAI(eutra_CellB, EPS_Only),
                                                                  v_MsId,
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType,
                                                                                              EPS_Only)))));
    //@siclog "Step 15" siclog@
    //+   Check: Does the UE transmit a TRACKING AREA UPDATE COMPLETE message on Cell B? -->
    //+   TRACKING AREA UPDATE COMPLETE [2,P]
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellB,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 15");
  } // function fl_TC_9_2_3_1_9_Body

  function f_TC_9_2_3_1_9a_EUTRA() runs on EUTRA_PTC
  { // @desc Normal tracking area update / NAS signalling connection recovery
    
    var template (value) CellPowerList_Type v_CellPowerList;
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);  // @sic R5-113675 sic@

    // Cell B is configured to belong to TAI-1
    f_EUTRA_CellInfo_SetTAC(eutra_CellB, oct2bit(tsc_TAC1));   // @sic R5-113675 sic@
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def (eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);  // @sic R5-113675 sic@
    
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE); // @sic R5s100795, R5s110426 sic@
    f_EUTRA_RbEst_Def(eutra_CellA);
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_1_9a_Body ();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellB, E2_T3440); // @sic R5s110176, R5s110007, R5s110426 sic@
    
  } // end f_TC_9_2_3_1_9a_EUTRA

  function fl_TC_9_2_3_1_9a_Body() runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList;
    var NAS_MSG_Indication_Type v_NasInd;
    var template (omit) EPS_BearerContextStatus v_EPS_ContextStatus;
    var GutiParameters_Type v_Guti_Params := f_EUTRA_CellInfo_GetGuti (eutra_CellA);
    var GutiParameters_Type v_Guti_Params2 := f_EUTRA_CellInfo_GetGuti (eutra_CellB);  // @sic R5s110593 ch 3 sic@
    var NAS_Lac v_LAC := f_EUTRA_CellInfo_GetLocationAreaCode ( eutra_CellA );
    var TrackingAreaCode v_Tac2 := f_EUTRA_CellInfo_GetTAC ( eutra_CellB );  // @sic R5s110593 ch 3 sic@
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (v_Guti_Params.PLMN_Identity);
    var NAS_PlmnId v_PLMN2 := f_Asn2Nas_PlmnId (v_Guti_Params2.PLMN_Identity); // @sic R5s110593 ch 3 sic@
    var template (value) TrackingAreaIdList v_TaiList2 := cds_TAIListNonConsecutive_tlv ( v_PLMN2, { bit2oct(v_Tac2) } );  // @sic R5s110593 ch 3 sic@
    var template (omit) LocAreaId v_LAI2 := f_GetLAI ( v_PLMN2, v_LAC, NORMAL); // @sic R5s110176 sic@
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(NORMAL); // @sic R5s110176, R5s110426 sic@
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (NORMAL); // @sic R5s110176 sic@
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;

    timer t_WaitTimer := f_EUTRA_SetTimerToleranceMax(eutra_CellB, nasTTCNTimer, 10.0); // @sic R5-106675 sic@
    
    //@siclog "Step 1" siclog@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE )  // @sic R5-113675 sic@
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //  UE transmits an RRCConnectionReestablishmentRequest message
    //@siclog "Step 2" siclog@
    SRB.receive( car_SRB0_RrcPdu_IND( eutra_CellB,
                                      cr_508_RRCConnectionReestablishmentRequest (?,
                                                                                  f_EUTRA_CellInfo_GetPhyCellId ( eutra_CellA ),
                                                                                  cr_ReestablishmentCause_Any ) ));
    //  The SS transmits an RRCConnectionReestablishmentReject message
    //@siclog "Step 3" siclog@
    SRB.send ( cas_SRB0_RrcPdu_REQ ( eutra_CellB,
                                     cs_TimingInfo_Now,
                                     cs_508_RRCConnectionReestablishmentReject ) );
    //@siclog "Step 4" siclog@
    // Check: does the UE transmits a TRACKING AREA UPDATE REQUEST with the EPS update
    // type set to 'TA updating' in the next 10 seconds?
    t_WaitTimer.start;
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(v_UpdateType,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_Guti_Params),
                                                                                         cr_TAI(v_PLMN, tsc_TAC1))));  /* @sic R5-120721 change 3 sic@ */
    t_WaitTimer.stop; // timeout would be caught in the default
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "step 4");
    
    v_EPS_ContextStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus; // Send this back in the Accept
    
    // The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    //@siclog "Step 5" siclog@
    SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellB,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request ( tsc_SHT_IntegrityProtected_Ciphered,
                                                      cs_508_TAU_Accept(v_UpdateType,
                                                                        omit, // Guti
                                                                        v_TaiList2,  // @sic R5s110593 ch 3 sic@
                                                                        v_EPS_ContextStatus,
                                                                        v_LAI2,  // @sic R5s110593 ch 3 sic@
                                                                        omit, // @sic R5s110426 sic@
                                                                        f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType))))); // @sic R5s110176 sic@
      
   f_EUTRA_CellInfo_SetGuti(eutra_CellB, v_Guti_Params); // @sic R5s110593 ch 3 sic@
  } // end function fl_TC_9_2_3_1_9a_Body

  function f_TC_9_2_3_1_13_EUTRA() runs on EUTRA_PTC
  { /* Normal tracking area update / rejected / UE identity cannot be derived by the network */

    var template (value) CellPowerList_Type v_CellPowerList;
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN , c3);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def( eutra_CellB );
    
    f_UT_ConfigureEPSAttach (UT); // @sic R5-103811 sic@
    
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@

    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_1_13_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellB, E2_T3440, EPS_Only); // @sic R5s110176, R5s110007 sic@
    
  } // function f_TC_9_2_3_1_13_EUTRA

  function fl_TC_9_2_3_1_13_Body() runs on EUTRA_PTC
  {
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var NAS_MSG_Indication_Type v_NasInd;
    var SRB_COMMON_IND v_ReceivedAsp;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only); // @sic R5s110176 sic@
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(EPS_Only); // @sic R5s110176 sic@
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only); // @sic R5s110176 sic@
    var template (present) NAS_UL_Message_Type v_AttachReq := cdr_ATTACH_REQUEST_IMSIonly (v_AttachType, v_AdditionalUpdateType);
    var template (value) CellPowerList_Type v_CellPowerList;

    timer t_WaitforAttach := f_EUTRA_SetTimerToleranceMax( eutra_CellB, nonProtocolTimer, 1.0); // @sic R5-106114 sic@
    
    v_AttachReq.aTTACH_REQUEST.oldPtmsiSignature := omit; // prose says this is not present either
    
    //@siclog "Step 1" siclog@
    //+   Set the cell type of cell A to the "Non-Suitable cell". Set the cell type of cell B to the "Serving cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellB, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@
    
    //@siclog "Step 2" siclog@
    //+   The UE transmits a TRACKING AREA UPDATE REQUEST on Cell B.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGutiPTMSISig(v_UpdateType,
                                                                                                 f_EUTRA_SecurityKSIasme_Get(),
                                                                                                 cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                 v_AdditionalUpdateType,
                                                                                                 f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                                 *)));
    
    //@siclog "Step 3" siclog@
    //+  The SS transmits a TRACKING AREA UPDATE REJECT message
    //   with EMM cause = "UE identity can not be derived by the network".
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_EmmCause_UEIdentityNotDerived))));
    
    t_WaitforAttach.start; // @sic R5-106114 sic@
    alt {
      []  SRB.receive(car_SRB1_NasPdu_IND(eutra_CellB,
                                             cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                               v_AttachReq,
                                                                               cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, f_GetPdnType()))))
            -> value v_ReceivedAsp
          {
            v_NasInd := v_ReceivedAsp.Signalling.Nas[0];
            t_WaitforAttach.stop;
            f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "step 5");
          }
      [] t_WaitforAttach.timeout
        {
          //@siclog "Step 4" siclog@
          //+   The SS releases the RRC connection.
          f_EUTRA_RRC_ConnectionRelease(eutra_CellB);   /* @sic R5-110803 change 13 sic@ */
          //@siclog "Step 4a1" siclog@
          //+   IF not pc_Automatic_EPS_Re_Attach, Attach is triggered by AT command.
          if (not pc_Automatic_EPS_Re_Attach) { // @sic R5-110777 sic@ @sic R5-121541 sic@
            f_UT_TriggerAttach (UT);
          }

          //Check: Does the UE transmit an ATTACH REQUEST message?
          //@siclog "Step 5" siclog@
          //@sic R5-112625 sic@
          v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                                     tsc_RRC_TI_Def,
                                                     cr_EstablishmentCause_Any,
                                                     cr_NAS_IndicationWithPiggybacking(tsc_SHT_NoSecurityProtection,
                                                                                       v_AttachReq,
                                                                                       cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, f_GetPdnType())));  /* @sic R5-120721 change 3 sic@ */
        }
    }
    //@siclog "Step 6 - 17" siclog@
    f_EUTRA_IdleUpdated_Step5_17(eutra_CellB, STATE2_IDLEUPDATE, EPS_Only, v_NasInd, false); // @sic R5s110395 sic@

  } // function fl_TC_9_2_3_1_13_Body

  function f_TC_9_2_3_1_14_EUTRA() runs on EUTRA_PTC
  { /* Normal tracking area update / rejected / UE implicitly detached */

    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c3);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    
    f_UT_ConfigureEPSAttach (UT); // @sic R5-103811 sic@
    
    // Preamble:
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_1_14_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellB, E2_CONNECTED, EPS_Only); // @sic R5s110176 sic@

  } // function f_TC_2_9_3_1_14_EUTRA

  function fl_TC_9_2_3_1_14_Body() runs on EUTRA_PTC
  {
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var NAS_MSG_Indication_Type v_NasInd;
    var SRB_COMMON_IND v_ReceivedAsp;
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only); // @sic R5s110176 sic@
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(EPS_Only); // @sic R5s110176 sic@
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only); // @sic R5s110176 sic@
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity);
    var TrackingAreaCode v_Tac := f_EUTRA_CellInfo_GetTAC ( eutra_CellA );
    var template (present) NAS_UL_Message_Type v_ATTACH_REQUEST;
    var template (present) NAS_UL_Message_Type v_PDN_CONNECTIVITY_REQUEST;
    var template (value) CellPowerList_Type v_CellPowerList;
    timer t_WaitforAttach := f_EUTRA_SetTimerToleranceMax( eutra_CellB, nonProtocolTimer, 1.0); // @sic R5s100876 sic@
    
    
    //@siclog "Step 1" siclog@
    //+   Set the cell type of cell A to the "Non-Suitable cell". Set the cell type of cell B to the "Serving cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellB, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@
 
    //@siclog "Step 2" siclog@
    //+  The UE transmits a TRACKING AREA UPDATE REQUEST on Cell B.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request (v_UpdateType, //@sic R5s110150 sic@
                                                                                     f_EUTRA_SecurityKSIasme_Get(),
                                                                                 cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                 v_AdditionalUpdateType)));
    
    //@siclog "Step 3" siclog@
    //+  The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause = "UE implicitly detached" as specified.
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_EmmCause_ImplicitlyDetached))));
    
    //@siclog "Step 4" siclog@
    v_ATTACH_REQUEST := cdr_ATTACH_REQUEST_WithGuti(v_AttachType,    //@sic R5s110150 sic@
                                                    v_AdditionalUpdateType,
                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                    f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                    cr_TAI(v_PLMN, bit2oct(v_Tac)));
 
    v_PDN_CONNECTIVITY_REQUEST := cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, f_GetPdnType());
    t_WaitforAttach.start; // @sic R5s100876 sic@
    alt {
      [] SRB.receive(car_SRB1_NasPdu_IND(eutra_CellB,
                                         cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected, // @sic R5s110168 change 2.7 sic@
                                                                           v_ATTACH_REQUEST,
                                                                           v_PDN_CONNECTIVITY_REQUEST))) -> value v_ReceivedAsp
        {
          v_NasInd := v_ReceivedAsp.Signalling.Nas[0];
          t_WaitforAttach.stop;
          f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "step 4");
        }
      [] t_WaitforAttach.timeout
        {
          //@siclog "Step 3a1" siclog@
          //+   The SS releases the RRC connection.
          f_EUTRA_RRC_ConnectionRelease(eutra_CellB);   /* @sic R5-110803 change 13 sic@ */
          //@siclog "Step 3a2" siclog@
          //+   IF not pc_Automatic_EPS_Re_Attach, Attach is triggered by AT command.
          if (not pc_Automatic_EPS_Re_Attach) { // @sic R5-110776 sic@ @sic R5-121541 sic@
            f_UT_TriggerAttach (UT);
          }
          
          //Check: Does the UE transmit an ATTACH REQUEST message?
          //@siclog "Step 4" siclog@
          //@sic R5-112625 sic@
          v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                                     tsc_RRC_TI_Def,
                                                     cr_EstablishmentCause_Any,
                                                     cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected, // @sic R5s110168 change 2.7 sic@
                                                                                       v_ATTACH_REQUEST,
                                                                                       v_PDN_CONNECTIVITY_REQUEST));  /* @sic R5-120721 change 3 sic@ */
          f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "step 4");
        }
    }
    
    //@siclog "Step 5 - 16" siclog@
    f_EUTRA_IdleUpdated_Step5_17(eutra_CellB, STATE2_IDLEUPDATE, EPS_Only, v_NasInd, false); // @sic R5s110395 sic@
    
  } // function fl_TC_9_2_3_1_14_Body

  function f_TC_9_2_3_1_16_EUTRA() runs on EUTRA_PTC
  { /* Normal tracking area update / rejected / Tracking area not allowed */
    // @sic R5s110024, R5-110877 sic@
    var template (value) CellPowerList_Type v_CellPowerList;

    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c1);  // @sic R5-115628 sic@ @sic R5s120291 sic@
    f_EUTRA_CellInfo_SetPLMN_1Entry ( eutra_CellC, cs_HPLMN_001_02 );  // @sic R5s120053_r1 sic@
 
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellB);
    f_EUTRA_CellConfig_Def( eutra_CellA );
    f_EUTRA_CellConfig_Def( eutra_CellC ); // @sic R5-115628 sic@
    f_EUTRA_CellConfig_SRBs_Only( eutra_CellM );

    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE), // @sic R5-110877 sic@
      cs_CellPower(eutra_CellB, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellC, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellM, tsc_NonSuitableOffCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@

    f_UT_ConfigureEPSAttach (UT); // @sic R5-103811 sic@
    
    // Preamble: UE is in state Registered, Idle Mode (state 2)
    // ==========================================================================
    f_EUTRA_Preamble(eutra_CellB, STATE2_IDLEUPDATE, EPS_Only); // @sic R5s110176 sic@
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_1_16_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E4_DEREGISTERED, EPS_Only); // @sic R5s110176 sic@
  } // function f_TC_9_2_3_1_16_EUTRA

  function fl_TC_9_2_3_1_16_Body() runs on EUTRA_PTC
  {
    const EPS_BearerIdentity tsc_EpsBearerId := '5'H;
    var ProcedureTransactionIdentifier v_EPS_TI  := '01'O;
    var template (omit) AccessPointName v_APN := omit;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    
    // ==========================================================================
    // initialize component specific data structures
    // ==========================================================================
    // get all data which are required for a GUTI
    var GutiParameters_Type v_GutiC_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellC);
    var GutiParameters_Type v_GutiB_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellB);
    var EUTRA_SecurityParams_Type v_SecurityParams := f_EUTRA_Security_Get();
    var boolean v_EIT_Flag := false;
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;
    var template (value) CellPowerList_Type v_CellPowerList;
    var NAS_PlmnId v_PLMN_CellC := f_Asn2Nas_PlmnId (v_GutiC_Params.PLMN_Identity);
    var TrackingAreaCode v_Tac_CellC := f_EUTRA_CellInfo_GetTAC ( eutra_CellC );
    var template (value) TrackingAreaIdList v_TaiList := cs_TAIListNonConsecutive_lv( v_PLMN_CellC, { bit2oct( v_Tac_CellC ) } );
    var NAS_MSG_Indication_Type v_NasInd;
    var template (omit) ProtocolConfigOptions v_Pco; // @sic R5s120216 sic@
    var boolean v_IPallocationViaNasFlag;
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(EPS_Only); // @sic R5s110176 sic@
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only); // @sic R5s110176 sic@
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only); // @sic R5s110176 sic@
           
    //@siclog "Step 1" siclog@
    //+   Set the cell type of cell A to "Serving cell".Set the cell type of cell B to "Non-Suitable cell".
    //    Set the cell type of cell C to "Suitable neighbour intra-frequency cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE )  // @sic R5-115628 sic@ @sic R5s120053 sic@
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 2" siclog@
    //+   The UE transmits a TRACKING AREA UPDATE REQUEST on Cell A.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGutiPTMSISig(v_UpdateType,
                                                                                                 f_EUTRA_SecurityKSIasme_Get(),
                                                                                                 cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                 v_AdditionalUpdateType,
                                                                                                 f_GutiParameters2MobileIdentity(omit, v_GutiB_Params),
                                                                                                 *))); // @sic R5s110317 sic@
    
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    
    //@siclog "Step 3" siclog@
    //+   The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause = "Tracking area not allowed" as specified.
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_Cause_TA_NotAllowed ))));
    
    //@siclog "Step 4" siclog@
    //+   The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //@siclog "Step 5" siclog@
    //+   Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds on cell C? (1,F);  @sic R5-110877 sic@
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellC, 90.0);  // @sic R5-115628 sic@
    
    //@siclog "Step 5A" siclog@ // @sic R5-110877 sic@
    //+   Set the cell type of cell B to "Non-Suitable off cell".
    //    Set the cell type of cell M to "Non-Suitable cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellB, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellM, tsc_NonSuitableCellRS_EPRE )
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );

    //@siclog "Step 6" siclog@
    //+  The user initiates an attach by MMI or by AT command.
    f_UT_TriggerAttach(UT);
    
    //@siclog "Step 7" siclog@
    //+   Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds on cell A? (1,F);  @sic R5-110877 sic@
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellA, 90.0);
    
    //@siclog "Step 8" siclog@
    //+ Set the cell type of cell A to "non-suitable cell ".
    //+ Set the cell type of cell M to "serving cell". // @sic R5-110877 sic@
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellM, tsc_ServingCellRS_EPRE )
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 9" siclog@
    //+   Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds on cell M? (3,F);  @sic R5-110877 sic@
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellM, 90.0);
    
    //@siclog "Step 10" siclog@
    //+   Set the cell type of cell C to the "Serving cell". Set the cell type of cell M to the "Non-Suitable cell "

    v_CellPowerList := {
      cs_CellPower(eutra_CellC, tsc_ServingCellRS_EPRE), // @sic R5-115628 sic@
      cs_CellPower(eutra_CellM, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@
 
    //@siclog "Step 11" siclog@
    //+  Check: Does the UE transmit an ATTACH REQUEST message on cell C?[4 P]; @sic R5-110877 sic@
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellC, // @sic R5-115628 sic@
                                              tsc_RRC_TI_Def,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking (tsc_SHT_NoSecurityProtection,
                                                                               cdr_ATTACH_REQUEST_WithOldMobileIdNoTAI(v_AttachType,
                                                                                                                       v_AdditionalUpdateType,
                                                                                                                       f_Imsi2MobileIdentity(px_IMSI_Def)) ,                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                       f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "step 11");

    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    v_EIT_Flag := f_CheckEsmInfoTransferFlag(v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST);
    v_Pco := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    
    //@siclog "Step 12 - 15" siclog@
    //+  The SS starts an authentication procedure
    //+  The UE responds properly to the authentication procedure
    //+  The SS starts a NAS security mode command procedure to perform NAS integrity protection.
    //+   The UE responds properly to the NAS security mode command procedure
    v_APN := f_EUTRA_Authentication_NAS_AS_Security (eutra_CellC,  v_EIT_Flag, v_EPS_TI, false);
    
    //@siclog "Step 16" siclog@
    //+  The SS sends ATTACH ACCEPT message with the ACTIVATE DEFAULT EPS BEARER CONTEXT REQUEST message.
    v_IPallocationViaNasFlag :=  f_CheckPCOforIPallocationViaNas (v_Pco); // See TS 36.508 v.8.2.2 Table 4.7.3-6
    f_EUTRA_RRCConnectionReconfigurationWithAttachAcceptAllParams(eutra_CellC,
                                                                  tsc_EpsBearerId,
                                                                  v_RRC_TI,
                                                                  v_EPS_TI,
                                                                  tsc_EAttachType_EpsOnly,
                                                                  f_EUTRA_GetPDNAddress(v_IPallocationViaNasFlag),
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_GutiC_Params),
                                                                  v_TaiList,
                                                                  omit,
                                                                  omit,
                                                                  omit,
                                                                  v_APN,
                                                                  f_GetDefPCOforPCSCFAddress (v_Pco), // @sic R5-104703 sic@
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType,
                                                                                              EPS_Only)); // @sic R5s110176 sic@
    
    //@siclog "Step 17" siclog@
    //+   The UE transmits an ATTACH COMPLETE message.
    f_EUTRA_NAS_AttachComplete(eutra_CellC, tsc_EpsBearerId);
    
    //@siclog "Step 18" siclog@
    //+ The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellC);
    
    //@siclog "Step 19" siclog@
    //+  The UE is switched off.
    //@siclog "Step 20" siclog@
    //+  The UE transmit a DETACH REQUEST.
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellC, RRC_IDLE, -, EPS_Only); // @sic R5s110176 sic@
    
    ///@siclog "Step 21" siclog@
    //+ The following messages are sent and shall be received on cell A.
    //@siclog "Step 22" siclog@
    //+  Set the cell type of cell A to the " Serving cell". Set the cell type of cell G to the " Non-Suitable cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellC, tsc_NonSuitableCellRS_EPRE)  // @sic R5-115628 sic@
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@
    
    //@siclog "Step 23" siclog@
    //+   The UE is powered up or switched on.
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@

    v_SecurityParams := f_EUTRA_Security_Get();

    //@siclog "Step 24" siclog@
    //  The UE transmits ATTACH REQUEST message with a PDN CONNECTIVITY REQUEST message to request PDN connectivity to the default PDN. (5,P)
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                              tsc_RRC_TI_Def,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                cdr_ATTACH_REQUEST_WithGuti(
                                                                                                            v_AttachType,
                                                                                                            v_AdditionalUpdateType,
                                                                                                            v_SecurityParams.KSIasme,
                                                                                                            f_GutiParameters2MobileIdentity(omit, v_GutiC_Params),
                                                                                                            cr_TAI( v_PLMN_CellC, bit2oct(v_Tac_CellC))),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 24");
    
    //@siclog "Step 25 - 36" siclog@
    f_EUTRA_IdleUpdated_Step5_17(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only, v_NasInd, false); //@sic R5-110877, R5s110395 sic@
  } // function fl_TC_9_2_3_1_16_Body

  function f_TC_9_2_3_1_19_EUTRA() runs on EUTRA_PTC
  { /*  Normal tracking area update / Rejected / No suitable cells in tracking Area */
    // @sic R5s100858, R5-110877 sic@

    var template (value) CellPowerList_Type v_CellPowerList;
    
    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c1);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    if (px_SinglePLMN_Tested == MultiPLMN) { // @sic R5-113681 sic@
      f_EUTRA_CellConfig_SRBs_Only(eutra_CellG);
    }
    
    f_UT_ConfigureEPSAttach (UT); // @sic R5-103811 sic@
    
    // Go to state 2
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only); // @sic R5s110176 sic@
    
    // The SS pre-configures Cell A as the "serving cell", Cells B, and, if present, G as "Non-Suitable cell"
    if (px_SinglePLMN_Tested == MultiPLMN) { // @sic R5-113681 sic@
      v_CellPowerList := {
        cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE ),
        cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),
        cs_CellPower ( eutra_CellG, tsc_NonSuitableCellRS_EPRE )
      };
    } else {
      v_CellPowerList := {
        cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE ),
        cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE )
      };
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_1_19_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E2_T3440, EPS_Only); // @sic R5s110176, R5s110007 sic@

  } // end f_TC_9_2_3_1_19_EUTRA

  function fl_TC_9_2_3_1_19_Body() runs on EUTRA_PTC
  { // @sic R5s100858, R5-110877 sic@
  
    var template (value) CellPowerList_Type v_CellPowerList;
    var NAS_MSG_Indication_Type v_NasInd;
    var GutiParameters_Type v_Guti_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (v_Guti_Params.PLMN_Identity);
    var TrackingAreaCode v_Tac := f_EUTRA_CellInfo_GetTAC ( eutra_CellA );
    var NAS_Lac v_LAC := f_EUTRA_CellInfo_GetLocationAreaCode ( eutra_CellA );
    var template (omit) LocAreaId v_LAI := f_GetLAI ( v_PLMN, v_LAC, EPS_Only); // @sic R5s110176 sic@
    var template (omit) MobileIdentity v_MSId := f_GetMSId (EPS_Only); // @sic R5s110176 sic@
    var template (value) TrackingAreaIdList v_TaiList := cds_TAIListNonConsecutive_tlv ( v_PLMN, { bit2oct(v_Tac) } );
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only); // @sic R5s110176 sic@
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(EPS_Only); // @sic R5s110176 sic@
    
    //@siclog "Step 1" siclog@
    // Set the cell type of cell A to "non-suitable cell"
    // Set the cell type of cell B to "serving cell".
    // If present, set the cell type of cell G to "serving cell".
    if (px_SinglePLMN_Tested == MultiPLMN) { // @sic R5-113681 sic@
      v_CellPowerList := {
        cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
        cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE ),
        cs_CellPower ( eutra_CellG, tsc_ServingCellRS_EPRE )
      };
    } else {
      v_CellPowerList := {
        cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
        cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE )
      };
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
       
    //@siclog "Step 2" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST on Cell B.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(v_UpdateType,
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType )));
    
    //@siclog "Step 3" siclog@
    // The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause set to
    // "No suitable cells in tracking area"
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_Cause_NoSuitableCells))));
    
    //  The SS releases the RRC connection
    //@siclog "Step 4" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
    
    //@siclog "Step 4A" siclog@
    // Set the cell type of Cell A to the " Serving cell ". Set the cell type of Cell B to the "Suitable neighbour Intra Frequency cell".
    v_CellPowerList := {  // @sic R5-120627 sic@
      cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE) // @sic R5-120627 sic@
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);

    //@siclog "Step 5" siclog@
    // Check: Does the UE send TRACKING AREA UPDATE REQUEST message?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(v_UpdateType,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_Guti_Params),
                                                                                         cr_TAI_Any)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 5");
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    
    // The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    //@siclog "Step 6" siclog@
    SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request ( tsc_SHT_IntegrityProtected_Ciphered,
                                                      cs_508_TAU_Accept ( v_UpdateType,
                                                                          f_GutiParameters2MobileIdentity (tsc_IEI_Guti, v_Guti_Params ),
                                                                          v_TaiList,
                                                                          v_EpsBearerCtxtStatus,
                                                                          v_LAI,
                                                                          v_MSId,
                                                                          f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType,
                                                                                                      EPS_Only))))); // @sic R5s110176 sic@
    
    //The UE transmits a TRACKING AREA UPDATE COMPLETE message.
    //@siclog "Step 7" siclog@
    SRB.receive ( car_SRB1_NasPdu_IND ( eutra_CellA,
                                        cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_TAU_Complete ) ) );
  }// end function fl_TC_9_2_3_1_19_Body

  function f_TC_9_2_3_1_20_EUTRA() runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList;
    var CSG_Identity v_CSG_Identity_CellB := '000000000000000000000000010'B;
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);
    
    // create cells
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    f_EUTRA_CellConfig_Def(eutra_CellD);
    
    f_UT_ConfigureEPSAttach (UT);

    // delete the UE's CSG whitelist, supported per test case selection expression
    f_EUTRA_EmptyCSG_AllowedList (eutra_CellB, EPS_Only); // @sic R5s120480 sic@

    // modify system information for the CSG cell
    //Set system information combination 7 in cell B
    f_EUTRA_ChangeSysinfoCombination (eutra_CellB, c7);
    //Set system information 1 cell B
    f_EUTRA_CellInfo_SetSysInfo_Csg_Ind(eutra_CellB, true);
    f_EUTRA_CellInfo_SetSysInfo_Csg_Id(eutra_CellB, v_CSG_Identity_CellB);
    //Set system information 4 cell B
    f_EUTRA_SetSIB4_CSG_Def (eutra_CellB);
    // make the modified system information become active
    f_EUTRA_SS_ConfigureSysinfo (eutra_CellB); // @sic R5s120326 sic@

    f_EUTRA_Manual_CSG_Selection (eutra_CellB, v_CSG_Identity_CellB, EPS_Only); // @sic R5s120480 sic@ UE registers on cell B using manual CSG selection
    
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellD, tsc_NonSuitableOffCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );

    // Preamble: UE is in state Registered, Idle Mode (state 2) on Cell A
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only);
    // Now turn other cells back on, before starting the test body

    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_1_20_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    
    f_EUTRA_Postamble(eutra_CellB, E4_DEREGISTERED,EPS_Only); // @sic R5s120298 sic@ @sic R5s120480 sic@
  } // function f_TC_9_2_3_1_20_EUTRA

  function fl_TC_9_2_3_1_20_Body() runs on EUTRA_PTC
  {
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var NAS_PlmnId v_HomePlmn:= f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity);
    var GutiParameters_Type v_Guti2_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellD);
    var template (omit) MobileIdentity v_MsId := f_GetMSId (EPS_Only);
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(EPS_Only);
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;
    var template (value) CellPowerList_Type v_CellPowerList;
    var NAS_MSG_Indication_Type v_NasInd;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (EPS_Only);
    var template PTMSI_Signature v_PTMSISignature := omit;
    var float v_TimerValue := 30.0;
    
    // ==========================================================================
    //@siclog "Step 1" siclog@
    //+   Set the cell type of cell A to the "Non-Suitable cell".
    //+   Set the cell type of cell C to the "Serving cell"
    //+   Cell D as a "Not Suitable 'Off' cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 2" siclog@
    //+   UE transmit a TRACKING AREA UPDATE REQUEST message
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGutiPTMSISig(v_UpdateType,
                                                                                                 f_EUTRA_SecurityKSIasme_Get(),
                                                                                                 cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                 v_AdditionalUpdateType,
                                                                                                 f_GutiParameters2MobileIdentity(omit, v_Guti1_Params), //GUTI-1
                                                                                                 v_PTMSISignature)));
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    
    //@siclog "Step 3" siclog@
    //+   The SS transmits an TRACKING AREA UPDATE REJECT message with EMM cause = "Not authorized for this CSG" with integrity protection.
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_Cause_NotAuthorizedCSG ))));
    
    
    //@siclog "Step 4" siclog@
    //+   The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
 
    //@siclog "Step 5" siclog@
    //+ Check: Does the UE transmit an TRACKING AREA UPDATE REQUEST message on Cell B in the next 30 seconds? (F)
    if (f_EUTRA_RRC_RRCConnectionRequest_Check(eutra_CellB, v_TimerValue)) {
      // even though prose says TRACKING AREA UPDATE REQUEST, as soon as UE sends RRC ConnReq, we know something is wrong
      f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step5: TAU Request received");
    }
    
    //@siclog "Step 6" siclog@
    //+   The SS configures:
    //+  - Cell A as a "Not Suitable 'Off' cell".
    //+  - Cell B as a "Not Suitable cell".
    //+  - Cell D as a "Suitable cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellD, tsc_SuitableCellRS_EPRE )
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 7" siclog@
    //+   Check: Does the UE transmits a TRACKING AREA UPDATE REQUEST message on Cell D.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellD,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGutiPTMSISig(v_UpdateType,
                                                                                                 f_EUTRA_SecurityKSIasme_Get(),
                                                                                                 cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                 v_AdditionalUpdateType,
                                                                                                 f_GutiParameters2MobileIdentity(omit, v_Guti1_Params), //GUTI-1
                                                                                                 v_PTMSISignature)));
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    
    //@siclog "Step 8" siclog@
    //+   The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellD,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(v_UpdateType,
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti2_Params),
                                                                  cds_TAIListNonConsecutive_tlv(v_HomePlmn, // Cell D is using the same PLMN ID as Cell A
                                                                                                { '0004'O }), // TAC4=4
                                                                  v_EpsBearerCtxtStatus,
                                                                  f_EUTRA_GetCellLAI(eutra_CellD, EPS_Only),
                                                                  v_MsId,
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType,
                                                                                              EPS_Only)))));
    
    //@siclog "Step 9" siclog@
    //+   The UE transmits a TRACKING AREA UPDATE COMPLETE message on Cell D.
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellD,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    
    //@siclog "Step 9A" siclog@
    //+   The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellD);
    
    //@siclog "Step 10" siclog@
    //+   The SS configures:
    //+   - Cell A as a "Not Suitable off cell".
    //+   - Cell B as a "Serving cell".
    //+   - Cell D as a "Not Suitable cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellD, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 11" siclog@
    //+   Check: Does the UE transmit an TRACKING AREA UPDATE REQUEST message in the next 30 seconds on Cell B?[1,F]
    if (f_EUTRA_RRC_RRCConnectionRequest_Check(eutra_CellB, v_TimerValue)) {
      // even though prose says TRACKING AREA UPDATE REQUEST, as soon as UE sends RRC ConnReq, we know something is wrong
      f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step5: TAU Request received");
    }
  } // function fl_TC_9_2_3_1_20_Body

  function f_TC_9_2_3_1_22_EUTRA() runs on EUTRA_PTC
  { // @sic R5-113836 sic@ @sic R5s110566 sic@
    //  create cell and send out system information
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);

    // Configure Cell A for access baring
    f_EUTRA_CellInfo_SetSysInfo_AccessBarring ( eutra_CellA, // @sic R5s110596 ch 6 sic@
                                                cs_AccessBarringInformation_TemporaryBarring );
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    f_EUTRA_CellConfig_Def(eutra_CellD); // @sic R5-113836 sic@
    
    //  Go to state 2
    f_EUTRA_Preamble(eutra_CellB, STATE2_IDLEUPDATE);
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_1_22_Body();
    
    //  Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellD, E2_T3440);
  }// end function f_TC_9_2_3_1_22_EUTRA

  function fl_TC_9_2_3_1_22_Body() runs on EUTRA_PTC
  { /* @sic R5-113836 sic@ @sic R5s110566 sic@ */
     
    var template (value) CellPowerList_Type v_CellPowerList;
    var NAS_MSG_Indication_Type v_NasInd;
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var GutiParameters_Type v_Guti2_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellD);
    var NAS_PlmnId v_PLMN_cellA := f_Asn2Nas_PlmnId (v_Guti1_Params.PLMN_Identity);
    var NAS_PlmnId v_PLMN_cellD := f_Asn2Nas_PlmnId (v_Guti2_Params.PLMN_Identity);
    var NAS_Lac v_LAC_1 := f_EUTRA_CellInfo_GetLocationAreaCode(eutra_CellA);
    var NAS_Lac v_LAC_2 := f_EUTRA_CellInfo_GetLocationAreaCode(eutra_CellD);
    var template (omit) LocAreaId v_LAI_cellA := f_GetLAI ( v_PLMN_cellA, v_LAC_1, NORMAL);
    var template (omit) LocAreaId v_LAI_cellD := f_GetLAI ( v_PLMN_cellD, v_LAC_2, NORMAL);
    var template (omit) MobileIdentity v_MSId := f_GetMSId (NORMAL);
    var TrackingAreaCode v_Tac_1 := f_EUTRA_CellInfo_GetTAC ( eutra_CellA );
    var TrackingAreaCode v_Tac_2 := f_EUTRA_CellInfo_GetTAC ( eutra_CellD );
    var template (value) TrackingAreaIdList v_TaiList_cellA := cds_TAIListNonConsecutive_tlv ( v_PLMN_cellA, { bit2oct(v_Tac_1) } );
    var template (value) TrackingAreaIdList v_TaiList_cellD := cds_TAIListNonConsecutive_tlv ( v_PLMN_cellD, { bit2oct(v_Tac_2) } );
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (NORMAL);
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(NORMAL);
    
    //   @siclog "Step 1" siclog@
    // The SS sets the cell type of cell A to the "Serving cell",
    // sets the cell type of cell B to the " Non- Suitable cell",
    // and sets SystemInformationBlockType2 parameters as described below.
    v_CellPowerList := {
      cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE )
    };
    f_Delay (5.0); // @sic R5s120274 sic@
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    // Access baring in step 1 is already done in preamble to avoid waiting for Sys info modification to happen
    
    //The following messages are to be observed on Cell A unless explicitly stated otherwise.
    
    //  @siclog "Step 2" siclog@
    //Check: for 5 seconds if UE initiates the tracking area updating procedure on cell A?
    if (f_EUTRA_RRC_RRCConnectionRequest_Check(eutra_CellA, 60.0)) { // @sic R5s110776 sic@ */
      f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 2");
    }
    
    //  @siclog "Step 3 - 4" siclog@
    //+ The SS transmits a Paging message including systemInfoModification.
    //+ The SS changes SystemInformationBlockType2 parameters to default parameters defined in TS 36.508.
    f_EUTRA_ChangeSystemInformation_ToDefault ( eutra_CellA );
    f_EUTRA_ModifySysinfo ( eutra_CellA );
    
    //  @siclog "Step 5" siclog@
    //  The UE transmits RRC Connection Request
    f_EUTRA_RRC_ConnectionRequest_Def(eutra_CellA);    // @sic R5-120721 change 3 sic@
    
    //  @siclog "Step 6" siclog@
    //  SS responds with RRCConnectionReject message with IE waitTime set to 10 seconds(Max Value).
    SRB.send ( cas_SRB0_RrcPdu_REQ ( eutra_CellA,
                                     cs_TimingInfo_Now,
                                     cs_RRCConnectionReject ) );
    
    //  @siclog "Step 7" siclog@
    //  Check: for 10 seconds if UE initiates the tracking area updating procedure and hence transmits RRC Connection Request?
    if (f_EUTRA_RRC_RRCConnectionRequest_Check(eutra_CellA, f_EUTRA_SetTimerToleranceMin (eutra_CellA, rrcTimer, 10.0))) {
      f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 7");
    }
    
    //  @siclog "Step 8" siclog@
    //  Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(v_UpdateType,
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 8");
    
    //  @siclog "Step 9" siclog@
    //  The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus; // Send this back in the Accept
    
    SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request ( tsc_SHT_IntegrityProtected_Ciphered,
                                                      cs_508_TAU_Accept ( v_UpdateType,
                                                                          f_GutiParameters2MobileIdentity (tsc_IEI_Guti, v_Guti1_Params ),
                                                                          v_TaiList_cellA,
                                                                          v_EpsBearerCtxtStatus,
                                                                          v_LAI_cellA,
                                                                          v_MSId,
                                                                          f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType))) ) );
    
    
    //  @siclog "Step 10" siclog@
    //  The UE sends TRACKING AREA UPDATE COMPLETE message.
    SRB.receive ( car_SRB1_NasPdu_IND ( eutra_CellA,
                                        cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_TAU_Complete ) ) );
    
    
    //  @siclog "Step 10A" siclog@
    //  The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //  @siclog "Step 11" siclog@
    //  The SS sets SystemInformationBlockType1 and SystemInformationBlockType2 parameters as described below.
    f_EUTRA_CellInfo_SetSysInfo_AccessBarring ( eutra_CellB, cs_AccessBarringInformation_TemporaryBarring );
    f_EUTRA_Cellinfo_SetSysInfo_IntraFreqRes ( eutra_CellB, allowed );
    f_EUTRA_SetSB1_ValueTag (eutra_CellB, true);
    f_EUTRA_ModifySysinfoUE_Off (eutra_CellB);
    f_Delay (10.0); // 10 seconds delay to allow the sys info modification to take place.
    
    //  @siclog "Step 12 Void" siclog@
   
    //  @siclog "Step 13" siclog@
    //  The SS sets the cell type of cell B to the "serving cell", cell A to "non-suitable off Cell" and cell D to "suitable neighbour intrafrequency Cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellD, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //  @siclog "Step 13A" siclog@
    //  Check: for 60 seconds if UE initiates the tracking area updating procedure and hence transmits RRC Connection Request?
    if (f_EUTRA_RRC_RRCConnectionRequest_Check(eutra_CellB, f_EUTRA_SetTimerToleranceMin (eutra_CellB, nonProtocolTimer, 60.0))) {   // @sic R5s120305 sic@
      f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 13A"); // @sic R5-115766 sic@
    }

    //  @siclog "Step 13B" siclog@
    //  The SS sets the cell type of cell B to "Suitable neighbour intra-frequency cell" and cell D to "serving cell"
    v_CellPowerList := {
      cs_CellPower ( eutra_CellB, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE ),
      cs_CellPower ( eutra_CellD, tsc_ServingCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );  // @sic R5-115766 sic@

    // The following messages are to be observed on Cell D unless explicitly stated otherwise.
    //  @siclog "Step 14" siclog@
    //  Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellD,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(v_UpdateType,
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 14");
    
    //  @siclog "Step 15" siclog@
    //  The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus; // Send this back in the Accept
    SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellD,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request ( tsc_SHT_IntegrityProtected_Ciphered,
                                                      cs_508_TAU_Accept ( v_UpdateType,
                                                                          f_GutiParameters2MobileIdentity (tsc_IEI_Guti, v_Guti2_Params ),
                                                                          v_TaiList_cellD,
                                                                          v_EpsBearerCtxtStatus,
                                                                          v_LAI_cellD,
                                                                          v_MSId,
                                                                          f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType))) ) ); // @sic R5-103681 sic@
    
    
     //  @siclog "Step 16" siclog@
     //  The UE sends TRACKING AREA UPDATE COMPLETE message.
    SRB.receive ( car_SRB1_NasPdu_IND ( eutra_CellD,
                                        cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_TAU_Complete ) ) );
    
  }// end function fl_tc_9_2_3_1_22_Body

  function f_TC_9_2_3_1_23_EUTRA() runs on EUTRA_PTC
  { /*  Normal tracking area update / Abnormal case / Success after several attempts due to no network response /
     *       TA belongs to TAI list and status is UPDATED / TA does not belong to TAI list or status is not UPDATED
     */
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c3);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    
    // Go to state 2 and then switch off
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE);
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE );
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_1_23_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellB, E2_T3440); // @sic R5s110007 sic@
    
  } // end f_TC_9_2_3_1_23_EUTRA

  function fl_TC_9_2_3_1_23_Body() runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList;
    var NAS_MSG_Indication_Type v_NasInd;
    var GutiParameters_Type v_GutiParams := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var GutiParameters_Type v_GutiParams_B := f_EUTRA_CellInfo_GetGuti(eutra_CellB);
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;
    var HalfOctet_Type v_EpsBearerId := tsc_EpsDefaultBearerId;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var ProcedureTransactionIdentifier v_EPS_TI := '00'O;
    var template (omit) ProtocolConfigOptions v_Pco := omit;
    var boolean v_EIT_Flag := false;
    var template (value) AccessPointName v_APN;
    var boolean v_IPallocationViaNasFlag;
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (v_GutiParams.PLMN_Identity);
    var TrackingAreaCode v_Tac := f_EUTRA_CellInfo_GetTAC ( eutra_CellA );
    var NAS_PlmnId v_PLMN_B := f_Asn2Nas_PlmnId (v_GutiParams_B.PLMN_Identity);
    var TrackingAreaCode v_Tac_B := f_EUTRA_CellInfo_GetTAC ( eutra_CellB );
    var NAS_Lac v_LAC := f_EUTRA_CellInfo_GetLocationAreaCode ( eutra_CellA );
    var template (omit) LocAreaId v_LAI := f_GetLAI ( v_PLMN, v_LAC, NORMAL); // @sic R5s110176 sic@
    var template (omit) MobileIdentity v_MSId := f_GetMSId (NORMAL); // @sic R5s110176 sic@
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(NORMAL); // @sic R5s110176 sic@
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(NORMAL); // @sic R5s110176 sic@
    var template (value) TrackingAreaIdList v_TaiList := cds_TAIListNonConsecutive_tlv ( v_PLMN, { bit2oct(v_Tac) } );
    var template (value) TrackingAreaIdList v_TaiList_B := cds_TAIListNonConsecutive_tlv ( v_PLMN_B, { bit2oct(v_Tac_B) } );
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType ();
    var boolean v_RrcMsgReceived := false;
    var boolean v_DataPduReceived := false;
    var boolean v_NasMsgReceived := false;
    var boolean v_JustCheckForRRCConnectionRequest := true;
    var PDCP_SDUList_Type v_PDCP_SDUList_DRB1 := { f_IPv4IPv6_IcmpEchoReply(f_LoopbackModeB_IP_Address_UE()) };      /* @sic R5s120470 sic@ */

    var float v_T3411nominal := 10.0; // @sic R5s120483 sic@
    var float v_T3411 := f_EUTRA_SetTimerToleranceMin( eutra_CellA, nasTimer, v_T3411nominal );
    var float v_T3411tolerance := v_T3411nominal - v_T3411; // @sic R5s120483 sic@
    var float v_T3412 := f_EUTRA_SetTimerToleranceMin( eutra_CellA, nasTimer, 360.0 );
    var float v_TimerValue;
    
    timer t_T3411 := f_EUTRA_SetTimerToleranceMin( eutra_CellA, nasTimer, v_T3411nominal );
    timer t_Wait;

    
    //@siclog "Step 1" siclog@
    // Set the cell type of cell A to the "Serving cell".
    // Set the cell type of cell B to the "Suitable neighbour intra-frequency cell"
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_Suitable_NeighbourIntraFreq_CellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    
    //  The UE is powered on or switched on.
    //@siclog "Step 2" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@
    
    //  The UE transmits an ATTACH REQUEST message in cell A.
    //         The PDN CONNECTIVITY REQUEST message is piggybacked in ATTACH REQUEST message.
    //@siclog "Step 3" siclog@
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                              v_RRC_TI,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier;
    
    if (ispresent( v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions)) {
      v_Pco := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    }
    
    //@siclog "Step 4 - 8Aa2" siclog@
    //  The SS transmits an AUTHENTICATION REQUEST message to initiate the EPS authentication and AKA procedure.
    //  The UE transmits an AUTHENTICATION RESPONSE message and establishes mutual authentication.
    //  The SS transmits a NAS SECURITY MODE COMMAND message to activate NAS security.
    //  The UE transmits a NAS SECURITY MODE COMPLETE message and establishes the initial security configuration.
    //  ESM INFORMATION REQUEST / ESM INFORMATION RESPONSE
    // IF the UE sets the ESM information transfer flag in the last PDN CONNECTIVITY REQUEST message THEN the SS transmits an ESM INFORMATION
    // REQUEST message to initiate exchange of protocol configuration options and/or APN.
    // The UE transmits an ESM INFORMATION RESPONSE message to transfer protocol configuration options and/or APN.
    v_EIT_Flag := f_CheckEsmInfoTransferFlag(v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST);
    v_APN := f_EUTRA_Authentication_NAS_AS_Security (eutra_CellA, v_EIT_Flag, v_EPS_TI);
    
    // The SS activates UE radio bearer test mode.
    //@siclog "Step 8a" siclog@
    f_EUTRA_Activate_TestMode (eutra_CellA, tsc_UE_TestLoopMode_TypeB);
    
    //@siclog "Step 9" siclog@
    // The SS responds with an ATTACH ACCEPT message with the T3412 value indicating 6 min.
    // The ACTIVATE DEFAULT EPS BEARER CONTEXT REQUEST message is piggybacked in ATTACH ACCEPT message
    v_IPallocationViaNasFlag :=  f_CheckPCOforIPallocationViaNas (v_Pco);
    f_IP_ChangeEutraCell(IP, eutra_CellA);       /* @sic R5-113734 change 8 sic@ */
    f_EUTRA_RRCConnectionReconfiguration_SRB2_1AM_DRB_Est(eutra_CellA,
                                                          v_RRC_TI,
                                                          cs_NAS_RequestWithPiggybacking(tsc_SHT_IntegrityProtected_Ciphered,
                                                                                         cds_ATTACH_ACCEPT_T3412(v_AttachType, //@sic R5s110114 sic@
                                                                                                                 cs_TrackingAreaIdListDef_lv,
                                                                                                                 f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_GutiParams),
                                                                                                                 v_LAI, // @sic R5s110426 sic@
                                                                                                                 v_MSId,
                                                                                                                 omit,
                                                                                                                 f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType), // @sic R5-103681 sic@,
                                                                                                                 cs_GprsTimer_v(tsc_GprsTimerUnit_6min, '00001'B)),
                                                                                         cs_508_ActivateDefEpsBearerContextRequest(v_EpsBearerId,
                                                                                                                                   v_EPS_TI,
                                                                                                                                   v_APN,
                                                                                                                                   f_EUTRA_GetPDNAddress(v_IPallocationViaNasFlag),
                                                                                                                                   -,
                                                                                                                                   f_GetDefPCOforPCSCFAddress (v_Pco))));
    //@siclog "Step 10" siclog@
    //    The UE transmit an ATTACH COMPLETE message including an ACTIVATE DEFAULT EPS BEARER CONTEXT ACCEPT message
    //    NOTE 1: The tracking area updating attempt counter is reset.
    f_EUTRA_NAS_AttachComplete(eutra_CellA, v_EpsBearerId);
    
    //  The SS releases the RRC connection
    //@siclog "Step 11" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //  Wait for 6 min to ensure that T3412 expires
    //@siclog "Step 12" siclog@
    f_Delay(v_T3412);
    
    //@siclog "Step 13" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST message with the EPS update type value
    // set to 'Periodic updating'.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(tsc_EpsUpdate_Periodic,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_GutiParams),
                                                                                         cr_TAI(v_PLMN, tsc_TAC1))));
    
    // The SS releases the RRC connection.
    //          NOTE: The tracking area updating attempt counter is 1.
    //@siclog "Step 14" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    t_T3411.start;
    
    //@siclog "Step 15" siclog@
    // The SS pages the UE using S-TMSI with CN domain indicator set to "PS".
    f_EUTRA_UE_Page(eutra_CellA,
                    cs_NasPaging_OneRecord(cs_PagingUE_Identity_S_TMSI(v_GutiParams.MME_Code,
                                                                       v_GutiParams.M_TMSI)));
    //@siclog "Step 16" siclog@
    // Check: Does the UE transmit a SERVICE REQUEST message?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_mt_Access,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_SERVICE_REQUEST(f_EUTRA_SecurityKSIasme_Get())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 16");
    
    //@siclog "Step 17" siclog@
    // The SS transmits a SERVICE REJECT message with EMM cause set to "Congestion".
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection, cs_508_SERVICE_REJECT(tsc_Cause_Congestion))));
    
    //  The SS releases the RRC connection
    //@siclog "Step 18" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //  Wait for 10s after step 14 to ensure that T3411 expires.
    //@siclog "Step 19" siclog@
    t_T3411.timeout;
    
    // EXCEPTION: Steps 19Aa1 to 19Aa4 describes behaviour depending on UE behaviour; the "lower case letter" identifies a step sequence
    // that take place if the UE does not transmit any TRACKING AREA UPDATE REQUEST message
    if (not f_EUTRA_RRC_RRCConnectionRequest_Check(eutra_CellA, 2.0 * v_T3411tolerance, -, v_JustCheckForRRCConnectionRequest)) { // @sic R5-121747 sic@ @sic R5s120483 sic@

      //  Wait for 6 min to ensure that T3412 expires
      //@siclog "Step 19Aa1" siclog@
      f_Delay(v_T3412 - v_T3411tolerance);  // @sic R5s120483 sic@
      //@siclog "Step 19Aa2" siclog@
      // Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message with the EPS update type value set to 'Periodic updating'?
      v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                                 v_RRC_TI,
                                                 cr_EstablishmentCause_Any,
                                                 cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                   cdr_TAU_Request_OldGuti(tsc_EpsUpdate_Periodic,
                                                                                           f_EUTRA_SecurityKSIasme_Get(),
                                                                                           cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                           v_AdditionalUpdateType,
                                                                                           f_GutiParameters2MobileIdentity(omit, v_GutiParams),
                                                                                           cr_TAI(v_PLMN, tsc_TAC1))));
      //  The SS releases the RRC connection
      //@siclog "Step 19Aa3" siclog@
      f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
      //  Wait for 10s after step 19Aa3 to ensure that T3411 expires.
      //@siclog "Step 19Aa4" siclog@
      f_Delay(v_T3411);
    }
    
    //@siclog "Step 20" siclog@
    // Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message with the EPS update type value set to 'Periodic updating'?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(tsc_EpsUpdate_Periodic,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_GutiParams),
                                                                                         cr_TAI(v_PLMN, tsc_TAC1))));
    
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 20");
    
    //  The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    // NOTE: The tracking area updating attempt counter is reset.
    //@siclog "Step 21" siclog@
    SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request ( tsc_SHT_IntegrityProtected_Ciphered,
                                                      cs_508_TAU_Accept(v_UpdateType,
                                                                        omit, // Guti
                                                                        v_TaiList,
                                                                        v_EpsBearerCtxtStatus,
                                                                        v_LAI,
                                                                        omit, // @sic R5s110426 sic@
                                                                        f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)))));
    
    
    //  The SS releases the RRC connection.
    //@siclog "Step 22" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //  Generic test procedure in TS 36.508 subclause 4.5.3A.3 is performed.
    // NOTE: The UE performs the establishment of the new data radio bearer associated with
    // the default EPS bearer context
    //@siclog "Step 22A" siclog@
    f_EUTRA_RbEst_Def ( eutra_CellA );
    
    //  Generic test procedure in TS 36.508 subclause 4.5.4.3 is performed.
    // NOTE: The UE enters the UE test loop mode
    //@siclog "Step 22B" siclog@
    f_EUTRA_CloseUE_TestLoopModeB(eutra_CellA, '14'O);
    
    //  The SS transmits one IP packet to the UE on the DRB associated with
    // the default EPS bearer context.
    //@siclog "Step 22C" siclog@
    DRB.send(cas_DRB_COMMON_REQ_PDCP_SDU(eutra_CellA, tsc_RbId_DRB1, cs_TimingInfo_Now, v_PDCP_SDUList_DRB1));          /* @sic R5s120470 sic@ */
    
    //  Wait for 1 s after the IP packet has been transmitted in step 22C. (Note 1)
    //@siclog "Step 22D" siclog@
    f_Delay ( 1.0 );
    
    //  The SS releases the RRC connection.
    //@siclog "Step 22E" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    
    //@siclog "Step 23" siclog@
    // Set the cell type of Cell A to the "non-Suitable cell". Set the cell type of Cell B to the "Serving cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    
    //  The UE transmits a TRACKING AREA UPDATE REQUEST message with the EPS update type value set to 'TA updating'.
    //@siclog "Step 24" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(v_UpdateType,  // @sic R5s110426 sic@
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_GutiParams),
                                                                                         cr_TAI(v_PLMN, tsc_TAC1))));
    
    
    
    //Wait for 15s after step 24 to ensure that IP PDU delay timer expires.
    //@siclog "Step 24A" siclog@
    f_Delay ( f_EUTRA_SetTimerToleranceMin( eutra_CellB, nasTTCNTimer, 15.0 ) );
    
    //  The SS releases the RRC connection.
    //          NOTE: The tracking area updating attempt counter is 1.
    //@siclog "Step 25" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
    t_T3411.start;
    
    //@siclog "Step 26 Void" siclog@
    
    //  Check: Does the UE transmit a SERVICE REQUEST message within 5s?
    //@siclog "Step 27" siclog@
    v_TimerValue := f_EUTRA_SetTimerToleranceMax( eutra_CellB, nasTTCNTimer, 5.0 );
    if (f_EUTRA_RRC_RRCConnectionRequest_Check(eutra_CellB, v_TimerValue)) {        // @sic R5s110507 Additional Changes sic@
      // even though prose says SERVICE REQUEST, as soon as UE sends RRC ConnReq, we know something is wrong
      f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 27: Service request received");
    } else {
      f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 27");
    }
    
    //  Wait for 10s after step 25 to ensure that T3411 expires.
    //@siclog "Step 28" siclog@
    t_T3411.timeout;
    
    // Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message with the EPS update type value set to 'TA updating'?
    //@siclog "Step 29" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_AnyActiveFlag_OldGuti(v_UpdateType,  // @sic R5s110426 sic@
                                                                                                       f_EUTRA_SecurityKSIasme_Get(),
                                                                                                       cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                       v_AdditionalUpdateType,
                                                                                                       f_GutiParameters2MobileIdentity(omit, v_GutiParams),
                                                                                                       cr_TAI(v_PLMN, tsc_TAC1))));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 29");
    
    //  Activate SRB2 and DRB to be available to handle subsequent messages.
    f_EUTRA_Activate_SRB2_DRB_SendRrcMsg ( eutra_CellB,
                                           v_RRC_TI,
                                           v_NasInd.SecurityProtection.NasCount);
        
    //  The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    //@siclog "Step 30" siclog@
    //  It must be ensured that the Reconfiguration done before has been completed for SRB2 being available.
    //  Thus step 30 is performed after reception of Reconfiguation Complete.   @sic R5s120089 sic@
    //  EXCEPTION: Step 31 and Step 32a1 can occur in any order.
    //  The UE transmits a TRACKING AREA UPDATE COMPLETE message.
    //  NOTE: The tracking area updating attempt counter is reset.
    //@siclog "Step 31" siclog@
    //EXCEPTION: Step 32a1 describes behaviour that depends on UE implementation; the "lower case letter" identifies a step sequence that takes place if the UE has user data pending.
    //@siclog "Step 32a1" siclog@
    //IF the UE has user data pending THEN the UE loop backs the IP packet received in step 22C on the DRB associated with the default EPS bearer context on Cell B.
    t_Wait.start(5.0); // @sic R5-120400 sic@
    
    alt {
      [not v_NasMsgReceived] SRB.receive(car_SRB2_NasPdu_IND(eutra_CellB,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)))
        {
          v_NasMsgReceived := true;
          if (not v_DataPduReceived) { // RRC Reconfiguration Complete must have been received @sic R5s120089 sic@
            repeat;
          }
        }
      [not v_DataPduReceived] DRB.receive(car_DRB_COMMON_IND_PDCP_SDUList(eutra_CellB, tsc_RbId_DRB1, ?, v_PDCP_SDUList_DRB1))       /* @sic R5s120470 sic@ */
        {
          v_DataPduReceived := true;
          if (not v_RrcMsgReceived or not v_NasMsgReceived) {
            repeat;
          }
        }
      [not v_RrcMsgReceived] SRB.receive ( car_SRB1_RrcPdu_IND ( eutra_CellB,
                                                                 cr_508_RRCConnectionReconfigurationComplete ( tsc_RRC_TI_Def ) ) )
        {
          v_RrcMsgReceived := true;
          //  The SS transmits a TRACKING AREA UPDATE ACCEPT message. @sic R5s120089 sic@
          //@siclog "Step 30" siclog@
          v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus; // Send this back in the Accept
          SRB.send ( cas_SRB2_NasPdu_REQ ( eutra_CellB,
                                           cs_TimingInfo_Now,
                                           cs_NAS_Request ( tsc_SHT_IntegrityProtected_Ciphered,
                                                            cs_508_TAU_Accept ( v_UpdateType,
                                                                                f_GutiParameters2MobileIdentity (tsc_IEI_Guti, v_GutiParams_B ),
                                                                                v_TaiList_B,
                                                                                v_EpsBearerCtxtStatus,
                                                                                v_LAI,
                                                                                v_MSId,
                                                                                f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType))) ) ); // @sic R5-103681 sic@
          if (not v_DataPduReceived or not v_NasMsgReceived) {
            repeat;
          }
        }
      [] t_Wait.timeout
        {
          if (not v_RrcMsgReceived or not v_NasMsgReceived) {
            f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 32a1");
          }
        }
    }
    t_Wait.stop;
    
  }// end function fl_TC_9_2_3_1_23_Body

  function f_TC_9_2_3_1_25_EUTRA() runs on EUTRA_PTC
  { /*  Normal tracking area update / Abnormal case / Failure after 5 attempts due to no network response */
    // @sic R5s110028 sic@

    f_EUTRA_NAS_Init(LTE_CellsOnDifferentPLMN, c1);
    f_EUTRA_CellInfo_SetPLMN_1Entry(eutra_CellC, cs_HPLMN_001_02 );
    f_EUTRA_CellInfo_SetTAC(eutra_CellC, oct2bit('0007'O)); // @sic R5-121742 sic@
 
 // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    f_EUTRA_CellConfig_Def(eutra_CellC);  // @sic R5-121742 sic@

    f_UT_ConfigureEPSAttach (UT); // @sic R5-112569 sic@
    
    // Go to state 2 and then switch off
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, EPS_Only);  // @sic R5s120264 sic@
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellA, RRC_IDLE, -, EPS_Only);  // @sic R5s120264 sic@
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_1_25_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellC, E2_T3440, EPS_Only); // @sic R5s110007 sic@ @sic R5s120264 sic@ @sic R5-121742 sic@
    
  } // end f_TC_9_2_3_1_25_EUTRA

  function fl_TC_9_2_3_1_25_Body() runs on EUTRA_PTC
  { // @sic R5s110028 sic@
  
    var template (value) CellPowerList_Type v_CellPowerList;
    var NAS_MSG_Indication_Type v_NasInd;
    var GutiParameters_Type v_GutiParams := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var GutiParameters_Type v_GutiParams_C := f_EUTRA_CellInfo_GetGuti(eutra_CellC);
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;
    var HalfOctet_Type v_EpsBearerId := tsc_EpsDefaultBearerId;
    var ProcedureTransactionIdentifier v_EPS_TI := '00'O;
    var template (omit) ProtocolConfigOptions v_Pco := omit;
    var boolean v_EIT_Flag := false;
    var template (value) AccessPointName v_APN;
    var boolean v_IPallocationViaNasFlag;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (v_GutiParams.PLMN_Identity);
    var NAS_PlmnId v_PLMN_C := f_Asn2Nas_PlmnId (v_GutiParams_C.PLMN_Identity);
    var TrackingAreaCode v_Tac := f_EUTRA_CellInfo_GetTAC ( eutra_CellA );
    var TrackingAreaCode v_Tac_C := f_EUTRA_CellInfo_GetTAC ( eutra_CellC );
    var template (omit) MobileIdentity v_MSId := f_GetMSId (EPS_Only); // @sic R5s110176 sic@ @sic R5s120264 sic@
    var template (value) TrackingAreaIdList v_TaiList := cds_TAIListNonConsecutive_tlv ( v_PLMN, { bit2oct(v_Tac) } );
    var template (value) TrackingAreaIdList v_TaiList_C := cds_TAIListNonConsecutive_tlv ( v_PLMN_C, { bit2oct(v_Tac_C) } );
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType ();
    var NAS_AttDetValue_Type v_AttachType := f_GetEAttachType(EPS_Only); // @sic R5s110176 sic@ @sic R5s120264 sic@
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(EPS_Only); // @sic R5s110176 sic@ @sic R5s120264 sic@
    
    var float v_T3412 := f_EUTRA_SetTimerToleranceMin( eutra_CellA, nasTimer, 360.0);
    var float v_T3402 := f_EUTRA_SetTimerToleranceMin( eutra_CellA, nasTimer, 720.0 );
    var float v_T3430plusT3411 := f_EUTRA_SetTimerToleranceMin( eutra_CellA, nasTimer, 25.0);  /* @sic R5s110282 sic@ */
    
    //@siclog "Step 1" siclog@
    // Set the cell type of cell A to the "Serving cell".
    // Set the cell type of cell B to the "Non-Suitable cell"
    // Set the cell type of cell C to the "Non-Suitable cell"
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_NonSuitableCellRS_EPRE )   // @sic R5-121742 sic@
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //  The UE is powered up or switched on
    //@siclog "Step 2" siclog@
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@
    
    //  The UE transmits an ATTACH REQUEST message.
    //         The PDN CONNECTIVITY REQUEST message is piggybacked in ATTACH REQUEST message.
    //@siclog "Step 3" siclog@
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                              v_RRC_TI,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    
    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    // Get the PCO to be used later (TS 36.508 v.8.2.2 Table 4.7.3-6)
    if (ispresent( v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions)) {
      v_Pco := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    }
    
    //@siclog "Step 4 - 8Aa2" siclog@
    //  The SS transmits an AUTHENTICATION REQUEST message to initiate the EPS authentication and AKA procedure.
    //  The UE transmits an AUTHENTICATION RESPONSE message and establishes mutual authentication.
    //  The SS transmits a NAS SECURITY MODE COMMAND message to activate NAS security.
    //  The UE transmits a NAS SECURITY MODE COMPLETE message and establishes the initial security configuration.
    // Steps 8Aa1 and 8Aa2 ESM INFORMATION REQUEST / ESM INFORMATION RESPONSE
    // IF the UE sets the ESM information transfer flag in the last PDN CONNECTIVITY REQUEST message THEN the SS transmits an ESM INFORMATION
    // REQUEST message to initiate exchange of protocol configuration options and/or APN.
    // The UE transmits an ESM INFORMATION RESPONSE message to transfer protocol configuration options and/or APN.
    
    v_EIT_Flag := f_CheckEsmInfoTransferFlag(v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST);
    v_APN := f_EUTRA_Authentication_NAS_AS_Security (eutra_CellA, v_EIT_Flag, v_EPS_TI);
    
    //@siclog "Step 9" siclog@
    // SS responds with ATTACH ACCEPT message with GUTI-1 and specific T3412 content.
    // The ACTIVATE DEFAULT EPS BEARER CONTEXT REQUEST message is piggybacked in ATTACH ACCEPT message
    v_IPallocationViaNasFlag :=  f_CheckPCOforIPallocationViaNas (v_Pco);
    f_IP_ChangeEutraCell(IP, eutra_CellA);       /* @sic R5-113734 change 8 sic@ */
    f_EUTRA_RRCConnectionReconfiguration_SRB2_1AM_DRB_Est(eutra_CellA,
                                                          v_RRC_TI,
                                                          cs_NAS_RequestWithPiggybacking(tsc_SHT_IntegrityProtected_Ciphered,
                                                                                         cds_ATTACH_ACCEPT_T3412(tsc_EAttachType_EpsOnly,
                                                                                                                 cs_TrackingAreaIdListDef_lv,
                                                                                                                 f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_GutiParams),
                                                                                                                 omit,
                                                                                                                 omit,
                                                                                                                 omit,
                                                                                                                 f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.aTTACH_REQUEST.addUpdateType), // @sic R5-103681 sic@ @sic R5s110731 sic@
                                                                                                                 cs_GprsTimer_v(tsc_GprsTimerUnit_6min, '00001'B)),
                                                                                         cs_508_ActivateDefEpsBearerContextRequest(v_EpsBearerId,
                                                                                                                                   v_EPS_TI,
                                                                                                                                   v_APN,
                                                                                                                                   f_EUTRA_GetPDNAddress(v_IPallocationViaNasFlag),
                                                                                                                                   -,
                                                                                                                                   f_GetDefPCOforPCSCFAddress (v_Pco))));
    
    //@siclog "Step 10" siclog@
    //    The UE transmit an ATTACH COMPLETE message including an ACTIVATE DEFAULT EPS BEARER CONTEXT ACCEPT message
    //    NOTE 1: The tracking area updating attempt counter is reset.
    f_EUTRA_NAS_AttachComplete(eutra_CellA, v_EpsBearerId);
    
    //  The SS releases the RRC connection
    //@siclog "Step 11" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    // Wait for 6 min to ensure that T3412 expires
    //@siclog "Step 12" siclog@
    f_Delay(v_T3412);
    
    //@siclog "Step 13" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST message with the EPS update type value
    // set to 'Periodic updating'.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(tsc_EpsUpdate_Periodic,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_GutiParams),
                                                                                         cr_TAI(v_PLMN, tsc_TAC1))));
    
    //  Wait for 25s to ensure that T3430 and T3411 expire.
    //          NOTE 2: The tracking area updating attempt counter is 1
    //@siclog "Step 14" siclog@
    f_Delay(v_T3430plusT3411);
    f_EUTRA_SS_SRBs_DRBs_Reset(eutra_CellA);   // @sic R5s110423 additional comments sic@
    
    //@siclog "Step 15" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST message with the EPS update type value
    // set to 'Periodic updating'.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(tsc_EpsUpdate_Periodic,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_GutiParams),
                                                                                         cr_TAI(v_PLMN, tsc_TAC1))));
    
    // Wait for 25s to ensure that T3430 and T3411 expire.
    //          NOTE 3: The tracking area updating attempt counter is 2
    //@siclog "Step 16" siclog@
    f_Delay(v_T3430plusT3411);
    f_EUTRA_SS_SRBs_DRBs_Reset(eutra_CellA);   // @sic R5s110423 additional comments sic@
    
    //@siclog "Step 17" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST message with the EPS update type value
    // set to 'Periodic updating'.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(tsc_EpsUpdate_Periodic,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_GutiParams),
                                                                                         cr_TAI(v_PLMN, tsc_TAC1))));
    
    //  Wait for 25s to ensure that T3430 and T3411 expire.
    //          NOTE 4: The tracking area updating attempt counter is 3
    //@siclog "Step 18" siclog@
    f_Delay(v_T3430plusT3411);
    f_EUTRA_SS_SRBs_DRBs_Reset(eutra_CellA);   // @sic R5s110423 additional comments sic@
    
    //@siclog "Step 19" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST message with the EPS update type value
    // set to 'Periodic updating'.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(tsc_EpsUpdate_Periodic,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_GutiParams),
                                                                                         cr_TAI(v_PLMN, tsc_TAC1))));
    
    // Wait for 25s to ensure that T3430 and T3411 expire.
    //          NOTE 5: The tracking area updating attempt counter is 4
    //@siclog "Step 20" siclog@
    f_Delay(v_T3430plusT3411);
    f_EUTRA_SS_SRBs_DRBs_Reset(eutra_CellA);   // @sic R5s110168 change 2.17; R5s110423 additional comments sic@
    
    //@siclog "Step 21" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST message with the EPS update type value
    // set to 'Periodic updating'.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(tsc_EpsUpdate_Periodic,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_GutiParams),
                                                                                         cr_TAI(v_PLMN, tsc_TAC1))));
    // The SS releases the RRC connection.
    // NOTE 6: The tracking area updating attempt counter is 5.
    //@siclog "Step 22" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //  Wait for 12 min to ensure that T3402 expires
    //@siclog "Step 23" siclog@
    f_Delay(v_T3402);
    
    //@siclog "Step 24" siclog@
    // Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message with the EPS update type value
    // set to 'TA updating'?
    // NOTE 7: The tracking area updating attempt counter is reset.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(tsc_EpsUpdate_TaUpdate,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_GutiParams),
                                                                                         cr_TAI(v_PLMN, tsc_TAC1))));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 24: TAU Request sent by UE");
    
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    
    //  The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    //@siclog "Step 25" siclog@
    SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request ( tsc_SHT_IntegrityProtected_Ciphered,
                                                      cs_508_TAU_Accept(v_UpdateType,
                                                                        omit, // Guti
                                                                        v_TaiList,
                                                                        v_EpsBearerCtxtStatus,
                                                                        omit, // LAI
                                                                        v_MSId,
                                                                        f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)))));
    
    //@siclog "Step 26" siclog@
    // Set the cell type of Cell A to the "non-Suitable cell". Set the cell type of Cell B to the "Serving cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 27" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST message with the EPS update type value set to 'TA updating'.
    // NOTE 8: The tracking area updating attempt counter is reset.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(tsc_EpsUpdate_TaUpdate,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_GutiParams),
                                                                                         cr_TAI(v_PLMN, tsc_TAC1))));
    
    //@siclog "Step 28" siclog@
    // Wait for 25s to ensure that T3430 and T3411 expire.
    // NOTE 9: The tracking area updating attempt counter is 1.
    f_Delay(v_T3430plusT3411);
    f_EUTRA_SS_SRBs_DRBs_Reset(eutra_CellB);   // @sic R5s110423 additional comments sic@
    
    //@siclog "Step 29" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST message with the EPS update type value set to 'TA updating'.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(tsc_EpsUpdate_TaUpdate,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_GutiParams),
                                                                                         cr_TAI(v_PLMN, tsc_TAC1))));
    //@siclog "Step 30" siclog@
    // Wait for 25s to ensure that T3430 and T3411 expire.
    // NOTE 10: The tracking area updating attempt counter is 2.
    f_Delay(v_T3430plusT3411);
    f_EUTRA_SS_SRBs_DRBs_Reset(eutra_CellB);   // @sic R5s110423 additional comments sic@
    
    //@siclog "Step 31" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST message with the EPS update type value set to 'TA updating'.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(tsc_EpsUpdate_TaUpdate,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_GutiParams),
                                                                                         cr_TAI(v_PLMN, tsc_TAC1))));
    //@siclog "Step 32" siclog@
    // Wait for 25s to ensure that T3430 and T3411 expire.
    // NOTE 11: The tracking area updating attempt counter is 3.
    f_Delay(v_T3430plusT3411);
    f_EUTRA_SS_SRBs_DRBs_Reset(eutra_CellB);   // @sic R5s110423 additional comments sic@

    //@siclog "Step 33" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST message with the EPS update type value set to 'TA updating'.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(tsc_EpsUpdate_TaUpdate,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_GutiParams),
                                                                                         cr_TAI(v_PLMN, tsc_TAC1))));
    //@siclog "Step 34" siclog@
    // Wait for 25s to ensure that T3430 and T3411 expire.
    // NOTE 12: The tracking area updating attempt counter is 4.
    f_Delay(v_T3430plusT3411);
    f_EUTRA_SS_SRBs_DRBs_Reset(eutra_CellB);   // @sic R5s110423 additional comments sic@
    
    //@siclog "Step 35" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST message with the EPS update type value set to 'TA updating'.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(tsc_EpsUpdate_TaUpdate,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_GutiParams),
                                                                                         cr_TAI(v_PLMN, tsc_TAC1))));
    //@siclog "Step 36" siclog@
    // The SS releases the RRC connection.
    // NOTE 13: The tracking area updating attempt counter is 5 and reset.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
    
    //@siclog "Step 37" siclog@
    // Set the cell type of Cell B to the "non-Suitable cell". Set the cell type of Cell G to the "Serving cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_ServingCellRS_EPRE )   // @sic R5-121742 sic@
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 38" siclog@
    // Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message with the EPS update type value
    // set to 'TA updating'?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellC,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(tsc_EpsUpdate_TaUpdate,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_GutiParams),
                                                                                         cr_TAI(v_PLMN, tsc_TAC1))));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 38: TAU Request sent by UE");
    
    // The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    //@siclog "Step 39" siclog@
    SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellC,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request ( tsc_SHT_IntegrityProtected_Ciphered,
                                                      cs_508_TAU_Accept ( v_UpdateType,
                                                                          f_GutiParameters2MobileIdentity (tsc_IEI_Guti,
                                                                                                           f_EUTRA_CellInfo_GetGuti(eutra_CellC) ), //GUTI-7
                                                                          v_TaiList_C,
                                                                          v_EpsBearerCtxtStatus,
                                                                          omit,  // LAI
                                                                          v_MSId,
                                                                          f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)))));
    
    // The UE transmits a TRACKING AREA UPDATE COMPLETE message.
    //@siclog "Step 40" siclog@
    SRB.receive ( car_SRB1_NasPdu_IND ( eutra_CellC,
                                        cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_TAU_Complete ) ) );
  }// end function fl_TC_9_2_3_1_25_Body

  function f_TC_9_2_3_1_26_EUTRA() runs on EUTRA_PTC
  { /*  Normal tracking area update / Abnormal case / TRACKING AREA UPDATE REJECT */
    
    // declare but not initialize the variables @sic R5s110789 sic@
    var NAS_MSG_Indication_Type v_NasInd;
    var GutiParameters_Type v_GutiParams;
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;
    var RRC_TransactionIdentifier v_RRC_TI;
    var NAS_PlmnId v_PLMN;
    var TrackingAreaCode v_Tac;
    var NAS_Lac v_LAC;
    var template (omit) LocAreaId v_LAI;
    var template (omit) MobileIdentity v_MSId;
    var template (value) TrackingAreaIdList v_TaiList;
    var EPS_UpdateTypeValue v_UpdateType;
    var template AdditionalUpdateType v_AdditionalUpdateType;
    var float v_T3402, v_T3412; // @sic R5s120211 sic@
    timer t_T3402, t_T3412; // @sic R5s120211 sic@

    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);  // @sic R5-115720 sic@

    // now initialize the variables @sic R5s110789 sic@
    v_T3402 := f_EUTRA_SetTimerToleranceMin(eutra_CellA, nasTimer, 30.0); // @sic R5-115720 sic@ @sic R5s120211 sic@
    v_T3412 := f_EUTRA_SetTimerToleranceMin(eutra_CellA, nasTimer, 60.0); // @sic R5-115720 sic@ @sic R5s120211 sic@
    v_GutiParams := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    v_RRC_TI := tsc_RRC_TI_Def;
    v_PLMN := f_Asn2Nas_PlmnId (v_GutiParams.PLMN_Identity);
    v_Tac := f_EUTRA_CellInfo_GetTAC ( eutra_CellA );
    v_LAC := f_EUTRA_CellInfo_GetLocationAreaCode ( eutra_CellA );
    v_LAI := f_GetLAI ( v_PLMN, v_LAC, EPS_Only); // @sic R5s110176 sic@ @sic R5s120264 sic@
    v_MSId := f_GetMSId (EPS_Only); // @sic R5s110176 sic@ @sic R5s120264 sic@
    v_TaiList := cds_TAIListNonConsecutive_tlv ( v_PLMN, { bit2oct(v_Tac) } );
    v_UpdateType := f_GetEPSTAUType(EPS_Only); // @sic R5s110176 sic@ @sic R5s120264 sic@
    v_AdditionalUpdateType := f_GetAdditionalUpdateType ();
    
    if (v_UpdateType == tsc_EpsUpdate_TaUpdate) {
      v_LAI := omit;
    }

    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    
    f_UT_ConfigureEPSAttach (UT); // @sic R5-115767 sic@

    // f_EUTRA_Preamble cannot be called as we need a different values of T3402 and T3412  // @sic R5-115720 sic@
    // First switch cell on
    f_EUTRA_SetCellPower ( eutra_CellA, tsc_ServingCellRS_EPRE );
  
    // Switch on UE
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@
  
    // now to transmit T3402 and T3412 to UE with values 1/2 minute resp. 1 minute @sic R5s115720 sic@
    v_NasInd := f_EUTRA_IdleUpdated_Step1_4 (eutra_CellA, PREAMBLE, EPS_Only); // @sic R5s120264 sic@
  
    f_EUTRA_IdleUpdated_Step5_15 (eutra_CellA,
                                  STATE2_IDLEUPDATE,
                                  EPS_Only, // @sic R5s120264 sic@
                                  v_NasInd,
                                  -,    /* @sic R5-120234, R5-120541, R5-120542 sic@ */
                                  cs_GprsTimer_v(tsc_GprsTimerUnit_1min, '00001'B),
                                  cs_GprsTimer_tv('17'O, tsc_GprsTimerUnit_2sec, '01111'B));
    // T3412 started with the value applied in ATTACH ACCEPT
    t_T3412.start(v_T3412); // @sic R5s120211 sic@

    f_EUTRA_IdleUpdated_Step16_17 (eutra_CellA,
                                   true);
    
    f_EUTRA_TestBody_Set(true);

    //@siclog "Step 1" siclog@
    // The SS waits for T3412 to elapse.
    t_T3412.timeout;

    //@siclog "Step 2" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST on Cell A
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(tsc_EpsUpdate_Periodic, // @sic R5s110789 sic@
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType)));
    //@siclog "Step 3" siclog@
    // The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause #95
    // "semantically incorrect message" as specified
    // Note: Upon reception of TRACKING AREA UPDATE REJECT message with EMM causes #95, #96, #97, #99 and #111
    // timer T3402 shall be started
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_EmmCause_SemanticallyIncorrect))));
    
    t_T3402.start(v_T3402); // @sic R5s120211 sic@
    
    //@siclog "Step 4" siclog@
    // The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //@siclog "Step 5" siclog@
    // Check: When the timer T3402 expires does the UE re-transmit TRACKING AREA UPDATE REQUEST message on cell A?
    t_T3402.timeout;
    
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(v_UpdateType,
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType)));
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 5: TAU Request sent by UE");
    
    // The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    //@siclog "Step 6" siclog@
    SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request ( tsc_SHT_IntegrityProtected_Ciphered,
                                                     cds_TAU_Accept_T3402andT3412(v_UpdateType,
                                                                                  f_GutiParameters2MobileIdentity (tsc_IEI_Guti, v_GutiParams ),
                                                                                  v_TaiList,
                                                                                  v_EpsBearerCtxtStatus,
                                                                                  v_LAI,
                                                                                  v_MSId,
                                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType), // @sic R5-103681 sic@
                                                                                  cs_GprsTimer_tv('17'O, tsc_GprsTimerUnit_2sec, '01111'B),
                                                                                  cs_GprsTimer_tv('5A'O, tsc_GprsTimerUnit_1min, '00001'B)))));  // @sic R5s115720 sic@  @sic R5s110789 sic@
    //The UE transmits a TRACKING AREA UPDATE COMPLETE message.
    //@siclog "Step 7" siclog@
    SRB.receive ( car_SRB1_NasPdu_IND ( eutra_CellA,
                                        cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_TAU_Complete ) ) );
    t_T3412.start(v_T3412); // @sic R5s120211 sic@

    //@siclog "Step 7A" siclog@
    // The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);

    //@siclog "Step 8" siclog@
    // The SS waits for T3412 to elapse.
    t_T3412.timeout;
   
    //@siclog "Step 9" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST on Cell A
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(tsc_EpsUpdate_Periodic, //  @sic R5s110789 sic@
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType)));
    
    //@siclog "Step 10" siclog@
    // The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause #96
    // "invalid mandatory information" as specified
    // Note: Upon reception of TRACKING AREA UPDATE REJECT message with EMM causes #95, #96, #97, #99 and #111
    // timer T3402 shall be started
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_EmmCause_InvalidMandatoryInformation))));
    
    
    t_T3402.start(v_T3402); // @sic R5s120211 sic@
    
    //@siclog "Step 11" siclog@
    // The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    
    //@siclog "Step 12" siclog@
    // Check: When the timer T3402 expires does the UE re-transmit TRACKING AREA UPDATE REQUEST message on cell A?
    t_T3402.timeout;
    
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(v_UpdateType,
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType)));
    
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 12: TAU Request sent by UE");
    
    // The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    //@siclog "Step 13" siclog@
    SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request (tsc_SHT_IntegrityProtected_Ciphered,
                                                     cds_TAU_Accept_T3402andT3412(v_UpdateType,
                                                                                  f_GutiParameters2MobileIdentity (tsc_IEI_Guti, v_GutiParams ),
                                                                                  v_TaiList,
                                                                                  v_EpsBearerCtxtStatus,
                                                                                  v_LAI,
                                                                                  v_MSId,
                                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType), // @sic R5-103681 sic@
                                                                                  cs_GprsTimer_tv('17'O, tsc_GprsTimerUnit_2sec, '01111'B),
                                                                                  cs_GprsTimer_tv('5A'O, tsc_GprsTimerUnit_1min, '00001'B)))));  // @sic R5s115720 sic@  @sic R5s110789 sic@
    // The UE transmits a TRACKING AREA UPDATE COMPLETE message.
    //@siclog "Step 14" siclog@
    SRB.receive ( car_SRB1_NasPdu_IND ( eutra_CellA,
                                        cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_TAU_Complete ) ) );
    t_T3412.start(v_T3412); // @sic R5s120211 sic@

    //@siclog "Step 14A" siclog@
    // The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);

    //@siclog "Step 15" siclog@
    // The SS waits for T3412 to elapse.
    t_T3412.timeout;
    
    //@siclog "Step 16" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST on Cell A
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(tsc_EpsUpdate_Periodic, //  @sic R5s110789 sic@
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType)));
    
    //@siclog "Step 17" siclog@
    // The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause #97
    // "message type non-existent or not implemented".
    // Note: Upon reception of TRACKING AREA UPDATE REJECT message with EMM causes #95, #96, #97, #99 and #111
    // timer T3402 shall be started
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_EmmCause_MessageTypeNonExistentOrNotImplemented))));
    
    t_T3402.start(v_T3402); // @sic R5s120211 sic@
    
    //@siclog "Step 18" siclog@
    // The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    
    //@siclog "Step 19" siclog@
    // Check: When the timer T3402 expires does the UE re-transmit TRACKING AREA UPDATE REQUEST message on cell A?
    t_T3402.timeout;
    
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(v_UpdateType,
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType)));
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 19: TAU Request sent by UE");
    
    //  The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    //@siclog "Step 20" siclog@
    SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request (tsc_SHT_IntegrityProtected_Ciphered,
                                                     cds_TAU_Accept_T3402andT3412(v_UpdateType,
                                                                                  f_GutiParameters2MobileIdentity (tsc_IEI_Guti, v_GutiParams ),
                                                                                  v_TaiList,
                                                                                  v_EpsBearerCtxtStatus,
                                                                                  v_LAI,
                                                                                  v_MSId,
                                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType), // @sic R5-103681 sic@
                                                                                  cs_GprsTimer_tv('17'O, tsc_GprsTimerUnit_2sec, '01111'B),
                                                                                  cs_GprsTimer_tv('5A'O, tsc_GprsTimerUnit_1min, '00001'B)))));  // @sic R5s115720 sic@  @sic R5s110789 sic@
    // The UE transmits a TRACKING AREA UPDATE COMPLETE message.
    //@siclog "Step 21" siclog@
    SRB.receive ( car_SRB1_NasPdu_IND ( eutra_CellA,
                                        cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_TAU_Complete ) ) );
    
    
    t_T3412.start(v_T3412); // @sic R5s120211 sic@

    //@siclog "Step 21A" siclog@
    // The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);

    //@siclog "Step 22" siclog@
    // The SS waits for T3412 to elapse.
    t_T3412.timeout;
   
    //@siclog "Step 23" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST on Cell A
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(tsc_EpsUpdate_Periodic, //  @sic R5s110789 sic@
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType)));
    
    //@siclog "Step 24" siclog@
    // The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause #99
    // "information element non-existent or not implemented" as specified.
    // Note: Upon reception of TRACKING AREA UPDATE REJECT message with EMM causes #95, #96, #97, #99 and #111
    // timer T3402 shall be started
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_EmmCause_IENonExistentOrNotImplemented))));
    
    
    t_T3402.start(v_T3402); // @sic R5s120211 sic@
    
    //@siclog "Step 25" siclog@
    // The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    
    //@siclog "Step 26" siclog@
    // Check: When the timer T3402 expires does the UE re-transmit TRACKING AREA UPDATE REQUEST message on cell A?
    t_T3402.timeout;
    
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(v_UpdateType,
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType)));
    
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 26: TAU Request sent by UE");
    
    
    //  The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    //@siclog "Step 27" siclog@
    SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request (tsc_SHT_IntegrityProtected_Ciphered,
                                                     cds_TAU_Accept_T3402andT3412(v_UpdateType,
                                                                                  f_GutiParameters2MobileIdentity (tsc_IEI_Guti, v_GutiParams ),
                                                                                  v_TaiList,
                                                                                  v_EpsBearerCtxtStatus,
                                                                                  v_LAI,
                                                                                  v_MSId,
                                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType), // @sic R5-103681 sic@
                                                                                  cs_GprsTimer_tv('17'O, tsc_GprsTimerUnit_2sec, '01111'B),
                                                                                  cs_GprsTimer_tv('5A'O, tsc_GprsTimerUnit_1min, '00001'B)))));  // @sic R5s115720 sic@  @sic R5s110789 sic@
    //The UE transmits a TRACKING AREA UPDATE COMPLETE message.
    //@siclog "Step 28" siclog@
    SRB.receive ( car_SRB1_NasPdu_IND ( eutra_CellA,
                                        cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_TAU_Complete ) ) );
    
    
    t_T3412.start(v_T3412); // @sic R5s120211 sic@

    //@siclog "Step 28A" siclog@
    // The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);

    //@siclog "Step 29" siclog@
    // The SS waits for T3412 to elapse.
    t_T3412.timeout;
    
    //@siclog "Step 30" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST on Cell A
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(tsc_EpsUpdate_Periodic, //  @sic R5s110789 sic@
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType)));
    
    //@siclog "Step 31" siclog@
    // The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause #111
    // "protocol error, unspecified".
    // Note: Upon reception of TRACKING AREA UPDATE REJECT message with EMM causes #95, #96, #97, #99 and #111
    // timer T3402 shall be started
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_EmmCause_ProtocolErrorUnspecified))));
    
    t_T3402.start(v_T3402); // @sic R5s120211 sic@
    
    //@siclog "Step 32" siclog@
    // The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //@siclog "Step 33" siclog@
    // Check: When the timer T3402 expires does the UE re-transmit TRACKING AREA UPDATE REQUEST message on cell B?
    t_T3402.timeout;
    
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(v_UpdateType,
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType )));
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 33: TAU Request sent by UE");
      
    //  The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    //@siclog "Step 34" siclog@
    SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request (tsc_SHT_IntegrityProtected_Ciphered,
                                                     cds_TAU_Accept_T3402andT3412(v_UpdateType,
                                                                                  f_GutiParameters2MobileIdentity (tsc_IEI_Guti, v_GutiParams ),
                                                                                  v_TaiList,
                                                                                  v_EpsBearerCtxtStatus,
                                                                                  v_LAI,
                                                                                  v_MSId,
                                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType), // @sic R5-103681 sic@
                                                                                  cs_GprsTimer_tv('17'O, tsc_GprsTimerUnit_2sec, '01111'B),
                                                                                  cs_GprsTimer_tv('5A'O, tsc_GprsTimerUnit_1min, '00001'B)))));  // @sic R5s115720 sic@  @sic R5s110789 sic@
    
    // The UE transmits a TRACKING AREA UPDATE COMPLETE message.
    //@siclog "Step 35" siclog@
    SRB.receive ( car_SRB1_NasPdu_IND ( eutra_CellA,
                                        cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_TAU_Complete ) ) );
    
    f_EUTRA_TestBody_Set(false);
    
    // Postamble
    f_EUTRA_Postamble(eutra_CellA, E2_T3440, EPS_Only); // @sic R5s110007 sic@ @sic R5s120264 sic@
    
  } // end f_TC_9_2_3_1_26_EUTRA

  function f_TC_9_2_3_1_27_EUTRA() runs on EUTRA_PTC
  { /*  Normal tracking area update / Abnormal case / Change of cell into a new tracking area */
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c1);  // @sic R5-113675 sic@
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_SRBs_Only(eutra_CellB);
    f_EUTRA_CellConfig_Def(eutra_CellD);  // @sic R5-113675 sic@
    
    // Go to state 2
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE);
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_1_27_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellD, E2_T3440); // @sic R5s110007 sic@
    
  } // end f_TC_9_2_3_1_27_EUTRA

  function fl_TC_9_2_3_1_27_Body() runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NasInd;
    
    var template (omit) EPS_BearerContextStatus v_EPS_ContextStatus;
    var NAS_Tac v_Tac1 := bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellA));
    var GutiParameters_Type v_Guti_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var GutiParameters_Type v_Guti2_Params := f_CreateGutiParamsWithUpdatedSTmsi(v_Guti_Params);
    var GutiParameters_Type v_Guti3_Params := f_CreateGutiParamsWithUpdatedSTmsi(v_Guti2_Params);
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId(v_Guti_Params.PLMN_Identity);
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType ();
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(NORMAL); // @sic R5s110176 sic@
    timer t_WaitTimer := f_EUTRA_SetTimerToleranceMin( eutra_CellD, nasTTCNTimer, 5.0);
    
    //@siclog "Step 1" siclog@
    // Set the cell type of cell A to the "Non-Suitable cell"
    // Set the cell type of cell B to the "Serving cell".
    // Set the cell type of cell D to the "Non-Suitable cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellD, tsc_NonSuitableCellRS_EPRE )  // @sic R5-113675 sic@
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    
    //@siclog "Step 2" siclog@
    //   The UE transmits a TRACKING AREA UPDATE REQUEST on Cell B.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(v_UpdateType,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_Guti_Params),
                                                                                         cr_TAI(v_PLMN, v_Tac1))));
    //@siclog "Step 3" siclog@
    //  SS does not send TRACKING AREA UPDATE ACCEPT to the UE.
    
    //@siclog "Step 4" siclog@
    // Set the cell type of cell A to the "Non-Suitable cell".
    // Set the cell type of cell B to the "Non-Suitable cell".
    // Set the cell type of cell D to the "Serving cell".
    // Note: change of cell power level should happen before timer T3430 expired.
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellD, tsc_ServingCellRS_EPRE )
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    t_WaitTimer.start;     // NOTE: the prose is confusing but it is assumed that the 5s timer shallbe started after the power level change and not after the RRCConnectionRequest @sic R5-120721 change 3 sic@

    //  Check: Does the UE transmit TRACKING AREA UPDATE REQUEST message on cell C in the next 5 seconds?
    // receive RRC Connection Setup Complete with piggy-backed TRACKING AREA UPDATE REQUEST message
    //@siclog "Step 6" siclog@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellD,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(v_UpdateType,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_Guti_Params),
                                                                                         cr_TAI(v_PLMN, v_Tac1))));  /* @sic R5-120721 change 3 sic@ */
    t_WaitTimer.stop;
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 6: TAU Request on cell D");
    // timeout would be caught in the default
    
    //@siclog "Step 7" siclog@
    // SS responds with TRACKING AREA UPDATE ACCEPT message
    v_EPS_ContextStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellD,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request ( tsc_SHT_IntegrityProtected_Ciphered,
                                                      cs_508_TAU_Accept ( v_UpdateType,
                                                                          f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti3_Params),
                                                                          cds_TAIListNonConsecutive_tlv( v_PLMN, {'0004'O} ), //TAC-4
                                                                          v_EPS_ContextStatus,
                                                                          f_EUTRA_GetCellLAI(eutra_CellD, NORMAL), // @sic R5s110176 sic@
                                                                          f_GetMSId (NORMAL), // @sic R5s110176 sic@
                                                                          f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)) ) ) );
    
    
    f_EUTRA_CellInfo_SetGuti (eutra_CellD, v_Guti3_Params);
    //  UE sends TRACKING AREA UPDATE COMPLETE
    //@siclog "Step 8" siclog@
    SRB.receive ( car_SRB1_NasPdu_IND ( eutra_CellD,
                                        cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_TAU_Complete ) ) );
    
  }// end function fl_TC_9_2_3_1_27_Body

  function f_TC_9_2_3_1_28_EUTRA() runs on EUTRA_PTC
  { /*  Normal tracking area update / Abnormal case / Tracking area updating and detach procedure collision */
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c3);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    
    // Go to state 2
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE);
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_1_28_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellB, E4_DEREGISTERED);
    
  } // end f_TC_9_2_3_1_28_EUTRA

  function fl_TC_9_2_3_1_28_Body() runs on EUTRA_PTC
  { // @sic R5s100817 sic@
  
    var template (value) CellPowerList_Type v_CellPowerList;
    var NAS_MSG_Indication_Type v_NasInd;
    
    var GutiParameters_Type v_Guti_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellB);
    var template (omit) EMM_Cause v_EMMCause := cs_EMM_Cause_tv(tsc_Cause_TA_NotAllowed);
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(NORMAL); // @sic R5s110176 sic@
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType ();
    var float v_NoReactionTime := f_EUTRA_SetTimerToleranceMax( eutra_CellB, rrcTimer, 3.0 );
    timer t_T3422 := f_EUTRA_SetTimerToleranceMax( eutra_CellB, nasTimer, 6.0);
    
    //@siclog "Step 1" siclog@
    // Set the cell type of cell A to the "Non-Suitable cell"
    // Set the cell type of cell B to the "Serving cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE )
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    
    //@siclog "Step 2" siclog@
    //   The UE transmits a TRACKING AREA UPDATE REQUEST on Cell B.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(v_UpdateType,
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType )));
    

    //  SS does not send TRACKING AREA UPDATE ACCEPT to the UE.
    //@siclog "Step 3-4" siclog@
    //The SS transmits a DETACH REQUEST message with Detach type = 're-attach not required' on Cell B.
    //Note: this message should be sent before timer T3430 expired.
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_DETACH_REQUEST_MT(cs_DetachType(tsc_DetachMT_NoReAttach),
                                                                         v_EMMCause) )));
    t_T3422.start;
    
    //@siclog "Step 5" siclog@
    // Check: Does The UE transmit a DETACH ACCEPT message on Cell B in the next 6 seconds?
    // Note: the default value for timer T3422 is 6 seconds
    alt {
      [] SRB.receive(car_SRB1_NasPdu_IND(eutra_CellB,
                                         cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                           cr_508_DETACH_ACCEPT)))
        {
          t_T3422.stop;
          f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 5: Detach accept on cell B");
        }
      // timeout of T3422 would be caught in the default
    }

    
    //  The SS releases the RRC connection
    //@siclog "Step 6" siclog@
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
    
    //@siclog "Step 7" siclog@
    // Check: Does the test result of CALL generic procedure "Test procedure for no response to paging
    // (for NAS testing)" defined in clause 6.4.2.5 of TS36.508 indicates that the UE does not respond
    // to paging when paged with S-TMSI1 and with CN domain indicator set to "PS" on Cell B?
    f_EUTRA_508Check_NASNoResponse(eutra_CellB,
                                   cs_NasPaging_OneRecord ( cs_PagingUE_Identity_S_TMSI ( v_Guti_Params.MME_Code, v_Guti_Params.M_TMSI )),
                                   v_NoReactionTime );
  }// end function fl_TC_9_2_3_1_28_Body

  function f_TC_9_2_3_2_1_EUTRA() runs on EUTRA_PTC
  {
    /// @desc Combined Tracking Area Update / Successful.
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c3);  //@sic R5-106627 sic@
    
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellC);
    f_EUTRA_CellConfig_Def(eutra_CellD);
    
    f_UT_ConfigureCombinedAttach (UT); // @sic R5-103341 sic@
    
    // Preamble: UE is in state Registered, Idle Mode (state 2) on Cell A
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, Combined); // @sic R5s110176 sic@
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_2_1_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E2_T3440, Combined); // @sic R5s110176, R5s110007 sic@

  } // function f_TC_9_2_3_2_1_EUTRA

  function fl_TC_9_2_3_2_1_Body() runs on EUTRA_PTC
  {
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var NAS_PlmnId v_PLMN:= f_Asn2Nas_PlmnId(v_Guti1_Params.PLMN_Identity);
    var template (omit) LocAreaId v_LAI_1 := f_EUTRA_GetCellLAI(eutra_CellA, Combined); // @sic R5-120765 sic@
    var template (omit) LocAreaId v_LAI_RX := f_EUTRA_GetCellLAI(eutra_CellA, Combined); // @sic R5s110176 sic@
    var template (omit) LocAreaId v_LAI_TX := f_EUTRA_GetCellLAI(eutra_CellC, Combined); // @sic R5s110176 sic@
    var NAS_Tac v_Tac1 := bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellA));
    var GutiParameters_Type v_Guti2_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellC);
    var template (omit) MobileIdentity v_MsId := f_GetMSId (Combined); // @sic R5s110176 sic@
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(Combined); // @sic R5s110176 sic@
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;  // @sic R5s100755 sic@
    var template (value) CellPowerList_Type v_CellPowerList;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (Combined); // @sic R5s110176 sic@
    var NAS_MSG_Indication_Type v_NasInd;
    var float v_TimerValue;

    // ==========================================================================
    //@siclog "Step 1 - 13 Void" siclog@
    //+   Set the cell type of cell A to the "Non-Suitable cell".
    //+   Set the cell type of cell C to the "Serving cell"
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellD, tsc_NonSuitableOffCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );

    //@siclog "Step 14" siclog@
    //@siclog "Step 15" siclog@
    //+   Check: Does the UE transmit a combined TRACKING AREA UPDATE REQUEST message as specified?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellC,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_RequestOldGutiLaiTmsiStatus(tsc_EpsUpdate_Combined_TaLaUpdate,
                                                                                                     f_EUTRA_SecurityKSIasme_Get(),
                                                                                                     cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                     v_AdditionalUpdateType,
                                                                                                     f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                                     v_LAI_RX,
                                                                                                     cr_TAI(v_PLMN, v_Tac1),
                                                                                                     omit))); // @sic R5-106601 sic@
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Step 15");
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    
    // @sic R5s100799 sic@
    
    //@siclog "Step 16" siclog@
    //+   The SS sends TRACKING AREA UPDATE ACCEPT message including GUTI, TMSI and LAI. The TAI list includes TAI for cell C and cell D
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellC,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(v_UpdateType,
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, v_Guti2_Params),
                                                                  cds_TAIListNonConsecutive_tlv(v_PLMN, { '0003'O, '0004'O }), // TAC1=3, TAC2=4
                                                                  v_EpsBearerCtxtStatus,
                                                                  v_LAI_TX,
                                                                  v_MsId,
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType,
                                                                  Combined))))); // @sic R5s110176 sic@
    
    //@siclog "Step 17" siclog@
    //+   Check: Does the UE transmit a TRACKING AREA UPDATE COMPLETE message? -->
    //+   TRACKING AREA UPDATE COMPLETE [2,P]
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellC,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 17");
    
    //@siclog "Step 18" siclog@
    //+   The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellC);
    
    //@siclog "Step 19" siclog@
    //+   Check: Does the test results of generic procedure in TS 36.508 TS 36.508 subclause 6.4.2.4
    //+   indicate that the UE is in E-UTRA EMM-REGISTERED state on cell C with PagingUE-Identity = S-TMSI2?
    f_EPS_508Check_NAS_Paging(eutra_CellC, ps);
    
    //@siclog "Step 20" siclog@
    //+   Set the cell type of cell A to OFF
    //+   Set the cell type of cell C to the "Suitable Neigbour cell ".
    //+   Set the cell type of cell D to the " Serving cell"
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_SuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellD, tsc_ServingCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 20a" siclog@
    //+   Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message in
    //+    the next 30 seconds? [1,F]
    v_TimerValue := f_EUTRA_SetTimerToleranceMax (eutra_CellD, nasTTCNTimer, 30.0);
    if (f_EUTRA_RRC_RRCConnectionRequest_Check(eutra_CellD, v_TimerValue)) {        // @sic R5s110507 Additional Changes sic@
      // even though prose says TAU, as soon as UE sends RRC ConnReq, we know something is wrong
      f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 20A");
    } else {
      f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 20A");
    }
    
    //@siclog "Step 20b" siclog@
    //+   Check: Does the test results of generic procedure in TS 36.508 subclause 6.4.2.4
    //+   indicate that the UE is in E-UTRA EMM-REGISTERED state on cell D with PagingUE-Identity = S-TMSI2?
    f_EPS_508Check_NAS_Paging(eutra_CellD, ps);
  
    //@siclog "Step 20c" siclog@
    //+   Set the cell type of cell D to the "Suitable Neighbour cell ".
    //+   Set the cell type of cell A to the " Serving cell"
    //+   Set the cell type of cell C to OFF
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellD, tsc_SuitableCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );

    //@siclog "Step 21" siclog@
    //+   Check: Does the UE transmit a combined TRACKING AREA UPDATE REQUEST message? -->
    //+   TRACKING AREA UPDATE REQUEST [2;3,P]
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_RequestOldGutiLaiTmsiStatus(tsc_EpsUpdate_Combined_TaLaUpdate,
                                                                                                     f_EUTRA_SecurityKSIasme_Get(),
                                                                                                     cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                     v_AdditionalUpdateType,
                                                                                                     f_GutiParameters2MobileIdentity(omit, v_Guti2_Params),
                                                                                                     v_LAI_RX,
                                                                                                     cr_TAI(v_PLMN, '0004'O),
                                                                                                     omit)));
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Step 21");
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    
    //@siclog "Step 22" siclog@
    //+   The SS transmits a TRACKING AREA UPDATE ACCEPT message. <-- TRACKING AREA UPDATE ACCEPT
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TAU_Accept(tsc_EpsUpdate_Combined_TaLaUpdate,
                                                                  omit, // Guti
                                                                  cds_TAIListNonConsecutive_tlv( v_PLMN, {'0001'O} ), // TAC1=1
                                                                  v_EpsBearerCtxtStatus,
                                                                  v_LAI_1, // @sic R5-120765 sic@
                                                                  v_MsId,
                                                                  f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType,
                                                                                              Combined))))); // @sic R5s110176 sic@   Need a new TMSI
    
    //@siclog "Step 23" siclog@
    //+   The UE transmits a TRACKING AREA UPDATE COMPLETE message?
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    f_EUTRA_PreliminaryPass (__FILE__, __LINE__, "Step 23");
    f_EUTRA_CellInfo_SetGuti(eutra_CellA, v_Guti2_Params);
  } // function fl_TC_9_2_3_2_1_Body

  function f_TC_9_2_3_2_2_EUTRA() runs on EUTRA_PTC
  { /*  Combined tracking area update / Successful for EPS services only / IMSI unknown in HSS */
    // @sic R5s110271 sic@
    var template (value) CellPowerList_Type v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE)
    };

    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c3);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);

    f_UT_ConfigureCombinedAttach (UT);  // @sic R5s120125 sic@

    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, Combined);  // @sic R5s120125 sic@
    f_EUTRA_SetCellPowerList(v_CellPowerList);                   // @sic in context with R5-123740 change 2 sic@

    f_EUTRA_TestBody_Set(true);

    fl_TC_9_2_3_2_2_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellB, E2_CONNECTED, EPS_Only);
    
  } // function f_TC_9_2_3_2_2_EUTRA

  function fl_TC_9_2_3_2_2_Body( ) runs on EUTRA_PTC
  {
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var GutiParameters_Type v_Guti2_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellB);
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (v_Guti1_Params.PLMN_Identity);
    var NAS_PlmnId v_PLMN_B := f_Asn2Nas_PlmnId (v_Guti2_Params.PLMN_Identity);
    var NAS_Lac v_LAC := f_EUTRA_CellInfo_GetLocationAreaCode ( eutra_CellA );
    var NAS_MSG_Indication_Type v_NasInd;
    var template (omit) EPS_BearerContextStatus v_EPS_ContextStatus;
    var template (omit) EMM_Cause v_EMMCause := cs_EMM_Cause_tv(tsc_EmmCause_UnknownIMSI);
    var template (omit) LocAreaId v_LAI := f_GetLAI(v_PLMN,v_LAC, Combined); // @sic R5s110176 sic@ @sic R5s120125 sic@
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (Combined);  // @sic R5s120125 sic@
    var ProcedureTransactionIdentifier v_EPS_TI := tsc_PTI_1;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var template (omit) ProtocolConfigOptions v_Pco := omit;
    var NasCount_Type v_NasCountUL;
    var EUTRA_SecurityParams_Type v_AuthParams := f_EUTRA_Security_Get();
    var template (omit) AccessPointName v_APN := omit;
    var template (present) SecurityHeaderType v_ExpectedSecurityHeader:= (tsc_SHT_NoSecurityProtection, tsc_SHT_IntegrityProtected);
    var template (value) CellPowerList_Type v_CellPowerList;

    // Set the cell type of Cell B to the "Serving cell".
    // Set the cell type of Cell A to the "non-Suitable cell".
    //@siclog "Step 1" siclog@
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@
    
    //The following messages are to be observed on Cell B
    //@siclog "Step 2" siclog@
    //+ The UE transmits a TRACKING AREA UPDATE REQUEST message.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_RequestOldGutiLaiTmsiStatus(tsc_EpsUpdate_Combined_TaLaUpdate,
                                                                                                     f_EUTRA_SecurityKSIasme_Get(),
                                                                                                     cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                     v_AdditionalUpdateType,
                                                                                                     f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                                     v_LAI,
                                                                                                     cr_TAI( v_PLMN, v_LAC),
                                                                                                     omit)));

    //@siclog "Step 3" siclog@
    //+ The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    v_EPS_ContextStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus; // Send this back in the Accept

    SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellB,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request ( tsc_SHT_IntegrityProtected_Ciphered,
                                                      cs_TAU_Accept_EMM_Cause ( tsc_EpsUpdate_TaUpdate,
                                                                                f_GutiParameters2MobileIdentity (tsc_IEI_Guti, v_Guti2_Params ),
                                                                                cds_TAIListNonConsecutive_tlv(v_PLMN, {'0002'O}),
                                                                                v_EPS_ContextStatus,
                                                                                omit,
                                                                                omit,
                                                                                omit,
                                                                                v_EMMCause ))));
    //@siclog "Step 3A" siclog@
    // + The UE transmits a TRACKING AREA UPDATE COMPLETE message
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellB,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));

    //@siclog "Step 4" siclog@
    // +The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);

    //@siclog "Step 5" siclog@
    //+ The SS pages the UE using S-TMSI with CN domain indicator set to "PS"
    f_EUTRA_UE_Page ( eutra_CellB,
                      cs_NasPaging_OneRecord(cs_PagingUE_Identity_S_TMSI(v_Guti2_Params.MME_Code,
                                                                         v_Guti2_Params.M_TMSI)));

    //@siclog "Step 6" siclog@
    //+ The UE transmits a SERVICE REQUEST message
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_mt_Access,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_SERVICE_REQUEST(f_EUTRA_SecurityKSIasme_Get())));
    //@siclog "Step 7" siclog@
    //+ The SS transmits a DETACH REQUEST message with Detach Type set to "re-attach required"
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_DETACH_REQUEST_MT(cs_DetachType(tsc_DetachMT_ReAttach),
                                                                         omit))));
     
    //@siclog "Step 8" siclog@
    //+ The UE sends a DETACH ACCEPT message.
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellB,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                    cr_508_DETACH_ACCEPT)));

    //@siclog "Step 9" siclog@
    //+ The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);

    //@siclog "Step 9a" siclog@
    if (not pc_Automatic_Re_Attach) { // @sic R5-106189 sic@
      f_UT_TriggerAttach (UT);
    }

    //@siclog "Step 10" siclog@
    //+ Check: Does the UE send ATTACH REQUEST message with EPS attach
    //          type set to "EPS attach", including a PDN CONNECTIVITY REQUEST message ?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_IndicationWithPiggybacking( tsc_SHT_IntegrityProtected,
                                                                                  cr_508_ATTACH_REQUEST(tsc_EAttachType_EpsOnly, v_AdditionalUpdateType),
                                                                                  cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                  f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 10");
    
    //@siclog "Step 11 - 22" siclog@
    //     Steps 5 to 16 of generic procedure in 36.508 clause 4.5.2.3-1 are executed so as to
    //     complete the attach procedure (the ATTACH ACCEPT message include "EPS attach result"
    //     IE = '0001'B, "EPS only")
    v_EPS_TI := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.procedureTransactionIdentifier; // Use this value in SS responses
    // Get the PCO to be used later (TS 36.508 v.8.2.2 Table 4.7.3-6)
    if (ispresent( v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions)) {
      v_Pco := v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST.protocolConfigurationOptions;
    }
    // Step 5-6: Authentication
    v_AuthParams := f_EUTRA_NAS_Authentication(eutra_CellB,
                                               tsc_SRB1,
                                               v_AuthParams,
                                               tsc_SHT_NoSecurityProtection,
                                               v_ExpectedSecurityHeader,       // @sic R5s090210, R5s090373 sic@
                                               v_PLMN);                        // AUTHENTICATION REQUEST & RESPONSE
    // Step 7-8: NAS Security
    v_NasCountUL := f_EUTRA_NAS_ActivateSecurity(eutra_CellB, v_AuthParams);   // NAS SECURITY COMMAND & COMPLETE
    
    // Step 9a1 & 2 - ESM information optionally transferred;  @sic R5-110708 sic@
    v_APN := f_ESM_InitAPN (eutra_CellB, f_CheckEsmInfoTransferFlag(v_NasInd.Pdu.PiggybackedPduList[0].Msg.pDN_CONNECTIVITY_REQUEST), v_EPS_TI);
    
    // Step 10-11: RRC Security Mode procedures
    v_AuthParams := f_EUTRA_RRC_ActivateSecurity(eutra_CellB, v_AuthParams, v_NasCountUL); // RRC SECURITY COMMAND & COMPLETE
    f_EUTRA_Security_Set ( v_AuthParams ); //Saving security parameters
    
    // Step 12-13 UE Capability check
    f_EUTRA_Capability (eutra_CellB, v_RRC_TI); // This enquires for the eutra capability but does not check the contents of the message received
    
    f_EUTRA_RRCConnectionReconfigurationWithAttachAcceptAllParams(eutra_CellB,
                                                                  tsc_EpsDefaultBearerId,
                                                                  v_RRC_TI,
                                                                  v_EPS_TI,
                                                                  tsc_EAttachType_EpsOnly,
                                                                  f_EUTRA_GetPDNAddress (f_CheckPCOforIPallocationViaNas (v_Pco)),
                                                                  f_GutiParameters2MobileIdentity(tsc_IEI_Guti, f_EUTRA_CellInfo_GetGuti(eutra_CellB)),
                                                                  cs_TAIListNonConsecutive_lv (v_PLMN_B, {bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellB))}),
                                                                  omit,
                                                                  omit,
                                                                  omit,
                                                                  v_APN,
                                                                  f_GetDefPCOforPCSCFAddress (v_Pco), // @sic R5-104703 sic@
                                                                  omit); // @sic R5s110176 sic@

    f_EUTRA_NAS_AttachComplete(eutra_CellB, tsc_EpsDefaultBearerId);                        // step 16

  } // function fl_TC_9_2_3_2_2_Body

  function f_TC_9_2_3_2_4_EUTRA() runs on EUTRA_PTC
  { // @sic R5s110267 sic@
    /* Combined tracking area update / Successful for EPS services only / CS domain not available */
    var template (value) CellPowerList_Type v_CellPowerList;

    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c3);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    
    f_UT_ConfigureCombinedAttach (UT);  // @sic R5s120125 sic@

    // Consistency check of capabilities vs. configuration
    if (((px_UE_CS_PS_UsageSetting_Tested == DATA_CENTRIC) and not pc_CS_PS_data_centric) or
        ((px_UE_CS_PS_UsageSetting_Tested == VOICE_CENTRIC) and not (pc_CS_PS_voice_centric and pc_VoLTE))) {
      f_EUTRA_SetVerdictInconc (__FILE__, __LINE__, "Inconsistent configuration");
    }; // @sic R5s120528 sic@
    
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, Combined);  // @sic R5s120125 sic@

    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@
 
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_2_4_Body();

    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E2_T3440, EPS_Only); // @sic R5s110007 sic@ @sic R5s120125 sic@ @sic R5s120327 sic@

  } // function f_TC_9_2_3_2_4_EUTRA

  function fl_TC_9_2_3_2_4_Body( ) runs on EUTRA_PTC
  {
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var GutiParameters_Type v_Guti2_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellB);
    var NAS_PlmnId v_PLMN_B := f_Asn2Nas_PlmnId (v_Guti2_Params.PLMN_Identity);
    var NAS_MSG_Indication_Type v_NasInd;
    var template (omit) EPS_BearerContextStatus v_EPS_ContextStatus;
    var template (omit) EMM_Cause v_EMMCause := cs_EMM_Cause_tv(tsc_Cause_CSDomainNotAvailable);
    var template (omit) MobileIdentity v_MSId := f_GetMSId (Combined); // @sic R5s110176 sic @sic R5s120125 sic@
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (Combined);  // @sic R5s120125 sic@
//    var float v_NoReactionTime := f_EUTRA_SetTimerToleranceMax( eutra_CellB, rrcTimer, 3.0 );
    var template (value) CellPowerList_Type v_CellPowerList;

    //@siclog "Step 1" siclog@
    //+ Set the cell type of Cell B to the "Serving cell". Set the cell type of Cell A to the "non-Suitable cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@

    //The following messages are to be observed on Cell B
    //@siclog "Step 2" siclog@
    //+ The UE transmits a TRACKING AREA UPDATE REQUEST message.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(tsc_EpsUpdate_Combined_TaLaUpdate,
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType)));
    //@siclog "Step 3" siclog@
    //+ The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    v_EPS_ContextStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus; // Send this back in the Accept

    SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellB,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request ( tsc_SHT_IntegrityProtected_Ciphered,
                                                      cs_TAU_Accept_EMM_Cause ( tsc_EpsUpdate_TaUpdate,
                                                                                f_GutiParameters2MobileIdentity (tsc_IEI_Guti, v_Guti2_Params ),
                                                                                cds_TAIListNonConsecutive_tlv (v_PLMN_B, {bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellB))}),
                                                                                v_EPS_ContextStatus,
                                                                                f_EUTRA_GetCellLAI(eutra_CellB, Combined), // @sic R5s110176 sic@ @sic R5s120125 sic@
                                                                                v_MSId,
                                                                                f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType),
                                                                                v_EMMCause ))));
    //@siclog "Step 4" siclog@
    //+ The UE transmits a TRACKING AREA UPDATE COMPLETE message.
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellB,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));
    
    //@siclog "Step 5" siclog@
    //+ The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
    
    //@siclog "Step 6" siclog@
    // A CS call is initiated
    f_UT_RequestCSCall (UT); // @sic R5-122113 sic@
      
    //@siclog "Step 6A" siclog@
    // Check: Does the UE send RRC Connection Request message?
    if (f_EUTRA_RRC_RRCConnectionRequest_Check(eutra_CellA, 5.0)) { // @sic R5-122113 sic@
      f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step 6A");
    }

    //@siclog "Step 7" siclog@
    // Check: Does the test result of generic test procedure in TS 36.508 subclause 6.4.2.2 indicate
    //        that the UE is in state Registered, Idle Mode on Cell B?
    f_EUTRA_508Check_IdleState ( eutra_CellB );

    //@siclog "Step 8" siclog@
    //+ Set the cell type of Cell A to the "Serving cell". Set the cell type of Cell B to the "non-Suitable cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@

    //@siclog "Step 9" siclog@
    //+ The UE transmits a TRACKING AREA UPDATE REQUEST message.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(tsc_EpsUpdate_TaUpdate,
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    f_GetAdditionalUpdateType (EPS_Only)))); // @sic R5s120327 sic@
    //@siclog "Step 10" siclog@
    //+ The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    v_EPS_ContextStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus; // Send this back in the Accept
    
    SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellA,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request ( tsc_SHT_IntegrityProtected_Ciphered,
                                                      cs_508_TAU_Accept ( tsc_EpsUpdate_TaUpdate,
                                                                          f_GutiParameters2MobileIdentity (tsc_IEI_Guti, v_Guti1_Params ),
                                                                          cs_TrackingAreaIdListDef_tlv,
                                                                          v_EPS_ContextStatus,
                                                                          f_EUTRA_GetCellLAI(eutra_CellA, EPS_Only), // @sic R5s110176 sic@ @sic R5s120125 sic@ @sic R5s120327 sic@
                                                                          f_GetMSId (EPS_Only), // @sic R5s120327 sic@
                                                                          f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType) ) ) ));
    //@siclog "Step 11" siclog@
    //+ The UE transmits a TRACKING AREA UPDATE COMPLETE message.
    SRB.receive(car_SRB1_NasPdu_IND(eutra_CellA,
                                    cr_NAS_Indication(tsc_SHT_IntegrityProtected_Ciphered,
                                                      cr_508_TAU_Complete)));

  } // function fl_TC_9_2_3_2_4_Body

  function f_TC_9_2_3_2_10_EUTRA() runs on EUTRA_PTC
  { // @sic R5s110259 sic@
    /*  Combined tracking area update / Rejected / UE implicitly detached */
    var template (value) CellPowerList_Type v_CellPowerList;

    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN , c3);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB );
    
    f_UT_ConfigureCombinedAttach (UT); // @sic R5-103341 sic@
    
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, Combined); // @sic R5s110176 sic@

    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@

    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_2_10_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellB, E2_CONNECTED, Combined); // @sic R5s110176 sic@
  } // function f_TC_9_2_3_2_10_EUTRA

  function fl_TC_9_2_3_2_10_Body() runs on EUTRA_PTC
  {
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var NAS_MSG_Indication_Type v_NasInd;
    var SRB_COMMON_IND v_ReceivedAsp;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (Combined); // @sic R5s110176 sic@
    var NAS_AttDetValue_Type v_AttachType :=f_GetEAttachType(Combined); // @sic R5s110176 sic@
    var template (value) CellPowerList_Type v_CellPowerList;

    timer t_WaitforAttach := f_EUTRA_SetTimerToleranceMax( eutra_CellB, nonProtocolTimer, 1.0); //@sic  R5-110775 sic@

    //@siclog "Step 1" siclog@
    //+  Set the cell type of Cell A to the "non-Suitable cell". Set the cell type of Cell B to the "Serving cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellB, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@

    //The following messages are to be observed on Cell B unless explicitly stated otherwise.
    //@siclog "Step 2" siclog@
    //+ The UE transmits a TRACKING AREA UPDATE REQUEST message.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(tsc_EpsUpdate_Combined_TaLaUpdate,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                         cr_TAI_Any)));
    //@siclog "Step 3" siclog@
    //+  The SS transmits a TRACKING AREA UPDATE REJECT message with the EMM cause set to 'Implicitly detached'.
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_EmmCause_ImplicitlyDetached ))));
    // EXCEPTION: Steps 3a1-3a2 describe behaviour that depends on UE behaviour (Note 1)
    t_WaitforAttach.start; //@sic  R5-110772 sic@
    alt {
      [] SRB.receive(car_SRB1_NasPdu_IND(eutra_CellB,
                                         cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                           cr_508_ATTACH_REQUEST(v_AttachType, v_AdditionalUpdateType),
                                                                           cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach, f_GetPdnType()))))  -> value v_ReceivedAsp
        {
          v_NasInd := v_ReceivedAsp.Signalling.Nas[0];
          t_WaitforAttach.stop;
          f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "step 5");
        }
      [] t_WaitforAttach.timeout
        {
          //@siclog "Step 3a1" siclog@
          //+   The SS releases the RRC connection.
          f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
          //@siclog "Step 3a2" siclog@
          // EXCEPTION: Step 3a2 describes behaviour that depends on the UE capability
          //+   IF not pc_Automatic_EPS_Re_Attach, Attach is triggered by AT command.
          if (not pc_Automatic_EPS_Re_Attach) { // @sic R5-110772 sic@ @sic R5-121541 sic@
            f_UT_TriggerAttach (UT);
          }
          
          //@siclog "Step 4" siclog@
          v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                                     tsc_RRC_TI_Def,
                                                     cr_EstablishmentCause_Any,
                                                     cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                       cr_508_ATTACH_REQUEST(v_AttachType,
                                                                                                             v_AdditionalUpdateType),
                                                                                       cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                       f_GetPdnType())));  /* @sic R5-120721 change 3 sic@ */
          f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "step 4");
        }
    }
    
    //@siclog "Step 5 - 16" siclog@
    f_EUTRA_IdleUpdated_Step5_17(eutra_CellB, STATE2_IDLEUPDATE, Combined, v_NasInd, false); // @sic R5s110395 sic@
    
  } // function fl_TC_9_2_3_2_10_Body

  function f_TC_9_2_3_2_12_EUTRA() runs on EUTRA_PTC
  { /*  Combined tracking area update / Rejected / Tracking area not allowed */
    /* @sic R5s110261 sic@ */
    var template (value) CellPowerList_Type v_CellPowerList;
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c3);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    f_EUTRA_CellConfig_SRBs_Only(eutra_CellM);
    
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellM, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@

    f_UT_ConfigureCombinedAttach (UT); // @sic R5-103341 sic@
    
    // Preamble: The UE is in state Registered, Idle mode (state 2) on Cell A
    // ==========================================================================
    f_EUTRA_Preamble(eutra_CellB, STATE2_IDLEUPDATE, Combined); // @sic R5s110176 sic@
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_2_12_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellA, E2_CONNECTED, Combined); // @sic R5s110176 sic@
  } // function f_TC_9_2_3_2_12_EUTRA

  function fl_TC_9_2_3_2_12_Body() runs on EUTRA_PTC
  {
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellB); // @sic R5s110318 ch. 2.10 sic@
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;
    var NAS_MSG_Indication_Type v_NasInd;
    var NAS_AttDetValue_Type v_AttachType :=f_GetEAttachType(Combined); // @sic R5s110176 sic@
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (Combined); // @sic R5s110176 sic@
    var NAS_PlmnId v_PLMN_CellB := f_Asn2Nas_PlmnId (v_Guti1_Params.PLMN_Identity);
    var TrackingAreaCode v_Tac_CellB := f_EUTRA_CellInfo_GetTAC ( eutra_CellB );
    var template (value) CellPowerList_Type v_CellPowerList;

    //@siclog "Step 1" siclog@
    //+   Set the cell type of Cell B to the "Non-suitable". Set the cell type of Cell A to the "Serving cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@

    //@siclog "Step 2" siclog@
    //+   The UE transmits a TRACKING AREA UPDATE REQUEST on Cell A (specific msg. content)
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cdr_TAU_Request_OldGuti(tsc_EpsUpdate_Combined_TaLaUpdate,
                                                                                         f_EUTRA_SecurityKSIasme_Get(),
                                                                                         cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                         v_AdditionalUpdateType,
                                                                                         f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                         cr_TAI_Any)));
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    
    //@siclog "Step 3" siclog@
    //+   The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause = "Tracking area not allowed" as specified.
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellA,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_Cause_TA_NotAllowed ))));
    
    //@siclog "Step 4" siclog@
    //+   The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellA);
    
    //@siclog "Step 4A" siclog@
    //+   The user initiates an attach by MMI or by AT command.
    f_UT_TriggerAttach(UT);

    //@siclog "Step 5" siclog@
    //+  Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds on cell A? (1,2,F)
    f_EUTRA_CheckNoAttachOn1Cell ( eutra_CellA, 90.0);
        
    //@siclog "Step 6" siclog@
    //+  Set the cell type of Cell A to the "non-Suitable cell". Set the cell type of Cell B to the "non-Suitable cell". Set the cell type of Cell M to the "Serving cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_NonSuitableCellRS_EPRE),
      cs_CellPower(eutra_CellM, tsc_ServingCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@

    //@siclog "Step 7" siclog@
    //+   Check: Does the UE transmit an ATTACH REQUEST message in the next 90 seconds? (3,F)
    f_EUTRA_CheckNoAttachOn1Cell(eutra_CellM, 90.0);
    
    //@siclog "Step 8" siclog@
    //+ Set the cell type of Cell B to the "Serving cell". Set the cell type of Cell M to the "non-Suitable cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellB, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellM, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@

    //@siclog "Step 8A" siclog@
    //+   Check: Does the UE transmit an ATTACH REQUEST message on cell B including a PDN CONNECTIVITY REQUEST Message?
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                              tsc_RRC_TI_Def,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking (tsc_SHT_NoSecurityProtection,
                                                                                 cdr_ATTACH_REQUEST_WithOldMobileIdNoTAI(v_AttachType,
                                                                                                                         v_AdditionalUpdateType,
                                                                                                                         f_Imsi2MobileIdentity(px_IMSI_Def)) ,
                                                                                 cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                 f_GetPdnType())));
                                                                                                             
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 8A");
    
    //@siclog "Step 8B-8N" siclog@
    //    The attach procedure is completed by executing steps 5 to 16 of the UE registration procedure in TS 36.508 clause 4.5.2.3
    f_EUTRA_IdleUpdated_Step5_15(eutra_CellB, STATE2_IDLEUPDATE, NORMAL, v_NasInd);
    f_EUTRA_NAS_AttachComplete(eutra_CellB, tsc_EpsDefaultBearerId);
    
    //@siclog "Step 9" siclog@
    //+   Void

    //@siclog "Step 10 - 10Aa1" siclog@
    //+ The UE is powered off or switched off.
    f_EUTRA_UE_Detach_SwitchOffUe ( eutra_CellB, RRC_CONNECTED );
       
    //@siclog "Step 10B" siclog@
    //+ Set the cell type of Cell A to the "Serving cell". Set the cell type of Cell B to the "non-Suitable cell".
    v_CellPowerList := {
      cs_CellPower(eutra_CellA, tsc_ServingCellRS_EPRE),
      cs_CellPower(eutra_CellB, tsc_NonSuitableCellRS_EPRE)
    };
    f_EUTRA_SetCellPowerList(v_CellPowerList);   // @sic R5s110726 additional changes for change 2 sic@

    //@siclog "Step 11" siclog@
    //+  The UE is brought back to operation or the USIM is inserted.
    f_EUTRA_SwitchOnUEandStartIP(eutra_CellA); // @sic R5s120065 sic@
    
    //@siclog "Step 12" siclog@
    //+  Check: Does the UE transmit an ATTACH REQUEST message on cell A including a PDN CONNECTIVITY REQUEST message?
    v_NasInd:= f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellA,
                                              tsc_RRC_TI_Def,
                                              cr_EstablishmentCause_Any,
                                              cr_NAS_IndicationWithPiggybacking(tsc_SHT_IntegrityProtected,
                                                                                cdr_ATTACH_REQUEST_WithGuti(v_AttachType,   // @sic R5s110318 ch. 2.10 sic@
                                                                                                            v_AdditionalUpdateType,
                                                                                                            f_EUTRA_SecurityKSIasme_Get(),
                                                                                                            f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                                            cr_TAI( v_PLMN_CellB, bit2oct(v_Tac_CellB))),
                                                                                cr_508_PDN_CONNECTIVITY_REQUEST(tsc_PdnRequest_InitialAttach,
                                                                                                                f_GetPdnType())));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 12");
    
    //@siclog "Step 13 - 24" siclog@
    //    The attach procedure is completed by executing steps 5 to 16 of the UE registration procedure in TS 36.508 clause 4.5.2.3
    f_EUTRA_IdleUpdated_Step5_15(eutra_CellA, STATE2_IDLEUPDATE, NORMAL, v_NasInd);
    f_EUTRA_NAS_AttachComplete(eutra_CellA, tsc_EpsDefaultBearerId);
    
  } // function fl_TC_9_2_3_2_12_Body

  function f_TC_9_2_3_2_15_EUTRA() runs on EUTRA_PTC
  { // @sic R5s110251 sic@
    /*  Combined tracking area update / Rejected / No suitable cells in tracking area */
    
    var template (value) CellPowerList_Type v_CellPowerList;
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c3);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB); // @sic R5s110251 sic@
    f_EUTRA_CellConfig_Def(eutra_CellC);
    
    f_UT_ConfigureCombinedAttach (UT); // @sic R5-103341 sic@
    
    // Go to state 2
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, Combined); // @sic R5s110176 sic@
    
    // The SS pre-configures Cell A as the "Serving cell" and Cells B, C and G as "Non-Suitable cell"
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_NonSuitableCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_2_15_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellC, E2_T3440, Combined); // @sic R5s110176, R5s110007 sic@
    
  } // end f_TC_9_2_3_2_15_EUTRA

  function fl_TC_9_2_3_2_15_Body() runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList;
    var NAS_MSG_Indication_Type v_NasInd;
    var GutiParameters_Type v_Guti_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellC);
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (v_Guti_Params.PLMN_Identity);
    var TrackingAreaCode v_Tac := f_EUTRA_CellInfo_GetTAC ( eutra_CellC );
    var NAS_Lac v_LAC := f_EUTRA_CellInfo_GetLocationAreaCode ( eutra_CellC );
    var template (omit) LocAreaId v_LAI := f_GetLAI ( v_PLMN, v_LAC, Combined); // @sic R5s110176 sic@
    var template (omit) MobileIdentity v_MSId := f_GetMSId (Combined); // @sic R5s110176 sic@
    var template (value) TrackingAreaIdList v_TaiList := cds_TAIListNonConsecutive_tlv ( v_PLMN, { bit2oct(v_Tac) } );
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (Combined); // @sic R5s110176 sic@
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(Combined); // @sic R5s110176 sic@
    
    //@siclog "Step 1" siclog@
    // Set the cell type of cell A to the "Non-Suitable cell"
    // Set the cell type of cell B to the "Serving cell".
    // Set the cell type of cell C to the "Suitable neighbour cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_SuitableCellRS_EPRE )
    }
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
 

    //@siclog "Step 2" siclog@
    // The UE transmits a TRACKING AREA UPDATE REQUEST on Cell B.
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(tsc_EpsUpdate_Combined_TaLaUpdate,
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType)));
    //@siclog "Step 3" siclog@
    // The SS transmits a TRACKING AREA UPDATE REJECT message with EMM cause set to
    // "No suitable cells in tracking area"
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_NoSecurityProtection,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_Cause_NoSuitableCells))));
    
    //@siclog "Step 4" siclog@
    //+  The SS releases the RRC connection
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);  /* @sic R5-110803 change 13 sic@ */
    
    //@siclog "Step 5" siclog@
    // Step 5 (specific msg contents)
    // Check: Does the UE send TRACKING AREA UPDATE REQUEST message?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellC,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request(tsc_EpsUpdate_Combined_IMSIAttach,
                                                                                    f_EUTRA_SecurityKSIasme_Get(),
                                                                                    cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                    v_AdditionalUpdateType)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 5");
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    
    //@siclog "Step 6" siclog@
    //+ The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellC,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request ( tsc_SHT_IntegrityProtected_Ciphered,
                                                      cs_508_TAU_Accept ( v_UpdateType,
                                                                          f_GutiParameters2MobileIdentity (tsc_IEI_Guti, v_Guti_Params ),
                                                                          v_TaiList,
                                                                          v_EpsBearerCtxtStatus,
                                                                          v_LAI,
                                                                          v_MSId,
                                                                          f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType,
                                                                                                      Combined))))); // @sic R5s110176 sic@
    //@siclog "Step 7" siclog@
    //+ The UE transmits a TRACKING AREA UPDATE COMPLETE message.
    SRB.receive ( car_SRB1_NasPdu_IND ( eutra_CellC,
                                        cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_TAU_Complete ) ) );
    
  }// end function fl_TC_9_2_3_2_15_Body

  function f_TC_9_2_3_2_16_EUTRA() runs on EUTRA_PTC
  { /* Combined tracking area update / Rejected / Not authorized for this CSG */
    
    var template (value) CellPowerList_Type v_CellPowerList;
    var CSG_Identity v_CSG_Identity_CellB := '000000000000000000000000010'B;
    
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c3);
    
    // create cells
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);
    f_EUTRA_CellConfig_Def(eutra_CellC);

    f_UT_ConfigureCombinedAttach (UT);

    // delete the UE's CSG whitelist, supported per test case selection expression
    f_EUTRA_EmptyCSG_AllowedList (eutra_CellB, Combined); // @sic R5s120480 sic@
    
    // modify system information for the CSG cell
    //Set system information combination 7 in cell B
    f_EUTRA_ChangeSysinfoCombination (eutra_CellB, c7);  // @sic R5-121733 sic@
    //Set system information 1 cell B
    f_EUTRA_CellInfo_SetSysInfo_Csg_Ind ( eutra_CellB, true );
    f_EUTRA_CellInfo_SetSysInfo_Csg_Id ( eutra_CellB, v_CSG_Identity_CellB );
    //Set system information 4 cell B
    f_EUTRA_SetSIB4_CSG_Def (eutra_CellB);   // @sic R5-121733 sic@
    // make the modified system information become active
    f_EUTRA_SS_ConfigureSysinfo (eutra_CellB); // @sic R5s120298 sic@

    f_EUTRA_Manual_CSG_Selection (eutra_CellB, v_CSG_Identity_CellB, Combined); // @sic R5s120480 sic@ UE registers on cell B using manual CSG selection
    
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_NonSuitableOffCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );

    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, Combined); // @sic R5s110176 sic@
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_2_16_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    
    // The CSG cell B is serving cell, but the UE does not camp on it
    //+   The SS configures:
    //+   - Cell A as a "Serving cell".
    //+   - Cell B as a "Not Suitable off cell".
    //+   - Cell D as a "Not Suitable off cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_ServingCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_NonSuitableOffCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    //+   and performs a tracking area update
    f_EUTRA_TrackingAreaUpdate (eutra_CellA);
    
    f_EUTRA_Postamble(eutra_CellB, E4_DEREGISTERED, Combined);  // @sic R5s120298 sic@ @sic R5s120480 sic@

  } // end f_TC_9_2_3_2_16_EUTRA

  function fl_TC_9_2_3_2_16_Body() runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList;
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(Combined); // @sic R5s110176 sic@
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    
    var GutiParameters_Type v_Guti_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellC);
    var TrackingAreaCode v_Tac := f_EUTRA_CellInfo_GetTAC ( eutra_CellC );
    var NAS_Lac v_LAC := f_EUTRA_CellInfo_GetLocationAreaCode ( eutra_CellC );
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (v_Guti_Params.PLMN_Identity);
    var template (omit) LocAreaId v_LAI := f_GetLAI ( v_PLMN, v_LAC, Combined); // @sic R5s110176 sic@
    var template (omit) MobileIdentity v_MSId := f_GetMSId (Combined); // @sic R5s110176 sic@
    var template (value) TrackingAreaIdList v_TaiList := cds_TAIListNonConsecutive_tlv ( v_PLMN, { bit2oct(v_Tac) } );
    var NAS_KsiValue v_KsiValue := f_EUTRA_SecurityKSIasme_Get ( );
    var template (omit) EPS_BearerContextStatus v_EPS_ContextStatus;
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (Combined); // @sic R5s110176 sic@
    var NAS_MSG_Indication_Type v_NasInd;
    var float v_TimerValue := f_EUTRA_SetTimerToleranceMin( eutra_CellB, nasTTCNTimer, 30.0);
    
    //@siclog "Step 1" siclog@
    // The SS configures:
    //     Cell A as the "non-Suitable cell".
    //     Cell B as the "Serving cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 2" siclog@
    //+   The UE transmits a TRACKING AREA UPDATE REQUEST message
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request ( tsc_EpsUpdate_Combined_TaLaUpdate,
                                                                                      v_KsiValue,
                                                                                      cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                      v_AdditionalUpdateType ) ) );
    //@siclog "Step 3" siclog@
    //+  The SS transmits an TRACKING AREA UPDATE REJECT message with EMM
    //       cause = "Not authorized for this CSG" with integrity protection.
    SRB.send(cas_SRB1_NasPdu_REQ(eutra_CellB,
                                 cs_TimingInfo_Now,
                                 cs_NAS_Request(tsc_SHT_IntegrityProtected_Ciphered,
                                                cs_508_TRACKING_AREA_UPDATE_REJECT(tsc_Cause_NotAuthorizedCSG))));
    //@siclog "Step 4" siclog@
    //+   The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
    
    //@siclog "Step 5" siclog@
    //+ Check: Does the UE transmit an TRACKING AREA UPDATE REQUEST message on Cell B in the next 30 seconds? (F)

    if (f_EUTRA_RRC_RRCConnectionRequest_Check(eutra_CellB, v_TimerValue)) {
      // even though prose says TRACKING AREA UPDATE REQUEST, as soon as UE sends RRC ConnReq, we know something is wrong
      f_EUTRA_SetVerdictFailOrInconc(__FILE__, __LINE__, "Step5: TAU Request received");
    } else {
      f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step5");
    }
    
    //@siclog "Step 6" siclog@
     //  The SS configures:
     //     - Cell A as a "Not Suitable off cell".
     //     - Cell B as a "Not Suitable cell".
     //     - Cell C as a "Suitable cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellC, tsc_SuitableCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 7" siclog@
    // Check: Does the UE transmit an TRACKING AREA UPDATE REQUEST message on Cell C?
    //@sic R5-112625 sic@ @sic R5s120232 sic@
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellC,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                                                 cr_508_TAU_Request ( tsc_EpsUpdate_Combined_IMSIAttach,
                                                                                      v_KsiValue,
                                                                                      cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                      v_AdditionalUpdateType ) ) );
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 7");
      
    //@siclog "Step 8" siclog@
    //  The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    v_EPS_ContextStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    
    SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellC,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request ( tsc_SHT_IntegrityProtected_Ciphered,
                                                      cs_508_TAU_Accept ( v_UpdateType,
                                                                          f_GutiParameters2MobileIdentity (tsc_IEI_Guti, v_Guti_Params ),
                                                                          v_TaiList,
                                                                          v_EPS_ContextStatus,
                                                                          v_LAI,
                                                                          v_MSId,
                                                                          f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType,
                                                                                                      Combined))))); // @sic R5s110176 sic@
    //@siclog "Step 9" siclog@
    // The UE transmits a TRACKING AREA UPDATE COMPLETE message.
    SRB.receive ( car_SRB1_NasPdu_IND ( eutra_CellC,
                                        cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_TAU_Complete ) ) );
    
    
    //@siclog "Step 9A" siclog@
    //+   The SS releases the RRC connection.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellC);

    //@siclog "Step 10" siclog@
    // The SS configures:
    //     - Cell A as a "Not Suitable off cell".
    //     - Cell B as a " Serving cell".
    //     - Cell C as a " Not Suitable cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableOffCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE),
      cs_CellPower ( eutra_CellC, tsc_NonSuitableCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 11" siclog@
    // Check: Does the UE transmit an TRACKING AREA UPDATE REQUEST message in the next 30 seconds on Cell B?
    if (f_EUTRA_RRC_RRCConnectionRequest_Check(eutra_CellB, v_TimerValue)) {
      f_EUTRA_SetVerdictFailOrInconc (__FILE__, __LINE__, "Step 11")
    }
  }

  function f_TC_9_2_3_2_17_EUTRA() runs on EUTRA_PTC
  { /* @desc Combined tracking area update / Abnormal case / handling of the EPS tracking area updating attempt counter */
        
    f_EUTRA_NAS_Init(LTE_AllCellsOnSamePLMN, c3);
    
    // create cell and send out system information
    f_EUTRA_CellConfig_Def(eutra_CellA);
    f_EUTRA_CellConfig_Def(eutra_CellB);  // @sic R5s110346 sic@
    
    f_UT_ConfigureCombinedAttach (UT, DATA_CENTRIC); // @sic R5s120125 sic@ @sic R5s120261 sic@
    f_EUTRA_Preamble(eutra_CellA, STATE2_IDLEUPDATE, Combined); // @sic R5s120125 sic@
    
    f_EUTRA_TestBody_Set(true);
    
    fl_TC_9_2_3_2_17_Body();
    
    // Postamble
    f_EUTRA_TestBody_Set(false);
    f_EUTRA_Postamble(eutra_CellB, E2_T3440, Combined); // @sic R5s110007 sic@ @sic R5s120125 sic@
    
  } // end f_TC_9_2_3_2_17_EUTRA

  function fl_TC_9_2_3_2_17_Body() runs on EUTRA_PTC
  {
    var template (value) CellPowerList_Type v_CellPowerList;
    var RRC_TransactionIdentifier v_RRC_TI := tsc_RRC_TI_Def;
    var NAS_MSG_Indication_Type v_NasInd;
    var template (omit) EPS_BearerContextStatus v_EpsBearerCtxtStatus;
    var GutiParameters_Type v_Guti1_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellA);
    var GutiParameters_Type v_Guti2_Params := f_EUTRA_CellInfo_GetGuti(eutra_CellB);
    var NAS_PlmnId v_PLMN := f_Asn2Nas_PlmnId (v_Guti1_Params.PLMN_Identity);
    var NAS_Tac v_Tac1 := bit2oct(f_EUTRA_CellInfo_GetTAC(eutra_CellA)); // @sic R5s110346 sic@
    var NAS_Lac v_LAC := f_EUTRA_CellInfo_GetLocationAreaCode ( eutra_CellA );
    var template (omit) LocAreaId v_LAI := f_GetLAI ( v_PLMN, v_LAC, Combined); // @sic R5s110176 sic@ @sic R5s120125 sic@
    var template (omit) MobileIdentity v_MSId := f_GetMSId (Combined); // @sic R5s110176 sic@ @sic R5s120125 sic@
    var template AdditionalUpdateType v_AdditionalUpdateType := f_GetAdditionalUpdateType (Combined); // @sic R5s120125 sic@
    var EPS_UpdateTypeValue v_UpdateType := f_GetEPSTAUType(Combined); // @sic R5s110176 sic@ @sic R5s120125 sic@
    var float v_T3430plusT3411 := f_EUTRA_SetTimerToleranceMin( eutra_CellB, nasTimer, 25.0 );
    var float v_T3402 := f_EUTRA_SetTimerToleranceMin( eutra_CellB, nasTimer, 720.0);
    
    //@siclog "Step 1" siclog@
    // Set the cell type of cell A to the "Non-Suitable cell"
    // Set the cell type of cell B to the "Serving cell".
    v_CellPowerList := {
      cs_CellPower ( eutra_CellA, tsc_NonSuitableCellRS_EPRE ),
      cs_CellPower ( eutra_CellB, tsc_ServingCellRS_EPRE )
    };
    f_EUTRA_SetCellPowerList ( v_CellPowerList );
    
    //@siclog "Step 2" siclog@
    // Check: Does the UE transmits a TRACKING AREA UPDATE REQUEST message?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               v_RRC_TI,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication(tsc_SHT_IntegrityProtected,
                                               cdr_TAU_RequestOldGutiLaiTmsiStatus(tsc_EpsUpdate_Combined_TaLaUpdate,
                                                                                   f_EUTRA_SecurityKSIasme_Get(),
                                                                                   cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                   v_AdditionalUpdateType,
                                                                                   f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                   v_LAI,
                                                                                   cr_TAI(v_PLMN, v_Tac1),
                                                                                   omit)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 2");
    
    //@siclog "Step 3" siclog@
    // Wait for 25s to ensure that T3430 and T3411 expire.
    // NOTE 1: The tracking area updating attempt counter is 1.
    f_Delay(v_T3430plusT3411);
    f_EUTRA_SS_SRBs_DRBs_Reset(eutra_CellB);   // @sic R5s110346; R5s110423 additional comments sic@
    
    //@siclog "Step 4" siclog@
    // Check: Does the UE transmits a TRACKING AREA UPDATE REQUEST message?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication (tsc_SHT_IntegrityProtected,
                                                                  cdr_TAU_RequestOldGutiLaiTmsiStatus(tsc_EpsUpdate_Combined_TaLaUpdate,
                                                                                                      f_EUTRA_SecurityKSIasme_Get(),
                                                                                                      cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                      v_AdditionalUpdateType,
                                                                                                      f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                                      v_LAI,
                                                                                                      cr_TAI_Any,
                                                                                                      omit)));
    
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 4");
    
    //@siclog "Step 5" siclog@
    // Wait for 25s to ensure that T3430 and T3411 expire.
    // NOTE 2: The tracking area updating attempt counter is 2
    f_Delay(v_T3430plusT3411);
    f_EUTRA_SS_SRBs_DRBs_Reset(eutra_CellB);   // @sic R5s110346; R5s110423 additional comments sic@
    
    //@siclog "Step 6" siclog@
    // Check: Does the UE transmits a TRACKING AREA UPDATE REQUEST message?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication (tsc_SHT_IntegrityProtected,
                                                                  cdr_TAU_RequestOldGutiLaiTmsiStatus(tsc_EpsUpdate_Combined_TaLaUpdate,
                                                                                                      f_EUTRA_SecurityKSIasme_Get(),
                                                                                                      cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                      v_AdditionalUpdateType,
                                                                                                      f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                                      v_LAI,
                                                                                                      cr_TAI_Any,
                                                                                                      omit)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 6");
    
    //@siclog "Step 7" siclog@
    // Wait for 25s to ensure that T3430 and T3411 expire.
    // NOTE 3: The tracking area updating attempt counter is 3.
    f_Delay(v_T3430plusT3411);
    f_EUTRA_SS_SRBs_DRBs_Reset(eutra_CellB);   // @sic R5s110346; R5s110423 additional comments sic@
    
    //@siclog "Step 8" siclog@
    // Check: Does the UE transmits a TRACKING AREA UPDATE REQUEST message?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication (tsc_SHT_IntegrityProtected,
                                                                  cdr_TAU_RequestOldGutiLaiTmsiStatus(tsc_EpsUpdate_Combined_TaLaUpdate,
                                                                                                      f_EUTRA_SecurityKSIasme_Get(),
                                                                                                      cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                      v_AdditionalUpdateType,
                                                                                                      f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                                      v_LAI,
                                                                                                      cr_TAI_Any,
                                                                                                      omit)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 8");
    
    //@siclog "Step 9" siclog@
    // Wait for 25s to ensure that T3430 and T3411 expire.
    // NOTE 4: The tracking area updating attempt counter is 4.
    f_Delay(v_T3430plusT3411);
    f_EUTRA_SS_SRBs_DRBs_Reset(eutra_CellB);   // @sic R5s110346; R5s110423 additional comments sic@
    
    //@siclog "Step 10" siclog@
    // Check: Does the UE transmits a TRACKING AREA UPDATE REQUEST message?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication (tsc_SHT_IntegrityProtected,
                                                                  cdr_TAU_RequestOldGutiLaiTmsiStatus(tsc_EpsUpdate_Combined_TaLaUpdate,
                                                                                                      f_EUTRA_SecurityKSIasme_Get(),
                                                                                                      cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                      v_AdditionalUpdateType,
                                                                                                      f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                                      v_LAI,
                                                                                                      cr_TAI_Any,
                                                                                                      omit)));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 10");
    
    //@siclog "Step 11" siclog@
    // The SS releases the RRC connection.
    // NOTE 5: The tracking area updating attempt counter is 5 and reset.
    f_EUTRA_RRC_ConnectionRelease(eutra_CellB);
    
    //@siclog "Step 12" siclog@
    //+  Wait for 12 min to ensure that T3402 expires.
    f_Delay(v_T3402);
    
    //@siclog "Step 13" siclog@
    //+  Check: Does the UE transmit a TRACKING AREA UPDATE REQUEST message?
    v_NasInd := f_EUTRA_RRC_ConnEst_DefWithNas(eutra_CellB,
                                               tsc_RRC_TI_Def,
                                               cr_EstablishmentCause_Any,
                                               cr_NAS_Indication (tsc_SHT_IntegrityProtected,
                                                                  cdr_TAU_RequestOldGutiLaiTmsiStatus(tsc_EpsUpdate_Combined_TaLaUpdate,
                                                                                                      f_EUTRA_SecurityKSIasme_Get(),
                                                                                                      cr_DRXparameter_Any ('5C'O) ifpresent, // @sic R5s120210, R5-123117 sic@
                                                                                                      v_AdditionalUpdateType,
                                                                                                      f_GutiParameters2MobileIdentity(omit, v_Guti1_Params),
                                                                                                      omit,
                                                                                                      cr_TAI_Any,
                                                                                                      cr_TMSI_Status('0'B))));
    f_EUTRA_PreliminaryPass(__FILE__, __LINE__, "Step 13");
    
    v_EpsBearerCtxtStatus := v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.epsBearerContextStatus;
    //@siclog "Step 14" siclog@
    //+  The SS transmits a TRACKING AREA UPDATE ACCEPT message.
    SRB.send ( cas_SRB1_NasPdu_REQ ( eutra_CellB,
                                     cs_TimingInfo_Now,
                                     cs_NAS_Request ( tsc_SHT_IntegrityProtected_Ciphered,
                                                      cs_508_TAU_Accept ( v_UpdateType,
                                                                          f_GutiParameters2MobileIdentity (tsc_IEI_Guti, v_Guti2_Params ),
                                                                          cds_TAIListNonConsecutive_tlv( v_PLMN, {'0002'O} ), //TAC-2
                                                                          v_EpsBearerCtxtStatus,
                                                                          f_EUTRA_GetCellLAI(eutra_CellB, Combined), // @sic R5s110176 sic@ @sic R5s120125 sic@
                                                                          v_MSId,
                                                                          f_GetAdditionalUpdateResult(v_NasInd.Pdu.Msg.tRACKING_AREA_UPDATE_REQUEST.addUpdateType)))));
    
    //@siclog "Step 15" siclog@
    //+  The UE transmits a TRACKING AREA UPDATE COMPLETE message.
    SRB.receive ( car_SRB1_NasPdu_IND ( eutra_CellB,
                                        cr_NAS_Indication ( tsc_SHT_IntegrityProtected_Ciphered,
                                                            cr_508_TAU_Complete ) ) );
    
  }// end function fl_TC_9_2_3_2_17_Body

}
